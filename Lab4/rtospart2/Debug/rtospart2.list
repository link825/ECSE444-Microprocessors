
rtospart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008768  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa4  08008aa4  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aac  08008aac  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08008ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001228  200000f4  08008ba8  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000131c  08008ba8  0002131c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000230ae  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042ba  00000000  00000000  000431d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b10  00000000  00000000  00047490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  00048fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d440  00000000  00000000  0004a888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ce0  00000000  00000000  00077cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b969  00000000  00000000  0008f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007258  00000000  00000000  001ab38c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008910 	.word	0x08008910

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	08008910 	.word	0x08008910

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2120      	movs	r1, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 ff85 	bl	80014c0 <SENSOR_IO_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f023 0304 	bic.w	r3, r3, #4
 80005c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	2120      	movs	r1, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff4e 	bl	800148c <SENSOR_IO_Write>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000606:	f000 ff37 	bl	8001478 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	210f      	movs	r1, #15
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ff55 	bl	80014c0 <SENSOR_IO_Read>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	2302      	movs	r3, #2
 8000638:	21b0      	movs	r1, #176	; 0xb0
 800063a:	f000 ff5f 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2d8      	uxtb	r0, r3
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	2302      	movs	r3, #2
 8000658:	21b6      	movs	r1, #182	; 0xb6
 800065a:	f000 ff4f 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800065e:	7b7b      	ldrb	r3, [r7, #13]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b21a      	sxth	r2, r3
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	2302      	movs	r3, #2
 8000676:	21ba      	movs	r1, #186	; 0xba
 8000678:	f000 ff40 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2d8      	uxtb	r0, r3
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	2302      	movs	r3, #2
 8000694:	21a8      	movs	r1, #168	; 0xa8
 8000696:	f000 ff31 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80006d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000754 <HTS221_H_ReadHumidity+0x130>
 8000712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	dd01      	ble.n	8000720 <HTS221_H_ReadHumidity+0xfc>
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HTS221_H_ReadHumidity+0x134>)
 800071e:	e00a      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000720:	edd7 7a04 	vldr	s15, [r7, #16]
 8000724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d502      	bpl.n	8000734 <HTS221_H_ReadHumidity+0x110>
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	e000      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
 8000734:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000736:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000738:	edd7 7a04 	vldr	s15, [r7, #16]
 800073c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000744:	eef0 7a66 	vmov.f32	s15, s13
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	447a0000 	.word	0x447a0000
 8000758:	447a0000 	.word	0x447a0000

0800075c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	463b      	mov	r3, r7
 8000764:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8000768:	783b      	ldrb	r3, [r7, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2120      	movs	r1, #32
 800076e:	203c      	movs	r0, #60	; 0x3c
 8000770:	f000 fe8c 	bl	800148c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000774:	787b      	ldrb	r3, [r7, #1]
 8000776:	461a      	mov	r2, r3
 8000778:	2121      	movs	r1, #33	; 0x21
 800077a:	203c      	movs	r0, #60	; 0x3c
 800077c:	f000 fe86 	bl	800148c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	461a      	mov	r2, r3
 8000784:	2122      	movs	r1, #34	; 0x22
 8000786:	203c      	movs	r0, #60	; 0x3c
 8000788:	f000 fe80 	bl	800148c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	461a      	mov	r2, r3
 8000790:	2123      	movs	r1, #35	; 0x23
 8000792:	203c      	movs	r0, #60	; 0x3c
 8000794:	f000 fe7a 	bl	800148c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	461a      	mov	r2, r3
 800079c:	2124      	movs	r1, #36	; 0x24
 800079e:	203c      	movs	r0, #60	; 0x3c
 80007a0:	f000 fe74 	bl	800148c <SENSOR_IO_Write>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80007b6:	2122      	movs	r1, #34	; 0x22
 80007b8:	203c      	movs	r0, #60	; 0x3c
 80007ba:	f000 fe81 	bl	80014c0 <SENSOR_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f043 0303 	orr.w	r3, r3, #3
 80007d0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	461a      	mov	r2, r3
 80007d6:	2122      	movs	r1, #34	; 0x22
 80007d8:	203c      	movs	r0, #60	; 0x3c
 80007da:	f000 fe57 	bl	800148c <SENSOR_IO_Write>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80007ea:	f000 fe45 	bl	8001478 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80007ee:	210f      	movs	r1, #15
 80007f0:	203c      	movs	r0, #60	; 0x3c
 80007f2:	f000 fe65 	bl	80014c0 <SENSOR_IO_Read>
 80007f6:	4603      	mov	r3, r0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	bd80      	pop	{r7, pc}

080007fc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800080a:	2122      	movs	r1, #34	; 0x22
 800080c:	203c      	movs	r0, #60	; 0x3c
 800080e:	f000 fe57 	bl	80014c0 <SENSOR_IO_Read>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f023 0320 	bic.w	r3, r3, #32
 800081c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	461a      	mov	r2, r3
 8000830:	2122      	movs	r1, #34	; 0x22
 8000832:	203c      	movs	r0, #60	; 0x3c
 8000834:	f000 fe2a 	bl	800148c <SENSOR_IO_Write>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8000856:	2121      	movs	r1, #33	; 0x21
 8000858:	203c      	movs	r0, #60	; 0x3c
 800085a:	f000 fe31 	bl	80014c0 <SENSOR_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000862:	f107 0208 	add.w	r2, r7, #8
 8000866:	2306      	movs	r3, #6
 8000868:	21a8      	movs	r1, #168	; 0xa8
 800086a:	203c      	movs	r0, #60	; 0x3c
 800086c:	f000 fe46 	bl	80014fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	e01f      	b.n	80008b6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000876:	7ffb      	ldrb	r3, [r7, #31]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	3301      	adds	r3, #1
 800087c:	f107 0220 	add.w	r2, r7, #32
 8000880:	4413      	add	r3, r2
 8000882:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000886:	b29b      	uxth	r3, r3
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b29a      	uxth	r2, r3
 800088c:	7ffb      	ldrb	r3, [r7, #31]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	f107 0120 	add.w	r1, r7, #32
 8000894:	440b      	add	r3, r1
 8000896:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	b212      	sxth	r2, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	f107 0120 	add.w	r1, r7, #32
 80008aa:	440b      	add	r3, r1
 80008ac:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80008b0:	7ffb      	ldrb	r3, [r7, #31]
 80008b2:	3301      	adds	r3, #1
 80008b4:	77fb      	strb	r3, [r7, #31]
 80008b6:	7ffb      	ldrb	r3, [r7, #31]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d9dc      	bls.n	8000876 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80008c2:	2b20      	cmp	r3, #32
 80008c4:	d00c      	beq.n	80008e0 <LIS3MDL_MagReadXYZ+0xa0>
 80008c6:	2b20      	cmp	r3, #32
 80008c8:	dc02      	bgt.n	80008d0 <LIS3MDL_MagReadXYZ+0x90>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <LIS3MDL_MagReadXYZ+0x9a>
 80008ce:	e010      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d008      	beq.n	80008e6 <LIS3MDL_MagReadXYZ+0xa6>
 80008d4:	2b60      	cmp	r3, #96	; 0x60
 80008d6:	d009      	beq.n	80008ec <LIS3MDL_MagReadXYZ+0xac>
 80008d8:	e00b      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <LIS3MDL_MagReadXYZ+0x100>)
 80008dc:	61bb      	str	r3, [r7, #24]
    break;
 80008de:	e008      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <LIS3MDL_MagReadXYZ+0x104>)
 80008e2:	61bb      	str	r3, [r7, #24]
    break;
 80008e4:	e005      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <LIS3MDL_MagReadXYZ+0x108>)
 80008e8:	61bb      	str	r3, [r7, #24]
    break;
 80008ea:	e002      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <LIS3MDL_MagReadXYZ+0x10c>)
 80008ee:	61bb      	str	r3, [r7, #24]
    break;    
 80008f0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	77fb      	strb	r3, [r7, #31]
 80008f6:	e01b      	b.n	8000930 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	f107 0220 	add.w	r2, r7, #32
 8000900:	4413      	add	r3, r2
 8000902:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800090e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	7ffb      	ldrb	r3, [r7, #31]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000922:	ee17 2a90 	vmov	r2, s15
 8000926:	b212      	sxth	r2, r2
 8000928:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800092a:	7ffb      	ldrb	r3, [r7, #31]
 800092c:	3301      	adds	r3, #1
 800092e:	77fb      	strb	r3, [r7, #31]
 8000930:	7ffb      	ldrb	r3, [r7, #31]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d9e0      	bls.n	80008f8 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	3e0f5c29 	.word	0x3e0f5c29
 8000944:	3e947ae1 	.word	0x3e947ae1
 8000948:	3edc28f6 	.word	0x3edc28f6
 800094c:	3f147ae1 	.word	0x3f147ae1

08000950 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f87b 	bl	8000a58 <LPS22HB_Init>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000978:	f000 fd7e 	bl	8001478 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	210f      	movs	r1, #15
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fd9c 	bl	80014c0 <SENSOR_IO_Read>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]
 80009aa:	e013      	b.n	80009d4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	7cfb      	ldrb	r3, [r7, #19]
 80009b2:	3328      	adds	r3, #40	; 0x28
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	7cfc      	ldrb	r4, [r7, #19]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f000 fd80 	bl	80014c0 <SENSOR_IO_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4423      	add	r3, r4
 80009ca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	3301      	adds	r3, #1
 80009d2:	74fb      	strb	r3, [r7, #19]
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d9e8      	bls.n	80009ac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	74fb      	strb	r3, [r7, #19]
 80009de:	e010      	b.n	8000a02 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	4413      	add	r3, r2
 80009e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	3301      	adds	r3, #1
 8000a00:	74fb      	strb	r3, [r7, #19]
 8000a02:	7cfb      	ldrb	r3, [r7, #19]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d9eb      	bls.n	80009e0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a18:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da01      	bge.n	8000a2e <LPS22HB_P_ReadPressure+0x96>
 8000a2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a2e:	131b      	asrs	r3, r3, #12
 8000a30:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a54 <LPS22HB_P_ReadPressure+0xbc>
 8000a40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a44:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	42c80000 	.word	0x42c80000

08000a58 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	211a      	movs	r1, #26
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fd29 	bl	80014c0 <SENSOR_IO_Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	7bfa      	ldrb	r2, [r7, #15]
 8000a88:	211a      	movs	r1, #26
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fcfe 	bl	800148c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2110      	movs	r1, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd12 	bl	80014c0 <SENSOR_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000aae:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f023 0302 	bic.w	r3, r3, #2
 8000ab6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fcdf 	bl	800148c <SENSOR_IO_Write>
}  
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000ae4:	2111      	movs	r1, #17
 8000ae6:	20d4      	movs	r0, #212	; 0xd4
 8000ae8:	f000 fcea 	bl	80014c0 <SENSOR_IO_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000afc:	7bba      	ldrb	r2, [r7, #14]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	461a      	mov	r2, r3
 8000b08:	2111      	movs	r1, #17
 8000b0a:	20d4      	movs	r0, #212	; 0xd4
 8000b0c:	f000 fcbe 	bl	800148c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000b10:	2112      	movs	r1, #18
 8000b12:	20d4      	movs	r0, #212	; 0xd4
 8000b14:	f000 fcd4 	bl	80014c0 <SENSOR_IO_Read>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000b2a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000b2c:	7bba      	ldrb	r2, [r7, #14]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2112      	movs	r1, #18
 8000b3a:	20d4      	movs	r0, #212	; 0xd4
 8000b3c:	f000 fca6 	bl	800148c <SENSOR_IO_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000b52:	2111      	movs	r1, #17
 8000b54:	20d4      	movs	r0, #212	; 0xd4
 8000b56:	f000 fcb3 	bl	80014c0 <SENSOR_IO_Read>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2111      	movs	r1, #17
 8000b6c:	20d4      	movs	r0, #212	; 0xd4
 8000b6e:	f000 fc8d 	bl	800148c <SENSOR_IO_Write>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000b7e:	f000 fc7b 	bl	8001478 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8000b82:	210f      	movs	r1, #15
 8000b84:	20d4      	movs	r0, #212	; 0xd4
 8000b86:	f000 fc9b 	bl	80014c0 <SENSOR_IO_Read>
 8000b8a:	4603      	mov	r3, r0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8000b9e:	2116      	movs	r1, #22
 8000ba0:	20d4      	movs	r0, #212	; 0xd4
 8000ba2:	f000 fc8d 	bl	80014c0 <SENSOR_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bb0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2116      	movs	r1, #22
 8000bc6:	20d4      	movs	r0, #212	; 0xd4
 8000bc8:	f000 fc60 	bl	800148c <SENSOR_IO_Write>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000bea:	2111      	movs	r1, #17
 8000bec:	20d4      	movs	r0, #212	; 0xd4
 8000bee:	f000 fc67 	bl	80014c0 <SENSOR_IO_Read>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	2122      	movs	r1, #34	; 0x22
 8000bfe:	20d4      	movs	r0, #212	; 0xd4
 8000c00:	f000 fc7c 	bl	80014fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
 8000c08:	e01f      	b.n	8000c4a <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000c0a:	7ffb      	ldrb	r3, [r7, #31]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3301      	adds	r3, #1
 8000c10:	f107 0220 	add.w	r2, r7, #32
 8000c14:	4413      	add	r3, r2
 8000c16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	f107 0120 	add.w	r1, r7, #32
 8000c28:	440b      	add	r3, r1
 8000c2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	b212      	sxth	r2, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	f107 0120 	add.w	r1, r7, #32
 8000c3e:	440b      	add	r3, r1
 8000c40:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	3301      	adds	r3, #1
 8000c48:	77fb      	strb	r3, [r7, #31]
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d9dc      	bls.n	8000c0a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d828      	bhi.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c95 	.word	0x08000c95
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000cad 	.word	0x08000cad
 8000c6c:	08000cad 	.word	0x08000cad
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000cad 	.word	0x08000cad
 8000c7c:	08000cad 	.word	0x08000cad
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cad 	.word	0x08000cad
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000ca7 	.word	0x08000ca7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8000c96:	61bb      	str	r3, [r7, #24]
    break;
 8000c98:	e008      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8000c9c:	61bb      	str	r3, [r7, #24]
    break;
 8000c9e:	e005      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8000ca2:	61bb      	str	r3, [r7, #24]
    break;
 8000ca4:	e002      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8000ca8:	61bb      	str	r3, [r7, #24]
    break;    
 8000caa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]
 8000cb0:	e017      	b.n	8000ce2 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	f107 0220 	add.w	r2, r7, #32
 8000cba:	4413      	add	r3, r2
 8000cbc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000cdc:	7ffb      	ldrb	r3, [r7, #31]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	77fb      	strb	r3, [r7, #31]
 8000ce2:	7ffb      	ldrb	r3, [r7, #31]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d9e4      	bls.n	8000cb2 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	410c0000 	.word	0x410c0000
 8000cf4:	418c0000 	.word	0x418c0000
 8000cf8:	420c0000 	.word	0x420c0000
 8000cfc:	428c0000 	.word	0x428c0000

08000d00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <vApplicationGetIdleTaskMemory+0x30>)
 8000d16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000110 	.word	0x20000110
 8000d30:	20000164 	.word	0x20000164

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b098      	sub	sp, #96	; 0x60
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 fed6 	bl	8001aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f863 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f000 f965 	bl	8001010 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d46:	f000 f8d7 	bl	8000ef8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 f915 	bl	8000f78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	BSP_HSENSOR_Init(); //humidity sensor
 8000d4e:	f000 fc4d 	bl	80015ec <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init(); //magnetometer
 8000d52:	f000 fc79 	bl	8001648 <BSP_MAGNETO_Init>
	BSP_GYRO_Init(); //gyroscope
 8000d56:	f000 fbef 	bl	8001538 <BSP_GYRO_Init>
	BSP_PSENSOR_Init(); //barometer
 8000d5a:	f000 fcb9 	bl	80016d0 <BSP_PSENSOR_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d62:	2300      	movs	r3, #0
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000d66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fe8d 	bl	8005a8a <osMutexCreate>
 8000d70:	4602      	mov	r2, r0
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <main+0xb8>)
 8000d74:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of button */
  osThreadDef(button, StartButtonTask, osPriorityNormal, 0, 128);
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <main+0xbc>)
 8000d78:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d7c:	461d      	mov	r5, r3
 8000d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 8000d8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fe1a 	bl	80059ca <osThreadCreate>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <main+0xc0>)
 8000d9a:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmit */
  osThreadDef(transmit, StartTransmitTask, osPriorityHigh, 0, 128);
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <main+0xc4>)
 8000d9e:	f107 0420 	add.w	r4, r7, #32
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitHandle = osThreadCreate(osThread(transmit), NULL);
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fe07 	bl	80059ca <osThreadCreate>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <main+0xc8>)
 8000dc0:	601a      	str	r2, [r3, #0]

  /* definition and creation of read */
  osThreadDef(read, StartReadTask, osPriorityAboveNormal, 0, 300);
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <main+0xcc>)
 8000dc4:	1d3c      	adds	r4, r7, #4
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHandle = osThreadCreate(osThread(read), NULL);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fdf6 	bl	80059ca <osThreadCreate>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <main+0xd0>)
 8000de2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000de4:	f004 fdea 	bl	80059bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000de8:	e7fe      	b.n	8000de8 <main+0xb4>
 8000dea:	bf00      	nop
 8000dec:	200011ec 	.word	0x200011ec
 8000df0:	08008930 	.word	0x08008930
 8000df4:	200011dc 	.word	0x200011dc
 8000df8:	08008958 	.word	0x08008958
 8000dfc:	2000114c 	.word	0x2000114c
 8000e00:	0800897c 	.word	0x0800897c
 8000e04:	20001140 	.word	0x20001140

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0bc      	sub	sp, #240	; 0xf0
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e12:	2244      	movs	r2, #68	; 0x44
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 f975 	bl	8008106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2294      	movs	r2, #148	; 0x94
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 f967 	bl	8008106 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f001 ffcd 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000e44:	f000 fa24 	bl	8001290 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e5a:	2360      	movs	r3, #96	; 0x60
 8000e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e72:	233c      	movs	r3, #60	; 0x3c
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 f846 	bl	8002f20 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e9a:	f000 f9f9 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ebc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fc52 	bl	800376c <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ece:	f000 f9df 	bl	8001290 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000ed2:	2381      	movs	r3, #129	; 0x81
 8000ed4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 ff25 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000eec:	f000 f9d0 	bl	8001290 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	37f0      	adds	r7, #240	; 0xf0
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_I2C2_Init+0x78>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <MX_I2C2_Init+0x7c>)
 8000f06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f34:	f001 f990 	bl	8002258 <HAL_I2C_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f000 f9a7 	bl	8001290 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f46:	f001 fe8f 	bl	8002c68 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f000 f99e 	bl	8001290 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f58:	f001 fed1 	bl	8002cfe <HAL_I2CEx_ConfigDigitalFilter>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f62:	f000 f995 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200010f4 	.word	0x200010f4
 8000f70:	40005800 	.word	0x40005800
 8000f74:	307075b1 	.word	0x307075b1

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f003 fe8f 	bl	8004ce4 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 f960 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fd4:	f004 fbe3 	bl	800579e <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 f957 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fe6:	f004 fc18 	bl	800581a <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f94e 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000ff6:	f004 fb99 	bl	800572c <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f946 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20001150 	.word	0x20001150
 800100c:	40013800 	.word	0x40013800

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_GPIO_Init+0x68>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_GPIO_Init+0x68>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_GPIO_Init+0x68>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_GPIO_Init+0x68>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <MX_GPIO_Init+0x68>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_GPIO_Init+0x68>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_GPIO_Init+0x6c>)
 800106c:	f000 fe58 	bl	8001d20 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800

08001080 <StartButtonTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001088:	20c8      	movs	r0, #200	; 0xc8
 800108a:	f004 fcea 	bl	8005a62 <osDelay>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == 0) { // button is active low
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <StartButtonTask+0x58>)
 8001094:	f001 f8c8 	bl	8002228 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <StartButtonTask+0x8>
			osMutexWait(myMutex01Handle, 0);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <StartButtonTask+0x5c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fd09 	bl	8005abc <osMutexWait>
			counter++;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <StartButtonTask+0x60>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <StartButtonTask+0x60>)
 80010b2:	6013      	str	r3, [r2, #0]
			counter = counter % 4;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <StartButtonTask+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	425a      	negs	r2, r3
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	bf58      	it	pl
 80010c4:	4253      	negpl	r3, r2
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <StartButtonTask+0x60>)
 80010c8:	6013      	str	r3, [r2, #0]
			osMutexRelease(myMutex01Handle);
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <StartButtonTask+0x5c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 fd42 	bl	8005b58 <osMutexRelease>
		osDelay(200);
 80010d4:	e7d8      	b.n	8001088 <StartButtonTask+0x8>
 80010d6:	bf00      	nop
 80010d8:	48000800 	.word	0x48000800
 80010dc:	200011ec 	.word	0x200011ec
 80010e0:	20000364 	.word	0x20000364

080010e4 <StartTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f0:	f004 fcb7 	bl	8005a62 <osDelay>
		osMutexWait(myMutex01Handle, 0);
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <StartTransmitTask+0x38>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fcde 	bl	8005abc <osMutexWait>
		HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer,
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	2264      	movs	r2, #100	; 0x64
 8001106:	4906      	ldr	r1, [pc, #24]	; (8001120 <StartTransmitTask+0x3c>)
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <StartTransmitTask+0x40>)
 800110a:	f003 fe3b 	bl	8004d84 <HAL_UART_Transmit>
				sizeof(global_buffer), 1000);
		osMutexRelease(myMutex01Handle);
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <StartTransmitTask+0x38>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fd20 	bl	8005b58 <osMutexRelease>
		osDelay(1000);
 8001118:	e7e8      	b.n	80010ec <StartTransmitTask+0x8>
 800111a:	bf00      	nop
 800111c:	200011ec 	.word	0x200011ec
 8001120:	20001090 	.word	0x20001090
 8001124:	20001150 	.word	0x20001150

08001128 <StartReadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadTask */
void StartReadTask(void const * argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTask */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001130:	20c8      	movs	r0, #200	; 0xc8
 8001132:	f004 fc96 	bl	8005a62 <osDelay>
		osMutexWait(myMutex01Handle, 0);
 8001136:	4b42      	ldr	r3, [pc, #264]	; (8001240 <StartReadTask+0x118>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fcbd 	bl	8005abc <osMutexWait>
		if (counter == 0) {
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <StartReadTask+0x11c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d117      	bne.n	800117a <StartReadTask+0x52>
			humidity = BSP_HSENSOR_ReadHumidity();
 800114a:	f000 fa6f 	bl	800162c <BSP_HSENSOR_ReadHumidity>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <StartReadTask+0x120>)
 8001154:	edc3 7a00 	vstr	s15, [r3]
			memset(global_buffer, 0, sizeof(global_buffer));
 8001158:	2264      	movs	r2, #100	; 0x64
 800115a:	2100      	movs	r1, #0
 800115c:	483b      	ldr	r0, [pc, #236]	; (800124c <StartReadTask+0x124>)
 800115e:	f006 ffd2 	bl	8008106 <memset>
			sprintf(global_buffer, "Humidity is %d ", (int) humidity);
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <StartReadTask+0x120>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	ee17 2a90 	vmov	r2, s15
 8001170:	4937      	ldr	r1, [pc, #220]	; (8001250 <StartReadTask+0x128>)
 8001172:	4836      	ldr	r0, [pc, #216]	; (800124c <StartReadTask+0x124>)
 8001174:	f006 ffd0 	bl	8008118 <siprintf>
 8001178:	e05c      	b.n	8001234 <StartReadTask+0x10c>
		} else if (counter == 1) {
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <StartReadTask+0x11c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d116      	bne.n	80011b0 <StartReadTask+0x88>
			BSP_MAGNETO_GetXYZ(magneto_values);
 8001182:	4834      	ldr	r0, [pc, #208]	; (8001254 <StartReadTask+0x12c>)
 8001184:	f000 fa8c 	bl	80016a0 <BSP_MAGNETO_GetXYZ>
			memset(global_buffer, 0, sizeof(global_buffer));
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	2100      	movs	r1, #0
 800118c:	482f      	ldr	r0, [pc, #188]	; (800124c <StartReadTask+0x124>)
 800118e:	f006 ffba 	bl	8008106 <memset>
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
					(int) magneto_values[0], (int) magneto_values[1],
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <StartReadTask+0x12c>)
 8001194:	881b      	ldrh	r3, [r3, #0]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 8001196:	461a      	mov	r2, r3
					(int) magneto_values[0], (int) magneto_values[1],
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <StartReadTask+0x12c>)
 800119a:	885b      	ldrh	r3, [r3, #2]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 800119c:	4619      	mov	r1, r3
					(int) magneto_values[2]);
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <StartReadTask+0x12c>)
 80011a0:	889b      	ldrh	r3, [r3, #4]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	460b      	mov	r3, r1
 80011a6:	492c      	ldr	r1, [pc, #176]	; (8001258 <StartReadTask+0x130>)
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <StartReadTask+0x124>)
 80011aa:	f006 ffb5 	bl	8008118 <siprintf>
 80011ae:	e041      	b.n	8001234 <StartReadTask+0x10c>

		} else if (counter == 2) {
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <StartReadTask+0x11c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d122      	bne.n	80011fe <StartReadTask+0xd6>
			BSP_GYRO_GetXYZ(gyro_values);
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <StartReadTask+0x134>)
 80011ba:	f000 f9ff 	bl	80015bc <BSP_GYRO_GetXYZ>
			memset(global_buffer, 0, sizeof(global_buffer));
 80011be:	2264      	movs	r2, #100	; 0x64
 80011c0:	2100      	movs	r1, #0
 80011c2:	4822      	ldr	r0, [pc, #136]	; (800124c <StartReadTask+0x124>)
 80011c4:	f006 ff9f 	bl	8008106 <memset>
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
					(int) gyro_values[0], (int) gyro_values[1],
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <StartReadTask+0x134>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 80011ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
					(int) gyro_values[0], (int) gyro_values[1],
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <StartReadTask+0x134>)
 80011d4:	edd3 7a01 	vldr	s15, [r3, #4]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 80011d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int) gyro_values[2]);
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <StartReadTask+0x134>)
 80011de:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	ee16 3a90 	vmov	r3, s13
 80011f0:	ee17 2a10 	vmov	r2, s14
 80011f4:	491a      	ldr	r1, [pc, #104]	; (8001260 <StartReadTask+0x138>)
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <StartReadTask+0x124>)
 80011f8:	f006 ff8e 	bl	8008118 <siprintf>
 80011fc:	e01a      	b.n	8001234 <StartReadTask+0x10c>

		} else if (counter == 3) {
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <StartReadTask+0x11c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d116      	bne.n	8001234 <StartReadTask+0x10c>
			pressure = BSP_PSENSOR_ReadPressure();
 8001206:	f000 fa83 	bl	8001710 <BSP_PSENSOR_ReadPressure>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <StartReadTask+0x13c>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
			memset(global_buffer, 0, sizeof(global_buffer));
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	2100      	movs	r1, #0
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <StartReadTask+0x124>)
 800121a:	f006 ff74 	bl	8008106 <memset>
			sprintf(global_buffer, "Pressure is %d ", (int) pressure);
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <StartReadTask+0x13c>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 2a90 	vmov	r2, s15
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <StartReadTask+0x140>)
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <StartReadTask+0x124>)
 8001230:	f006 ff72 	bl	8008118 <siprintf>

		}
		osMutexRelease(myMutex01Handle);
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <StartReadTask+0x118>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fc8d 	bl	8005b58 <osMutexRelease>
		osDelay(200);
 800123e:	e777      	b.n	8001130 <StartReadTask+0x8>
 8001240:	200011ec 	.word	0x200011ec
 8001244:	20000364 	.word	0x20000364
 8001248:	20001148 	.word	0x20001148
 800124c:	20001090 	.word	0x20001090
 8001250:	08008998 	.word	0x08008998
 8001254:	20001088 	.word	0x20001088
 8001258:	080089a8 	.word	0x080089a8
 800125c:	200011e0 	.word	0x200011e0
 8001260:	080089cc 	.word	0x080089cc
 8001264:	20001144 	.word	0x20001144
 8001268:	080089e8 	.word	0x080089e8

0800126c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800127e:	f000 fc4d 	bl	8001b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40001000 	.word	0x40001000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001296:	e7fe      	b.n	8001296 <Error_Handler+0x6>

08001298 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80012b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <I2Cx_MspInit+0xac>)
 80012d6:	f000 fd23 	bl	8001d20 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <I2Cx_MspInit+0xac>)
 80012e2:	f000 fd1d 	bl	8001d20 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001308:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <I2Cx_MspInit+0xa8>)
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001310:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001314:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	2021      	movs	r0, #33	; 0x21
 800131c:	f000 fcd6 	bl	8001ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001320:	2021      	movs	r0, #33	; 0x21
 8001322:	f000 fcef 	bl	8001d04 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	2022      	movs	r0, #34	; 0x22
 800132c:	f000 fcce 	bl	8001ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001330:	2022      	movs	r0, #34	; 0x22
 8001332:	f000 fce7 	bl	8001d04 <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400

08001348 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <I2Cx_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <I2Cx_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff89 	bl	8001298 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 ff66 	bl	8002258 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f001 fc6a 	bl	8002c68 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005800 	.word	0x40005800
 80013a0:	00702681 	.word	0x00702681

080013a4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	72fb      	strb	r3, [r7, #11]
 80013b6:	460b      	mov	r3, r1
 80013b8:	813b      	strh	r3, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	b299      	uxth	r1, r3
 80013c6:	88f8      	ldrh	r0, [r7, #6]
 80013c8:	893a      	ldrh	r2, [r7, #8]
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4603      	mov	r3, r0
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f001 f90e 	bl	80025fc <HAL_I2C_Mem_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f832 	bl	8001458 <I2Cx_Error>
  }
  return status;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b08a      	sub	sp, #40	; 0x28
 8001402:	af04      	add	r7, sp, #16
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	461a      	mov	r2, r3
 800140c:	4603      	mov	r3, r0
 800140e:	72fb      	strb	r3, [r7, #11]
 8001410:	460b      	mov	r3, r1
 8001412:	813b      	strh	r3, [r7, #8]
 8001414:	4613      	mov	r3, r2
 8001416:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	b299      	uxth	r1, r3
 8001420:	88f8      	ldrh	r0, [r7, #6]
 8001422:	893a      	ldrh	r2, [r7, #8]
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4603      	mov	r3, r0
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 ffcd 	bl	80023d4 <HAL_I2C_Mem_Write>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f805 	bl	8001458 <I2Cx_Error>
  }
  return status;
 800144e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 ff86 	bl	8002376 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff6c 	bl	8001348 <I2Cx_Init>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SENSOR_IO_Init+0x10>)
 800147e:	f7ff ff63 	bl	8001348 <I2Cx_Init>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000127c 	.word	0x2000127c

0800148c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1d7b      	adds	r3, r7, #5
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <SENSOR_IO_Write+0x30>)
 80014b0:	f7ff ffa5 	bl	80013fe <I2Cx_WriteMultiple>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000127c 	.word	0x2000127c

080014c0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	79f9      	ldrb	r1, [r7, #7]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 030f 	add.w	r3, r7, #15
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <SENSOR_IO_Read+0x38>)
 80014e8:	f7ff ff5c 	bl	80013a4 <I2Cx_ReadMultiple>

  return read_value;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000127c 	.word	0x2000127c

080014fc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af02      	add	r7, sp, #8
 8001502:	603a      	str	r2, [r7, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	4613      	mov	r3, r2
 8001510:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	b29a      	uxth	r2, r3
 8001516:	79f9      	ldrb	r1, [r7, #7]
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <SENSOR_IO_ReadMultiple+0x38>)
 8001524:	f7ff ff3e 	bl	80013a4 <I2Cx_ReadMultiple>
 8001528:	4603      	mov	r3, r0
 800152a:	b29b      	uxth	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000127c 	.word	0x2000127c

08001538 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001542:	2300      	movs	r3, #0
 8001544:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <BSP_GYRO_Init+0x7c>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4798      	blx	r3
 800154c:	4603      	mov	r3, r0
 800154e:	2b6a      	cmp	r3, #106	; 0x6a
 8001550:	d002      	beq.n	8001558 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e028      	b.n	80015aa <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <BSP_GYRO_Init+0x80>)
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <BSP_GYRO_Init+0x7c>)
 800155c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001562:	2330      	movs	r3, #48	; 0x30
 8001564:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001576:	230c      	movs	r3, #12
 8001578:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800157a:	7aba      	ldrb	r2, [r7, #10]
 800157c:	797b      	ldrb	r3, [r7, #5]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001584:	7a3b      	ldrb	r3, [r7, #8]
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	b2db      	uxtb	r3, r3
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <BSP_GYRO_Init+0x80>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	89ba      	ldrh	r2, [r7, #12]
 80015a2:	4610      	mov	r0, r2
 80015a4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000004c 	.word	0x2000004c
 80015b8:	20000368 	.word	0x20000368

080015bc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <BSP_GYRO_GetXYZ+0x2c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <BSP_GYRO_GetXYZ+0x2c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <BSP_GYRO_GetXYZ+0x2c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000368 	.word	0x20000368

080015ec <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <BSP_HSENSOR_Init+0x38>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	20be      	movs	r0, #190	; 0xbe
 80015f8:	4798      	blx	r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	2bbc      	cmp	r3, #188	; 0xbc
 80015fe:	d002      	beq.n	8001606 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e009      	b.n	800161a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <BSP_HSENSOR_Init+0x3c>)
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <BSP_HSENSOR_Init+0x38>)
 800160a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <BSP_HSENSOR_Init+0x3c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	20be      	movs	r0, #190	; 0xbe
 8001614:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	2000036c 	.word	0x2000036c

0800162c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	20be      	movs	r0, #190	; 0xbe
 8001638:	4798      	blx	r3
 800163a:	eef0 7a40 	vmov.f32	s15, s0
}
 800163e:	eeb0 0a67 	vmov.f32	s0, s15
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000036c 	.word	0x2000036c

08001648 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <BSP_MAGNETO_Init+0x50>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4798      	blx	r3
 8001658:	4603      	mov	r3, r0
 800165a:	2b3d      	cmp	r3, #61	; 0x3d
 800165c:	d002      	beq.n	8001664 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	e013      	b.n	800168c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <BSP_MAGNETO_Init+0x54>)
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <BSP_MAGNETO_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800166a:	2358      	movs	r3, #88	; 0x58
 800166c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800166e:	2300      	movs	r3, #0
 8001670:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001672:	2300      	movs	r3, #0
 8001674:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001676:	2308      	movs	r3, #8
 8001678:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <BSP_MAGNETO_Init+0x54>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	463a      	mov	r2, r7
 8001686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168a:	4798      	blx	r3
  } 

  return ret;  
 800168c:	79fb      	ldrb	r3, [r7, #7]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000000c 	.word	0x2000000c
 800169c:	20000370 	.word	0x20000370

080016a0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d009      	beq.n	80016c4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000370 	.word	0x20000370

080016d0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <BSP_PSENSOR_Init+0x38>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	20ba      	movs	r0, #186	; 0xba
 80016dc:	4798      	blx	r3
 80016de:	4603      	mov	r3, r0
 80016e0:	2bb1      	cmp	r3, #177	; 0xb1
 80016e2:	d002      	beq.n	80016ea <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	e009      	b.n	80016fe <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <BSP_PSENSOR_Init+0x3c>)
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <BSP_PSENSOR_Init+0x38>)
 80016ee:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <BSP_PSENSOR_Init+0x3c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	20ba      	movs	r0, #186	; 0xba
 80016f8:	4798      	blx	r3
    ret = PSENSOR_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000040 	.word	0x20000040
 800170c:	20000374 	.word	0x20000374

08001710 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <BSP_PSENSOR_ReadPressure+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	20ba      	movs	r0, #186	; 0xba
 800171c:	4798      	blx	r3
 800171e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000374 	.word	0x20000374

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_MspInit+0x4c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6613      	str	r3, [r2, #96]	; 0x60
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_MspInit+0x4c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_MspInit+0x4c>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_MspInit+0x4c>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	210f      	movs	r1, #15
 8001766:	f06f 0001 	mvn.w	r0, #1
 800176a:	f000 faaf 	bl	8001ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0x7c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d128      	bne.n	80017f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	2312      	movs	r3, #18
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017c8:	2304      	movs	r3, #4
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_I2C_MspInit+0x84>)
 80017d4:	f000 faa4 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e2:	6593      	str	r3, [r2, #88]	; 0x58
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_I2C_MspInit+0x80>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40005800 	.word	0x40005800
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400

08001804 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_I2C_MspDeInit+0x3c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10f      	bne.n	8001836 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_I2C_MspDeInit+0x40>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_I2C_MspDeInit+0x40>)
 800181c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001820:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <HAL_I2C_MspDeInit+0x44>)
 8001828:	f000 fc0c 	bl	8002044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800182c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_I2C_MspDeInit+0x44>)
 8001832:	f000 fc07 	bl	8002044 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005800 	.word	0x40005800
 8001844:	40021000 	.word	0x40021000
 8001848:	48000400 	.word	0x48000400

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x7c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d127      	bne.n	80018be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_MspInit+0x80>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_UART_MspInit+0x80>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ae:	2307      	movs	r3, #7
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_UART_MspInit+0x84>)
 80018ba:	f000 fa31 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000400 	.word	0x48000400

080018d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2036      	movs	r0, #54	; 0x36
 80018ea:	f000 f9ef 	bl	8001ccc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ee:	2036      	movs	r0, #54	; 0x36
 80018f0:	f000 fa08 	bl	8001d04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_InitTick+0x9c>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_InitTick+0x9c>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_InitTick+0x9c>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190c:	f107 0210 	add.w	r2, r7, #16
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f916 	bl	8003b48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800191c:	f002 f8e8 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8001920:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_InitTick+0xa0>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9b      	lsrs	r3, r3, #18
 800192c:	3b01      	subs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_InitTick+0xa4>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_InitTick+0xa8>)
 8001934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_InitTick+0xa4>)
 8001938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_InitTick+0xa4>)
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_InitTick+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_InitTick+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001950:	4809      	ldr	r0, [pc, #36]	; (8001978 <HAL_InitTick+0xa4>)
 8001952:	f002 fef5 	bl	8004740 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <HAL_InitTick+0xa4>)
 800195e:	f002 ff51 	bl	8004804 <HAL_TIM_Base_Start_IT>
 8001962:	4603      	mov	r3, r0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3730      	adds	r7, #48	; 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	431bde83 	.word	0x431bde83
 8001978:	200012c8 	.word	0x200012c8
 800197c:	40001000 	.word	0x40001000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f002 ff97 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200012c8 	.word	0x200012c8

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f006 fb54 	bl	800809c <__errno>
 80019f4:	4602      	mov	r2, r0
 80019f6:	230c      	movs	r3, #12
 80019f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200a0000 	.word	0x200a0000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	20000378 	.word	0x20000378
 8001a28:	20001320 	.word	0x20001320

08001a2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <SystemInit+0x64>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <SystemInit+0x64>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <SystemInit+0x68>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <SystemInit+0x68>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <SystemInit+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <SystemInit+0x68>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <SystemInit+0x68>)
 8001a58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <SystemInit+0x68>)
 8001a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <SystemInit+0x68>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <SystemInit+0x68>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <SystemInit+0x68>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SystemInit+0x64>)
 8001a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a82:	609a      	str	r2, [r3, #8]
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	40021000 	.word	0x40021000

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ffc6 	bl	8001a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001aa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aa2:	e003      	b.n	8001aac <LoopCopyDataInit>

08001aa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aaa:	3104      	adds	r1, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ab0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ab2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ab4:	d3f6      	bcc.n	8001aa4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ab8:	e002      	b.n	8001ac0 <LoopFillZerobss>

08001aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001abc:	f842 3b04 	str.w	r3, [r2], #4

08001ac0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ac2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ac4:	d3f9      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f006 faef 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff f933 	bl	8000d34 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001ad4:	08008ab4 	.word	0x08008ab4
	ldr	r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001adc:	200000f4 	.word	0x200000f4
	ldr	r2, =_sbss
 8001ae0:	200000f4 	.word	0x200000f4
	ldr	r3, = _ebss
 8001ae4:	2000131c 	.word	0x2000131c

08001ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f8de 	bl	8001cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff feea 	bl	80018d4 <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff fe0e 	bl	800172c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000088 	.word	0x20000088
 8001b40:	20001314 	.word	0x20001314

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20001314 	.word	0x20001314

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff4c 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cde:	f7ff ff61 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001ce2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff ffb1 	bl	8001c50 <NVIC_EncodePriority>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff80 	bl	8001bfc <__NVIC_SetPriority>
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff54 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e166      	b.n	8001ffe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8158 	beq.w	8001ff8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00b      	beq.n	8001d68 <HAL_GPIO_Init+0x48>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	2b11      	cmp	r3, #17
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0xea>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b2 	beq.w	8001ff8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e98:	4a60      	ldr	r2, [pc, #384]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea0:	4b5e      	ldr	r3, [pc, #376]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eac:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed6:	d02b      	beq.n	8001f30 <HAL_GPIO_Init+0x210>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d025      	beq.n	8001f2c <HAL_GPIO_Init+0x20c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_GPIO_Init+0x308>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01f      	beq.n	8001f28 <HAL_GPIO_Init+0x208>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x30c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_GPIO_Init+0x204>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x310>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x200>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x314>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1fc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x318>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1f8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x31c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1f4>
 8001f10:	2307      	movs	r3, #7
 8001f12:	e00e      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f14:	2308      	movs	r3, #8
 8001f16:	e00c      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e00a      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e008      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x212>
 8001f30:	2300      	movs	r3, #0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f74:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_GPIO_Init+0x320>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f ae91 	bne.w	8001d30 <HAL_GPIO_Init+0x10>
  }
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	48000c00 	.word	0x48000c00
 8002030:	48001000 	.word	0x48001000
 8002034:	48001400 	.word	0x48001400
 8002038:	48001800 	.word	0x48001800
 800203c:	48001c00 	.word	0x48001c00
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002052:	e0c9      	b.n	80021e8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002054:	2201      	movs	r2, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80bc 	beq.w	80021e2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800206a:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002092:	d02b      	beq.n	80020ec <HAL_GPIO_DeInit+0xa8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_DeInit+0x1c4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d025      	beq.n	80020e8 <HAL_GPIO_DeInit+0xa4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_GPIO_DeInit+0x1c8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d01f      	beq.n	80020e4 <HAL_GPIO_DeInit+0xa0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_GPIO_DeInit+0x1cc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d019      	beq.n	80020e0 <HAL_GPIO_DeInit+0x9c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_GPIO_DeInit+0x1d0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_DeInit+0x98>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_GPIO_DeInit+0x1d4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_DeInit+0x94>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_GPIO_DeInit+0x1d8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_DeInit+0x90>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_GPIO_DeInit+0x1dc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_DeInit+0x8c>
 80020cc:	2307      	movs	r3, #7
 80020ce:	e00e      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d0:	2308      	movs	r3, #8
 80020d2:	e00c      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d4:	2306      	movs	r3, #6
 80020d6:	e00a      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020d8:	2305      	movs	r3, #5
 80020da:	e008      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020dc:	2304      	movs	r3, #4
 80020de:	e006      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e004      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_DeInit+0xaa>
 80020ec:	2300      	movs	r3, #0
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	f002 0203 	and.w	r2, r2, #3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4093      	lsls	r3, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d132      	bne.n	8002164 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020fe:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	4947      	ldr	r1, [pc, #284]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002108:	4013      	ands	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	4943      	ldr	r1, [pc, #268]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002116:	4013      	ands	r3, r2
 8002118:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	4940      	ldr	r1, [pc, #256]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002124:	4013      	ands	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	493c      	ldr	r1, [pc, #240]	; (8002224 <HAL_GPIO_DeInit+0x1e0>)
 8002132:	4013      	ands	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43da      	mvns	r2, r3
 8002156:	482b      	ldr	r0, [pc, #172]	; (8002204 <HAL_GPIO_DeInit+0x1c0>)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	400a      	ands	r2, r1
 800215e:	3302      	adds	r3, #2
 8002160:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2103      	movs	r1, #3
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	08d2      	lsrs	r2, r2, #3
 8002198:	4019      	ands	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2103      	movs	r1, #3
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	2101      	movs	r1, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2103      	movs	r1, #3
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f af2f 	bne.w	8002054 <HAL_GPIO_DeInit+0x10>
  }
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	48000400 	.word	0x48000400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	48001000 	.word	0x48001000
 8002218:	48001400 	.word	0x48001400
 800221c:	48001800 	.word	0x48001800
 8002220:	48001c00 	.word	0x48001c00
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e001      	b.n	800224a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e081      	b.n	800236e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fa7c 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e006      	b.n	80022e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d104      	bne.n	80022f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	ea42 0103 	orr.w	r1, r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e021      	b.n	80023cc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fa2f 	bl	8001804 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 80f9 	bne.w	80025ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_I2C_Mem_Write+0x34>
 8002402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0ed      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Mem_Write+0x4e>
 800241e:	2302      	movs	r3, #2
 8002420:	e0e6      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800242a:	f7ff fb8b 	bl	8001b44 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2319      	movs	r3, #25
 8002436:	2201      	movs	r2, #1
 8002438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fac3 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d1      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2221      	movs	r2, #33	; 0x21
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002474:	88f8      	ldrh	r0, [r7, #6]
 8002476:	893a      	ldrh	r2, [r7, #8]
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4603      	mov	r3, r0
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f9d3 	bl	8002830 <I2C_RequestMemoryWrite>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0a9      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2bff      	cmp	r3, #255	; 0xff
 80024a4:	d90e      	bls.n	80024c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	22ff      	movs	r2, #255	; 0xff
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	8979      	ldrh	r1, [r7, #10]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fba5 	bl	8002c0c <I2C_TransferConfig>
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	8979      	ldrh	r1, [r7, #10]
 80024d6:	2300      	movs	r3, #0
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fb94 	bl	8002c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 faad 	bl	8002a48 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e07b      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d034      	beq.n	800259c <HAL_I2C_Mem_Write+0x1c8>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d130      	bne.n	800259c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa3f 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e04d      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2bff      	cmp	r3, #255	; 0xff
 800255c:	d90e      	bls.n	800257c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	b2da      	uxtb	r2, r3
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	2300      	movs	r3, #0
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fb49 	bl	8002c0c <I2C_TransferConfig>
 800257a:	e00f      	b.n	800259c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	b2da      	uxtb	r2, r3
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb38 	bl	8002c0c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d19e      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa8c 	bl	8002ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e01a      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2220      	movs	r2, #32
 80025c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_I2C_Mem_Write+0x224>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fe00e800 	.word	0xfe00e800

080025fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	f040 80fd 	bne.w	800281e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_I2C_Mem_Read+0x34>
 800262a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0f1      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_I2C_Mem_Read+0x4e>
 8002646:	2302      	movs	r3, #2
 8002648:	e0ea      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002652:	f7ff fa77 	bl	8001b44 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2319      	movs	r3, #25
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9af 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0d5      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2222      	movs	r2, #34	; 0x22
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800269c:	88f8      	ldrh	r0, [r7, #6]
 800269e:	893a      	ldrh	r2, [r7, #8]
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4603      	mov	r3, r0
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f913 	bl	80028d8 <I2C_RequestMemoryRead>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0ad      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d90e      	bls.n	80026ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_I2C_Mem_Read+0x22c>)
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa91 	bl	8002c0c <I2C_TransferConfig>
 80026ea:	e00f      	b.n	800270c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_I2C_Mem_Read+0x22c>)
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa80 	bl	8002c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	2200      	movs	r2, #0
 8002714:	2104      	movs	r1, #4
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f956 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07c      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d034      	beq.n	80027cc <HAL_I2C_Mem_Read+0x1d0>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d130      	bne.n	80027cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	2200      	movs	r2, #0
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f927 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04d      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2bff      	cmp	r3, #255	; 0xff
 800278c:	d90e      	bls.n	80027ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	b2da      	uxtb	r2, r3
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	2300      	movs	r3, #0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa31 	bl	8002c0c <I2C_TransferConfig>
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	8979      	ldrh	r1, [r7, #10]
 80027be:	2300      	movs	r3, #0
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fa20 	bl	8002c0c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d19a      	bne.n	800270c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f974 	bl	8002ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e01a      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_I2C_Mem_Read+0x230>)
 80027fe:	400b      	ands	r3, r1
 8002800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	80002400 	.word	0x80002400
 800282c:	fe00e800 	.word	0xfe00e800

08002830 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <I2C_RequestMemoryWrite+0xa4>)
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f9d7 	bl	8002c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	69b9      	ldr	r1, [r7, #24]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8f0 	bl	8002a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02c      	b.n	80028cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
 8002882:	e015      	b.n	80028b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8d6 	bl	8002a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e012      	b.n	80028cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028a6:	893b      	ldrh	r3, [r7, #8]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2200      	movs	r2, #0
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f884 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	80002000 	.word	0x80002000

080028d8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <I2C_RequestMemoryRead+0xa4>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f984 	bl	8002c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f89d 	bl	8002a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e02c      	b.n	8002972 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291e:	893b      	ldrh	r3, [r7, #8]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
 8002928:	e015      	b.n	8002956 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	b29b      	uxth	r3, r3
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f883 	bl	8002a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e012      	b.n	8002972 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2200      	movs	r2, #0
 800295e:	2140      	movs	r1, #64	; 0x40
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f831 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	80002000 	.word	0x80002000

08002980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d103      	bne.n	800299e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	619a      	str	r2, [r3, #24]
  }
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d8:	e022      	b.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d01e      	beq.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7ff f8af 	bl	8001b44 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e00f      	b.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d0cd      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a54:	e02c      	b.n	8002ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f870 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02a      	b.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d01e      	beq.n	8002ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff f867 	bl	8001b44 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e007      	b.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d1cb      	bne.n	8002a56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad4:	e028      	b.n	8002b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f830 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e026      	b.n	8002b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7ff f82b 	bl	8001b44 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d113      	bne.n	8002b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d1cf      	bne.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d151      	bne.n	8002bfe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b5a:	e022      	b.n	8002ba2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d01e      	beq.n	8002ba2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7fe ffee 	bl	8001b44 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <I2C_IsAcknowledgeFailed+0x3a>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d113      	bne.n	8002ba2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02e      	b.n	8002c00 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d1d5      	bne.n	8002b5c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fedd 	bl	8002980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <I2C_IsAcknowledgeFailed+0xc8>)
 8002bd2:	400b      	ands	r3, r1
 8002bd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	fe00e800 	.word	0xfe00e800

08002c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <I2C_TransferConfig+0x58>)
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	43db      	mvns	r3, r3
 8002c32:	ea02 0103 	and.w	r1, r2, r3
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c3c:	7a7b      	ldrb	r3, [r7, #9]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	03ff63ff 	.word	0x03ff63ff

08002c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d138      	bne.n	8002cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e032      	b.n	8002cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d139      	bne.n	8002d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e033      	b.n	8002d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2224      	movs	r2, #36	; 0x24
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da8:	d102      	bne.n	8002db0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dae:	e00b      	b.n	8002dc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbe:	d102      	bne.n	8002dc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	e000      	b.n	8002dc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002dc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d141      	bne.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d131      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0c:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2232      	movs	r2, #50	; 0x32
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2a:	e002      	b.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d102      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f2      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d158      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e057      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e68:	e04d      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d141      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d131      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2232      	movs	r2, #50	; 0x32
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9b      	lsrs	r3, r3, #18
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb6:	e002      	b.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d102      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f2      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d112      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e011      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ef4:	e007      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f04:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000080 	.word	0x20000080
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f000 bc16 	b.w	8003760 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f34:	4ba0      	ldr	r3, [pc, #640]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3e:	4b9e      	ldr	r3, [pc, #632]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80e4 	beq.w	800311e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4c>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	f040 808b 	bne.w	800307a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 8087 	bne.w	800307a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6c:	4b92      	ldr	r3, [pc, #584]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x64>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e3ed      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4b8b      	ldr	r3, [pc, #556]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_RCC_OscConfig+0x7e>
 8002f94:	4b88      	ldr	r3, [pc, #544]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	e005      	b.n	8002faa <HAL_RCC_OscConfig+0x8a>
 8002f9e:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d223      	bcs.n	8002ff6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fdfa 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e3ce      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc2:	4b7d      	ldr	r3, [pc, #500]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a7c      	ldr	r2, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4977      	ldr	r1, [pc, #476]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe0:	4b75      	ldr	r3, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	4972      	ldr	r1, [pc, #456]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	e025      	b.n	8003042 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6f      	ldr	r2, [pc, #444]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003014:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4965      	ldr	r1, [pc, #404]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fdba 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e38e      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003042:	f000 fcbf 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003046:	4601      	mov	r1, r0
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_RCC_OscConfig+0x29c>)
 8003054:	5cd3      	ldrb	r3, [r2, r3]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	fa21 f303 	lsr.w	r3, r1, r3
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <HAL_RCC_OscConfig+0x2a0>)
 8003060:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003062:	4b58      	ldr	r3, [pc, #352]	; (80031c4 <HAL_RCC_OscConfig+0x2a4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fc34 	bl	80018d4 <HAL_InitTick>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d052      	beq.n	800311c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	e372      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d032      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003082:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800308e:	f7fe fd59 	bl	8001b44 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003096:	f7fe fd55 	bl	8001b44 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e35b      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b4:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030ba:	f043 0308 	orr.w	r3, r3, #8
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	493a      	ldr	r1, [pc, #232]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	4935      	ldr	r1, [pc, #212]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e01a      	b.n	800311e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fd26 	bl	8001b44 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fc:	f7fe fd22 	bl	8001b44 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e328      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1dc>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d073      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d005      	beq.n	800313c <HAL_RCC_OscConfig+0x21c>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d10e      	bne.n	8003154 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d063      	beq.n	8003210 <HAL_RCC_OscConfig+0x2f0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d15f      	bne.n	8003210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e305      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x24c>
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0x288>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x270>
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0x288>
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <HAL_RCC_OscConfig+0x298>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fcc8 	bl	8001b44 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b6:	e010      	b.n	80031da <HAL_RCC_OscConfig+0x2ba>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08008a10 	.word	0x08008a10
 80031c0:	20000080 	.word	0x20000080
 80031c4:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fcbc 	bl	8001b44 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e2c2      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	4baf      	ldr	r3, [pc, #700]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2a8>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fcac 	bl	8001b44 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fca8 	bl	8001b44 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e2ae      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	4ba5      	ldr	r3, [pc, #660]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2d0>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d060      	beq.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x310>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d119      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d116      	bne.n	800325e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	4b99      	ldr	r3, [pc, #612]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x328>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e28b      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b93      	ldr	r3, [pc, #588]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4990      	ldr	r1, [pc, #576]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325c:	e040      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d023      	beq.n	80032ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003266:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a8b      	ldr	r2, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fc67 	bl	8001b44 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fc63 	bl	8001b44 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e269      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	497c      	ldr	r1, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
 80032ac:	e018      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a79      	ldr	r2, [pc, #484]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fc43 	bl	8001b44 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fc3f 	bl	8001b44 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e245      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d4:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03c      	beq.n	8003366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01c      	beq.n	800332e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f4:	4b68      	ldr	r3, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	4a67      	ldr	r2, [pc, #412]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fc1e 	bl	8001b44 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fc1a 	bl	8001b44 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e220      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331e:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCC_OscConfig+0x3ec>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe fc01 	bl	8001b44 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fbfd 	bl	8001b44 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e203      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ef      	bne.n	8003346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80a6 	beq.w	80034c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	4a43      	ldr	r2, [pc, #268]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6593      	str	r3, [r2, #88]	; 0x58
 8003390:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d118      	bne.n	80033de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ac:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3a      	ldr	r2, [pc, #232]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fbc4 	bl	8001b44 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fbc0 	bl	8001b44 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1c6      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	4b32      	ldr	r3, [pc, #200]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4d8>
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f6:	e024      	b.n	8003442 <HAL_RCC_OscConfig+0x522>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d110      	bne.n	8003422 <HAL_RCC_OscConfig+0x502>
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a24      	ldr	r2, [pc, #144]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a20      	ldr	r2, [pc, #128]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003420:	e00f      	b.n	8003442 <HAL_RCC_OscConfig+0x522>
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fe fb7b 	bl	8001b44 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fe fb77 	bl	8001b44 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e17b      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ed      	beq.n	8003452 <HAL_RCC_OscConfig+0x532>
 8003476:	e01a      	b.n	80034ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fb64 	bl	8001b44 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800347e:	e00f      	b.n	80034a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fb60 	bl	8001b44 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d906      	bls.n	80034a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e164      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a0:	4ba8      	ldr	r3, [pc, #672]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e8      	bne.n	8003480 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4ba3      	ldr	r3, [pc, #652]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4aa2      	ldr	r2, [pc, #648]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d03c      	beq.n	8003546 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d4:	4b9b      	ldr	r3, [pc, #620]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80034d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034da:	4a9a      	ldr	r2, [pc, #616]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fb2e 	bl	8001b44 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ec:	f7fe fb2a 	bl	8001b44 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e130      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fe:	4b91      	ldr	r3, [pc, #580]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ef      	beq.n	80034ec <HAL_RCC_OscConfig+0x5cc>
 800350c:	e01b      	b.n	8003546 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800350e:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003514:	4a8b      	ldr	r2, [pc, #556]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fb11 	bl	8001b44 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fe fb0d 	bl	8001b44 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e113      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003538:	4b82      	ldr	r3, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800353a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8107 	beq.w	800375e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b02      	cmp	r3, #2
 8003556:	f040 80cb 	bne.w	80036f0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800355a:	4b7a      	ldr	r3, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0203 	and.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	429a      	cmp	r2, r3
 800356c:	d12c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	3b01      	subs	r3, #1
 800357a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d123      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d11b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d113      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	3b01      	subs	r3, #1
 80035ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d06d      	beq.n	80036a4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d068      	beq.n	80036a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035ce:	4b5d      	ldr	r3, [pc, #372]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035da:	4b5a      	ldr	r3, [pc, #360]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0ba      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ea:	4b56      	ldr	r3, [pc, #344]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f6:	f7fe faa5 	bl	8001b44 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe faa1 	bl	8001b44 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0a7      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361c:	4b49      	ldr	r3, [pc, #292]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x828>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800362c:	3a01      	subs	r2, #1
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003636:	0212      	lsls	r2, r2, #8
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800363e:	0852      	lsrs	r2, r2, #1
 8003640:	3a01      	subs	r2, #1
 8003642:	0552      	lsls	r2, r2, #21
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800364a:	0852      	lsrs	r2, r2, #1
 800364c:	3a01      	subs	r2, #1
 800364e:	0652      	lsls	r2, r2, #25
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003656:	06d2      	lsls	r2, r2, #27
 8003658:	430a      	orrs	r2, r1
 800365a:	493a      	ldr	r1, [pc, #232]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003660:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a37      	ldr	r2, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a34      	ldr	r2, [pc, #208]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fe fa64 	bl	8001b44 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fa60 	bl	8001b44 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e066      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	e05e      	b.n	800375e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e05d      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d156      	bne.n	800375e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a20      	ldr	r2, [pc, #128]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fe fa3c 	bl	8001b44 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fa38 	bl	8001b44 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e03e      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x7b0>
 80036ee:	e036      	b.n	800375e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d031      	beq.n	800375a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_OscConfig+0x824>)
 8003720:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fa0b 	bl	8001b44 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	e00c      	b.n	800374c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fa07 	bl	8001b44 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d905      	bls.n	800374c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e00d      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
 8003744:	40021000 	.word	0x40021000
 8003748:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_OscConfig+0x848>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ec      	bne.n	8003732 <HAL_RCC_OscConfig+0x812>
 8003758:	e001      	b.n	800375e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e10f      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b89      	ldr	r3, [pc, #548]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b86      	ldr	r3, [pc, #536]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4984      	ldr	r1, [pc, #528]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0f7      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8089 	beq.w	80038d4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d133      	bne.n	8003832 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e4      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80037da:	f000 fa41 	bl	8003c60 <RCC_GetSysClockFreqFromPLLSource>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b74      	ldr	r3, [pc, #464]	; (80039b4 <HAL_RCC_ClockConfig+0x248>)
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d955      	bls.n	8003892 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037f2:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fa:	4a6d      	ldr	r2, [pc, #436]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e044      	b.n	8003892 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d03e      	beq.n	8003892 <HAL_RCC_ClockConfig+0x126>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d13a      	bne.n	8003892 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800381c:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003824:	4a62      	ldr	r2, [pc, #392]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e02f      	b.n	8003892 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0ac      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003852:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0a0      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003862:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e098      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003872:	f000 f8a7 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b4e      	ldr	r3, [pc, #312]	; (80039b4 <HAL_RCC_ClockConfig+0x248>)
 800387a:	429a      	cmp	r2, r3
 800387c:	d909      	bls.n	8003892 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003886:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4944      	ldr	r1, [pc, #272]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fe f94e 	bl	8001b44 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe f94a 	bl	8001b44 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e070      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4930      	ldr	r1, [pc, #192]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
 80038f2:	e008      	b.n	8003906 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038fa:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a2c      	ldr	r2, [pc, #176]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003904:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d210      	bcs.n	8003936 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 020f 	bic.w	r2, r3, #15
 800391c:	4923      	ldr	r1, [pc, #140]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e036      	b.n	80039a4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4918      	ldr	r1, [pc, #96]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4910      	ldr	r1, [pc, #64]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003974:	f000 f826 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003978:	4601      	mov	r1, r0
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <HAL_RCC_ClockConfig+0x24c>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x250>)
 8003992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x254>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd ff9b 	bl	80018d4 <HAL_InitTick>
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40022000 	.word	0x40022000
 80039b0:	40021000 	.word	0x40021000
 80039b4:	04c4b400 	.word	0x04c4b400
 80039b8:	08008a10 	.word	0x08008a10
 80039bc:	20000080 	.word	0x20000080
 80039c0:	20000084 	.word	0x20000084

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039dc:	4b3a      	ldr	r3, [pc, #232]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d121      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d11e      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e005      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a20:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10d      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e004      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d133      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0xaa>
 8003a66:	e005      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a6a:	617b      	str	r3, [r7, #20]
      break;
 8003a6c:	e005      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a70:	617b      	str	r3, [r7, #20]
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	617b      	str	r3, [r7, #20]
      break;
 8003a78:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	3301      	adds	r3, #1
 8003a86:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	fb02 f203 	mul.w	r2, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aba:	69bb      	ldr	r3, [r7, #24]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3724      	adds	r7, #36	; 0x24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08008a28 	.word	0x08008a28
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000080 	.word	0x20000080

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4601      	mov	r1, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08008a20 	.word	0x08008a20

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b20:	f7ff ffda 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b24:	4601      	mov	r1, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0adb      	lsrs	r3, r3, #11
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08008a20 	.word	0x08008a20

08003b48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	220f      	movs	r2, #15
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0203 	and.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <HAL_RCC_GetClockConfig+0x60>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40022000 	.word	0x40022000

08003bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bc4:	f7ff f8e8 	bl	8002d98 <HAL_PWREx_GetVoltageRange>
 8003bc8:	6178      	str	r0, [r7, #20]
 8003bca:	e014      	b.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003be4:	f7ff f8d8 	bl	8002d98 <HAL_PWREx_GetVoltageRange>
 8003be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d10b      	bne.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d913      	bls.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2ba0      	cmp	r3, #160	; 0xa0
 8003c08:	d902      	bls.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e00d      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e00a      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b7f      	cmp	r3, #127	; 0x7f
 8003c1a:	d902      	bls.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e004      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d101      	bne.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 020f 	bic.w	r2, r3, #15
 8003c34:	4909      	ldr	r1, [pc, #36]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40022000 	.word	0x40022000

08003c60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003c6a:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e005      	b.n	8003c9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d002      	beq.n	8003cbe <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d003      	beq.n	8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003cbc:	e005      	b.n	8003cca <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cc0:	613b      	str	r3, [r7, #16]
    break;
 8003cc2:	e005      	b.n	8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cc6:	613b      	str	r3, [r7, #16]
    break;
 8003cc8:	e002      	b.n	8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	613b      	str	r3, [r7, #16]
    break;
 8003cce:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	fb02 f203 	mul.w	r2, r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	0e5b      	lsrs	r3, r3, #25
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	3301      	adds	r3, #1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d10:	683b      	ldr	r3, [r7, #0]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08008a28 	.word	0x08008a28
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d00b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d804      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d60:	e01d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d62:	2b60      	cmp	r3, #96	; 0x60
 8003d64:	d01e      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d01c      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d6a:	e018      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d6c:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a85      	ldr	r2, [pc, #532]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fafd 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3320      	adds	r3, #32
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbe4 	bl	8004560 <RCCEx_PLLSAI2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	74fb      	strb	r3, [r7, #19]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dac:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	4973      	ldr	r1, [pc, #460]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d042      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d00f      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d805      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dec:	d017      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003dee:	e01f      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df4:	d01f      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d01c      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dfc:	e018      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dfe:	4b62      	ldr	r3, [pc, #392]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a61      	ldr	r2, [pc, #388]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e0a:	e015      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fab4 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3320      	adds	r3, #32
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fb9b 	bl	8004560 <RCCEx_PLLSAI2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	74fb      	strb	r3, [r7, #19]
      break;
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	494e      	ldr	r1, [pc, #312]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e54:	e001      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 809f 	beq.w	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6c:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8e:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fe4b 	bl	8001b44 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eb0:	e009      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd fe47 	bl	8001b44 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ef      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d15b      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01f      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d019      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f22:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d016      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fe06 	bl	8001b44 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fe02 	bl	8001b44 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d902      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	74fb      	strb	r3, [r7, #19]
            break;
 8003f52:	e006      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ec      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	74bb      	strb	r3, [r7, #18]
 8003f86:	e005      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f94:	7c7b      	ldrb	r3, [r7, #17]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4ba0      	ldr	r3, [pc, #640]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	4a9f      	ldr	r2, [pc, #636]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb2:	4b9a      	ldr	r3, [pc, #616]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f023 0203 	bic.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	4996      	ldr	r1, [pc, #600]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd4:	4b91      	ldr	r3, [pc, #580]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 020c 	bic.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	498e      	ldr	r1, [pc, #568]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff6:	4b89      	ldr	r3, [pc, #548]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	4985      	ldr	r1, [pc, #532]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004018:	4b80      	ldr	r3, [pc, #512]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004026:	497d      	ldr	r1, [pc, #500]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	4974      	ldr	r1, [pc, #464]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	496c      	ldr	r1, [pc, #432]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408c:	4963      	ldr	r1, [pc, #396]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a0:	4b5e      	ldr	r3, [pc, #376]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ae:	495b      	ldr	r1, [pc, #364]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c2:	4b56      	ldr	r3, [pc, #344]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	4952      	ldr	r1, [pc, #328]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e4:	4b4d      	ldr	r3, [pc, #308]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	494a      	ldr	r1, [pc, #296]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004106:	4b45      	ldr	r3, [pc, #276]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	4941      	ldr	r1, [pc, #260]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004128:	4b3c      	ldr	r3, [pc, #240]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	4939      	ldr	r1, [pc, #228]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414a:	4b34      	ldr	r3, [pc, #208]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	4930      	ldr	r1, [pc, #192]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004174:	60d3      	str	r3, [r2, #12]
 8004176:	e011      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f8f9 	bl	8004380 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04d      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b0:	d108      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041c2:	e012      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f2:	d106      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a08      	ldr	r2, [pc, #32]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fe:	60d3      	str	r3, [r2, #12]
 8004200:	e020      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a02      	ldr	r2, [pc, #8]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004216:	60d3      	str	r3, [r2, #12]
 8004218:	e014      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004228:	d10c      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f8a5 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d028      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004250:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425e:	4947      	ldr	r1, [pc, #284]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426e:	d106      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004270:	4b42      	ldr	r3, [pc, #264]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a41      	ldr	r2, [pc, #260]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427a:	60d3      	str	r3, [r2, #12]
 800427c:	e011      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004286:	d10c      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2101      	movs	r1, #1
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f876 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01e      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042be:	492f      	ldr	r1, [pc, #188]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f851 	bl	8004380 <RCCEx_PLLSAI1_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fe:	f023 0204 	bic.w	r2, r3, #4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	491c      	ldr	r1, [pc, #112]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800431e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004322:	f023 0218 	bic.w	r2, r3, #24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	4913      	ldr	r1, [pc, #76]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d017      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	490a      	ldr	r1, [pc, #40]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800436a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004370:	7cbb      	ldrb	r3, [r7, #18]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	4b70      	ldr	r3, [pc, #448]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800439a:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d103      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
       ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d13f      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e03c      	b.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d00c      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x5a>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d013      	beq.n	80043ec <RCCEx_PLLSAI1_Config+0x6c>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d120      	bne.n	800440a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e01a      	b.n	8004410 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043da:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ea:	e013      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ec:	4b58      	ldr	r3, [pc, #352]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f8:	4b55      	ldr	r3, [pc, #340]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004408:	e006      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      break;
 800440e:	e004      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004418:	bf00      	nop
    }

    if(status == HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f023 0203 	bic.w	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4948      	ldr	r1, [pc, #288]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 8086 	bne.w	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a44      	ldr	r2, [pc, #272]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004440:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fd fb7d 	bl	8001b44 <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800444c:	e009      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444e:	f7fd fb79 	bl	8001b44 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	73fb      	strb	r3, [r7, #15]
        break;
 8004460:	e005      	b.n	800446e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ef      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d168      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d113      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6892      	ldr	r2, [r2, #8]
 8004486:	0211      	lsls	r1, r2, #8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	06d2      	lsls	r2, r2, #27
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	3a01      	subs	r2, #1
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	430a      	orrs	r2, r1
 800449a:	492d      	ldr	r1, [pc, #180]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	610b      	str	r3, [r1, #16]
 80044a0:	e02d      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d115      	bne.n	80044d4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a8:	4b29      	ldr	r3, [pc, #164]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
 80044b4:	0211      	lsls	r1, r2, #8
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6912      	ldr	r2, [r2, #16]
 80044ba:	0852      	lsrs	r2, r2, #1
 80044bc:	3a01      	subs	r2, #1
 80044be:	0552      	lsls	r2, r2, #21
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	430a      	orrs	r2, r1
 80044cc:	4920      	ldr	r1, [pc, #128]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
 80044d2:	e014      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <RCCEx_PLLSAI1_Config+0x1dc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6952      	ldr	r2, [r2, #20]
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0652      	lsls	r2, r2, #25
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6852      	ldr	r2, [r2, #4]
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4915      	ldr	r1, [pc, #84]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fb1b 	bl	8001b44 <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004510:	e009      	b.n	8004526 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004512:	f7fd fb17 	bl	8001b44 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d902      	bls.n	8004526 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	73fb      	strb	r3, [r7, #15]
          break;
 8004524:	e005      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ef      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	07ff800f 	.word	0x07ff800f
 8004558:	ff9f800f 	.word	0xff9f800f
 800455c:	f9ff800f 	.word	0xf9ff800f

08004560 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800457a:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0203 	and.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d103      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
       ||
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13f      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e03c      	b.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d00c      	beq.n	80045ba <RCCEx_PLLSAI2_Config+0x5a>
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d013      	beq.n	80045cc <RCCEx_PLLSAI2_Config+0x6c>
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d120      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e01a      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e013      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10f      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045e8:	e006      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      break;
 80045ee:	e004      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f023 0203 	bic.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4948      	ldr	r1, [pc, #288]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 8086 	bne.w	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a44      	ldr	r2, [pc, #272]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fd fa8d 	bl	8001b44 <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800462c:	e009      	b.n	8004642 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800462e:	f7fd fa89 	bl	8001b44 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d902      	bls.n	8004642 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	73fb      	strb	r3, [r7, #15]
        break;
 8004640:	e005      	b.n	800464e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ef      	bne.n	800462e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d168      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	4b35      	ldr	r3, [pc, #212]	; (8004734 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	0211      	lsls	r1, r2, #8
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68d2      	ldr	r2, [r2, #12]
 800466c:	06d2      	lsls	r2, r2, #27
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6852      	ldr	r2, [r2, #4]
 8004674:	3a01      	subs	r2, #1
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	430a      	orrs	r2, r1
 800467a:	492d      	ldr	r1, [pc, #180]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	614b      	str	r3, [r1, #20]
 8004680:	e02d      	b.n	80046de <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d115      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6892      	ldr	r2, [r2, #8]
 8004694:	0211      	lsls	r1, r2, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6912      	ldr	r2, [r2, #16]
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0552      	lsls	r2, r2, #21
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6852      	ldr	r2, [r2, #4]
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	430a      	orrs	r2, r1
 80046ac:	4920      	ldr	r1, [pc, #128]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	614b      	str	r3, [r1, #20]
 80046b2:	e014      	b.n	80046de <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <RCCEx_PLLSAI2_Config+0x1dc>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6892      	ldr	r2, [r2, #8]
 80046c0:	0211      	lsls	r1, r2, #8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6952      	ldr	r2, [r2, #20]
 80046c6:	0852      	lsrs	r2, r2, #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	0652      	lsls	r2, r2, #25
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6852      	ldr	r2, [r2, #4]
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0112      	lsls	r2, r2, #4
 80046d6:	430a      	orrs	r2, r1
 80046d8:	4915      	ldr	r1, [pc, #84]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd fa2b 	bl	8001b44 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046f0:	e009      	b.n	8004706 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046f2:	f7fd fa27 	bl	8001b44 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	73fb      	strb	r3, [r7, #15]
          break;
 8004704:	e005      	b.n	8004712 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ef      	beq.n	80046f2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	07ff800f 	.word	0x07ff800f
 8004738:	ff9f800f 	.word	0xff9f800f
 800473c:	f9ff800f 	.word	0xf9ff800f

08004740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f841 	bl	80047ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 f9f8 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e04f      	b.n	80048bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01d      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d018      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <HAL_TIM_Base_Start_IT+0xc8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_Base_Start_IT+0x76>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a19      	ldr	r2, [pc, #100]	; (80048dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d115      	bne.n	80048a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004882:	4013      	ands	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b06      	cmp	r3, #6
 800488a:	d015      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xb4>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004892:	d011      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	e008      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e000      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40013400 	.word	0x40013400
 80048dc:	40014000 	.word	0x40014000
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0202 	mvn.w	r2, #2
 8004910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f905 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8f7 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f908 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0204 	mvn.w	r2, #4
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8db 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8cd 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8de 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0208 	mvn.w	r2, #8
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8b1 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8a3 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8b4 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0210 	mvn.w	r2, #16
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2208      	movs	r2, #8
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f887 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f879 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f88a 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0201 	mvn.w	r2, #1
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fc02 	bl	800126c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f914 	bl	8004cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f907 	bl	8004cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d10e      	bne.n	8004aee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f838 	bl	8004b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d10e      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0220 	mvn.w	r2, #32
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8c7 	bl	8004ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d00f      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01f      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d01b      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d017      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00f      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_Base_SetConfig+0x9a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00f      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc fd9f 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8c4 	bl	8004eb4 <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb8a 	bl	8005458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fc11 	bl	800559c <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	f040 8084 	bne.w	8004ea8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x28>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e07c      	b.n	8004eaa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x3a>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e075      	b.n	8004eaa <HAL_UART_Transmit+0x126>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fc feb5 	bl	8001b44 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	d108      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004e18:	e02d      	b.n	8004e76 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fc01 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e03a      	b.n	8004eaa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e46:	b292      	uxth	r2, r2
 8004e48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e008      	b.n	8004e64 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3301      	adds	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1cb      	bne.n	8004e1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2140      	movs	r1, #64	; 0x40
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fbcd 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e006      	b.n	8004eaa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004eb8:	b088      	sub	sp, #32
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4bb1      	ldr	r3, [pc, #708]	; (80051b0 <UART_SetConfig+0x2fc>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	69f9      	ldr	r1, [r7, #28]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4aa6      	ldr	r2, [pc, #664]	; (80051b4 <UART_SetConfig+0x300>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	f023 010f 	bic.w	r1, r3, #15
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a97      	ldr	r2, [pc, #604]	; (80051b8 <UART_SetConfig+0x304>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d121      	bne.n	8004fa4 <UART_SetConfig+0xf0>
 8004f60:	4b96      	ldr	r3, [pc, #600]	; (80051bc <UART_SetConfig+0x308>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d816      	bhi.n	8004f9c <UART_SetConfig+0xe8>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0xc0>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f91 	.word	0x08004f91
 8004f7c:	08004f8b 	.word	0x08004f8b
 8004f80:	08004f97 	.word	0x08004f97
 8004f84:	2301      	movs	r3, #1
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e0e8      	b.n	800515c <UART_SetConfig+0x2a8>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e0e5      	b.n	800515c <UART_SetConfig+0x2a8>
 8004f90:	2304      	movs	r3, #4
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e0e2      	b.n	800515c <UART_SetConfig+0x2a8>
 8004f96:	2308      	movs	r3, #8
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e0df      	b.n	800515c <UART_SetConfig+0x2a8>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	bf00      	nop
 8004fa2:	e0db      	b.n	800515c <UART_SetConfig+0x2a8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a85      	ldr	r2, [pc, #532]	; (80051c0 <UART_SetConfig+0x30c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d134      	bne.n	8005018 <UART_SetConfig+0x164>
 8004fae:	4b83      	ldr	r3, [pc, #524]	; (80051bc <UART_SetConfig+0x308>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d829      	bhi.n	8005010 <UART_SetConfig+0x15c>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x110>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08005011 	.word	0x08005011
 8004fcc:	08005011 	.word	0x08005011
 8004fd0:	08005011 	.word	0x08005011
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08005011 	.word	0x08005011
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005011 	.word	0x08005011
 8004fe4:	08004fff 	.word	0x08004fff
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	0800500b 	.word	0x0800500b
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	76fb      	strb	r3, [r7, #27]
 8004ffc:	e0ae      	b.n	800515c <UART_SetConfig+0x2a8>
 8004ffe:	2302      	movs	r3, #2
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e0ab      	b.n	800515c <UART_SetConfig+0x2a8>
 8005004:	2304      	movs	r3, #4
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e0a8      	b.n	800515c <UART_SetConfig+0x2a8>
 800500a:	2308      	movs	r3, #8
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e0a5      	b.n	800515c <UART_SetConfig+0x2a8>
 8005010:	2310      	movs	r3, #16
 8005012:	76fb      	strb	r3, [r7, #27]
 8005014:	bf00      	nop
 8005016:	e0a1      	b.n	800515c <UART_SetConfig+0x2a8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a69      	ldr	r2, [pc, #420]	; (80051c4 <UART_SetConfig+0x310>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d120      	bne.n	8005064 <UART_SetConfig+0x1b0>
 8005022:	4b66      	ldr	r3, [pc, #408]	; (80051bc <UART_SetConfig+0x308>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800502c:	2b10      	cmp	r3, #16
 800502e:	d00f      	beq.n	8005050 <UART_SetConfig+0x19c>
 8005030:	2b10      	cmp	r3, #16
 8005032:	d802      	bhi.n	800503a <UART_SetConfig+0x186>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <UART_SetConfig+0x190>
 8005038:	e010      	b.n	800505c <UART_SetConfig+0x1a8>
 800503a:	2b20      	cmp	r3, #32
 800503c:	d005      	beq.n	800504a <UART_SetConfig+0x196>
 800503e:	2b30      	cmp	r3, #48	; 0x30
 8005040:	d009      	beq.n	8005056 <UART_SetConfig+0x1a2>
 8005042:	e00b      	b.n	800505c <UART_SetConfig+0x1a8>
 8005044:	2300      	movs	r3, #0
 8005046:	76fb      	strb	r3, [r7, #27]
 8005048:	e088      	b.n	800515c <UART_SetConfig+0x2a8>
 800504a:	2302      	movs	r3, #2
 800504c:	76fb      	strb	r3, [r7, #27]
 800504e:	e085      	b.n	800515c <UART_SetConfig+0x2a8>
 8005050:	2304      	movs	r3, #4
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e082      	b.n	800515c <UART_SetConfig+0x2a8>
 8005056:	2308      	movs	r3, #8
 8005058:	76fb      	strb	r3, [r7, #27]
 800505a:	e07f      	b.n	800515c <UART_SetConfig+0x2a8>
 800505c:	2310      	movs	r3, #16
 800505e:	76fb      	strb	r3, [r7, #27]
 8005060:	bf00      	nop
 8005062:	e07b      	b.n	800515c <UART_SetConfig+0x2a8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a57      	ldr	r2, [pc, #348]	; (80051c8 <UART_SetConfig+0x314>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d120      	bne.n	80050b0 <UART_SetConfig+0x1fc>
 800506e:	4b53      	ldr	r3, [pc, #332]	; (80051bc <UART_SetConfig+0x308>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d00f      	beq.n	800509c <UART_SetConfig+0x1e8>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d802      	bhi.n	8005086 <UART_SetConfig+0x1d2>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0x1dc>
 8005084:	e010      	b.n	80050a8 <UART_SetConfig+0x1f4>
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d005      	beq.n	8005096 <UART_SetConfig+0x1e2>
 800508a:	2bc0      	cmp	r3, #192	; 0xc0
 800508c:	d009      	beq.n	80050a2 <UART_SetConfig+0x1ee>
 800508e:	e00b      	b.n	80050a8 <UART_SetConfig+0x1f4>
 8005090:	2300      	movs	r3, #0
 8005092:	76fb      	strb	r3, [r7, #27]
 8005094:	e062      	b.n	800515c <UART_SetConfig+0x2a8>
 8005096:	2302      	movs	r3, #2
 8005098:	76fb      	strb	r3, [r7, #27]
 800509a:	e05f      	b.n	800515c <UART_SetConfig+0x2a8>
 800509c:	2304      	movs	r3, #4
 800509e:	76fb      	strb	r3, [r7, #27]
 80050a0:	e05c      	b.n	800515c <UART_SetConfig+0x2a8>
 80050a2:	2308      	movs	r3, #8
 80050a4:	76fb      	strb	r3, [r7, #27]
 80050a6:	e059      	b.n	800515c <UART_SetConfig+0x2a8>
 80050a8:	2310      	movs	r3, #16
 80050aa:	76fb      	strb	r3, [r7, #27]
 80050ac:	bf00      	nop
 80050ae:	e055      	b.n	800515c <UART_SetConfig+0x2a8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a45      	ldr	r2, [pc, #276]	; (80051cc <UART_SetConfig+0x318>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d124      	bne.n	8005104 <UART_SetConfig+0x250>
 80050ba:	4b40      	ldr	r3, [pc, #256]	; (80051bc <UART_SetConfig+0x308>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d012      	beq.n	80050f0 <UART_SetConfig+0x23c>
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d802      	bhi.n	80050d6 <UART_SetConfig+0x222>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <UART_SetConfig+0x230>
 80050d4:	e012      	b.n	80050fc <UART_SetConfig+0x248>
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d006      	beq.n	80050ea <UART_SetConfig+0x236>
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e0:	d009      	beq.n	80050f6 <UART_SetConfig+0x242>
 80050e2:	e00b      	b.n	80050fc <UART_SetConfig+0x248>
 80050e4:	2300      	movs	r3, #0
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e038      	b.n	800515c <UART_SetConfig+0x2a8>
 80050ea:	2302      	movs	r3, #2
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e035      	b.n	800515c <UART_SetConfig+0x2a8>
 80050f0:	2304      	movs	r3, #4
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	e032      	b.n	800515c <UART_SetConfig+0x2a8>
 80050f6:	2308      	movs	r3, #8
 80050f8:	76fb      	strb	r3, [r7, #27]
 80050fa:	e02f      	b.n	800515c <UART_SetConfig+0x2a8>
 80050fc:	2310      	movs	r3, #16
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	bf00      	nop
 8005102:	e02b      	b.n	800515c <UART_SetConfig+0x2a8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <UART_SetConfig+0x300>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d124      	bne.n	8005158 <UART_SetConfig+0x2a4>
 800510e:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <UART_SetConfig+0x308>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	d012      	beq.n	8005144 <UART_SetConfig+0x290>
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d802      	bhi.n	800512a <UART_SetConfig+0x276>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <UART_SetConfig+0x284>
 8005128:	e012      	b.n	8005150 <UART_SetConfig+0x29c>
 800512a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512e:	d006      	beq.n	800513e <UART_SetConfig+0x28a>
 8005130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005134:	d009      	beq.n	800514a <UART_SetConfig+0x296>
 8005136:	e00b      	b.n	8005150 <UART_SetConfig+0x29c>
 8005138:	2300      	movs	r3, #0
 800513a:	76fb      	strb	r3, [r7, #27]
 800513c:	e00e      	b.n	800515c <UART_SetConfig+0x2a8>
 800513e:	2302      	movs	r3, #2
 8005140:	76fb      	strb	r3, [r7, #27]
 8005142:	e00b      	b.n	800515c <UART_SetConfig+0x2a8>
 8005144:	2304      	movs	r3, #4
 8005146:	76fb      	strb	r3, [r7, #27]
 8005148:	e008      	b.n	800515c <UART_SetConfig+0x2a8>
 800514a:	2308      	movs	r3, #8
 800514c:	76fb      	strb	r3, [r7, #27]
 800514e:	e005      	b.n	800515c <UART_SetConfig+0x2a8>
 8005150:	2310      	movs	r3, #16
 8005152:	76fb      	strb	r3, [r7, #27]
 8005154:	bf00      	nop
 8005156:	e001      	b.n	800515c <UART_SetConfig+0x2a8>
 8005158:	2310      	movs	r3, #16
 800515a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <UART_SetConfig+0x300>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f040 80a1 	bne.w	80052aa <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005168:	7efb      	ldrb	r3, [r7, #27]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d836      	bhi.n	80051dc <UART_SetConfig+0x328>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x2c0>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005199 	.word	0x08005199
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051dd 	.word	0x080051dd
 8005184:	080051a7 	.word	0x080051a7
 8005188:	080051dd 	.word	0x080051dd
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051dd 	.word	0x080051dd
 8005194:	080051d5 	.word	0x080051d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7fe fcaa 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 800519c:	6178      	str	r0, [r7, #20]
        break;
 800519e:	e022      	b.n	80051e6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <UART_SetConfig+0x31c>)
 80051a2:	617b      	str	r3, [r7, #20]
        break;
 80051a4:	e01f      	b.n	80051e6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7fe fc0d 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 80051aa:	6178      	str	r0, [r7, #20]
        break;
 80051ac:	e01b      	b.n	80051e6 <UART_SetConfig+0x332>
 80051ae:	bf00      	nop
 80051b0:	cfff69f3 	.word	0xcfff69f3
 80051b4:	40008000 	.word	0x40008000
 80051b8:	40013800 	.word	0x40013800
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d8:	617b      	str	r3, [r7, #20]
        break;
 80051da:	e004      	b.n	80051e6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	76bb      	strb	r3, [r7, #26]
        break;
 80051e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 811d 	beq.w	8005428 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	4a97      	ldr	r2, [pc, #604]	; (8005450 <UART_SetConfig+0x59c>)
 80051f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f8:	461a      	mov	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005200:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d305      	bcc.n	800521e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d902      	bls.n	8005224 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	76bb      	strb	r3, [r7, #26]
 8005222:	e101      	b.n	8005428 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4618      	mov	r0, r3
 8005228:	f04f 0100 	mov.w	r1, #0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	4a87      	ldr	r2, [pc, #540]	; (8005450 <UART_SetConfig+0x59c>)
 8005232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	461a      	mov	r2, r3
 800523e:	4623      	mov	r3, r4
 8005240:	f7fb f82e 	bl	80002a0 <__aeabi_uldivmod>
 8005244:	4603      	mov	r3, r0
 8005246:	460c      	mov	r4, r1
 8005248:	4619      	mov	r1, r3
 800524a:	4622      	mov	r2, r4
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	0214      	lsls	r4, r2, #8
 8005256:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800525a:	020b      	lsls	r3, r1, #8
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6852      	ldr	r2, [r2, #4]
 8005260:	0852      	lsrs	r2, r2, #1
 8005262:	4611      	mov	r1, r2
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	eb13 0b01 	adds.w	fp, r3, r1
 800526c:	eb44 0c02 	adc.w	ip, r4, r2
 8005270:	4658      	mov	r0, fp
 8005272:	4661      	mov	r1, ip
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	461a      	mov	r2, r3
 800527e:	4623      	mov	r3, r4
 8005280:	f7fb f80e 	bl	80002a0 <__aeabi_uldivmod>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005290:	d308      	bcc.n	80052a4 <UART_SetConfig+0x3f0>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005298:	d204      	bcs.n	80052a4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e0c1      	b.n	8005428 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	76bb      	strb	r3, [r7, #26]
 80052a8:	e0be      	b.n	8005428 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	d164      	bne.n	800537e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80052b4:	7efb      	ldrb	r3, [r7, #27]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d827      	bhi.n	800530a <UART_SetConfig+0x456>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x40c>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fc04 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80052e8:	6178      	str	r0, [r7, #20]
        break;
 80052ea:	e013      	b.n	8005314 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe fc16 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80052f0:	6178      	str	r0, [r7, #20]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <UART_SetConfig+0x5a0>)
 80052f6:	617b      	str	r3, [r7, #20]
        break;
 80052f8:	e00c      	b.n	8005314 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fe fb63 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 80052fe:	6178      	str	r0, [r7, #20]
        break;
 8005300:	e008      	b.n	8005314 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	617b      	str	r3, [r7, #20]
        break;
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	76bb      	strb	r3, [r7, #26]
        break;
 8005312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 8086 	beq.w	8005428 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <UART_SetConfig+0x59c>)
 8005322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005326:	461a      	mov	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	fbb3 f3f2 	udiv	r3, r3, r2
 800532e:	005a      	lsls	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	441a      	add	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d916      	bls.n	8005378 <UART_SetConfig+0x4c4>
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d212      	bcs.n	8005378 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f023 030f 	bic.w	r3, r3, #15
 800535a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	b29a      	uxth	r2, r3
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	4313      	orrs	r3, r2
 800536c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	89fa      	ldrh	r2, [r7, #14]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e057      	b.n	8005428 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	76bb      	strb	r3, [r7, #26]
 800537c:	e054      	b.n	8005428 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800537e:	7efb      	ldrb	r3, [r7, #27]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d828      	bhi.n	80053d6 <UART_SetConfig+0x522>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x4d8>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7fe fb9e 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80053b4:	6178      	str	r0, [r7, #20]
        break;
 80053b6:	e013      	b.n	80053e0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe fbb0 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e00f      	b.n	80053e0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b24      	ldr	r3, [pc, #144]	; (8005454 <UART_SetConfig+0x5a0>)
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	e00c      	b.n	80053e0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe fafd 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 80053ca:	6178      	str	r0, [r7, #20]
        break;
 80053cc:	e008      	b.n	80053e0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e004      	b.n	80053e0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	76bb      	strb	r3, [r7, #26]
        break;
 80053de:	bf00      	nop
    }

    if (pclk != 0U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	4a19      	ldr	r2, [pc, #100]	; (8005450 <UART_SetConfig+0x59c>)
 80053ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f0:	461a      	mov	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	441a      	add	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	b29b      	uxth	r3, r3
 800540a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d908      	bls.n	8005424 <UART_SetConfig+0x570>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d204      	bcs.n	8005424 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e001      	b.n	8005428 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005444:	7ebb      	ldrb	r3, [r7, #26]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005450:	08008a58 	.word	0x08008a58
 8005454:	00f42400 	.word	0x00f42400

08005458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01a      	beq.n	800556e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005556:	d10a      	bne.n	800556e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055ac:	f7fc faca 	bl	8001b44 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d10e      	bne.n	80055de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f82c 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e022      	b.n	8005624 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d10e      	bne.n	800560a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f816 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e00c      	b.n	8005624 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	e062      	b.n	8005704 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d05e      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fc fa7d 	bl	8001b44 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <UART_WaitOnFlagUntilTimeout+0x30>
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11d      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800566a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e045      	b.n	8005724 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02e      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d126      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056ce:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e00f      	b.n	8005724 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	d08d      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UARTEx_DisableFifoMode+0x16>
 800573e:	2302      	movs	r3, #2
 8005740:	e027      	b.n	8005792 <HAL_UARTEx_DisableFifoMode+0x66>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2224      	movs	r2, #36	; 0x24
 800574e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005770:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e02d      	b.n	8005812 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2224      	movs	r2, #36	; 0x24
 80057c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0201 	bic.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f850 	bl	8005898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800582e:	2302      	movs	r3, #2
 8005830:	e02d      	b.n	800588e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2224      	movs	r2, #36	; 0x24
 800583e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f812 	bl	8005898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80058a0:	4a2f      	ldr	r2, [pc, #188]	; (8005960 <UARTEx_SetNbDataToProcess+0xc8>)
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80058ae:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <UARTEx_SetNbDataToProcess+0xcc>)
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058b8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d108      	bne.n	80058d6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058d4:	e03d      	b.n	8005952 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058d6:	2308      	movs	r3, #8
 80058d8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058da:	2308      	movs	r3, #8
 80058dc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	0e5b      	lsrs	r3, r3, #25
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	0f5b      	lsrs	r3, r3, #29
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80058fe:	7fbb      	ldrb	r3, [r7, #30]
 8005900:	7f3a      	ldrb	r2, [r7, #28]
 8005902:	f107 0120 	add.w	r1, r7, #32
 8005906:	440a      	add	r2, r1
 8005908:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	7f3a      	ldrb	r2, [r7, #28]
 8005912:	f107 0120 	add.w	r1, r7, #32
 8005916:	440a      	add	r2, r1
 8005918:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800591c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005928:	7ffb      	ldrb	r3, [r7, #31]
 800592a:	7f7a      	ldrb	r2, [r7, #29]
 800592c:	f107 0120 	add.w	r1, r7, #32
 8005930:	440a      	add	r2, r1
 8005932:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	7f7a      	ldrb	r2, [r7, #29]
 800593c:	f107 0120 	add.w	r1, r7, #32
 8005940:	440a      	add	r2, r1
 8005942:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005946:	fb93 f3f2 	sdiv	r3, r3, r2
 800594a:	b29a      	uxth	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	080089f8 	.word	0x080089f8
 8005964:	08008a00 	.word	0x08008a00

08005968 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597a:	2b84      	cmp	r3, #132	; 0x84
 800597c:	d005      	beq.n	800598a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800597e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	3303      	adds	r3, #3
 8005988:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	607b      	str	r3, [r7, #4]
  return(result);
 80059a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80059c0:	f001 f92e 	bl	8006c20 <vTaskStartScheduler>
  
  return osOK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	bd80      	pop	{r7, pc}

080059ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059cc:	b089      	sub	sp, #36	; 0x24
 80059ce:	af04      	add	r7, sp, #16
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <osThreadCreate+0x54>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01c      	beq.n	8005a1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685c      	ldr	r4, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681d      	ldr	r5, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691e      	ldr	r6, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ffb6 	bl	8005968 <makeFreeRtosPriority>
 80059fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	9100      	str	r1, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4629      	mov	r1, r5
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 ff41 	bl	800689a <xTaskCreateStatic>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e01c      	b.n	8005a58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685c      	ldr	r4, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a2a:	b29e      	uxth	r6, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff ff98 	bl	8005968 <makeFreeRtosPriority>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	f107 030c 	add.w	r3, r7, #12
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	9200      	str	r2, [sp, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	4632      	mov	r2, r6
 8005a46:	4629      	mov	r1, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 ff80 	bl	800694e <xTaskCreate>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d001      	beq.n	8005a58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a58:	68fb      	ldr	r3, [r7, #12]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <osDelay+0x16>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	e000      	b.n	8005a7a <osDelay+0x18>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f89c 	bl	8006bb8 <vTaskDelay>
  
  return osOK;
 8005a80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f000 faae 	bl	8006002 <xQueueCreateMutexStatic>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	e003      	b.n	8005ab2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f000 fa91 	bl	8005fd2 <xQueueCreateMutex>
 8005ab0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <osMutexWait+0x18>
    return osErrorParameter;
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	e03a      	b.n	8005b4a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d103      	bne.n	8005ae8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e009      	b.n	8005afc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <osMutexWait+0x40>
      ticks = 1;
 8005af8:	2301      	movs	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005afc:	f7ff ff4c 	bl	8005998 <inHandlerMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fd1e 	bl	8006550 <xQueueReceiveFromISR>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d001      	beq.n	8005b1e <osMutexWait+0x62>
      return osErrorOS;
 8005b1a:	23ff      	movs	r3, #255	; 0xff
 8005b1c:	e015      	b.n	8005b4a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <osMutexWait+0x8c>
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <osMutexWait+0x98>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	e008      	b.n	8005b48 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fc01 	bl	8006340 <xQueueSemaphoreTake>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <osMutexWait+0x8c>
    return osErrorOS;
 8005b44:	23ff      	movs	r3, #255	; 0xff
 8005b46:	e000      	b.n	8005b4a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005b68:	f7ff ff16 	bl	8005998 <inHandlerMode>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fb57 	bl	800622c <xQueueGiveFromISR>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d001      	beq.n	8005b88 <osMutexRelease+0x30>
      return osErrorOS;
 8005b84:	23ff      	movs	r3, #255	; 0xff
 8005b86:	e017      	b.n	8005bb8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d013      	beq.n	8005bb6 <osMutexRelease+0x5e>
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <osMutexRelease+0x68>)
 8005b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	e00a      	b.n	8005bb6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa46 	bl	8006038 <xQueueGenericSend>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d001      	beq.n	8005bb6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005bb2:	23ff      	movs	r3, #255	; 0xff
 8005bb4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f103 0208 	add.w	r2, r3, #8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f103 0208 	add.w	r2, r3, #8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d103      	bne.n	8005c86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e00c      	b.n	8005ca0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	e002      	b.n	8005c94 <vListInsert+0x2e>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d2f6      	bcs.n	8005c8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6892      	ldr	r2, [r2, #8]
 8005cee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6852      	ldr	r2, [r2, #4]
 8005cf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d103      	bne.n	8005d0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	e7fe      	b.n	8005d52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005d54:	f001 feb2 	bl	8007abc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	441a      	add	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	3b01      	subs	r3, #1
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	22ff      	movs	r2, #255	; 0xff
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d114      	bne.n	8005dd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01a      	beq.n	8005de8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3310      	adds	r3, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f970 	bl	800709c <xTaskRemoveFromEventList>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d012      	beq.n	8005de8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <xQueueGenericReset+0xcc>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	e009      	b.n	8005de8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fef3 	bl	8005bc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3324      	adds	r3, #36	; 0x24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff feee 	bl	8005bc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 fe96 	bl	8007b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dec:	2301      	movs	r3, #1
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	; 0x38
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <xQueueGenericCreateStatic+0x28>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	e7fe      	b.n	8005e22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <xQueueGenericCreateStatic+0x42>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <xQueueGenericCreateStatic+0x4e>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <xQueueGenericCreateStatic+0x52>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xQueueGenericCreateStatic+0x54>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <xQueueGenericCreateStatic+0x6c>
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	e7fe      	b.n	8005e66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <xQueueGenericCreateStatic+0x78>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <xQueueGenericCreateStatic+0x7c>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <xQueueGenericCreateStatic+0x7e>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <xQueueGenericCreateStatic+0x96>
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e92:	2348      	movs	r3, #72	; 0x48
 8005e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b48      	cmp	r3, #72	; 0x48
 8005e9a:	d009      	beq.n	8005eb0 <xQueueGenericCreateStatic+0xb4>
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e7fe      	b.n	8005eae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005eb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f844 	bl	8005f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3730      	adds	r7, #48	; 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b08a      	sub	sp, #40	; 0x28
 8005ee6:	af02      	add	r7, sp, #8
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <xQueueGenericCreate+0x28>
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	e004      	b.n	8005f20 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3348      	adds	r3, #72	; 0x48
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fee3 	bl	8007cf0 <pvPortMalloc>
 8005f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d011      	beq.n	8005f56 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	3348      	adds	r3, #72	; 0x48
 8005f3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f44:	79fa      	ldrb	r2, [r7, #7]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f805 	bl	8005f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f56:	69bb      	ldr	r3, [r7, #24]
	}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f8e:	2101      	movs	r1, #1
 8005f90:	69b8      	ldr	r0, [r7, #24]
 8005f92:	f7ff fecb 	bl	8005d2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f837 	bl	8006038 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6939      	ldr	r1, [r7, #16]
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	f7ff ff79 	bl	8005ee2 <xQueueGenericCreate>
 8005ff0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ffd3 	bl	8005f9e <prvInitialiseMutex>

		return xNewQueue;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
	}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006002:	b580      	push	{r7, lr}
 8006004:	b088      	sub	sp, #32
 8006006:	af02      	add	r7, sp, #8
 8006008:	4603      	mov	r3, r0
 800600a:	6039      	str	r1, [r7, #0]
 800600c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800600e:	2301      	movs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	6939      	ldr	r1, [r7, #16]
 8006020:	6978      	ldr	r0, [r7, #20]
 8006022:	f7ff feeb 	bl	8005dfc <xQueueGenericCreateStatic>
 8006026:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ffb8 	bl	8005f9e <prvInitialiseMutex>

		return xNewQueue;
 800602e:	68fb      	ldr	r3, [r7, #12]
	}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006046:	2300      	movs	r3, #0
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <xQueueGenericSend+0x30>
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 8006066:	e7fe      	b.n	8006066 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueGenericSend+0x3e>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueGenericSend+0x42>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericSend+0x44>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <xQueueGenericSend+0x5c>
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	e7fe      	b.n	8006092 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d103      	bne.n	80060a2 <xQueueGenericSend+0x6a>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <xQueueGenericSend+0x6e>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <xQueueGenericSend+0x70>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <xQueueGenericSend+0x88>
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e7fe      	b.n	80060be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c0:	f001 f9a2 	bl	8007408 <xTaskGetSchedulerState>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xQueueGenericSend+0x98>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <xQueueGenericSend+0x9c>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <xQueueGenericSend+0x9e>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <xQueueGenericSend+0xb6>
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ee:	f001 fce5 	bl	8007abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <xQueueGenericSend+0xcc>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d129      	bne.n	8006158 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610a:	f000 fab6 	bl	800667a <prvCopyDataToQueue>
 800610e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f000 ffbd 	bl	800709c <xTaskRemoveFromEventList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d013      	beq.n	8006150 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006128:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <xQueueGenericSend+0x1f0>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	e00a      	b.n	8006150 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006140:	4b39      	ldr	r3, [pc, #228]	; (8006228 <xQueueGenericSend+0x1f0>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006150:	f001 fce2 	bl	8007b18 <vPortExitCritical>
				return pdPASS;
 8006154:	2301      	movs	r3, #1
 8006156:	e063      	b.n	8006220 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800615e:	f001 fcdb 	bl	8007b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006162:	2300      	movs	r3, #0
 8006164:	e05c      	b.n	8006220 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fff5 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800617a:	f001 fccd 	bl	8007b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800617e:	f000 fdad 	bl	8006cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006182:	f001 fc9b 	bl	8007abc <vPortEnterCritical>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618c:	b25b      	sxtb	r3, r3
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d103      	bne.n	800619c <xQueueGenericSend+0x164>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSend+0x17a>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b2:	f001 fcb1 	bl	8007b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061b6:	1d3a      	adds	r2, r7, #4
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 ffe4 	bl	800718c <xTaskCheckForTimeOut>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d124      	bne.n	8006214 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061cc:	f000 fb4d 	bl	800686a <prvIsQueueFull>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	3310      	adds	r3, #16
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 ff38 	bl	8007054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e6:	f000 fad8 	bl	800679a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061ea:	f000 fd85 	bl	8006cf8 <xTaskResumeAll>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af7c 	bne.w	80060ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <xQueueGenericSend+0x1f0>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	e772      	b.n	80060ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620a:	f000 fac6 	bl	800679a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800620e:	f000 fd73 	bl	8006cf8 <xTaskResumeAll>
 8006212:	e76c      	b.n	80060ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006216:	f000 fac0 	bl	800679a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621a:	f000 fd6d 	bl	8006cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800621e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006220:	4618      	mov	r0, r3
 8006222:	3738      	adds	r7, #56	; 0x38
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	; 0x38
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <xQueueGiveFromISR+0x28>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	e7fe      	b.n	8006252 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <xQueueGiveFromISR+0x44>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	61fb      	str	r3, [r7, #28]
 800626e:	e7fe      	b.n	800626e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <xQueueGiveFromISR+0x54>
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <xQueueGiveFromISR+0x58>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <xQueueGiveFromISR+0x5a>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <xQueueGiveFromISR+0x72>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e7fe      	b.n	800629c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800629e:	f001 fce9 	bl	8007c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062a2:	f3ef 8211 	mrs	r2, BASEPRI
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	617a      	str	r2, [r7, #20]
 80062b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d22b      	bcs.n	8006326 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d112      	bne.n	8006310 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	3324      	adds	r3, #36	; 0x24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fed0 	bl	800709c <xTaskRemoveFromEventList>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e007      	b.n	8006320 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006314:	3301      	adds	r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	b25a      	sxtb	r2, r3
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006320:	2301      	movs	r3, #1
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	e001      	b.n	800632a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006336:	4618      	mov	r0, r3
 8006338:	3738      	adds	r7, #56	; 0x38
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	e7fe      	b.n	800636e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <xQueueSemaphoreTake+0x4c>
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	e7fe      	b.n	800638a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800638c:	f001 f83c 	bl	8007408 <xTaskGetSchedulerState>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <xQueueSemaphoreTake+0x5c>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <xQueueSemaphoreTake+0x60>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <xQueueSemaphoreTake+0x62>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <xQueueSemaphoreTake+0x7a>
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e7fe      	b.n	80063b8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ba:	f001 fb7f 	bl	8007abc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d024      	beq.n	8006414 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	1e5a      	subs	r2, r3, #1
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063da:	f001 f9cf 	bl	800777c <pvTaskIncrementMutexHeldCount>
 80063de:	4602      	mov	r2, r0
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00f      	beq.n	800640c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	3310      	adds	r3, #16
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fe53 	bl	800709c <xTaskRemoveFromEventList>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063fc:	4b53      	ldr	r3, [pc, #332]	; (800654c <xQueueSemaphoreTake+0x20c>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800640c:	f001 fb84 	bl	8007b18 <vPortExitCritical>
				return pdPASS;
 8006410:	2301      	movs	r3, #1
 8006412:	e096      	b.n	8006542 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d110      	bne.n	800643c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <xQueueSemaphoreTake+0xf4>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e7fe      	b.n	8006432 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006434:	f001 fb70 	bl	8007b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006438:	2300      	movs	r3, #0
 800643a:	e082      	b.n	8006542 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fe8a 	bl	8007160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006450:	f001 fb62 	bl	8007b18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006454:	f000 fc42 	bl	8006cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006458:	f001 fb30 	bl	8007abc <vPortEnterCritical>
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006462:	b25b      	sxtb	r3, r3
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d103      	bne.n	8006472 <xQueueSemaphoreTake+0x132>
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006478:	b25b      	sxtb	r3, r3
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d103      	bne.n	8006488 <xQueueSemaphoreTake+0x148>
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006488:	f001 fb46 	bl	8007b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800648c:	463a      	mov	r2, r7
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fe79 	bl	800718c <xTaskCheckForTimeOut>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d132      	bne.n	8006506 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064a2:	f000 f9cc 	bl	800683e <prvIsQueueEmpty>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d026      	beq.n	80064fa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80064b4:	f001 fb02 	bl	8007abc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ffc1 	bl	8007444 <xTaskPriorityInherit>
 80064c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064c4:	f001 fb28 	bl	8007b18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	3324      	adds	r3, #36	; 0x24
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fdbf 	bl	8007054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d8:	f000 f95f 	bl	800679a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064dc:	f000 fc0c 	bl	8006cf8 <xTaskResumeAll>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f47f af69 	bne.w	80063ba <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <xQueueSemaphoreTake+0x20c>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	e75f      	b.n	80063ba <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064fc:	f000 f94d 	bl	800679a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006500:	f000 fbfa 	bl	8006cf8 <xTaskResumeAll>
 8006504:	e759      	b.n	80063ba <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006508:	f000 f947 	bl	800679a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800650c:	f000 fbf4 	bl	8006cf8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006512:	f000 f994 	bl	800683e <prvIsQueueEmpty>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	f43f af4e 	beq.w	80063ba <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006524:	f001 faca 	bl	8007abc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652a:	f000 f88e 	bl	800664a <prvGetDisinheritPriorityAfterTimeout>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f888 	bl	800764c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800653c:	f001 faec 	bl	8007b18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3738      	adds	r7, #56	; 0x38
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <xQueueReceiveFromISR+0x2a>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	e7fe      	b.n	8006578 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <xQueueReceiveFromISR+0x38>
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <xQueueReceiveFromISR+0x3c>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <xQueueReceiveFromISR+0x3e>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <xQueueReceiveFromISR+0x56>
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e7fe      	b.n	80065a4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a6:	f001 fb65 	bl	8007c74 <vPortValidateInterruptPriority>
	__asm volatile
 80065aa:	f3ef 8211 	mrs	r2, BASEPRI
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	61ba      	str	r2, [r7, #24]
 80065c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02f      	beq.n	8006632 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e0:	f000 f8b5 	bl	800674e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	1e5a      	subs	r2, r3, #1
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d112      	bne.n	800661c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	3310      	adds	r3, #16
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fd4a 	bl	800709c <xTaskRemoveFromEventList>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e007      	b.n	800662c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800661c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006620:	3301      	adds	r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	b25a      	sxtb	r2, r3
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800662c:	2301      	movs	r3, #1
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	e001      	b.n	8006636 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006632:	2300      	movs	r3, #0
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	613b      	str	r3, [r7, #16]
	__asm volatile
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006642:	4618      	mov	r0, r3
 8006644:	3738      	adds	r7, #56	; 0x38
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d006      	beq.n	8006668 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1c3 0307 	rsb	r3, r3, #7
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e001      	b.n	800666c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800666c:	68fb      	ldr	r3, [r7, #12]
	}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d14d      	bne.n	800673c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 ff4d 	bl	8007544 <xTaskPriorityDisinherit>
 80066aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	e043      	b.n	800673c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d119      	bne.n	80066ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6858      	ldr	r0, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	461a      	mov	r2, r3
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	f001 fd13 	bl	80080f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d32b      	bcc.n	800673c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	e026      	b.n	800673c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68d8      	ldr	r0, [r3, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	461a      	mov	r2, r3
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	f001 fcf9 	bl	80080f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	425b      	negs	r3, r3
 8006708:	441a      	add	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d207      	bcs.n	800672a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	425b      	negs	r3, r3
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d105      	bne.n	800673c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3b01      	subs	r3, #1
 800673a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006744:	697b      	ldr	r3, [r7, #20]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d018      	beq.n	8006792 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	441a      	add	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	d303      	bcc.n	8006782 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68d9      	ldr	r1, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	461a      	mov	r2, r3
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f001 fcaf 	bl	80080f0 <memcpy>
	}
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a2:	f001 f98b 	bl	8007abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ae:	e011      	b.n	80067d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fc6d 	bl	800709c <xTaskRemoveFromEventList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067c8:	f000 fd40 	bl	800724c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dce9      	bgt.n	80067b0 <prvUnlockQueue+0x16>
 80067dc:	e000      	b.n	80067e0 <prvUnlockQueue+0x46>
					break;
 80067de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	22ff      	movs	r2, #255	; 0xff
 80067e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067e8:	f001 f996 	bl	8007b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ec:	f001 f966 	bl	8007abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067f8:	e011      	b.n	800681e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d012      	beq.n	8006828 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3310      	adds	r3, #16
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fc48 	bl	800709c <xTaskRemoveFromEventList>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006812:	f000 fd1b 	bl	800724c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	3b01      	subs	r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dce9      	bgt.n	80067fa <prvUnlockQueue+0x60>
 8006826:	e000      	b.n	800682a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006828:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006832:	f001 f971 	bl	8007b18 <vPortExitCritical>
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006846:	f001 f939 	bl	8007abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	2b00      	cmp	r3, #0
 8006850:	d102      	bne.n	8006858 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006852:	2301      	movs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e001      	b.n	800685c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685c:	f001 f95c 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006872:	f001 f923 	bl	8007abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	429a      	cmp	r2, r3
 8006880:	d102      	bne.n	8006888 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e001      	b.n	800688c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688c:	f001 f944 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 8006890:	68fb      	ldr	r3, [r7, #12]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800689a:	b580      	push	{r7, lr}
 800689c:	b08e      	sub	sp, #56	; 0x38
 800689e:	af04      	add	r7, sp, #16
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
 80068a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <xTaskCreateStatic+0x28>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	e7fe      	b.n	80068c0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <xTaskCreateStatic+0x42>
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	e7fe      	b.n	80068da <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068dc:	2354      	movs	r3, #84	; 0x54
 80068de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b54      	cmp	r3, #84	; 0x54
 80068e4:	d009      	beq.n	80068fa <xTaskCreateStatic+0x60>
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e7fe      	b.n	80068f8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01e      	beq.n	8006940 <xTaskCreateStatic+0xa6>
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01b      	beq.n	8006940 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006910:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2202      	movs	r2, #2
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800691a:	2300      	movs	r3, #0
 800691c:	9303      	str	r3, [sp, #12]
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	9302      	str	r3, [sp, #8]
 8006922:	f107 0314 	add.w	r3, r7, #20
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f850 	bl	80069d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800693a:	f000 f8d3 	bl	8006ae4 <prvAddNewTaskToReadyList>
 800693e:	e001      	b.n	8006944 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006944:	697b      	ldr	r3, [r7, #20]
	}
 8006946:	4618      	mov	r0, r3
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08c      	sub	sp, #48	; 0x30
 8006952:	af04      	add	r7, sp, #16
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f9c4 	bl	8007cf0 <pvPortMalloc>
 8006968:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006970:	2054      	movs	r0, #84	; 0x54
 8006972:	f001 f9bd 	bl	8007cf0 <pvPortMalloc>
 8006976:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
 8006984:	e005      	b.n	8006992 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f001 fa74 	bl	8007e74 <vPortFree>
 800698c:	e001      	b.n	8006992 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d017      	beq.n	80069c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f80e 	bl	80069d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069bc:	69f8      	ldr	r0, [r7, #28]
 80069be:	f000 f891 	bl	8006ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069c2:	2301      	movs	r3, #1
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e002      	b.n	80069ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295
 80069cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069ce:	69bb      	ldr	r3, [r7, #24]
	}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	3b01      	subs	r3, #1
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <prvInitialiseNewTask+0x46>
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e7fe      	b.n	8006a1c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01f      	beq.n	8006a64 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e012      	b.n	8006a50 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	7819      	ldrb	r1, [r3, #0]
 8006a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	3334      	adds	r3, #52	; 0x34
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b0f      	cmp	r3, #15
 8006a54:	d9e9      	bls.n	8006a2a <prvInitialiseNewTask+0x52>
 8006a56:	e000      	b.n	8006a5a <prvInitialiseNewTask+0x82>
			{
				break;
 8006a58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a62:	e003      	b.n	8006a6c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2b06      	cmp	r3, #6
 8006a70:	d901      	bls.n	8006a76 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a72:	2306      	movs	r3, #6
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2200      	movs	r2, #0
 8006a86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff f8b9 	bl	8005c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	3318      	adds	r3, #24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff f8b4 	bl	8005c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	f1c3 0207 	rsb	r2, r3, #7
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f000 fed3 	bl	8007870 <pxPortInitialiseStack>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006adc:	bf00      	nop
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aec:	f000 ffe6 	bl	8007abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006af0:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <prvAddNewTaskToReadyList+0xb8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a29      	ldr	r2, [pc, #164]	; (8006b9c <prvAddNewTaskToReadyList+0xb8>)
 8006af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <prvAddNewTaskToReadyList+0xbc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b02:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <prvAddNewTaskToReadyList+0xbc>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b08:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <prvAddNewTaskToReadyList+0xb8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d110      	bne.n	8006b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b10:	f000 fbc0 	bl	8007294 <prvInitialiseTaskLists>
 8006b14:	e00d      	b.n	8006b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b16:	4b23      	ldr	r3, [pc, #140]	; (8006ba4 <prvAddNewTaskToReadyList+0xc0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b1e:	4b20      	ldr	r3, [pc, #128]	; (8006ba0 <prvAddNewTaskToReadyList+0xbc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d802      	bhi.n	8006b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <prvAddNewTaskToReadyList+0xbc>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <prvAddNewTaskToReadyList+0xc4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <prvAddNewTaskToReadyList+0xc4>)
 8006b3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	2201      	movs	r2, #1
 8006b42:	409a      	lsls	r2, r3
 8006b44:	4b19      	ldr	r3, [pc, #100]	; (8006bac <prvAddNewTaskToReadyList+0xc8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	4a18      	ldr	r2, [pc, #96]	; (8006bac <prvAddNewTaskToReadyList+0xc8>)
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <prvAddNewTaskToReadyList+0xcc>)
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7ff f85a 	bl	8005c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b6a:	f000 ffd5 	bl	8007b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <prvAddNewTaskToReadyList+0xc0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <prvAddNewTaskToReadyList+0xbc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d207      	bcs.n	8006b94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <prvAddNewTaskToReadyList+0xd0>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000047c 	.word	0x2000047c
 8006ba0:	2000037c 	.word	0x2000037c
 8006ba4:	20000488 	.word	0x20000488
 8006ba8:	20000498 	.word	0x20000498
 8006bac:	20000484 	.word	0x20000484
 8006bb0:	20000380 	.word	0x20000380
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <vTaskDelay+0x60>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <vTaskDelay+0x2e>
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	e7fe      	b.n	8006be4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006be6:	f000 f879 	bl	8006cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fdd9 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bf2:	f000 f881 	bl	8006cf8 <xTaskResumeAll>
 8006bf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d107      	bne.n	8006c0e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <vTaskDelay+0x64>)
 8006c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200004a4 	.word	0x200004a4
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c2e:	463a      	mov	r2, r7
 8006c30:	1d39      	adds	r1, r7, #4
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fa f862 	bl	8000d00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	9202      	str	r2, [sp, #8]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	491d      	ldr	r1, [pc, #116]	; (8006cc4 <vTaskStartScheduler+0xa4>)
 8006c50:	481d      	ldr	r0, [pc, #116]	; (8006cc8 <vTaskStartScheduler+0xa8>)
 8006c52:	f7ff fe22 	bl	800689a <xTaskCreateStatic>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <vTaskStartScheduler+0xac>)
 8006c5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <vTaskStartScheduler+0xac>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e001      	b.n	8006c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d115      	bne.n	8006ca0 <vTaskStartScheduler+0x80>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <vTaskStartScheduler+0xb0>)
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c8e:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <vTaskStartScheduler+0xb4>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c94:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <vTaskStartScheduler+0xb8>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c9a:	f000 fe71 	bl	8007980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c9e:	e00d      	b.n	8006cbc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d109      	bne.n	8006cbc <vTaskStartScheduler+0x9c>
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e7fe      	b.n	8006cba <vTaskStartScheduler+0x9a>
}
 8006cbc:	bf00      	nop
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08008a08 	.word	0x08008a08
 8006cc8:	08007265 	.word	0x08007265
 8006ccc:	200004a0 	.word	0x200004a0
 8006cd0:	2000049c 	.word	0x2000049c
 8006cd4:	20000488 	.word	0x20000488
 8006cd8:	20000480 	.word	0x20000480

08006cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a03      	ldr	r2, [pc, #12]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cea:	bf00      	nop
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	200004a4 	.word	0x200004a4

08006cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d06:	4b41      	ldr	r3, [pc, #260]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <xTaskResumeAll+0x2a>
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	e7fe      	b.n	8006d20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d22:	f000 fecb 	bl	8007abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d26:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4a37      	ldr	r2, [pc, #220]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d30:	4b36      	ldr	r3, [pc, #216]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d161      	bne.n	8006dfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d38:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <xTaskResumeAll+0x118>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05d      	beq.n	8006dfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d40:	e02e      	b.n	8006da0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe ffc2 	bl	8005cd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe ffbd 	bl	8005cd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	2201      	movs	r2, #1
 8006d64:	409a      	lsls	r2, r3
 8006d66:	4b2c      	ldr	r3, [pc, #176]	; (8006e18 <xTaskResumeAll+0x120>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <xTaskResumeAll+0x120>)
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4a27      	ldr	r2, [pc, #156]	; (8006e1c <xTaskResumeAll+0x124>)
 8006d7e:	441a      	add	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7fe ff49 	bl	8005c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d90:	4b23      	ldr	r3, [pc, #140]	; (8006e20 <xTaskResumeAll+0x128>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006d9a:	4b22      	ldr	r3, [pc, #136]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da0:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1cc      	bne.n	8006d42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dae:	f000 fb0b 	bl	80073c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006db2:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <xTaskResumeAll+0x130>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d010      	beq.n	8006de0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dbe:	f000 f837 	bl	8006e30 <xTaskIncrementTick>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006dc8:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f1      	bne.n	8006dbe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <xTaskResumeAll+0x130>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d009      	beq.n	8006dfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006de8:	2301      	movs	r3, #1
 8006dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <xTaskResumeAll+0x134>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dfc:	f000 fe8c 	bl	8007b18 <vPortExitCritical>

	return xAlreadyYielded;
 8006e00:	68bb      	ldr	r3, [r7, #8]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200004a4 	.word	0x200004a4
 8006e10:	2000047c 	.word	0x2000047c
 8006e14:	2000043c 	.word	0x2000043c
 8006e18:	20000484 	.word	0x20000484
 8006e1c:	20000380 	.word	0x20000380
 8006e20:	2000037c 	.word	0x2000037c
 8006e24:	20000490 	.word	0x20000490
 8006e28:	2000048c 	.word	0x2000048c
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3a:	4b4e      	ldr	r3, [pc, #312]	; (8006f74 <xTaskIncrementTick+0x144>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 8087 	bne.w	8006f52 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e44:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <xTaskIncrementTick+0x148>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e4c:	4a4a      	ldr	r2, [pc, #296]	; (8006f78 <xTaskIncrementTick+0x148>)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11f      	bne.n	8006e98 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e58:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <xTaskIncrementTick+0x46>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	e7fe      	b.n	8006e74 <xTaskIncrementTick+0x44>
 8006e76:	4b41      	ldr	r3, [pc, #260]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <xTaskIncrementTick+0x150>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a3e      	ldr	r2, [pc, #248]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	4a3e      	ldr	r2, [pc, #248]	; (8006f80 <xTaskIncrementTick+0x150>)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b3e      	ldr	r3, [pc, #248]	; (8006f84 <xTaskIncrementTick+0x154>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <xTaskIncrementTick+0x154>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	f000 fa98 	bl	80073c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e98:	4b3b      	ldr	r3, [pc, #236]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d348      	bcc.n	8006f34 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	601a      	str	r2, [r3, #0]
					break;
 8006eb4:	e03e      	b.n	8006f34 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb6:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d203      	bcs.n	8006ed6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ece:	4a2e      	ldr	r2, [pc, #184]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ed4:	e02e      	b.n	8006f34 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fefc 	bl	8005cd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3318      	adds	r3, #24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fef3 	bl	8005cd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <xTaskIncrementTick+0x15c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <xTaskIncrementTick+0x15c>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <xTaskIncrementTick+0x160>)
 8006f12:	441a      	add	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fe fe7f 	bl	8005c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <xTaskIncrementTick+0x164>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3b9      	bcc.n	8006ea2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	e7b6      	b.n	8006ea2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f34:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <xTaskIncrementTick+0x164>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	4915      	ldr	r1, [pc, #84]	; (8006f90 <xTaskIncrementTick+0x160>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d907      	bls.n	8006f5c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e004      	b.n	8006f5c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f52:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <xTaskIncrementTick+0x168>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	4a0f      	ldr	r2, [pc, #60]	; (8006f98 <xTaskIncrementTick+0x168>)
 8006f5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <xTaskIncrementTick+0x16c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f68:	697b      	ldr	r3, [r7, #20]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200004a4 	.word	0x200004a4
 8006f78:	20000480 	.word	0x20000480
 8006f7c:	20000434 	.word	0x20000434
 8006f80:	20000438 	.word	0x20000438
 8006f84:	20000494 	.word	0x20000494
 8006f88:	2000049c 	.word	0x2000049c
 8006f8c:	20000484 	.word	0x20000484
 8006f90:	20000380 	.word	0x20000380
 8006f94:	2000037c 	.word	0x2000037c
 8006f98:	2000048c 	.word	0x2000048c
 8006f9c:	20000490 	.word	0x20000490

08006fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa6:	4b26      	ldr	r3, [pc, #152]	; (8007040 <vTaskSwitchContext+0xa0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <vTaskSwitchContext+0xa4>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fb4:	e03e      	b.n	8007034 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006fb6:	4b23      	ldr	r3, [pc, #140]	; (8007044 <vTaskSwitchContext+0xa4>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b22      	ldr	r3, [pc, #136]	; (8007048 <vTaskSwitchContext+0xa8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	f1c3 031f 	rsb	r3, r3, #31
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	491e      	ldr	r1, [pc, #120]	; (800704c <vTaskSwitchContext+0xac>)
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <vTaskSwitchContext+0x5a>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e7fe      	b.n	8006ff8 <vTaskSwitchContext+0x58>
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <vTaskSwitchContext+0xac>)
 8007006:	4413      	add	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	605a      	str	r2, [r3, #4]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3308      	adds	r3, #8
 800701c:	429a      	cmp	r2, r3
 800701e:	d104      	bne.n	800702a <vTaskSwitchContext+0x8a>
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4a07      	ldr	r2, [pc, #28]	; (8007050 <vTaskSwitchContext+0xb0>)
 8007032:	6013      	str	r3, [r2, #0]
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	200004a4 	.word	0x200004a4
 8007044:	20000490 	.word	0x20000490
 8007048:	20000484 	.word	0x20000484
 800704c:	20000380 	.word	0x20000380
 8007050:	2000037c 	.word	0x2000037c

08007054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <vTaskPlaceOnEventList+0x24>
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	e7fe      	b.n	8007076 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <vTaskPlaceOnEventList+0x44>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3318      	adds	r3, #24
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe fdf0 	bl	8005c66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007086:	2101      	movs	r1, #1
 8007088:	6838      	ldr	r0, [r7, #0]
 800708a:	f000 fb8b 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2000037c 	.word	0x2000037c

0800709c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <xTaskRemoveFromEventList+0x2a>
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e7fe      	b.n	80070c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3318      	adds	r3, #24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fe04 	bl	8005cd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <xTaskRemoveFromEventList+0xac>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11c      	bne.n	8007112 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fdfb 	bl	8005cd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	2201      	movs	r2, #1
 80070e8:	409a      	lsls	r2, r3
 80070ea:	4b18      	ldr	r3, [pc, #96]	; (800714c <xTaskRemoveFromEventList+0xb0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	4a16      	ldr	r2, [pc, #88]	; (800714c <xTaskRemoveFromEventList+0xb0>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <xTaskRemoveFromEventList+0xb4>)
 8007102:	441a      	add	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe fd87 	bl	8005c1e <vListInsertEnd>
 8007110:	e005      	b.n	800711e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3318      	adds	r3, #24
 8007116:	4619      	mov	r1, r3
 8007118:	480e      	ldr	r0, [pc, #56]	; (8007154 <xTaskRemoveFromEventList+0xb8>)
 800711a:	f7fe fd80 	bl	8005c1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <xTaskRemoveFromEventList+0xbc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	429a      	cmp	r2, r3
 800712a:	d905      	bls.n	8007138 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <xTaskRemoveFromEventList+0xc0>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e001      	b.n	800713c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	200004a4 	.word	0x200004a4
 800714c:	20000484 	.word	0x20000484
 8007150:	20000380 	.word	0x20000380
 8007154:	2000043c 	.word	0x2000043c
 8007158:	2000037c 	.word	0x2000037c
 800715c:	20000490 	.word	0x20000490

08007160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <vTaskInternalSetTimeOutState+0x24>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <vTaskInternalSetTimeOutState+0x28>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000494 	.word	0x20000494
 8007188:	20000480 	.word	0x20000480

0800718c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <xTaskCheckForTimeOut+0x24>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	e7fe      	b.n	80071ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <xTaskCheckForTimeOut+0x3e>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e7fe      	b.n	80071c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071ca:	f000 fc77 	bl	8007abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ce:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <xTaskCheckForTimeOut+0xb8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d102      	bne.n	80071ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	e023      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <xTaskCheckForTimeOut+0xbc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d007      	beq.n	800720a <xTaskCheckForTimeOut+0x7e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e015      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d20b      	bcs.n	800722c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff9d 	bl	8007160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e004      	b.n	8007236 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f000 fc6f 	bl	8007b18 <vPortExitCritical>

	return xReturn;
 800723a:	69fb      	ldr	r3, [r7, #28]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000480 	.word	0x20000480
 8007248:	20000494 	.word	0x20000494

0800724c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <vTaskMissedYield+0x14>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	20000490 	.word	0x20000490

08007264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800726c:	f000 f852 	bl	8007314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <prvIdleTask+0x28>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d9f9      	bls.n	800726c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <prvIdleTask+0x2c>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007288:	e7f0      	b.n	800726c <prvIdleTask+0x8>
 800728a:	bf00      	nop
 800728c:	20000380 	.word	0x20000380
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e00c      	b.n	80072ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <prvInitialiseTaskLists+0x60>)
 80072ac:	4413      	add	r3, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fc88 	bl	8005bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3301      	adds	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d9ef      	bls.n	80072a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072c2:	f7fe fc7f 	bl	8005bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072c8:	f7fe fc7c 	bl	8005bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072cc:	480c      	ldr	r0, [pc, #48]	; (8007300 <prvInitialiseTaskLists+0x6c>)
 80072ce:	f7fe fc79 	bl	8005bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072d2:	480c      	ldr	r0, [pc, #48]	; (8007304 <prvInitialiseTaskLists+0x70>)
 80072d4:	f7fe fc76 	bl	8005bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <prvInitialiseTaskLists+0x74>)
 80072da:	f7fe fc73 	bl	8005bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <prvInitialiseTaskLists+0x78>)
 80072e0:	4a05      	ldr	r2, [pc, #20]	; (80072f8 <prvInitialiseTaskLists+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <prvInitialiseTaskLists+0x7c>)
 80072e6:	4a05      	ldr	r2, [pc, #20]	; (80072fc <prvInitialiseTaskLists+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000380 	.word	0x20000380
 80072f8:	2000040c 	.word	0x2000040c
 80072fc:	20000420 	.word	0x20000420
 8007300:	2000043c 	.word	0x2000043c
 8007304:	20000450 	.word	0x20000450
 8007308:	20000468 	.word	0x20000468
 800730c:	20000434 	.word	0x20000434
 8007310:	20000438 	.word	0x20000438

08007314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800731a:	e019      	b.n	8007350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800731c:	f000 fbce 	bl	8007abc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <prvCheckTasksWaitingTermination+0x4c>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fcd3 	bl	8005cd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <prvCheckTasksWaitingTermination+0x50>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3b01      	subs	r3, #1
 8007338:	4a0a      	ldr	r2, [pc, #40]	; (8007364 <prvCheckTasksWaitingTermination+0x50>)
 800733a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007346:	f000 fbe7 	bl	8007b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f80e 	bl	800736c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <prvCheckTasksWaitingTermination+0x54>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e1      	bne.n	800731c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000450 	.word	0x20000450
 8007364:	2000047c 	.word	0x2000047c
 8007368:	20000464 	.word	0x20000464

0800736c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fd76 	bl	8007e74 <vPortFree>
				vPortFree( pxTCB );
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fd73 	bl	8007e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800738e:	e017      	b.n	80073c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007396:	2b01      	cmp	r3, #1
 8007398:	d103      	bne.n	80073a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fd6a 	bl	8007e74 <vPortFree>
	}
 80073a0:	e00e      	b.n	80073c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d009      	beq.n	80073c0 <prvDeleteTCB+0x54>
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e7fe      	b.n	80073be <prvDeleteTCB+0x52>
	}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <prvResetNextTaskUnblockTime+0x38>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <prvResetNextTaskUnblockTime+0x3c>)
 80073da:	f04f 32ff 	mov.w	r2, #4294967295
 80073de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073e0:	e008      	b.n	80073f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvResetNextTaskUnblockTime+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvResetNextTaskUnblockTime+0x3c>)
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000434 	.word	0x20000434
 8007404:	2000049c 	.word	0x2000049c

08007408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <xTaskGetSchedulerState+0x34>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007416:	2301      	movs	r3, #1
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	e008      	b.n	800742e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741c:	4b08      	ldr	r3, [pc, #32]	; (8007440 <xTaskGetSchedulerState+0x38>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007424:	2302      	movs	r3, #2
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e001      	b.n	800742e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800742a:	2300      	movs	r3, #0
 800742c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800742e:	687b      	ldr	r3, [r7, #4]
	}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000488 	.word	0x20000488
 8007440:	200004a4 	.word	0x200004a4

08007444 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d069      	beq.n	800752e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4b36      	ldr	r3, [pc, #216]	; (8007538 <xTaskPriorityInherit+0xf4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	429a      	cmp	r2, r3
 8007466:	d259      	bcs.n	800751c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	db06      	blt.n	800747e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007470:	4b31      	ldr	r3, [pc, #196]	; (8007538 <xTaskPriorityInherit+0xf4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	f1c3 0207 	rsb	r2, r3, #7
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6959      	ldr	r1, [r3, #20]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4a2b      	ldr	r2, [pc, #172]	; (800753c <xTaskPriorityInherit+0xf8>)
 8007490:	4413      	add	r3, r2
 8007492:	4299      	cmp	r1, r3
 8007494:	d13a      	bne.n	800750c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3304      	adds	r3, #4
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fc1c 	bl	8005cd8 <uxListRemove>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d115      	bne.n	80074d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	4924      	ldr	r1, [pc, #144]	; (800753c <xTaskPriorityInherit+0xf8>)
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xTaskPriorityInherit+0x8e>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	2201      	movs	r2, #1
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43da      	mvns	r2, r3
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <xTaskPriorityInherit+0xfc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4013      	ands	r3, r2
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <xTaskPriorityInherit+0xfc>)
 80074d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <xTaskPriorityInherit+0xf4>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	2201      	movs	r2, #1
 80074e2:	409a      	lsls	r2, r3
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <xTaskPriorityInherit+0xfc>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	4a15      	ldr	r2, [pc, #84]	; (8007540 <xTaskPriorityInherit+0xfc>)
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a10      	ldr	r2, [pc, #64]	; (800753c <xTaskPriorityInherit+0xf8>)
 80074fc:	441a      	add	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f7fe fb8a 	bl	8005c1e <vListInsertEnd>
 800750a:	e004      	b.n	8007516 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <xTaskPriorityInherit+0xf4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007516:	2301      	movs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e008      	b.n	800752e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <xTaskPriorityInherit+0xf4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	429a      	cmp	r2, r3
 8007528:	d201      	bcs.n	800752e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800752a:	2301      	movs	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800752e:	68fb      	ldr	r3, [r7, #12]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	2000037c 	.word	0x2000037c
 800753c:	20000380 	.word	0x20000380
 8007540:	20000484 	.word	0x20000484

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d06c      	beq.n	8007634 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b39      	ldr	r3, [pc, #228]	; (8007640 <xTaskPriorityDisinherit+0xfc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d009      	beq.n	8007578 <xTaskPriorityDisinherit+0x34>
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e7fe      	b.n	8007576 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <xTaskPriorityDisinherit+0x50>
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	e7fe      	b.n	8007592 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007598:	1e5a      	subs	r2, r3, #1
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d044      	beq.n	8007634 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d140      	bne.n	8007634 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fb8e 	bl	8005cd8 <uxListRemove>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d115      	bne.n	80075ee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	491f      	ldr	r1, [pc, #124]	; (8007644 <xTaskPriorityDisinherit+0x100>)
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xTaskPriorityDisinherit+0xaa>
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <xTaskPriorityDisinherit+0x104>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <xTaskPriorityDisinherit+0x104>)
 80075ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f1c3 0207 	rsb	r2, r3, #7
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	2201      	movs	r2, #1
 8007608:	409a      	lsls	r2, r3
 800760a:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <xTaskPriorityDisinherit+0x104>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <xTaskPriorityDisinherit+0x104>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <xTaskPriorityDisinherit+0x100>)
 8007622:	441a      	add	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7fe faf7 	bl	8005c1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007634:	697b      	ldr	r3, [r7, #20]
	}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	2000037c 	.word	0x2000037c
 8007644:	20000380 	.word	0x20000380
 8007648:	20000484 	.word	0x20000484

0800764c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8081 	beq.w	8007768 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e7fe      	b.n	8007680 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d902      	bls.n	8007692 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e002      	b.n	8007698 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d062      	beq.n	8007768 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d15d      	bne.n	8007768 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076ac:	4b30      	ldr	r3, [pc, #192]	; (8007770 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d109      	bne.n	80076ca <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60bb      	str	r3, [r7, #8]
 80076c8:	e7fe      	b.n	80076c8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	db04      	blt.n	80076e8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f1c3 0207 	rsb	r2, r3, #7
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	6959      	ldr	r1, [r3, #20]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80076f8:	4413      	add	r3, r2
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d134      	bne.n	8007768 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fae8 	bl	8005cd8 <uxListRemove>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d115      	bne.n	800773a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	4918      	ldr	r1, [pc, #96]	; (8007774 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2201      	movs	r2, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43da      	mvns	r2, r3
 8007730:	4b11      	ldr	r3, [pc, #68]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4013      	ands	r3, r2
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007738:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	2201      	movs	r2, #1
 8007740:	409a      	lsls	r2, r3
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4313      	orrs	r3, r2
 8007748:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800775a:	441a      	add	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f7fe fa5b 	bl	8005c1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007768:	bf00      	nop
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	2000037c 	.word	0x2000037c
 8007774:	20000380 	.word	0x20000380
 8007778:	20000484 	.word	0x20000484

0800777c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800778e:	3201      	adds	r2, #1
 8007790:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007792:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007794:	681b      	ldr	r3, [r3, #0]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	2000037c 	.word	0x2000037c

080077a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b29      	ldr	r3, [pc, #164]	; (8007854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b4:	4b28      	ldr	r3, [pc, #160]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fa8c 	bl	8005cd8 <uxListRemove>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2201      	movs	r2, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43da      	mvns	r2, r3
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <prvAddCurrentTaskToDelayedList+0xb8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4013      	ands	r3, r2
 80077da:	4a20      	ldr	r2, [pc, #128]	; (800785c <prvAddCurrentTaskToDelayedList+0xb8>)
 80077dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d10a      	bne.n	80077fc <prvAddCurrentTaskToDelayedList+0x58>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ec:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	481a      	ldr	r0, [pc, #104]	; (8007860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80077f6:	f7fe fa12 	bl	8005c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077fa:	e026      	b.n	800784a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007804:	4b14      	ldr	r3, [pc, #80]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d209      	bcs.n	8007828 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fe fa20 	bl	8005c66 <vListInsert>
}
 8007826:	e010      	b.n	800784a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007828:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <prvAddCurrentTaskToDelayedList+0xc4>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fe fa16 	bl	8005c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <prvAddCurrentTaskToDelayedList+0xc8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	d202      	bcs.n	800784a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007844:	4a09      	ldr	r2, [pc, #36]	; (800786c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6013      	str	r3, [r2, #0]
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20000480 	.word	0x20000480
 8007858:	2000037c 	.word	0x2000037c
 800785c:	20000484 	.word	0x20000484
 8007860:	20000468 	.word	0x20000468
 8007864:	20000438 	.word	0x20000438
 8007868:	20000434 	.word	0x20000434
 800786c:	2000049c 	.word	0x2000049c

08007870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3b04      	subs	r3, #4
 8007880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b04      	subs	r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b04      	subs	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078a0:	4a0c      	ldr	r2, [pc, #48]	; (80078d4 <pxPortInitialiseStack+0x64>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b14      	subs	r3, #20
 80078aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3b04      	subs	r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f06f 0202 	mvn.w	r2, #2
 80078be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3b20      	subs	r3, #32
 80078c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078c6:	68fb      	ldr	r3, [r7, #12]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	080078d9 	.word	0x080078d9

080078d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <prvTaskExitError+0x50>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d009      	beq.n	8007900 <prvTaskExitError+0x28>
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	e7fe      	b.n	80078fe <prvTaskExitError+0x26>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007912:	bf00      	nop
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0fc      	beq.n	8007914 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	2000008c 	.word	0x2000008c
 800792c:	00000000 	.word	0x00000000

08007930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pxCurrentTCBConst2>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f380 8809 	msr	PSP, r0
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	4770      	bx	lr
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst2>:
 8007950:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007958:	4808      	ldr	r0, [pc, #32]	; (800797c <prvPortStartFirstTask+0x24>)
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	6800      	ldr	r0, [r0, #0]
 800795e:	f380 8808 	msr	MSP, r0
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8814 	msr	CONTROL, r0
 800796a:	b662      	cpsie	i
 800796c:	b661      	cpsie	f
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	df00      	svc	0
 8007978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800797a:	bf00      	nop
 800797c:	e000ed08 	.word	0xe000ed08

08007980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007986:	4b44      	ldr	r3, [pc, #272]	; (8007a98 <xPortStartScheduler+0x118>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a44      	ldr	r2, [pc, #272]	; (8007a9c <xPortStartScheduler+0x11c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d109      	bne.n	80079a4 <xPortStartScheduler+0x24>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	e7fe      	b.n	80079a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079a4:	4b3c      	ldr	r3, [pc, #240]	; (8007a98 <xPortStartScheduler+0x118>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <xPortStartScheduler+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d109      	bne.n	80079c2 <xPortStartScheduler+0x42>
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e7fe      	b.n	80079c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079c2:	4b38      	ldr	r3, [pc, #224]	; (8007aa4 <xPortStartScheduler+0x124>)
 80079c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <xPortStartScheduler+0x128>)
 80079e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <xPortStartScheduler+0x12c>)
 80079ec:	2207      	movs	r2, #7
 80079ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079f0:	e009      	b.n	8007a06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <xPortStartScheduler+0x12c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <xPortStartScheduler+0x12c>)
 80079fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d0ef      	beq.n	80079f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a12:	4b26      	ldr	r3, [pc, #152]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1c3 0307 	rsb	r3, r3, #7
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d009      	beq.n	8007a32 <xPortStartScheduler+0xb2>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	e7fe      	b.n	8007a30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a3c:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a44:	4a19      	ldr	r2, [pc, #100]	; (8007aac <xPortStartScheduler+0x12c>)
 8007a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a16      	ldr	r2, [pc, #88]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a5c:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <xPortStartScheduler+0x130>)
 8007a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a68:	f000 f8d6 	bl	8007c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a6c:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a72:	f000 f8f5 	bl	8007c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a82:	f7ff ff69 	bl	8007958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a86:	f7ff fa8b 	bl	8006fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8007a8a:	f7ff ff25 	bl	80078d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed00 	.word	0xe000ed00
 8007a9c:	410fc271 	.word	0x410fc271
 8007aa0:	410fc270 	.word	0x410fc270
 8007aa4:	e000e400 	.word	0xe000e400
 8007aa8:	200004a8 	.word	0x200004a8
 8007aac:	200004ac 	.word	0x200004ac
 8007ab0:	e000ed20 	.word	0xe000ed20
 8007ab4:	2000008c 	.word	0x2000008c
 8007ab8:	e000ef34 	.word	0xe000ef34

08007abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <vPortEnterCritical+0x54>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	4a0d      	ldr	r2, [pc, #52]	; (8007b10 <vPortEnterCritical+0x54>)
 8007adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ade:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <vPortEnterCritical+0x54>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10e      	bne.n	8007b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortEnterCritical+0x58>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <vPortEnterCritical+0x48>
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	603b      	str	r3, [r7, #0]
 8007b02:	e7fe      	b.n	8007b02 <vPortEnterCritical+0x46>
	}
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	2000008c 	.word	0x2000008c
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <vPortExitCritical+0x22>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	e7fe      	b.n	8007b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a08      	ldr	r2, [pc, #32]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vPortExitCritical+0x4c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <vPortExitCritical+0x3e>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000008c 	.word	0x2000008c
	...

08007b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b70:	f3ef 8009 	mrs	r0, PSP
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <pxCurrentTCBConst>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f01e 0f10 	tst.w	lr, #16
 8007b80:	bf08      	it	eq
 8007b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b94:	f380 8811 	msr	BASEPRI, r0
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f7ff f9fe 	bl	8006fa0 <vTaskSwitchContext>
 8007ba4:	f04f 0000 	mov.w	r0, #0
 8007ba8:	f380 8811 	msr	BASEPRI, r0
 8007bac:	bc09      	pop	{r0, r3}
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	6808      	ldr	r0, [r1, #0]
 8007bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb6:	f01e 0f10 	tst.w	lr, #16
 8007bba:	bf08      	it	eq
 8007bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bc0:	f380 8809 	msr	PSP, r0
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w

08007bd0 <pxCurrentTCBConst>:
 8007bd0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bf0:	f7ff f91e 	bl	8006e30 <xTaskIncrementTick>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <SysTick_Handler+0x3c>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	2300      	movs	r3, #0
 8007c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <vPortSetupTimerInterrupt+0x34>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <vPortSetupTimerInterrupt+0x38>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <vPortSetupTimerInterrupt+0x3c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <vPortSetupTimerInterrupt+0x40>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	099b      	lsrs	r3, r3, #6
 8007c34:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <vPortSetupTimerInterrupt+0x44>)
 8007c36:	3b01      	subs	r3, #1
 8007c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c3a:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <vPortSetupTimerInterrupt+0x34>)
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	601a      	str	r2, [r3, #0]
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000e010 	.word	0xe000e010
 8007c50:	e000e018 	.word	0xe000e018
 8007c54:	20000080 	.word	0x20000080
 8007c58:	10624dd3 	.word	0x10624dd3
 8007c5c:	e000e014 	.word	0xe000e014

08007c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c70 <vPortEnableVFP+0x10>
 8007c64:	6801      	ldr	r1, [r0, #0]
 8007c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c6a:	6001      	str	r1, [r0, #0]
 8007c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c6e:	bf00      	nop
 8007c70:	e000ed88 	.word	0xe000ed88

08007c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c7a:	f3ef 8305 	mrs	r3, IPSR
 8007c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d913      	bls.n	8007cae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <vPortValidateInterruptPriority+0x6c>)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c90:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <vPortValidateInterruptPriority+0x70>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	7afa      	ldrb	r2, [r7, #11]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d209      	bcs.n	8007cae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	e7fe      	b.n	8007cac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <vPortValidateInterruptPriority+0x74>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <vPortValidateInterruptPriority+0x78>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d909      	bls.n	8007cd2 <vPortValidateInterruptPriority+0x5e>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	e7fe      	b.n	8007cd0 <vPortValidateInterruptPriority+0x5c>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e3f0 	.word	0xe000e3f0
 8007ce4:	200004a8 	.word	0x200004a8
 8007ce8:	e000ed0c 	.word	0xe000ed0c
 8007cec:	200004ac 	.word	0x200004ac

08007cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cfc:	f7fe ffee 	bl	8006cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d00:	4b57      	ldr	r3, [pc, #348]	; (8007e60 <pvPortMalloc+0x170>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d08:	f000 f90c 	bl	8007f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d0c:	4b55      	ldr	r3, [pc, #340]	; (8007e64 <pvPortMalloc+0x174>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 808c 	bne.w	8007e32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01c      	beq.n	8007d5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d013      	beq.n	8007d5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f023 0307 	bic.w	r3, r3, #7
 8007d38:	3308      	adds	r3, #8
 8007d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <pvPortMalloc+0x6a>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e7fe      	b.n	8007d58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d068      	beq.n	8007e32 <pvPortMalloc+0x142>
 8007d60:	4b41      	ldr	r3, [pc, #260]	; (8007e68 <pvPortMalloc+0x178>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d863      	bhi.n	8007e32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d6a:	4b40      	ldr	r3, [pc, #256]	; (8007e6c <pvPortMalloc+0x17c>)
 8007d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <pvPortMalloc+0x17c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d74:	e004      	b.n	8007d80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d903      	bls.n	8007d92 <pvPortMalloc+0xa2>
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f1      	bne.n	8007d76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d92:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <pvPortMalloc+0x170>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d04a      	beq.n	8007e32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4413      	add	r3, r2
 8007da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	2308      	movs	r3, #8
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d91e      	bls.n	8007dfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <pvPortMalloc+0xf4>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e7fe      	b.n	8007de2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df6:	69b8      	ldr	r0, [r7, #24]
 8007df8:	f000 f8f6 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <pvPortMalloc+0x178>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <pvPortMalloc+0x178>)
 8007e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e0a:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <pvPortMalloc+0x178>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <pvPortMalloc+0x180>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d203      	bcs.n	8007e1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <pvPortMalloc+0x178>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <pvPortMalloc+0x180>)
 8007e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <pvPortMalloc+0x174>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e32:	f7fe ff61 	bl	8006cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <pvPortMalloc+0x164>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e7fe      	b.n	8007e52 <pvPortMalloc+0x162>
	return pvReturn;
 8007e54:	69fb      	ldr	r3, [r7, #28]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3728      	adds	r7, #40	; 0x28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001070 	.word	0x20001070
 8007e64:	2000107c 	.word	0x2000107c
 8007e68:	20001074 	.word	0x20001074
 8007e6c:	20001068 	.word	0x20001068
 8007e70:	20001078 	.word	0x20001078

08007e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d046      	beq.n	8007f14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e86:	2308      	movs	r3, #8
 8007e88:	425b      	negs	r3, r3
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4b20      	ldr	r3, [pc, #128]	; (8007f1c <vPortFree+0xa8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <vPortFree+0x42>
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e7fe      	b.n	8007eb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <vPortFree+0x5e>
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	e7fe      	b.n	8007ed0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <vPortFree+0xa8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d115      	bne.n	8007f14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <vPortFree+0xa8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	401a      	ands	r2, r3
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ef8:	f7fe fef0 	bl	8006cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vPortFree+0xac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <vPortFree+0xac>)
 8007f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f0a:	6938      	ldr	r0, [r7, #16]
 8007f0c:	f000 f86c 	bl	8007fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f10:	f7fe fef2 	bl	8006cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	2000107c 	.word	0x2000107c
 8007f20:	20001074 	.word	0x20001074

08007f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvHeapInit+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <prvHeapInit+0xac>)
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvHeapInit+0xb4>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvHeapInit+0xb8>)
 8007fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <prvHeapInit+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <prvHeapInit+0xc0>)
 8007fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	200004b0 	.word	0x200004b0
 8007fd4:	20001068 	.word	0x20001068
 8007fd8:	20001070 	.word	0x20001070
 8007fdc:	20001078 	.word	0x20001078
 8007fe0:	20001074 	.word	0x20001074
 8007fe4:	2000107c 	.word	0x2000107c

08007fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <prvInsertBlockIntoFreeList+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e002      	b.n	8007ffc <prvInsertBlockIntoFreeList+0x14>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d8f7      	bhi.n	8007ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d108      	bne.n	800802a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d118      	bne.n	8008070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e008      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e003      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20001068 	.word	0x20001068
 8008098:	20001070 	.word	0x20001070

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000090 	.word	0x20000090

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4e0d      	ldr	r6, [pc, #52]	; (80080e0 <__libc_init_array+0x38>)
 80080ac:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080ae:	1ba4      	subs	r4, r4, r6
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	2500      	movs	r5, #0
 80080b4:	42a5      	cmp	r5, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	4e0b      	ldr	r6, [pc, #44]	; (80080e8 <__libc_init_array+0x40>)
 80080ba:	4c0c      	ldr	r4, [pc, #48]	; (80080ec <__libc_init_array+0x44>)
 80080bc:	f000 fc28 	bl	8008910 <_init>
 80080c0:	1ba4      	subs	r4, r4, r6
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	2500      	movs	r5, #0
 80080c6:	42a5      	cmp	r5, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080d0:	4798      	blx	r3
 80080d2:	3501      	adds	r5, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080da:	4798      	blx	r3
 80080dc:	3501      	adds	r5, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	08008aac 	.word	0x08008aac
 80080e4:	08008aac 	.word	0x08008aac
 80080e8:	08008aac 	.word	0x08008aac
 80080ec:	08008ab0 	.word	0x08008ab0

080080f0 <memcpy>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	1e43      	subs	r3, r0, #1
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	bd10      	pop	{r4, pc}
 80080fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008104:	e7f7      	b.n	80080f6 <memcpy+0x6>

08008106 <memset>:
 8008106:	4402      	add	r2, r0
 8008108:	4603      	mov	r3, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	d100      	bne.n	8008110 <memset+0xa>
 800810e:	4770      	bx	lr
 8008110:	f803 1b01 	strb.w	r1, [r3], #1
 8008114:	e7f9      	b.n	800810a <memset+0x4>
	...

08008118 <siprintf>:
 8008118:	b40e      	push	{r1, r2, r3}
 800811a:	b500      	push	{lr}
 800811c:	b09c      	sub	sp, #112	; 0x70
 800811e:	ab1d      	add	r3, sp, #116	; 0x74
 8008120:	9002      	str	r0, [sp, #8]
 8008122:	9006      	str	r0, [sp, #24]
 8008124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008128:	4809      	ldr	r0, [pc, #36]	; (8008150 <siprintf+0x38>)
 800812a:	9107      	str	r1, [sp, #28]
 800812c:	9104      	str	r1, [sp, #16]
 800812e:	4909      	ldr	r1, [pc, #36]	; (8008154 <siprintf+0x3c>)
 8008130:	f853 2b04 	ldr.w	r2, [r3], #4
 8008134:	9105      	str	r1, [sp, #20]
 8008136:	6800      	ldr	r0, [r0, #0]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	a902      	add	r1, sp, #8
 800813c:	f000 f866 	bl	800820c <_svfiprintf_r>
 8008140:	9b02      	ldr	r3, [sp, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	b01c      	add	sp, #112	; 0x70
 8008148:	f85d eb04 	ldr.w	lr, [sp], #4
 800814c:	b003      	add	sp, #12
 800814e:	4770      	bx	lr
 8008150:	20000090 	.word	0x20000090
 8008154:	ffff0208 	.word	0xffff0208

08008158 <__ssputs_r>:
 8008158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800815c:	688e      	ldr	r6, [r1, #8]
 800815e:	429e      	cmp	r6, r3
 8008160:	4682      	mov	sl, r0
 8008162:	460c      	mov	r4, r1
 8008164:	4690      	mov	r8, r2
 8008166:	4699      	mov	r9, r3
 8008168:	d837      	bhi.n	80081da <__ssputs_r+0x82>
 800816a:	898a      	ldrh	r2, [r1, #12]
 800816c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008170:	d031      	beq.n	80081d6 <__ssputs_r+0x7e>
 8008172:	6825      	ldr	r5, [r4, #0]
 8008174:	6909      	ldr	r1, [r1, #16]
 8008176:	1a6f      	subs	r7, r5, r1
 8008178:	6965      	ldr	r5, [r4, #20]
 800817a:	2302      	movs	r3, #2
 800817c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008180:	fb95 f5f3 	sdiv	r5, r5, r3
 8008184:	f109 0301 	add.w	r3, r9, #1
 8008188:	443b      	add	r3, r7
 800818a:	429d      	cmp	r5, r3
 800818c:	bf38      	it	cc
 800818e:	461d      	movcc	r5, r3
 8008190:	0553      	lsls	r3, r2, #21
 8008192:	d530      	bpl.n	80081f6 <__ssputs_r+0x9e>
 8008194:	4629      	mov	r1, r5
 8008196:	f000 fb21 	bl	80087dc <_malloc_r>
 800819a:	4606      	mov	r6, r0
 800819c:	b950      	cbnz	r0, 80081b4 <__ssputs_r+0x5c>
 800819e:	230c      	movs	r3, #12
 80081a0:	f8ca 3000 	str.w	r3, [sl]
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	463a      	mov	r2, r7
 80081b6:	6921      	ldr	r1, [r4, #16]
 80081b8:	f7ff ff9a 	bl	80080f0 <memcpy>
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	6126      	str	r6, [r4, #16]
 80081ca:	6165      	str	r5, [r4, #20]
 80081cc:	443e      	add	r6, r7
 80081ce:	1bed      	subs	r5, r5, r7
 80081d0:	6026      	str	r6, [r4, #0]
 80081d2:	60a5      	str	r5, [r4, #8]
 80081d4:	464e      	mov	r6, r9
 80081d6:	454e      	cmp	r6, r9
 80081d8:	d900      	bls.n	80081dc <__ssputs_r+0x84>
 80081da:	464e      	mov	r6, r9
 80081dc:	4632      	mov	r2, r6
 80081de:	4641      	mov	r1, r8
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	f000 fa93 	bl	800870c <memmove>
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	1b9b      	subs	r3, r3, r6
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	441e      	add	r6, r3
 80081f0:	6026      	str	r6, [r4, #0]
 80081f2:	2000      	movs	r0, #0
 80081f4:	e7dc      	b.n	80081b0 <__ssputs_r+0x58>
 80081f6:	462a      	mov	r2, r5
 80081f8:	f000 fb4a 	bl	8008890 <_realloc_r>
 80081fc:	4606      	mov	r6, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1e2      	bne.n	80081c8 <__ssputs_r+0x70>
 8008202:	6921      	ldr	r1, [r4, #16]
 8008204:	4650      	mov	r0, sl
 8008206:	f000 fa9b 	bl	8008740 <_free_r>
 800820a:	e7c8      	b.n	800819e <__ssputs_r+0x46>

0800820c <_svfiprintf_r>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	461d      	mov	r5, r3
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	061f      	lsls	r7, r3, #24
 8008216:	b09d      	sub	sp, #116	; 0x74
 8008218:	4680      	mov	r8, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4616      	mov	r6, r2
 800821e:	d50f      	bpl.n	8008240 <_svfiprintf_r+0x34>
 8008220:	690b      	ldr	r3, [r1, #16]
 8008222:	b96b      	cbnz	r3, 8008240 <_svfiprintf_r+0x34>
 8008224:	2140      	movs	r1, #64	; 0x40
 8008226:	f000 fad9 	bl	80087dc <_malloc_r>
 800822a:	6020      	str	r0, [r4, #0]
 800822c:	6120      	str	r0, [r4, #16]
 800822e:	b928      	cbnz	r0, 800823c <_svfiprintf_r+0x30>
 8008230:	230c      	movs	r3, #12
 8008232:	f8c8 3000 	str.w	r3, [r8]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	e0c8      	b.n	80083ce <_svfiprintf_r+0x1c2>
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	2300      	movs	r3, #0
 8008242:	9309      	str	r3, [sp, #36]	; 0x24
 8008244:	2320      	movs	r3, #32
 8008246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800824a:	2330      	movs	r3, #48	; 0x30
 800824c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008250:	9503      	str	r5, [sp, #12]
 8008252:	f04f 0b01 	mov.w	fp, #1
 8008256:	4637      	mov	r7, r6
 8008258:	463d      	mov	r5, r7
 800825a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800825e:	b10b      	cbz	r3, 8008264 <_svfiprintf_r+0x58>
 8008260:	2b25      	cmp	r3, #37	; 0x25
 8008262:	d13e      	bne.n	80082e2 <_svfiprintf_r+0xd6>
 8008264:	ebb7 0a06 	subs.w	sl, r7, r6
 8008268:	d00b      	beq.n	8008282 <_svfiprintf_r+0x76>
 800826a:	4653      	mov	r3, sl
 800826c:	4632      	mov	r2, r6
 800826e:	4621      	mov	r1, r4
 8008270:	4640      	mov	r0, r8
 8008272:	f7ff ff71 	bl	8008158 <__ssputs_r>
 8008276:	3001      	adds	r0, #1
 8008278:	f000 80a4 	beq.w	80083c4 <_svfiprintf_r+0x1b8>
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	4453      	add	r3, sl
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
 8008282:	783b      	ldrb	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 809d 	beq.w	80083c4 <_svfiprintf_r+0x1b8>
 800828a:	2300      	movs	r3, #0
 800828c:	f04f 32ff 	mov.w	r2, #4294967295
 8008290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800829c:	931a      	str	r3, [sp, #104]	; 0x68
 800829e:	462f      	mov	r7, r5
 80082a0:	2205      	movs	r2, #5
 80082a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082a6:	4850      	ldr	r0, [pc, #320]	; (80083e8 <_svfiprintf_r+0x1dc>)
 80082a8:	f7f7 ffaa 	bl	8000200 <memchr>
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	b9d0      	cbnz	r0, 80082e6 <_svfiprintf_r+0xda>
 80082b0:	06d9      	lsls	r1, r3, #27
 80082b2:	bf44      	itt	mi
 80082b4:	2220      	movmi	r2, #32
 80082b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082ba:	071a      	lsls	r2, r3, #28
 80082bc:	bf44      	itt	mi
 80082be:	222b      	movmi	r2, #43	; 0x2b
 80082c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082c4:	782a      	ldrb	r2, [r5, #0]
 80082c6:	2a2a      	cmp	r2, #42	; 0x2a
 80082c8:	d015      	beq.n	80082f6 <_svfiprintf_r+0xea>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	462f      	mov	r7, r5
 80082ce:	2000      	movs	r0, #0
 80082d0:	250a      	movs	r5, #10
 80082d2:	4639      	mov	r1, r7
 80082d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d8:	3b30      	subs	r3, #48	; 0x30
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d94d      	bls.n	800837a <_svfiprintf_r+0x16e>
 80082de:	b1b8      	cbz	r0, 8008310 <_svfiprintf_r+0x104>
 80082e0:	e00f      	b.n	8008302 <_svfiprintf_r+0xf6>
 80082e2:	462f      	mov	r7, r5
 80082e4:	e7b8      	b.n	8008258 <_svfiprintf_r+0x4c>
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <_svfiprintf_r+0x1dc>)
 80082e8:	1a80      	subs	r0, r0, r2
 80082ea:	fa0b f000 	lsl.w	r0, fp, r0
 80082ee:	4318      	orrs	r0, r3
 80082f0:	9004      	str	r0, [sp, #16]
 80082f2:	463d      	mov	r5, r7
 80082f4:	e7d3      	b.n	800829e <_svfiprintf_r+0x92>
 80082f6:	9a03      	ldr	r2, [sp, #12]
 80082f8:	1d11      	adds	r1, r2, #4
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	9103      	str	r1, [sp, #12]
 80082fe:	2a00      	cmp	r2, #0
 8008300:	db01      	blt.n	8008306 <_svfiprintf_r+0xfa>
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	e004      	b.n	8008310 <_svfiprintf_r+0x104>
 8008306:	4252      	negs	r2, r2
 8008308:	f043 0302 	orr.w	r3, r3, #2
 800830c:	9207      	str	r2, [sp, #28]
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	783b      	ldrb	r3, [r7, #0]
 8008312:	2b2e      	cmp	r3, #46	; 0x2e
 8008314:	d10c      	bne.n	8008330 <_svfiprintf_r+0x124>
 8008316:	787b      	ldrb	r3, [r7, #1]
 8008318:	2b2a      	cmp	r3, #42	; 0x2a
 800831a:	d133      	bne.n	8008384 <_svfiprintf_r+0x178>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	1d1a      	adds	r2, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	9203      	str	r2, [sp, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfb8      	it	lt
 8008328:	f04f 33ff 	movlt.w	r3, #4294967295
 800832c:	3702      	adds	r7, #2
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	4d2e      	ldr	r5, [pc, #184]	; (80083ec <_svfiprintf_r+0x1e0>)
 8008332:	7839      	ldrb	r1, [r7, #0]
 8008334:	2203      	movs	r2, #3
 8008336:	4628      	mov	r0, r5
 8008338:	f7f7 ff62 	bl	8000200 <memchr>
 800833c:	b138      	cbz	r0, 800834e <_svfiprintf_r+0x142>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	1b40      	subs	r0, r0, r5
 8008342:	fa03 f000 	lsl.w	r0, r3, r0
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	4303      	orrs	r3, r0
 800834a:	3701      	adds	r7, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	7839      	ldrb	r1, [r7, #0]
 8008350:	4827      	ldr	r0, [pc, #156]	; (80083f0 <_svfiprintf_r+0x1e4>)
 8008352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008356:	2206      	movs	r2, #6
 8008358:	1c7e      	adds	r6, r7, #1
 800835a:	f7f7 ff51 	bl	8000200 <memchr>
 800835e:	2800      	cmp	r0, #0
 8008360:	d038      	beq.n	80083d4 <_svfiprintf_r+0x1c8>
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <_svfiprintf_r+0x1e8>)
 8008364:	bb13      	cbnz	r3, 80083ac <_svfiprintf_r+0x1a0>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3307      	adds	r3, #7
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	3308      	adds	r3, #8
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	444b      	add	r3, r9
 8008376:	9309      	str	r3, [sp, #36]	; 0x24
 8008378:	e76d      	b.n	8008256 <_svfiprintf_r+0x4a>
 800837a:	fb05 3202 	mla	r2, r5, r2, r3
 800837e:	2001      	movs	r0, #1
 8008380:	460f      	mov	r7, r1
 8008382:	e7a6      	b.n	80082d2 <_svfiprintf_r+0xc6>
 8008384:	2300      	movs	r3, #0
 8008386:	3701      	adds	r7, #1
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	4619      	mov	r1, r3
 800838c:	250a      	movs	r5, #10
 800838e:	4638      	mov	r0, r7
 8008390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008394:	3a30      	subs	r2, #48	; 0x30
 8008396:	2a09      	cmp	r2, #9
 8008398:	d903      	bls.n	80083a2 <_svfiprintf_r+0x196>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c8      	beq.n	8008330 <_svfiprintf_r+0x124>
 800839e:	9105      	str	r1, [sp, #20]
 80083a0:	e7c6      	b.n	8008330 <_svfiprintf_r+0x124>
 80083a2:	fb05 2101 	mla	r1, r5, r1, r2
 80083a6:	2301      	movs	r3, #1
 80083a8:	4607      	mov	r7, r0
 80083aa:	e7f0      	b.n	800838e <_svfiprintf_r+0x182>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4622      	mov	r2, r4
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <_svfiprintf_r+0x1ec>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4640      	mov	r0, r8
 80083b8:	f3af 8000 	nop.w
 80083bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083c0:	4681      	mov	r9, r0
 80083c2:	d1d6      	bne.n	8008372 <_svfiprintf_r+0x166>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	065b      	lsls	r3, r3, #25
 80083c8:	f53f af35 	bmi.w	8008236 <_svfiprintf_r+0x2a>
 80083cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ce:	b01d      	add	sp, #116	; 0x74
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	ab03      	add	r3, sp, #12
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4622      	mov	r2, r4
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <_svfiprintf_r+0x1ec>)
 80083dc:	a904      	add	r1, sp, #16
 80083de:	4640      	mov	r0, r8
 80083e0:	f000 f882 	bl	80084e8 <_printf_i>
 80083e4:	e7ea      	b.n	80083bc <_svfiprintf_r+0x1b0>
 80083e6:	bf00      	nop
 80083e8:	08008a70 	.word	0x08008a70
 80083ec:	08008a76 	.word	0x08008a76
 80083f0:	08008a7a 	.word	0x08008a7a
 80083f4:	00000000 	.word	0x00000000
 80083f8:	08008159 	.word	0x08008159

080083fc <_printf_common>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	4691      	mov	r9, r2
 8008402:	461f      	mov	r7, r3
 8008404:	688a      	ldr	r2, [r1, #8]
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800840c:	4293      	cmp	r3, r2
 800840e:	bfb8      	it	lt
 8008410:	4613      	movlt	r3, r2
 8008412:	f8c9 3000 	str.w	r3, [r9]
 8008416:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800841a:	4606      	mov	r6, r0
 800841c:	460c      	mov	r4, r1
 800841e:	b112      	cbz	r2, 8008426 <_printf_common+0x2a>
 8008420:	3301      	adds	r3, #1
 8008422:	f8c9 3000 	str.w	r3, [r9]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	0699      	lsls	r1, r3, #26
 800842a:	bf42      	ittt	mi
 800842c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008430:	3302      	addmi	r3, #2
 8008432:	f8c9 3000 	strmi.w	r3, [r9]
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	f015 0506 	ands.w	r5, r5, #6
 800843c:	d107      	bne.n	800844e <_printf_common+0x52>
 800843e:	f104 0a19 	add.w	sl, r4, #25
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	f8d9 2000 	ldr.w	r2, [r9]
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	42ab      	cmp	r3, r5
 800844c:	dc28      	bgt.n	80084a0 <_printf_common+0xa4>
 800844e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	3300      	adds	r3, #0
 8008456:	bf18      	it	ne
 8008458:	2301      	movne	r3, #1
 800845a:	0692      	lsls	r2, r2, #26
 800845c:	d42d      	bmi.n	80084ba <_printf_common+0xbe>
 800845e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008462:	4639      	mov	r1, r7
 8008464:	4630      	mov	r0, r6
 8008466:	47c0      	blx	r8
 8008468:	3001      	adds	r0, #1
 800846a:	d020      	beq.n	80084ae <_printf_common+0xb2>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	68e5      	ldr	r5, [r4, #12]
 8008470:	f8d9 2000 	ldr.w	r2, [r9]
 8008474:	f003 0306 	and.w	r3, r3, #6
 8008478:	2b04      	cmp	r3, #4
 800847a:	bf08      	it	eq
 800847c:	1aad      	subeq	r5, r5, r2
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	bf0c      	ite	eq
 8008484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008488:	2500      	movne	r5, #0
 800848a:	4293      	cmp	r3, r2
 800848c:	bfc4      	itt	gt
 800848e:	1a9b      	subgt	r3, r3, r2
 8008490:	18ed      	addgt	r5, r5, r3
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	341a      	adds	r4, #26
 8008498:	454d      	cmp	r5, r9
 800849a:	d11a      	bne.n	80084d2 <_printf_common+0xd6>
 800849c:	2000      	movs	r0, #0
 800849e:	e008      	b.n	80084b2 <_printf_common+0xb6>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4652      	mov	r2, sl
 80084a4:	4639      	mov	r1, r7
 80084a6:	4630      	mov	r0, r6
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d103      	bne.n	80084b6 <_printf_common+0xba>
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b6:	3501      	adds	r5, #1
 80084b8:	e7c3      	b.n	8008442 <_printf_common+0x46>
 80084ba:	18e1      	adds	r1, r4, r3
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	2030      	movs	r0, #48	; 0x30
 80084c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084c4:	4422      	add	r2, r4
 80084c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ce:	3302      	adds	r3, #2
 80084d0:	e7c5      	b.n	800845e <_printf_common+0x62>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4622      	mov	r2, r4
 80084d6:	4639      	mov	r1, r7
 80084d8:	4630      	mov	r0, r6
 80084da:	47c0      	blx	r8
 80084dc:	3001      	adds	r0, #1
 80084de:	d0e6      	beq.n	80084ae <_printf_common+0xb2>
 80084e0:	f109 0901 	add.w	r9, r9, #1
 80084e4:	e7d8      	b.n	8008498 <_printf_common+0x9c>
	...

080084e8 <_printf_i>:
 80084e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084f0:	460c      	mov	r4, r1
 80084f2:	7e09      	ldrb	r1, [r1, #24]
 80084f4:	b085      	sub	sp, #20
 80084f6:	296e      	cmp	r1, #110	; 0x6e
 80084f8:	4617      	mov	r7, r2
 80084fa:	4606      	mov	r6, r0
 80084fc:	4698      	mov	r8, r3
 80084fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008500:	f000 80b3 	beq.w	800866a <_printf_i+0x182>
 8008504:	d822      	bhi.n	800854c <_printf_i+0x64>
 8008506:	2963      	cmp	r1, #99	; 0x63
 8008508:	d036      	beq.n	8008578 <_printf_i+0x90>
 800850a:	d80a      	bhi.n	8008522 <_printf_i+0x3a>
 800850c:	2900      	cmp	r1, #0
 800850e:	f000 80b9 	beq.w	8008684 <_printf_i+0x19c>
 8008512:	2958      	cmp	r1, #88	; 0x58
 8008514:	f000 8083 	beq.w	800861e <_printf_i+0x136>
 8008518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800851c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008520:	e032      	b.n	8008588 <_printf_i+0xa0>
 8008522:	2964      	cmp	r1, #100	; 0x64
 8008524:	d001      	beq.n	800852a <_printf_i+0x42>
 8008526:	2969      	cmp	r1, #105	; 0x69
 8008528:	d1f6      	bne.n	8008518 <_printf_i+0x30>
 800852a:	6820      	ldr	r0, [r4, #0]
 800852c:	6813      	ldr	r3, [r2, #0]
 800852e:	0605      	lsls	r5, r0, #24
 8008530:	f103 0104 	add.w	r1, r3, #4
 8008534:	d52a      	bpl.n	800858c <_printf_i+0xa4>
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da03      	bge.n	8008546 <_printf_i+0x5e>
 800853e:	222d      	movs	r2, #45	; 0x2d
 8008540:	425b      	negs	r3, r3
 8008542:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008546:	486f      	ldr	r0, [pc, #444]	; (8008704 <_printf_i+0x21c>)
 8008548:	220a      	movs	r2, #10
 800854a:	e039      	b.n	80085c0 <_printf_i+0xd8>
 800854c:	2973      	cmp	r1, #115	; 0x73
 800854e:	f000 809d 	beq.w	800868c <_printf_i+0x1a4>
 8008552:	d808      	bhi.n	8008566 <_printf_i+0x7e>
 8008554:	296f      	cmp	r1, #111	; 0x6f
 8008556:	d020      	beq.n	800859a <_printf_i+0xb2>
 8008558:	2970      	cmp	r1, #112	; 0x70
 800855a:	d1dd      	bne.n	8008518 <_printf_i+0x30>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	f043 0320 	orr.w	r3, r3, #32
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e003      	b.n	800856e <_printf_i+0x86>
 8008566:	2975      	cmp	r1, #117	; 0x75
 8008568:	d017      	beq.n	800859a <_printf_i+0xb2>
 800856a:	2978      	cmp	r1, #120	; 0x78
 800856c:	d1d4      	bne.n	8008518 <_printf_i+0x30>
 800856e:	2378      	movs	r3, #120	; 0x78
 8008570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008574:	4864      	ldr	r0, [pc, #400]	; (8008708 <_printf_i+0x220>)
 8008576:	e055      	b.n	8008624 <_printf_i+0x13c>
 8008578:	6813      	ldr	r3, [r2, #0]
 800857a:	1d19      	adds	r1, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6011      	str	r1, [r2, #0]
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008588:	2301      	movs	r3, #1
 800858a:	e08c      	b.n	80086a6 <_printf_i+0x1be>
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6011      	str	r1, [r2, #0]
 8008590:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008594:	bf18      	it	ne
 8008596:	b21b      	sxthne	r3, r3
 8008598:	e7cf      	b.n	800853a <_printf_i+0x52>
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1d18      	adds	r0, r3, #4
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	0628      	lsls	r0, r5, #24
 80085a4:	d501      	bpl.n	80085aa <_printf_i+0xc2>
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	e002      	b.n	80085b0 <_printf_i+0xc8>
 80085aa:	0668      	lsls	r0, r5, #25
 80085ac:	d5fb      	bpl.n	80085a6 <_printf_i+0xbe>
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	4854      	ldr	r0, [pc, #336]	; (8008704 <_printf_i+0x21c>)
 80085b2:	296f      	cmp	r1, #111	; 0x6f
 80085b4:	bf14      	ite	ne
 80085b6:	220a      	movne	r2, #10
 80085b8:	2208      	moveq	r2, #8
 80085ba:	2100      	movs	r1, #0
 80085bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c0:	6865      	ldr	r5, [r4, #4]
 80085c2:	60a5      	str	r5, [r4, #8]
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	f2c0 8095 	blt.w	80086f4 <_printf_i+0x20c>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	f021 0104 	bic.w	r1, r1, #4
 80085d0:	6021      	str	r1, [r4, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d13d      	bne.n	8008652 <_printf_i+0x16a>
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	f040 808e 	bne.w	80086f8 <_printf_i+0x210>
 80085dc:	4665      	mov	r5, ip
 80085de:	2a08      	cmp	r2, #8
 80085e0:	d10b      	bne.n	80085fa <_printf_i+0x112>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	07db      	lsls	r3, r3, #31
 80085e6:	d508      	bpl.n	80085fa <_printf_i+0x112>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	bfde      	ittt	le
 80085f0:	2330      	movle	r3, #48	; 0x30
 80085f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085fa:	ebac 0305 	sub.w	r3, ip, r5
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	f8cd 8000 	str.w	r8, [sp]
 8008604:	463b      	mov	r3, r7
 8008606:	aa03      	add	r2, sp, #12
 8008608:	4621      	mov	r1, r4
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff fef6 	bl	80083fc <_printf_common>
 8008610:	3001      	adds	r0, #1
 8008612:	d14d      	bne.n	80086b0 <_printf_i+0x1c8>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	b005      	add	sp, #20
 800861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861e:	4839      	ldr	r0, [pc, #228]	; (8008704 <_printf_i+0x21c>)
 8008620:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008624:	6813      	ldr	r3, [r2, #0]
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1d1d      	adds	r5, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6015      	str	r5, [r2, #0]
 800862e:	060a      	lsls	r2, r1, #24
 8008630:	d50b      	bpl.n	800864a <_printf_i+0x162>
 8008632:	07ca      	lsls	r2, r1, #31
 8008634:	bf44      	itt	mi
 8008636:	f041 0120 	orrmi.w	r1, r1, #32
 800863a:	6021      	strmi	r1, [r4, #0]
 800863c:	b91b      	cbnz	r3, 8008646 <_printf_i+0x15e>
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	f022 0220 	bic.w	r2, r2, #32
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	2210      	movs	r2, #16
 8008648:	e7b7      	b.n	80085ba <_printf_i+0xd2>
 800864a:	064d      	lsls	r5, r1, #25
 800864c:	bf48      	it	mi
 800864e:	b29b      	uxthmi	r3, r3
 8008650:	e7ef      	b.n	8008632 <_printf_i+0x14a>
 8008652:	4665      	mov	r5, ip
 8008654:	fbb3 f1f2 	udiv	r1, r3, r2
 8008658:	fb02 3311 	mls	r3, r2, r1, r3
 800865c:	5cc3      	ldrb	r3, [r0, r3]
 800865e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008662:	460b      	mov	r3, r1
 8008664:	2900      	cmp	r1, #0
 8008666:	d1f5      	bne.n	8008654 <_printf_i+0x16c>
 8008668:	e7b9      	b.n	80085de <_printf_i+0xf6>
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	6961      	ldr	r1, [r4, #20]
 8008670:	1d18      	adds	r0, r3, #4
 8008672:	6010      	str	r0, [r2, #0]
 8008674:	0628      	lsls	r0, r5, #24
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	d501      	bpl.n	800867e <_printf_i+0x196>
 800867a:	6019      	str	r1, [r3, #0]
 800867c:	e002      	b.n	8008684 <_printf_i+0x19c>
 800867e:	066a      	lsls	r2, r5, #25
 8008680:	d5fb      	bpl.n	800867a <_printf_i+0x192>
 8008682:	8019      	strh	r1, [r3, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	4665      	mov	r5, ip
 800868a:	e7b9      	b.n	8008600 <_printf_i+0x118>
 800868c:	6813      	ldr	r3, [r2, #0]
 800868e:	1d19      	adds	r1, r3, #4
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	681d      	ldr	r5, [r3, #0]
 8008694:	6862      	ldr	r2, [r4, #4]
 8008696:	2100      	movs	r1, #0
 8008698:	4628      	mov	r0, r5
 800869a:	f7f7 fdb1 	bl	8000200 <memchr>
 800869e:	b108      	cbz	r0, 80086a4 <_printf_i+0x1bc>
 80086a0:	1b40      	subs	r0, r0, r5
 80086a2:	6060      	str	r0, [r4, #4]
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	2300      	movs	r3, #0
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ae:	e7a7      	b.n	8008600 <_printf_i+0x118>
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4639      	mov	r1, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d0aa      	beq.n	8008614 <_printf_i+0x12c>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	079b      	lsls	r3, r3, #30
 80086c2:	d413      	bmi.n	80086ec <_printf_i+0x204>
 80086c4:	68e0      	ldr	r0, [r4, #12]
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	4298      	cmp	r0, r3
 80086ca:	bfb8      	it	lt
 80086cc:	4618      	movlt	r0, r3
 80086ce:	e7a3      	b.n	8008618 <_printf_i+0x130>
 80086d0:	2301      	movs	r3, #1
 80086d2:	464a      	mov	r2, r9
 80086d4:	4639      	mov	r1, r7
 80086d6:	4630      	mov	r0, r6
 80086d8:	47c0      	blx	r8
 80086da:	3001      	adds	r0, #1
 80086dc:	d09a      	beq.n	8008614 <_printf_i+0x12c>
 80086de:	3501      	adds	r5, #1
 80086e0:	68e3      	ldr	r3, [r4, #12]
 80086e2:	9a03      	ldr	r2, [sp, #12]
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	42ab      	cmp	r3, r5
 80086e8:	dcf2      	bgt.n	80086d0 <_printf_i+0x1e8>
 80086ea:	e7eb      	b.n	80086c4 <_printf_i+0x1dc>
 80086ec:	2500      	movs	r5, #0
 80086ee:	f104 0919 	add.w	r9, r4, #25
 80086f2:	e7f5      	b.n	80086e0 <_printf_i+0x1f8>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ac      	bne.n	8008652 <_printf_i+0x16a>
 80086f8:	7803      	ldrb	r3, [r0, #0]
 80086fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008702:	e76c      	b.n	80085de <_printf_i+0xf6>
 8008704:	08008a81 	.word	0x08008a81
 8008708:	08008a92 	.word	0x08008a92

0800870c <memmove>:
 800870c:	4288      	cmp	r0, r1
 800870e:	b510      	push	{r4, lr}
 8008710:	eb01 0302 	add.w	r3, r1, r2
 8008714:	d807      	bhi.n	8008726 <memmove+0x1a>
 8008716:	1e42      	subs	r2, r0, #1
 8008718:	4299      	cmp	r1, r3
 800871a:	d00a      	beq.n	8008732 <memmove+0x26>
 800871c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008720:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008724:	e7f8      	b.n	8008718 <memmove+0xc>
 8008726:	4283      	cmp	r3, r0
 8008728:	d9f5      	bls.n	8008716 <memmove+0xa>
 800872a:	1881      	adds	r1, r0, r2
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	42d3      	cmn	r3, r2
 8008730:	d100      	bne.n	8008734 <memmove+0x28>
 8008732:	bd10      	pop	{r4, pc}
 8008734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008738:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800873c:	e7f7      	b.n	800872e <memmove+0x22>
	...

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d045      	beq.n	80087d4 <_free_r+0x94>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 f8d2 	bl	80088fc <__malloc_lock>
 8008758:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <_free_r+0x98>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	4610      	mov	r0, r2
 800875e:	b933      	cbnz	r3, 800876e <_free_r+0x2e>
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6014      	str	r4, [r2, #0]
 8008764:	4628      	mov	r0, r5
 8008766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800876a:	f000 b8c8 	b.w	80088fe <__malloc_unlock>
 800876e:	42a3      	cmp	r3, r4
 8008770:	d90c      	bls.n	800878c <_free_r+0x4c>
 8008772:	6821      	ldr	r1, [r4, #0]
 8008774:	1862      	adds	r2, r4, r1
 8008776:	4293      	cmp	r3, r2
 8008778:	bf04      	itt	eq
 800877a:	681a      	ldreq	r2, [r3, #0]
 800877c:	685b      	ldreq	r3, [r3, #4]
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	bf04      	itt	eq
 8008782:	1852      	addeq	r2, r2, r1
 8008784:	6022      	streq	r2, [r4, #0]
 8008786:	6004      	str	r4, [r0, #0]
 8008788:	e7ec      	b.n	8008764 <_free_r+0x24>
 800878a:	4613      	mov	r3, r2
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	b10a      	cbz	r2, 8008794 <_free_r+0x54>
 8008790:	42a2      	cmp	r2, r4
 8008792:	d9fa      	bls.n	800878a <_free_r+0x4a>
 8008794:	6819      	ldr	r1, [r3, #0]
 8008796:	1858      	adds	r0, r3, r1
 8008798:	42a0      	cmp	r0, r4
 800879a:	d10b      	bne.n	80087b4 <_free_r+0x74>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	4401      	add	r1, r0
 80087a0:	1858      	adds	r0, r3, r1
 80087a2:	4282      	cmp	r2, r0
 80087a4:	6019      	str	r1, [r3, #0]
 80087a6:	d1dd      	bne.n	8008764 <_free_r+0x24>
 80087a8:	6810      	ldr	r0, [r2, #0]
 80087aa:	6852      	ldr	r2, [r2, #4]
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	4401      	add	r1, r0
 80087b0:	6019      	str	r1, [r3, #0]
 80087b2:	e7d7      	b.n	8008764 <_free_r+0x24>
 80087b4:	d902      	bls.n	80087bc <_free_r+0x7c>
 80087b6:	230c      	movs	r3, #12
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	e7d3      	b.n	8008764 <_free_r+0x24>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	1821      	adds	r1, r4, r0
 80087c0:	428a      	cmp	r2, r1
 80087c2:	bf04      	itt	eq
 80087c4:	6811      	ldreq	r1, [r2, #0]
 80087c6:	6852      	ldreq	r2, [r2, #4]
 80087c8:	6062      	str	r2, [r4, #4]
 80087ca:	bf04      	itt	eq
 80087cc:	1809      	addeq	r1, r1, r0
 80087ce:	6021      	streq	r1, [r4, #0]
 80087d0:	605c      	str	r4, [r3, #4]
 80087d2:	e7c7      	b.n	8008764 <_free_r+0x24>
 80087d4:	bd38      	pop	{r3, r4, r5, pc}
 80087d6:	bf00      	nop
 80087d8:	20001080 	.word	0x20001080

080087dc <_malloc_r>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	1ccd      	adds	r5, r1, #3
 80087e0:	f025 0503 	bic.w	r5, r5, #3
 80087e4:	3508      	adds	r5, #8
 80087e6:	2d0c      	cmp	r5, #12
 80087e8:	bf38      	it	cc
 80087ea:	250c      	movcc	r5, #12
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	4606      	mov	r6, r0
 80087f0:	db01      	blt.n	80087f6 <_malloc_r+0x1a>
 80087f2:	42a9      	cmp	r1, r5
 80087f4:	d903      	bls.n	80087fe <_malloc_r+0x22>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6033      	str	r3, [r6, #0]
 80087fa:	2000      	movs	r0, #0
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	f000 f87d 	bl	80088fc <__malloc_lock>
 8008802:	4a21      	ldr	r2, [pc, #132]	; (8008888 <_malloc_r+0xac>)
 8008804:	6814      	ldr	r4, [r2, #0]
 8008806:	4621      	mov	r1, r4
 8008808:	b991      	cbnz	r1, 8008830 <_malloc_r+0x54>
 800880a:	4c20      	ldr	r4, [pc, #128]	; (800888c <_malloc_r+0xb0>)
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	b91b      	cbnz	r3, 8008818 <_malloc_r+0x3c>
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f863 	bl	80088dc <_sbrk_r>
 8008816:	6020      	str	r0, [r4, #0]
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f000 f85e 	bl	80088dc <_sbrk_r>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d124      	bne.n	800886e <_malloc_r+0x92>
 8008824:	230c      	movs	r3, #12
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f868 	bl	80088fe <__malloc_unlock>
 800882e:	e7e4      	b.n	80087fa <_malloc_r+0x1e>
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	1b5b      	subs	r3, r3, r5
 8008834:	d418      	bmi.n	8008868 <_malloc_r+0x8c>
 8008836:	2b0b      	cmp	r3, #11
 8008838:	d90f      	bls.n	800885a <_malloc_r+0x7e>
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	50cd      	str	r5, [r1, r3]
 800883e:	18cc      	adds	r4, r1, r3
 8008840:	4630      	mov	r0, r6
 8008842:	f000 f85c 	bl	80088fe <__malloc_unlock>
 8008846:	f104 000b 	add.w	r0, r4, #11
 800884a:	1d23      	adds	r3, r4, #4
 800884c:	f020 0007 	bic.w	r0, r0, #7
 8008850:	1ac3      	subs	r3, r0, r3
 8008852:	d0d3      	beq.n	80087fc <_malloc_r+0x20>
 8008854:	425a      	negs	r2, r3
 8008856:	50e2      	str	r2, [r4, r3]
 8008858:	e7d0      	b.n	80087fc <_malloc_r+0x20>
 800885a:	428c      	cmp	r4, r1
 800885c:	684b      	ldr	r3, [r1, #4]
 800885e:	bf16      	itet	ne
 8008860:	6063      	strne	r3, [r4, #4]
 8008862:	6013      	streq	r3, [r2, #0]
 8008864:	460c      	movne	r4, r1
 8008866:	e7eb      	b.n	8008840 <_malloc_r+0x64>
 8008868:	460c      	mov	r4, r1
 800886a:	6849      	ldr	r1, [r1, #4]
 800886c:	e7cc      	b.n	8008808 <_malloc_r+0x2c>
 800886e:	1cc4      	adds	r4, r0, #3
 8008870:	f024 0403 	bic.w	r4, r4, #3
 8008874:	42a0      	cmp	r0, r4
 8008876:	d005      	beq.n	8008884 <_malloc_r+0xa8>
 8008878:	1a21      	subs	r1, r4, r0
 800887a:	4630      	mov	r0, r6
 800887c:	f000 f82e 	bl	80088dc <_sbrk_r>
 8008880:	3001      	adds	r0, #1
 8008882:	d0cf      	beq.n	8008824 <_malloc_r+0x48>
 8008884:	6025      	str	r5, [r4, #0]
 8008886:	e7db      	b.n	8008840 <_malloc_r+0x64>
 8008888:	20001080 	.word	0x20001080
 800888c:	20001084 	.word	0x20001084

08008890 <_realloc_r>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	4607      	mov	r7, r0
 8008894:	4614      	mov	r4, r2
 8008896:	460e      	mov	r6, r1
 8008898:	b921      	cbnz	r1, 80088a4 <_realloc_r+0x14>
 800889a:	4611      	mov	r1, r2
 800889c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088a0:	f7ff bf9c 	b.w	80087dc <_malloc_r>
 80088a4:	b922      	cbnz	r2, 80088b0 <_realloc_r+0x20>
 80088a6:	f7ff ff4b 	bl	8008740 <_free_r>
 80088aa:	4625      	mov	r5, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	f000 f826 	bl	8008900 <_malloc_usable_size_r>
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d20f      	bcs.n	80088d8 <_realloc_r+0x48>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7ff ff8e 	bl	80087dc <_malloc_r>
 80088c0:	4605      	mov	r5, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0f2      	beq.n	80088ac <_realloc_r+0x1c>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4622      	mov	r2, r4
 80088ca:	f7ff fc11 	bl	80080f0 <memcpy>
 80088ce:	4631      	mov	r1, r6
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ff35 	bl	8008740 <_free_r>
 80088d6:	e7e9      	b.n	80088ac <_realloc_r+0x1c>
 80088d8:	4635      	mov	r5, r6
 80088da:	e7e7      	b.n	80088ac <_realloc_r+0x1c>

080088dc <_sbrk_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4c06      	ldr	r4, [pc, #24]	; (80088f8 <_sbrk_r+0x1c>)
 80088e0:	2300      	movs	r3, #0
 80088e2:	4605      	mov	r5, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	f7f9 f86a 	bl	80019c0 <_sbrk>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_sbrk_r+0x1a>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_sbrk_r+0x1a>
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20001318 	.word	0x20001318

080088fc <__malloc_lock>:
 80088fc:	4770      	bx	lr

080088fe <__malloc_unlock>:
 80088fe:	4770      	bx	lr

08008900 <_malloc_usable_size_r>:
 8008900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008904:	1f18      	subs	r0, r3, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfbc      	itt	lt
 800890a:	580b      	ldrlt	r3, [r1, r0]
 800890c:	18c0      	addlt	r0, r0, r3
 800890e:	4770      	bx	lr

08008910 <_init>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr

0800891c <_fini>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr
