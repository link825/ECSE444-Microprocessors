
i2cpar1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005940  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c0c  08005c0c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200000f0  08005d04  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005d04  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143cf  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a69  00000000  00000000  000344ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  00037f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a2f1  00000000  00000000  00038d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e636  00000000  00000000  00063051  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106e9e  00000000  00000000  00071687  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ac  00000000  00000000  001785a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005ae8 	.word	0x08005ae8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	08005ae8 	.word	0x08005ae8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2120      	movs	r1, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fec9 	bl	8001348 <SENSOR_IO_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f023 0304 	bic.w	r3, r3, #4
 80005c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	2120      	movs	r1, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe92 	bl	8001314 <SENSOR_IO_Write>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000606:	f000 fe7b 	bl	8001300 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	210f      	movs	r1, #15
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fe99 	bl	8001348 <SENSOR_IO_Read>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	2302      	movs	r3, #2
 8000638:	21b0      	movs	r1, #176	; 0xb0
 800063a:	f000 fea3 	bl	8001384 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2d8      	uxtb	r0, r3
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	2302      	movs	r3, #2
 8000658:	21b6      	movs	r1, #182	; 0xb6
 800065a:	f000 fe93 	bl	8001384 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800065e:	7b7b      	ldrb	r3, [r7, #13]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b21a      	sxth	r2, r3
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	2302      	movs	r3, #2
 8000676:	21ba      	movs	r1, #186	; 0xba
 8000678:	f000 fe84 	bl	8001384 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2d8      	uxtb	r0, r3
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	2302      	movs	r3, #2
 8000694:	21a8      	movs	r1, #168	; 0xa8
 8000696:	f000 fe75 	bl	8001384 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80006d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000754 <HTS221_H_ReadHumidity+0x130>
 8000712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	dd01      	ble.n	8000720 <HTS221_H_ReadHumidity+0xfc>
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HTS221_H_ReadHumidity+0x134>)
 800071e:	e00a      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000720:	edd7 7a04 	vldr	s15, [r7, #16]
 8000724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d502      	bpl.n	8000734 <HTS221_H_ReadHumidity+0x110>
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	e000      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
 8000734:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000736:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000738:	edd7 7a04 	vldr	s15, [r7, #16]
 800073c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000744:	eef0 7a66 	vmov.f32	s15, s13
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	447a0000 	.word	0x447a0000
 8000758:	447a0000 	.word	0x447a0000

0800075c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	463b      	mov	r3, r7
 8000764:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8000768:	783b      	ldrb	r3, [r7, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2120      	movs	r1, #32
 800076e:	203c      	movs	r0, #60	; 0x3c
 8000770:	f000 fdd0 	bl	8001314 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000774:	787b      	ldrb	r3, [r7, #1]
 8000776:	461a      	mov	r2, r3
 8000778:	2121      	movs	r1, #33	; 0x21
 800077a:	203c      	movs	r0, #60	; 0x3c
 800077c:	f000 fdca 	bl	8001314 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	461a      	mov	r2, r3
 8000784:	2122      	movs	r1, #34	; 0x22
 8000786:	203c      	movs	r0, #60	; 0x3c
 8000788:	f000 fdc4 	bl	8001314 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	461a      	mov	r2, r3
 8000790:	2123      	movs	r1, #35	; 0x23
 8000792:	203c      	movs	r0, #60	; 0x3c
 8000794:	f000 fdbe 	bl	8001314 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	461a      	mov	r2, r3
 800079c:	2124      	movs	r1, #36	; 0x24
 800079e:	203c      	movs	r0, #60	; 0x3c
 80007a0:	f000 fdb8 	bl	8001314 <SENSOR_IO_Write>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80007b6:	2122      	movs	r1, #34	; 0x22
 80007b8:	203c      	movs	r0, #60	; 0x3c
 80007ba:	f000 fdc5 	bl	8001348 <SENSOR_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f043 0303 	orr.w	r3, r3, #3
 80007d0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	461a      	mov	r2, r3
 80007d6:	2122      	movs	r1, #34	; 0x22
 80007d8:	203c      	movs	r0, #60	; 0x3c
 80007da:	f000 fd9b 	bl	8001314 <SENSOR_IO_Write>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80007ea:	f000 fd89 	bl	8001300 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80007ee:	210f      	movs	r1, #15
 80007f0:	203c      	movs	r0, #60	; 0x3c
 80007f2:	f000 fda9 	bl	8001348 <SENSOR_IO_Read>
 80007f6:	4603      	mov	r3, r0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	bd80      	pop	{r7, pc}

080007fc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800080a:	2122      	movs	r1, #34	; 0x22
 800080c:	203c      	movs	r0, #60	; 0x3c
 800080e:	f000 fd9b 	bl	8001348 <SENSOR_IO_Read>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f023 0320 	bic.w	r3, r3, #32
 800081c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	461a      	mov	r2, r3
 8000830:	2122      	movs	r1, #34	; 0x22
 8000832:	203c      	movs	r0, #60	; 0x3c
 8000834:	f000 fd6e 	bl	8001314 <SENSOR_IO_Write>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8000856:	2121      	movs	r1, #33	; 0x21
 8000858:	203c      	movs	r0, #60	; 0x3c
 800085a:	f000 fd75 	bl	8001348 <SENSOR_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000862:	f107 0208 	add.w	r2, r7, #8
 8000866:	2306      	movs	r3, #6
 8000868:	21a8      	movs	r1, #168	; 0xa8
 800086a:	203c      	movs	r0, #60	; 0x3c
 800086c:	f000 fd8a 	bl	8001384 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	e01f      	b.n	80008b6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000876:	7ffb      	ldrb	r3, [r7, #31]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	3301      	adds	r3, #1
 800087c:	f107 0220 	add.w	r2, r7, #32
 8000880:	4413      	add	r3, r2
 8000882:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000886:	b29b      	uxth	r3, r3
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b29a      	uxth	r2, r3
 800088c:	7ffb      	ldrb	r3, [r7, #31]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	f107 0120 	add.w	r1, r7, #32
 8000894:	440b      	add	r3, r1
 8000896:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	b212      	sxth	r2, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	f107 0120 	add.w	r1, r7, #32
 80008aa:	440b      	add	r3, r1
 80008ac:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80008b0:	7ffb      	ldrb	r3, [r7, #31]
 80008b2:	3301      	adds	r3, #1
 80008b4:	77fb      	strb	r3, [r7, #31]
 80008b6:	7ffb      	ldrb	r3, [r7, #31]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d9dc      	bls.n	8000876 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80008c2:	2b20      	cmp	r3, #32
 80008c4:	d00c      	beq.n	80008e0 <LIS3MDL_MagReadXYZ+0xa0>
 80008c6:	2b20      	cmp	r3, #32
 80008c8:	dc02      	bgt.n	80008d0 <LIS3MDL_MagReadXYZ+0x90>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <LIS3MDL_MagReadXYZ+0x9a>
 80008ce:	e010      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d008      	beq.n	80008e6 <LIS3MDL_MagReadXYZ+0xa6>
 80008d4:	2b60      	cmp	r3, #96	; 0x60
 80008d6:	d009      	beq.n	80008ec <LIS3MDL_MagReadXYZ+0xac>
 80008d8:	e00b      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <LIS3MDL_MagReadXYZ+0x100>)
 80008dc:	61bb      	str	r3, [r7, #24]
    break;
 80008de:	e008      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <LIS3MDL_MagReadXYZ+0x104>)
 80008e2:	61bb      	str	r3, [r7, #24]
    break;
 80008e4:	e005      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <LIS3MDL_MagReadXYZ+0x108>)
 80008e8:	61bb      	str	r3, [r7, #24]
    break;
 80008ea:	e002      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <LIS3MDL_MagReadXYZ+0x10c>)
 80008ee:	61bb      	str	r3, [r7, #24]
    break;    
 80008f0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	77fb      	strb	r3, [r7, #31]
 80008f6:	e01b      	b.n	8000930 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	f107 0220 	add.w	r2, r7, #32
 8000900:	4413      	add	r3, r2
 8000902:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800090e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	7ffb      	ldrb	r3, [r7, #31]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000922:	ee17 2a90 	vmov	r2, s15
 8000926:	b212      	sxth	r2, r2
 8000928:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800092a:	7ffb      	ldrb	r3, [r7, #31]
 800092c:	3301      	adds	r3, #1
 800092e:	77fb      	strb	r3, [r7, #31]
 8000930:	7ffb      	ldrb	r3, [r7, #31]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d9e0      	bls.n	80008f8 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	3e0f5c29 	.word	0x3e0f5c29
 8000944:	3e947ae1 	.word	0x3e947ae1
 8000948:	3edc28f6 	.word	0x3edc28f6
 800094c:	3f147ae1 	.word	0x3f147ae1

08000950 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f87b 	bl	8000a58 <LPS22HB_Init>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000978:	f000 fcc2 	bl	8001300 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	210f      	movs	r1, #15
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fce0 	bl	8001348 <SENSOR_IO_Read>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]
 80009aa:	e013      	b.n	80009d4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	7cfb      	ldrb	r3, [r7, #19]
 80009b2:	3328      	adds	r3, #40	; 0x28
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	7cfc      	ldrb	r4, [r7, #19]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f000 fcc4 	bl	8001348 <SENSOR_IO_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4423      	add	r3, r4
 80009ca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	3301      	adds	r3, #1
 80009d2:	74fb      	strb	r3, [r7, #19]
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d9e8      	bls.n	80009ac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	74fb      	strb	r3, [r7, #19]
 80009de:	e010      	b.n	8000a02 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	4413      	add	r3, r2
 80009e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	3301      	adds	r3, #1
 8000a00:	74fb      	strb	r3, [r7, #19]
 8000a02:	7cfb      	ldrb	r3, [r7, #19]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d9eb      	bls.n	80009e0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a18:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da01      	bge.n	8000a2e <LPS22HB_P_ReadPressure+0x96>
 8000a2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a2e:	131b      	asrs	r3, r3, #12
 8000a30:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a54 <LPS22HB_P_ReadPressure+0xbc>
 8000a40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a44:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	42c80000 	.word	0x42c80000

08000a58 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	211a      	movs	r1, #26
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fc6d 	bl	8001348 <SENSOR_IO_Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	7bfa      	ldrb	r2, [r7, #15]
 8000a88:	211a      	movs	r1, #26
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc42 	bl	8001314 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2110      	movs	r1, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fc56 	bl	8001348 <SENSOR_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000aae:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f023 0302 	bic.w	r3, r3, #2
 8000ab6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fc23 	bl	8001314 <SENSOR_IO_Write>
}  
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000ae4:	2111      	movs	r1, #17
 8000ae6:	20d4      	movs	r0, #212	; 0xd4
 8000ae8:	f000 fc2e 	bl	8001348 <SENSOR_IO_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000afc:	7bba      	ldrb	r2, [r7, #14]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	461a      	mov	r2, r3
 8000b08:	2111      	movs	r1, #17
 8000b0a:	20d4      	movs	r0, #212	; 0xd4
 8000b0c:	f000 fc02 	bl	8001314 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000b10:	2112      	movs	r1, #18
 8000b12:	20d4      	movs	r0, #212	; 0xd4
 8000b14:	f000 fc18 	bl	8001348 <SENSOR_IO_Read>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000b2a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000b2c:	7bba      	ldrb	r2, [r7, #14]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2112      	movs	r1, #18
 8000b3a:	20d4      	movs	r0, #212	; 0xd4
 8000b3c:	f000 fbea 	bl	8001314 <SENSOR_IO_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000b52:	2111      	movs	r1, #17
 8000b54:	20d4      	movs	r0, #212	; 0xd4
 8000b56:	f000 fbf7 	bl	8001348 <SENSOR_IO_Read>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2111      	movs	r1, #17
 8000b6c:	20d4      	movs	r0, #212	; 0xd4
 8000b6e:	f000 fbd1 	bl	8001314 <SENSOR_IO_Write>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000b7e:	f000 fbbf 	bl	8001300 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8000b82:	210f      	movs	r1, #15
 8000b84:	20d4      	movs	r0, #212	; 0xd4
 8000b86:	f000 fbdf 	bl	8001348 <SENSOR_IO_Read>
 8000b8a:	4603      	mov	r3, r0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8000b9e:	2116      	movs	r1, #22
 8000ba0:	20d4      	movs	r0, #212	; 0xd4
 8000ba2:	f000 fbd1 	bl	8001348 <SENSOR_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bb0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2116      	movs	r1, #22
 8000bc6:	20d4      	movs	r0, #212	; 0xd4
 8000bc8:	f000 fba4 	bl	8001314 <SENSOR_IO_Write>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8000bea:	2111      	movs	r1, #17
 8000bec:	20d4      	movs	r0, #212	; 0xd4
 8000bee:	f000 fbab 	bl	8001348 <SENSOR_IO_Read>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	2122      	movs	r1, #34	; 0x22
 8000bfe:	20d4      	movs	r0, #212	; 0xd4
 8000c00:	f000 fbc0 	bl	8001384 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
 8000c08:	e01f      	b.n	8000c4a <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000c0a:	7ffb      	ldrb	r3, [r7, #31]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3301      	adds	r3, #1
 8000c10:	f107 0220 	add.w	r2, r7, #32
 8000c14:	4413      	add	r3, r2
 8000c16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	f107 0120 	add.w	r1, r7, #32
 8000c28:	440b      	add	r3, r1
 8000c2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	b212      	sxth	r2, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	f107 0120 	add.w	r1, r7, #32
 8000c3e:	440b      	add	r3, r1
 8000c40:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	3301      	adds	r3, #1
 8000c48:	77fb      	strb	r3, [r7, #31]
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d9dc      	bls.n	8000c0a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d828      	bhi.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c95 	.word	0x08000c95
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000cad 	.word	0x08000cad
 8000c6c:	08000cad 	.word	0x08000cad
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000cad 	.word	0x08000cad
 8000c7c:	08000cad 	.word	0x08000cad
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cad 	.word	0x08000cad
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000ca7 	.word	0x08000ca7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8000c96:	61bb      	str	r3, [r7, #24]
    break;
 8000c98:	e008      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8000c9c:	61bb      	str	r3, [r7, #24]
    break;
 8000c9e:	e005      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8000ca2:	61bb      	str	r3, [r7, #24]
    break;
 8000ca4:	e002      	b.n	8000cac <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8000ca8:	61bb      	str	r3, [r7, #24]
    break;    
 8000caa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]
 8000cb0:	e017      	b.n	8000ce2 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	f107 0220 	add.w	r2, r7, #32
 8000cba:	4413      	add	r3, r2
 8000cbc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000cdc:	7ffb      	ldrb	r3, [r7, #31]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	77fb      	strb	r3, [r7, #31]
 8000ce2:	7ffb      	ldrb	r3, [r7, #31]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d9e4      	bls.n	8000cb2 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	410c0000 	.word	0x410c0000
 8000cf4:	418c0000 	.word	0x418c0000
 8000cf8:	420c0000 	.word	0x420c0000
 8000cfc:	428c0000 	.word	0x428c0000

08000d00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// handles interupts from the user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d10:	d10f      	bne.n	8000d32 <HAL_GPIO_EXTI_Callback+0x32>
		counter++;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d1a:	6013      	str	r3, [r2, #0]
		counter = counter % 4;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	425a      	negs	r2, r3
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	f002 0203 	and.w	r2, r2, #3
 8000d2a:	bf58      	it	pl
 8000d2c:	4253      	negpl	r3, r2
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d30:	6013      	str	r3, [r2, #0]
	}
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000010c 	.word	0x2000010c

08000d44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d4a:	f000 fdca 	bl	80018e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d4e:	f000 f89d 	bl	8000e8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d52:	f000 f99f 	bl	8001094 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000d56:	f000 f911 	bl	8000f7c <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000d5a:	f000 f94f 	bl	8000ffc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	BSP_HSENSOR_Init(); //humidity sensor
 8000d5e:	f000 fb89 	bl	8001474 <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init(); //magnetometer
 8000d62:	f000 fbb5 	bl	80014d0 <BSP_MAGNETO_Init>
	BSP_GYRO_Init(); //gyroscope
 8000d66:	f000 fb2b 	bl	80013c0 <BSP_GYRO_Init>
	BSP_PSENSOR_Init(); //barometer
 8000d6a:	f000 fbf5 	bl	8001558 <BSP_PSENSOR_Init>
		//sprintf(global_buffer, "Magnetometer values are %d, %d, %d ", (int)magneto_values[0], (int)magneto_values[1], (int)magneto_values[2]);
		//BSP_GYRO_GetXYZ(gyro_values);
		//sprintf(global_buffer, "Gyro values are %d, %d, %d ", (int)gyro_values[0], (int)gyro_values[1], (int)gyro_values[2]);
		//pressure = BSP_PSENSOR_ReadPressure();
		//sprintf(global_buffer, "Pressure is %d ", (int)pressure);
		if (counter == 0) {
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <main+0x11c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d117      	bne.n	8000da6 <main+0x62>
			humidity = BSP_HSENSOR_ReadHumidity();
 8000d76:	f000 fb9d 	bl	80014b4 <BSP_HSENSOR_ReadHumidity>
 8000d7a:	eef0 7a40 	vmov.f32	s15, s0
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <main+0x120>)
 8000d80:	edc3 7a00 	vstr	s15, [r3]
			memset(global_buffer, 0, sizeof(global_buffer));
 8000d84:	2264      	movs	r2, #100	; 0x64
 8000d86:	2100      	movs	r1, #0
 8000d88:	4837      	ldr	r0, [pc, #220]	; (8000e68 <main+0x124>)
 8000d8a:	f004 faa8 	bl	80052de <memset>
			sprintf(global_buffer, "Humidity is %d ", (int) humidity);
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <main+0x120>)
 8000d90:	edd3 7a00 	vldr	s15, [r3]
 8000d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d98:	ee17 2a90 	vmov	r2, s15
 8000d9c:	4933      	ldr	r1, [pc, #204]	; (8000e6c <main+0x128>)
 8000d9e:	4832      	ldr	r0, [pc, #200]	; (8000e68 <main+0x124>)
 8000da0:	f004 faa6 	bl	80052f0 <siprintf>
 8000da4:	e050      	b.n	8000e48 <main+0x104>
		} else if (counter == 1) {
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <main+0x11c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d116      	bne.n	8000ddc <main+0x98>
			BSP_MAGNETO_GetXYZ(magneto_values);
 8000dae:	4830      	ldr	r0, [pc, #192]	; (8000e70 <main+0x12c>)
 8000db0:	f000 fbba 	bl	8001528 <BSP_MAGNETO_GetXYZ>
			memset(global_buffer, 0, sizeof(global_buffer));
 8000db4:	2264      	movs	r2, #100	; 0x64
 8000db6:	2100      	movs	r1, #0
 8000db8:	482b      	ldr	r0, [pc, #172]	; (8000e68 <main+0x124>)
 8000dba:	f004 fa90 	bl	80052de <memset>
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
					(int) magneto_values[0], (int) magneto_values[1],
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <main+0x12c>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 8000dc2:	461a      	mov	r2, r3
					(int) magneto_values[0], (int) magneto_values[1],
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <main+0x12c>)
 8000dc6:	885b      	ldrh	r3, [r3, #2]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 8000dc8:	4619      	mov	r1, r3
					(int) magneto_values[2]);
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <main+0x12c>)
 8000dcc:	889b      	ldrh	r3, [r3, #4]
			sprintf(global_buffer, "Magnetometer values are %d, %d, %d ",
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4928      	ldr	r1, [pc, #160]	; (8000e74 <main+0x130>)
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <main+0x124>)
 8000dd6:	f004 fa8b 	bl	80052f0 <siprintf>
 8000dda:	e035      	b.n	8000e48 <main+0x104>

		} else if (counter == 2) {
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <main+0x11c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d116      	bne.n	8000e12 <main+0xce>
			BSP_GYRO_GetXYZ(gyro_values);
 8000de4:	4824      	ldr	r0, [pc, #144]	; (8000e78 <main+0x134>)
 8000de6:	f000 fb2d 	bl	8001444 <BSP_GYRO_GetXYZ>
			memset(global_buffer, 0, sizeof(global_buffer));
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	2100      	movs	r1, #0
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <main+0x124>)
 8000df0:	f004 fa75 	bl	80052de <memset>
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
					(int) gyro_values[0], (int) gyro_values[1],
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <main+0x134>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 8000df8:	461a      	mov	r2, r3
					(int) gyro_values[0], (int) gyro_values[1],
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0x134>)
 8000dfc:	885b      	ldrh	r3, [r3, #2]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 8000dfe:	4619      	mov	r1, r3
					(int) gyro_values[2]);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <main+0x134>)
 8000e02:	889b      	ldrh	r3, [r3, #4]
			sprintf(global_buffer, "Gyro values are %d, %d, %d ",
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	460b      	mov	r3, r1
 8000e08:	491c      	ldr	r1, [pc, #112]	; (8000e7c <main+0x138>)
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <main+0x124>)
 8000e0c:	f004 fa70 	bl	80052f0 <siprintf>
 8000e10:	e01a      	b.n	8000e48 <main+0x104>

		} else if (counter == 3) {
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <main+0x11c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d116      	bne.n	8000e48 <main+0x104>
			pressure = BSP_PSENSOR_ReadPressure();
 8000e1a:	f000 fbbd 	bl	8001598 <BSP_PSENSOR_ReadPressure>
 8000e1e:	eef0 7a40 	vmov.f32	s15, s0
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x13c>)
 8000e24:	edc3 7a00 	vstr	s15, [r3]
			memset(global_buffer, 0, sizeof(global_buffer));
 8000e28:	2264      	movs	r2, #100	; 0x64
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480e      	ldr	r0, [pc, #56]	; (8000e68 <main+0x124>)
 8000e2e:	f004 fa56 	bl	80052de <memset>
			sprintf(global_buffer, "Pressure is %d ", (int) pressure);
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <main+0x13c>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 2a90 	vmov	r2, s15
 8000e40:	4910      	ldr	r1, [pc, #64]	; (8000e84 <main+0x140>)
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <main+0x124>)
 8000e44:	f004 fa54 	bl	80052f0 <siprintf>

		}

		HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer,
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	2264      	movs	r2, #100	; 0x64
 8000e4e:	4906      	ldr	r1, [pc, #24]	; (8000e68 <main+0x124>)
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <main+0x144>)
 8000e52:	f003 fc1d 	bl	8004690 <HAL_UART_Transmit>
				sizeof(global_buffer), 1000);
		HAL_Delay(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f000 fdb7 	bl	80019cc <HAL_Delay>
		if (counter == 0) {
 8000e5e:	e786      	b.n	8000d6e <main+0x2a>
 8000e60:	2000010c 	.word	0x2000010c
 8000e64:	200001e8 	.word	0x200001e8
 8000e68:	20000134 	.word	0x20000134
 8000e6c:	08005b00 	.word	0x08005b00
 8000e70:	2000012c 	.word	0x2000012c
 8000e74:	08005b10 	.word	0x08005b10
 8000e78:	20000278 	.word	0x20000278
 8000e7c:	08005b34 	.word	0x08005b34
 8000e80:	200001e4 	.word	0x200001e4
 8000e84:	08005b50 	.word	0x08005b50
 8000e88:	200001ec 	.word	0x200001ec

08000e8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0bc      	sub	sp, #240	; 0xf0
 8000e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e96:	2244      	movs	r2, #68	; 0x44
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 fa1f 	bl	80052de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ea0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2294      	movs	r2, #148	; 0x94
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 fa11 	bl	80052de <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f001 ff15 	bl	8002cec <HAL_PWREx_ControlVoltageScaling>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x40>
			!= HAL_OK) {
		Error_Handler();
 8000ec8:	f000 f926 	bl	8001118 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ede:	2360      	movs	r3, #96	; 0x60
 8000ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000ef6:	233c      	movs	r3, #60	; 0x3c
 8000ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 ff8e 	bl	8002e34 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x96>
		Error_Handler();
 8000f1e:	f000 f8fb 	bl	8001118 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000f40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fb9a 	bl	8003680 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xca>
		Error_Handler();
 8000f52:	f000 f8e1 	bl	8001118 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000f56:	2381      	movs	r3, #129	; 0x81
 8000f58:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_I2C2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fe3b 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xe8>
		Error_Handler();
 8000f70:	f000 f8d2 	bl	8001118 <Error_Handler>
	}
}
 8000f74:	bf00      	nop
 8000f76:	37f0      	adds	r7, #240	; 0xf0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <MX_I2C2_Init+0x78>)
 8000f84:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <MX_I2C2_Init+0x7c>)
 8000f8a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fb8:	f001 f8d8 	bl	800216c <HAL_I2C_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000fc2:	f000 f8a9 	bl	8001118 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fca:	f001 fdd7 	bl	8002b7c <HAL_I2CEx_ConfigAnalogFilter>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000fd4:	f000 f8a0 	bl	8001118 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_I2C2_Init+0x74>)
 8000fdc:	f001 fe19 	bl	8002c12 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000fe6:	f000 f897 	bl	8001118 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000198 	.word	0x20000198
 8000ff4:	40005800 	.word	0x40005800
 8000ff8:	307075b1 	.word	0x307075b1

08000ffc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_USART1_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_USART1_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_USART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001046:	f003 fad3 	bl	80045f0 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001050:	f000 f862 	bl	8001118 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_USART1_UART_Init+0x90>)
 8001058:	f004 f827 	bl	80050aa <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001062:	f000 f859 	bl	8001118 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_USART1_UART_Init+0x90>)
 800106a:	f004 f85c 	bl	8005126 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001074:	f000 f850 	bl	8001118 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_USART1_UART_Init+0x90>)
 800107a:	f003 ffdd 	bl	8005038 <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001084:	f000 f848 	bl	8001118 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001ec 	.word	0x200001ec
 8001090:	40013800 	.word	0x40013800

08001094 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_GPIO_Init+0x78>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <MX_GPIO_Init+0x78>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_GPIO_Init+0x78>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_GPIO_Init+0x78>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <MX_GPIO_Init+0x78>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_GPIO_Init+0x78>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_GPIO_Init+0x7c>)
 80010e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_GPIO_Init+0x80>)
 80010f0:	f000 fda0 	bl	8001c34 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f000 fd64 	bl	8001bc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	; 0x28
 8001100:	f000 fd7d 	bl	8001bfe <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	10110000 	.word	0x10110000
 8001114:	48000800 	.word	0x48000800

08001118 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800111e:	e7fe      	b.n	800111e <Error_Handler+0x6>

08001120 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <I2Cx_MspInit+0xa8>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	4a26      	ldr	r2, [pc, #152]	; (80011c8 <I2Cx_MspInit+0xa8>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001144:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001146:	2312      	movs	r3, #18
 8001148:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001152:	2304      	movs	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <I2Cx_MspInit+0xac>)
 800115e:	f000 fd69 	bl	8001c34 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <I2Cx_MspInit+0xac>)
 800116a:	f000 fd63 	bl	8001c34 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001178:	6593      	str	r3, [r2, #88]	; 0x58
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <I2Cx_MspInit+0xa8>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <I2Cx_MspInit+0xa8>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <I2Cx_MspInit+0xa8>)
 8001198:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800119c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	210f      	movs	r1, #15
 80011a2:	2021      	movs	r0, #33	; 0x21
 80011a4:	f000 fd0f 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011a8:	2021      	movs	r0, #33	; 0x21
 80011aa:	f000 fd28 	bl	8001bfe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	210f      	movs	r1, #15
 80011b2:	2022      	movs	r0, #34	; 0x22
 80011b4:	f000 fd07 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80011b8:	2022      	movs	r0, #34	; 0x22
 80011ba:	f000 fd20 	bl	8001bfe <HAL_NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000400 	.word	0x48000400

080011d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <I2Cx_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <I2Cx_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff89 	bl	8001120 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 ffac 	bl	800216c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001214:	2100      	movs	r1, #0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fcb0 	bl	8002b7c <HAL_I2CEx_ConfigAnalogFilter>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005800 	.word	0x40005800
 8001228:	00702681 	.word	0x00702681

0800122c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af04      	add	r7, sp, #16
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	4608      	mov	r0, r1
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	4603      	mov	r3, r0
 800123c:	72fb      	strb	r3, [r7, #11]
 800123e:	460b      	mov	r3, r1
 8001240:	813b      	strh	r3, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	b299      	uxth	r1, r3
 800124e:	88f8      	ldrh	r0, [r7, #6]
 8001250:	893a      	ldrh	r2, [r7, #8]
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f001 f954 	bl	8002510 <HAL_I2C_Mem_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f832 	bl	80012e0 <I2Cx_Error>
  }
  return status;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b08a      	sub	sp, #40	; 0x28
 800128a:	af04      	add	r7, sp, #16
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	4608      	mov	r0, r1
 8001290:	4611      	mov	r1, r2
 8001292:	461a      	mov	r2, r3
 8001294:	4603      	mov	r3, r0
 8001296:	72fb      	strb	r3, [r7, #11]
 8001298:	460b      	mov	r3, r1
 800129a:	813b      	strh	r3, [r7, #8]
 800129c:	4613      	mov	r3, r2
 800129e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	88f8      	ldrh	r0, [r7, #6]
 80012aa:	893a      	ldrh	r2, [r7, #8]
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4603      	mov	r3, r0
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f001 f813 	bl	80022e8 <HAL_I2C_Mem_Write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	4619      	mov	r1, r3
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f805 	bl	80012e0 <I2Cx_Error>
  }
  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 ffcc 	bl	800228a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff6c 	bl	80011d0 <I2Cx_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <SENSOR_IO_Init+0x10>)
 8001306:	f7ff ff63 	bl	80011d0 <I2Cx_Init>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000030c 	.word	0x2000030c

08001314 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	460b      	mov	r3, r1
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	b29a      	uxth	r2, r3
 800132a:	79f9      	ldrb	r1, [r7, #7]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	1d7b      	adds	r3, r7, #5
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <SENSOR_IO_Write+0x30>)
 8001338:	f7ff ffa5 	bl	8001286 <I2Cx_WriteMultiple>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000030c 	.word	0x2000030c

08001348 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	b29a      	uxth	r2, r3
 8001360:	79f9      	ldrb	r1, [r7, #7]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 030f 	add.w	r3, r7, #15
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <SENSOR_IO_Read+0x38>)
 8001370:	f7ff ff5c 	bl	800122c <I2Cx_ReadMultiple>

  return read_value;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000030c 	.word	0x2000030c

08001384 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
 800138a:	603a      	str	r2, [r7, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	460b      	mov	r3, r1
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	4613      	mov	r3, r2
 8001398:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	b29a      	uxth	r2, r3
 800139e:	79f9      	ldrb	r1, [r7, #7]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <SENSOR_IO_ReadMultiple+0x38>)
 80013ac:	f7ff ff3e 	bl	800122c <I2Cx_ReadMultiple>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29b      	uxth	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000030c 	.word	0x2000030c

080013c0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80013ca:	2300      	movs	r3, #0
 80013cc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <BSP_GYRO_Init+0x7c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4798      	blx	r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b6a      	cmp	r3, #106	; 0x6a
 80013d8:	d002      	beq.n	80013e0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e028      	b.n	8001432 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <BSP_GYRO_Init+0x80>)
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <BSP_GYRO_Init+0x7c>)
 80013e4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80013ea:	2330      	movs	r3, #48	; 0x30
 80013ec:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80013fe:	230c      	movs	r3, #12
 8001400:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001402:	7aba      	ldrb	r2, [r7, #10]
 8001404:	797b      	ldrb	r3, [r7, #5]
 8001406:	4313      	orrs	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <BSP_GYRO_Init+0x80>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	89ba      	ldrh	r2, [r7, #12]
 800142a:	4610      	mov	r0, r2
 800142c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000004c 	.word	0x2000004c
 8001440:	20000110 	.word	0x20000110

08001444 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <BSP_GYRO_GetXYZ+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <BSP_GYRO_GetXYZ+0x2c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <BSP_GYRO_GetXYZ+0x2c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000110 	.word	0x20000110

08001474 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <BSP_HSENSOR_Init+0x38>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	20be      	movs	r0, #190	; 0xbe
 8001480:	4798      	blx	r3
 8001482:	4603      	mov	r3, r0
 8001484:	2bbc      	cmp	r3, #188	; 0xbc
 8001486:	d002      	beq.n	800148e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e009      	b.n	80014a2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <BSP_HSENSOR_Init+0x3c>)
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <BSP_HSENSOR_Init+0x38>)
 8001492:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <BSP_HSENSOR_Init+0x3c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	20be      	movs	r0, #190	; 0xbe
 800149c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000114 	.word	0x20000114

080014b4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <BSP_HSENSOR_ReadHumidity+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	20be      	movs	r0, #190	; 0xbe
 80014c0:	4798      	blx	r3
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000114 	.word	0x20000114

080014d0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <BSP_MAGNETO_Init+0x50>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4798      	blx	r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b3d      	cmp	r3, #61	; 0x3d
 80014e4:	d002      	beq.n	80014ec <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e013      	b.n	8001514 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <BSP_MAGNETO_Init+0x54>)
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <BSP_MAGNETO_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80014f2:	2358      	movs	r3, #88	; 0x58
 80014f4:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80014fe:	2308      	movs	r3, #8
 8001500:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001502:	2340      	movs	r3, #64	; 0x40
 8001504:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <BSP_MAGNETO_Init+0x54>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	463a      	mov	r2, r7
 800150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001512:	4798      	blx	r3
  } 

  return ret;  
 8001514:	79fb      	ldrb	r3, [r7, #7]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000118 	.word	0x20000118

08001528 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <BSP_MAGNETO_GetXYZ+0x2c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
    }
  }
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000118 	.word	0x20000118

08001558 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <BSP_PSENSOR_Init+0x38>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	20ba      	movs	r0, #186	; 0xba
 8001564:	4798      	blx	r3
 8001566:	4603      	mov	r3, r0
 8001568:	2bb1      	cmp	r3, #177	; 0xb1
 800156a:	d002      	beq.n	8001572 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	e009      	b.n	8001586 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <BSP_PSENSOR_Init+0x3c>)
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <BSP_PSENSOR_Init+0x38>)
 8001576:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <BSP_PSENSOR_Init+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	20ba      	movs	r0, #186	; 0xba
 8001580:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000040 	.word	0x20000040
 8001594:	2000011c 	.word	0x2000011c

08001598 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <BSP_PSENSOR_ReadPressure+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	20ba      	movs	r0, #186	; 0xba
 80015a4:	4798      	blx	r3
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000011c 	.word	0x2000011c

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x44>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	; 0x60
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x44>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x44>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_I2C_MspInit+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d128      	bne.n	8001670 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_I2C_MspInit+0x80>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_I2C_MspInit+0x80>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_I2C_MspInit+0x80>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001636:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001648:	2304      	movs	r3, #4
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <HAL_I2C_MspInit+0x84>)
 8001654:	f000 faee 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_I2C_MspInit+0x80>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_I2C_MspInit+0x80>)
 800165e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001662:	6593      	str	r3, [r2, #88]	; 0x58
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_I2C_MspInit+0x80>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40005800 	.word	0x40005800
 800167c:	40021000 	.word	0x40021000
 8001680:	48000400 	.word	0x48000400

08001684 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_I2C_MspDeInit+0x3c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d10f      	bne.n	80016b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_I2C_MspDeInit+0x40>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_I2C_MspDeInit+0x40>)
 800169c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016a0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <HAL_I2C_MspDeInit+0x44>)
 80016a8:	f000 fc56 	bl	8001f58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80016ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_I2C_MspDeInit+0x44>)
 80016b2:	f000 fc51 	bl	8001f58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40005800 	.word	0x40005800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x7c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d127      	bne.n	800173e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_UART_MspInit+0x80>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <HAL_UART_MspInit+0x80>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6613      	str	r3, [r2, #96]	; 0x60
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_UART_MspInit+0x80>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_UART_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_UART_MspInit+0x80>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_UART_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspInit+0x84>)
 800173a:	f000 fa7b 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40013800 	.word	0x40013800
 800174c:	40021000 	.word	0x40021000
 8001750:	48000400 	.word	0x48000400

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8f4 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b0:	f000 fcc4 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f003 fd44 	bl	8005274 <__errno>
 80017ec:	4602      	mov	r2, r0
 80017ee:	230c      	movs	r3, #12
 80017f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200a0000 	.word	0x200a0000
 8001818:	00000400 	.word	0x00000400
 800181c:	20000120 	.word	0x20000120
 8001820:	20000360 	.word	0x20000360

08001824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <SystemInit+0x64>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <SystemInit+0x64>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <SystemInit+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <SystemInit+0x68>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <SystemInit+0x68>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <SystemInit+0x68>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <SystemInit+0x68>)
 8001850:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001854:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001858:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SystemInit+0x68>)
 800185c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001860:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <SystemInit+0x68>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <SystemInit+0x68>)
 8001868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <SystemInit+0x68>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SystemInit+0x64>)
 8001876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187a:	609a      	str	r2, [r3, #8]
#endif
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	40021000 	.word	0x40021000

08001890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001894:	f7ff ffc6 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800189a:	e003      	b.n	80018a4 <LoopCopyDataInit>

0800189c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800189e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018a2:	3104      	adds	r1, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018ac:	d3f6      	bcc.n	800189c <CopyDataInit>
	ldr	r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018b0:	e002      	b.n	80018b8 <LoopFillZerobss>

080018b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018b4:	f842 3b04 	str.w	r3, [r2], #4

080018b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <LoopForever+0x16>)
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018bc:	d3f9      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f003 fcdf 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c2:	f7ff fa3f 	bl	8000d44 <main>

080018c6 <LoopForever>:

LoopForever:
    b LoopForever
 80018c6:	e7fe      	b.n	80018c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018c8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80018cc:	08005c14 	.word	0x08005c14
	ldr	r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018d4:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 80018d8:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 80018dc:	20000360 	.word	0x20000360

080018e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_IRQHandler>

080018e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f95f 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f80e 	bl	8001914 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	e001      	b.n	8001908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001904:	f7ff fe56 	bl	80015b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001908:	79fb      	ldrb	r3, [r7, #7]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_InitTick+0x6c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_InitTick+0x70>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_InitTick+0x6c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f96b 	bl	8001c1a <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d809      	bhi.n	8001964 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f935 	bl	8001bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_InitTick+0x74>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e007      	b.n	8001974 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e004      	b.n	8001974 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e001      	b.n	8001974 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000088 	.word	0x20000088
 8001984:	20000080 	.word	0x20000080
 8001988:	20000084 	.word	0x20000084

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000088 	.word	0x20000088
 80019b0:	20000358 	.word	0x20000358

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000358 	.word	0x20000358

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_Delay+0x40>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000088 	.word	0x20000088

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	e166      	b.n	8001f12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8158 	beq.w	8001f0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d00b      	beq.n	8001c7c <HAL_GPIO_Init+0x48>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c70:	2b11      	cmp	r3, #17
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b12      	cmp	r3, #18
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0xea>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d123      	bne.n	8001d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0203 	and.w	r2, r3, #3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80b2 	beq.w	8001f0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6613      	str	r3, [r2, #96]	; 0x60
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc0:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dea:	d02b      	beq.n	8001e44 <HAL_GPIO_Init+0x210>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d025      	beq.n	8001e40 <HAL_GPIO_Init+0x20c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x308>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d01f      	beq.n	8001e3c <HAL_GPIO_Init+0x208>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x30c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d019      	beq.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x310>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_GPIO_Init+0x200>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_GPIO_Init+0x314>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1fc>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4d      	ldr	r2, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x318>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1f8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_GPIO_Init+0x31c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1f4>
 8001e24:	2307      	movs	r3, #7
 8001e26:	e00e      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e28:	2308      	movs	r3, #8
 8001e2a:	e00c      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	e00a      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e30:	2305      	movs	r3, #5
 8001e32:	e008      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e006      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e004      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e44:	2300      	movs	r3, #0
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e56:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e8e:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_GPIO_Init+0x320>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f ae91 	bne.w	8001c44 <HAL_GPIO_Init+0x10>
  }
}
 8001f22:	bf00      	nop
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	48000c00 	.word	0x48000c00
 8001f44:	48001000 	.word	0x48001000
 8001f48:	48001400 	.word	0x48001400
 8001f4c:	48001800 	.word	0x48001800
 8001f50:	48001c00 	.word	0x48001c00
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f66:	e0c9      	b.n	80020fc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80bc 	beq.w	80020f6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f7e:	4a66      	ldr	r2, [pc, #408]	; (8002118 <HAL_GPIO_DeInit+0x1c0>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa6:	d02b      	beq.n	8002000 <HAL_GPIO_DeInit+0xa8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_DeInit+0x1c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d025      	beq.n	8001ffc <HAL_GPIO_DeInit+0xa4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_GPIO_DeInit+0x1c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_GPIO_DeInit+0xa0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_GPIO_DeInit+0x1cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d019      	beq.n	8001ff4 <HAL_GPIO_DeInit+0x9c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a59      	ldr	r2, [pc, #356]	; (8002128 <HAL_GPIO_DeInit+0x1d0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_DeInit+0x98>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_GPIO_DeInit+0x1d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_DeInit+0x94>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a57      	ldr	r2, [pc, #348]	; (8002130 <HAL_GPIO_DeInit+0x1d8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_DeInit+0x90>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a56      	ldr	r2, [pc, #344]	; (8002134 <HAL_GPIO_DeInit+0x1dc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_DeInit+0x8c>
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	e00e      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	e00c      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001fe8:	2306      	movs	r3, #6
 8001fea:	e00a      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001fec:	2305      	movs	r3, #5
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8002000:	2300      	movs	r3, #0
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	429a      	cmp	r2, r3
 8002010:	d132      	bne.n	8002078 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	4947      	ldr	r1, [pc, #284]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 800201c:	4013      	ands	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	4943      	ldr	r1, [pc, #268]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 800202a:	4013      	ands	r3, r2
 800202c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800202e:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	4940      	ldr	r1, [pc, #256]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8002038:	4013      	ands	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	493c      	ldr	r1, [pc, #240]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8002046:	4013      	ands	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <HAL_GPIO_DeInit+0x1c0>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43da      	mvns	r2, r3
 800206a:	482b      	ldr	r0, [pc, #172]	; (8002118 <HAL_GPIO_DeInit+0x1c0>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	400a      	ands	r2, r1
 8002072:	3302      	adds	r3, #2
 8002074:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2103      	movs	r1, #3
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	08d2      	lsrs	r2, r2, #3
 80020ac:	4019      	ands	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2103      	movs	r1, #3
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	2101      	movs	r1, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f af2f 	bne.w	8001f68 <HAL_GPIO_DeInit+0x10>
  }
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	48001400 	.word	0x48001400
 8002130:	48001800 	.word	0x48001800
 8002134:	48001c00 	.word	0x48001c00
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fdd0 	bl	8000d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e081      	b.n	8002282 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fa32 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d104      	bne.n	8002206 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	ea42 0103 	orr.w	r1, r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	021a      	lsls	r2, r3, #8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69d9      	ldr	r1, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e021      	b.n	80022e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff f9e5 	bl	8001684 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	f040 80f9 	bne.w	8002502 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_I2C_Mem_Write+0x34>
 8002316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0ed      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Write+0x4e>
 8002332:	2302      	movs	r3, #2
 8002334:	e0e6      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800233e:	f7ff fb39 	bl	80019b4 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2319      	movs	r3, #25
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fac3 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d1      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002388:	88f8      	ldrh	r0, [r7, #6]
 800238a:	893a      	ldrh	r2, [r7, #8]
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4603      	mov	r3, r0
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9d3 	bl	8002744 <I2C_RequestMemoryWrite>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0a9      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d90e      	bls.n	80023d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fba5 	bl	8002b20 <I2C_TransferConfig>
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fb94 	bl	8002b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 faad 	bl	800295c <I2C_WaitOnTXISFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e07b      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d034      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x1c8>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d130      	bne.n	80024b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fa3f 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04d      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d90e      	bls.n	8002490 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fb49 	bl	8002b20 <I2C_TransferConfig>
 800248e:	e00f      	b.n	80024b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fb38 	bl	8002b20 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d19e      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa8c 	bl	80029dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e01a      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2220      	movs	r2, #32
 80024d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_I2C_Mem_Write+0x224>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	fe00e800 	.word	0xfe00e800

08002510 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	817b      	strh	r3, [r7, #10]
 8002522:	460b      	mov	r3, r1
 8002524:	813b      	strh	r3, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	f040 80fd 	bne.w	8002732 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_I2C_Mem_Read+0x34>
 800253e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0f1      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_I2C_Mem_Read+0x4e>
 800255a:	2302      	movs	r3, #2
 800255c:	e0ea      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002566:	f7ff fa25 	bl	80019b4 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2319      	movs	r3, #25
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f9af 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d5      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2222      	movs	r2, #34	; 0x22
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025b0:	88f8      	ldrh	r0, [r7, #6]
 80025b2:	893a      	ldrh	r2, [r7, #8]
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4603      	mov	r3, r0
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f913 	bl	80027ec <I2C_RequestMemoryRead>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0ad      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2bff      	cmp	r3, #255	; 0xff
 80025e0:	d90e      	bls.n	8002600 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	22ff      	movs	r2, #255	; 0xff
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	8979      	ldrh	r1, [r7, #10]
 80025f0:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_I2C_Mem_Read+0x22c>)
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fa91 	bl	8002b20 <I2C_TransferConfig>
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	b2da      	uxtb	r2, r3
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_I2C_Mem_Read+0x22c>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fa80 	bl	8002b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2200      	movs	r2, #0
 8002628:	2104      	movs	r1, #4
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f956 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07c      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d034      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x1d0>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d130      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f927 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e04d      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d90e      	bls.n	80026c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	2300      	movs	r3, #0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fa31 	bl	8002b20 <I2C_TransferConfig>
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa20 	bl	8002b20 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d19a      	bne.n	8002620 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f974 	bl	80029dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01a      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_I2C_Mem_Read+0x230>)
 8002712:	400b      	ands	r3, r1
 8002714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	80002400 	.word	0x80002400
 8002740:	fe00e800 	.word	0xfe00e800

08002744 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	8979      	ldrh	r1, [r7, #10]
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <I2C_RequestMemoryWrite+0xa4>)
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f9d7 	bl	8002b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	69b9      	ldr	r1, [r7, #24]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f8f0 	bl	800295c <I2C_WaitOnTXISFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e02c      	b.n	80027e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800278c:	893b      	ldrh	r3, [r7, #8]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
 8002796:	e015      	b.n	80027c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f8d6 	bl	800295c <I2C_WaitOnTXISFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e012      	b.n	80027e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ba:	893b      	ldrh	r3, [r7, #8]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f884 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	80002000 	.word	0x80002000

080027ec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	817b      	strh	r3, [r7, #10]
 80027fe:	460b      	mov	r3, r1
 8002800:	813b      	strh	r3, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <I2C_RequestMemoryRead+0xa4>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f984 	bl	8002b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f89d 	bl	800295c <I2C_WaitOnTXISFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e02c      	b.n	8002886 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
 800283c:	e015      	b.n	800286a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800283e:	893b      	ldrh	r3, [r7, #8]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	b29b      	uxth	r3, r3
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f883 	bl	800295c <I2C_WaitOnTXISFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e012      	b.n	8002886 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002860:	893b      	ldrh	r3, [r7, #8]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2200      	movs	r2, #0
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f831 	bl	80028dc <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	80002000 	.word	0x80002000

08002894 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d103      	bne.n	80028b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d007      	beq.n	80028d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	619a      	str	r2, [r3, #24]
  }
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ec:	e022      	b.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d01e      	beq.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f6:	f7ff f85d 	bl	80019b4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d113      	bne.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e00f      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4013      	ands	r3, r2
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	429a      	cmp	r2, r3
 8002950:	d0cd      	beq.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002968:	e02c      	b.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f870 	bl	8002a54 <I2C_IsAcknowledgeFailed>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e02a      	b.n	80029d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d01e      	beq.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff f815 	bl	80019b4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d113      	bne.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e007      	b.n	80029d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d1cb      	bne.n	800296a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e8:	e028      	b.n	8002a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f830 	bl	8002a54 <I2C_IsAcknowledgeFailed>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e026      	b.n	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe ffd9 	bl	80019b4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d113      	bne.n	8002a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e007      	b.n	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d1cf      	bne.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d151      	bne.n	8002b12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6e:	e022      	b.n	8002ab6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d01e      	beq.n	8002ab6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe ff9c 	bl	80019b4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <I2C_IsAcknowledgeFailed+0x3a>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d113      	bne.n	8002ab6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02e      	b.n	8002b14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d1d5      	bne.n	8002a70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fedd 	bl	8002894 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <I2C_IsAcknowledgeFailed+0xc8>)
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0204 	orr.w	r2, r3, #4
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	fe00e800 	.word	0xfe00e800

08002b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	0d5b      	lsrs	r3, r3, #21
 8002b3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <I2C_TransferConfig+0x58>)
 8002b42:	430b      	orrs	r3, r1
 8002b44:	43db      	mvns	r3, r3
 8002b46:	ea02 0103 	and.w	r1, r2, r3
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b50:	7a7b      	ldrb	r3, [r7, #9]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	03ff63ff 	.word	0x03ff63ff

08002b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d138      	bne.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e032      	b.n	8002c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b085      	sub	sp, #20
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d139      	bne.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e033      	b.n	8002c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	; 0x24
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d102      	bne.n	8002cc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc2:	e00b      	b.n	8002cdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd2:	d102      	bne.n	8002cda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd8:	e000      	b.n	8002cdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002cda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d141      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfa:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d131      	bne.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d20:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2232      	movs	r2, #50	; 0x32
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3e:	e002      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d52:	d102      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f2      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d5a:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	d158      	bne.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e057      	b.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d7c:	e04d      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d84:	d141      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d131      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da4:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2232      	movs	r2, #50	; 0x32
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dca:	e002      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d102      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f2      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d112      	bne.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e011      	b.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e08:	e007      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	20000080 	.word	0x20000080
 8002e30:	431bde83 	.word	0x431bde83

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f000 bc16 	b.w	8003674 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e48:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e52:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80e4 	beq.w	8003032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4c>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	f040 808b 	bne.w	8002f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f040 8087 	bne.w	8002f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e80:	4b92      	ldr	r3, [pc, #584]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x64>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e3ed      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	4b8b      	ldr	r3, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x7e>
 8002ea8:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_OscConfig+0x8a>
 8002eb2:	4b86      	ldr	r3, [pc, #536]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d223      	bcs.n	8002f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fdc8 	bl	8003a5c <RCC_SetFlashLatencyFromMSIRange>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3ce      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	4b7d      	ldr	r3, [pc, #500]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7c      	ldr	r2, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b7a      	ldr	r3, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4977      	ldr	r1, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	4972      	ldr	r1, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e025      	b.n	8002f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f0a:	4b70      	ldr	r3, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6f      	ldr	r2, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	496a      	ldr	r1, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	4965      	ldr	r1, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fd88 	bl	8003a5c <RCC_SetFlashLatencyFromMSIRange>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e38e      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f56:	f000 fcbf 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b5b      	ldr	r3, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x29c>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f72:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_OscConfig+0x2a0>)
 8002f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCC_OscConfig+0x2a4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fcca 	bl	8001914 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d052      	beq.n	8003030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	e372      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d032      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f96:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a4c      	ldr	r2, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fd07 	bl	80019b4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002faa:	f7fe fd03 	bl	80019b4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e35b      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3f      	ldr	r2, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	493a      	ldr	r1, [pc, #232]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	4935      	ldr	r1, [pc, #212]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e01a      	b.n	8003032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ffc:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003008:	f7fe fcd4 	bl	80019b4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003010:	f7fe fcd0 	bl	80019b4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e328      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1dc>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d073      	beq.n	8003126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x21c>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d063      	beq.n	8003124 <HAL_RCC_OscConfig+0x2f0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d15f      	bne.n	8003124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e305      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x24c>
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0x288>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x270>
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x288>
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_RCC_OscConfig+0x298>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc76 	bl	80019b4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e010      	b.n	80030ee <HAL_RCC_OscConfig+0x2ba>
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08005b70 	.word	0x08005b70
 80030d4:	20000080 	.word	0x20000080
 80030d8:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fc6a 	bl	80019b4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e2c2      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ee:	4baf      	ldr	r3, [pc, #700]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x2a8>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fc5a 	bl	80019b4 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe fc56 	bl	80019b4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e2ae      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003116:	4ba5      	ldr	r3, [pc, #660]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x2d0>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d060      	beq.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d005      	beq.n	8003144 <HAL_RCC_OscConfig+0x310>
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d119      	bne.n	8003172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d116      	bne.n	8003172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003144:	4b99      	ldr	r3, [pc, #612]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_OscConfig+0x328>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e28b      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b93      	ldr	r3, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	4990      	ldr	r1, [pc, #576]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003170:	e040      	b.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d023      	beq.n	80031c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317a:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe fc15 	bl	80019b4 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe fc11 	bl	80019b4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e269      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	497c      	ldr	r1, [pc, #496]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e018      	b.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c2:	4b7a      	ldr	r3, [pc, #488]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fbf1 	bl	80019b4 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fe fbed 	bl	80019b4 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e245      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03c      	beq.n	800327a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320e:	4a67      	ldr	r2, [pc, #412]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fbcc 	bl	80019b4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe fbc8 	bl	80019b4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e220      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003232:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <HAL_RCC_OscConfig+0x3ec>
 8003240:	e01b      	b.n	800327a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fbaf 	bl	80019b4 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325a:	f7fe fbab 	bl	80019b4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e203      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800326e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ef      	bne.n	800325a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a6 	beq.w	80033d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	4b44      	ldr	r3, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	4a43      	ldr	r2, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6593      	str	r3, [r2, #88]	; 0x58
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b4:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <HAL_RCC_OscConfig+0x57c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d118      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x57c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3a      	ldr	r2, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x57c>)
 80032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032cc:	f7fe fb72 	bl	80019b4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fe fb6e 	bl	80019b4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1c6      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_RCC_OscConfig+0x57c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_RCC_OscConfig+0x4d8>
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330a:	e024      	b.n	8003356 <HAL_RCC_OscConfig+0x522>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d110      	bne.n	8003336 <HAL_RCC_OscConfig+0x502>
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a24      	ldr	r2, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003334:	e00f      	b.n	8003356 <HAL_RCC_OscConfig+0x522>
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fb29 	bl	80019b4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe fb25 	bl	80019b4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e17b      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x578>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ed      	beq.n	8003366 <HAL_RCC_OscConfig+0x532>
 800338a:	e01a      	b.n	80033c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe fb12 	bl	80019b4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003392:	e00f      	b.n	80033b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe fb0e 	bl	80019b4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d906      	bls.n	80033b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e164      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b4:	4ba8      	ldr	r3, [pc, #672]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e8      	bne.n	8003394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4ba3      	ldr	r3, [pc, #652]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	4aa2      	ldr	r2, [pc, #648]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03c      	beq.n	800345a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01c      	beq.n	8003422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033e8:	4b9b      	ldr	r3, [pc, #620]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80033ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ee:	4a9a      	ldr	r2, [pc, #616]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe fadc 	bl	80019b4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003400:	f7fe fad8 	bl	80019b4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e130      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003412:	4b91      	ldr	r3, [pc, #580]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <HAL_RCC_OscConfig+0x5cc>
 8003420:	e01b      	b.n	800345a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003422:	4b8d      	ldr	r3, [pc, #564]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003428:	4a8b      	ldr	r2, [pc, #556]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe fabf 	bl	80019b4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343a:	f7fe fabb 	bl	80019b4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e113      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800344c:	4b82      	ldr	r3, [pc, #520]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 800344e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ef      	bne.n	800343a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8107 	beq.w	8003672 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	2b02      	cmp	r3, #2
 800346a:	f040 80cb 	bne.w	8003604 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800346e:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0203 	and.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	d12c      	bne.n	80034dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	3b01      	subs	r3, #1
 800348e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d123      	bne.n	80034dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d11b      	bne.n	80034dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d113      	bne.n	80034dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d109      	bne.n	80034dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d06d      	beq.n	80035b8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d068      	beq.n	80035b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034ee:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0ba      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034fe:	4b56      	ldr	r3, [pc, #344]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a55      	ldr	r2, [pc, #340]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003508:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800350a:	f7fe fa53 	bl	80019b4 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fa4f 	bl	80019b4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0a7      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003530:	4b49      	ldr	r3, [pc, #292]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <HAL_RCC_OscConfig+0x828>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003540:	3a01      	subs	r2, #1
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800354a:	0212      	lsls	r2, r2, #8
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003552:	0852      	lsrs	r2, r2, #1
 8003554:	3a01      	subs	r2, #1
 8003556:	0552      	lsls	r2, r2, #21
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800355e:	0852      	lsrs	r2, r2, #1
 8003560:	3a01      	subs	r2, #1
 8003562:	0652      	lsls	r2, r2, #25
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800356a:	06d2      	lsls	r2, r2, #27
 800356c:	430a      	orrs	r2, r1
 800356e:	493a      	ldr	r1, [pc, #232]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003570:	4313      	orrs	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a37      	ldr	r2, [pc, #220]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 800357a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a34      	ldr	r2, [pc, #208]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800358c:	f7fe fa12 	bl	80019b4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fa0e 	bl	80019b4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e066      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b2:	e05e      	b.n	8003672 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e05d      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d156      	bne.n	8003672 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035c4:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035dc:	f7fe f9ea 	bl	80019b4 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe f9e6 	bl	80019b4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e03e      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x7b0>
 8003602:	e036      	b.n	8003672 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d031      	beq.n	800366e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003614:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003628:	f023 0303 	bic.w	r3, r3, #3
 800362c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_OscConfig+0x824>)
 8003634:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe f9b9 	bl	80019b4 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e00c      	b.n	8003660 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe f9b5 	bl	80019b4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d905      	bls.n	8003660 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e00d      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
 8003658:	40021000 	.word	0x40021000
 800365c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x848>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ec      	bne.n	8003646 <HAL_RCC_OscConfig+0x812>
 800366c:	e001      	b.n	8003672 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e10f      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d910      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b86      	ldr	r3, [pc, #536]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 020f 	bic.w	r2, r3, #15
 80036ae:	4984      	ldr	r1, [pc, #528]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0f7      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8089 	beq.w	80037e8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d133      	bne.n	8003746 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0e4      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80036ee:	f000 fa0f 	bl	8003b10 <RCC_GetSysClockFreqFromPLLSource>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <HAL_RCC_ClockConfig+0x248>)
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d955      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036fa:	4b72      	ldr	r3, [pc, #456]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003706:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800370e:	4a6d      	ldr	r2, [pc, #436]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e044      	b.n	80037a6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03e      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x126>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13a      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003730:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003738:	4a62      	ldr	r2, [pc, #392]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e02f      	b.n	80037a6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d115      	bne.n	8003786 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0ac      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003766:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0a0      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003776:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e098      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003786:	f000 f8a7 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_ClockConfig+0x248>)
 800378e:	429a      	cmp	r2, r3
 8003790:	d909      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003792:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	4a4a      	ldr	r2, [pc, #296]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4944      	ldr	r1, [pc, #272]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe f8fc 	bl	80019b4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe f8f8 	bl	80019b4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e070      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4930      	ldr	r1, [pc, #192]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
 8003806:	e008      	b.n	800381a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d105      	bne.n	800381a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800380e:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003818:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d210      	bcs.n	800384a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 020f 	bic.w	r2, r3, #15
 8003830:	4923      	ldr	r1, [pc, #140]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <HAL_RCC_ClockConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e036      	b.n	80038b8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4918      	ldr	r1, [pc, #96]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4910      	ldr	r1, [pc, #64]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003888:	f000 f826 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 800388c:	4601      	mov	r1, r0
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <HAL_RCC_ClockConfig+0x244>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <HAL_RCC_ClockConfig+0x24c>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	fa21 f303 	lsr.w	r3, r1, r3
 80038a4:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x250>)
 80038a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x254>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe f831 	bl	8001914 <HAL_InitTick>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40021000 	.word	0x40021000
 80038c8:	04c4b400 	.word	0x04c4b400
 80038cc:	08005b70 	.word	0x08005b70
 80038d0:	20000080 	.word	0x20000080
 80038d4:	20000084 	.word	0x20000084

080038d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f0:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d121      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d11e      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003918:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e005      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003928:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d102      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e004      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d101      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800395e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d133      	bne.n	80039ce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0xa4>
 8003976:	2b03      	cmp	r3, #3
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0xaa>
 800397a:	e005      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800397e:	617b      	str	r3, [r7, #20]
      break;
 8003980:	e005      	b.n	800398e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	e002      	b.n	800398e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	617b      	str	r3, [r7, #20]
      break;
 800398c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	3301      	adds	r3, #1
 800399a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	fb02 f203 	mul.w	r2, r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_GetSysClockFreq+0x104>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0e5b      	lsrs	r3, r3, #25
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ce:	69bb      	ldr	r3, [r7, #24]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3724      	adds	r7, #36	; 0x24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08005b88 	.word	0x08005b88
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000080 	.word	0x20000080

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a08:	f7ff fff0 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08005b80 	.word	0x08005b80

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a34:	f7ff ffda 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0adb      	lsrs	r3, r3, #11
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08005b80 	.word	0x08005b80

08003a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a74:	f7ff f91a 	bl	8002cac <HAL_PWREx_GetVoltageRange>
 8003a78:	6178      	str	r0, [r7, #20]
 8003a7a:	e014      	b.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6593      	str	r3, [r2, #88]	; 0x58
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a94:	f7ff f90a 	bl	8002cac <HAL_PWREx_GetVoltageRange>
 8003a98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d10b      	bne.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d913      	bls.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ab8:	d902      	bls.n	8003ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aba:	2302      	movs	r3, #2
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e00d      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e00a      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aca:	d902      	bls.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003acc:	2302      	movs	r3, #2
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e004      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d101      	bne.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad8:	2301      	movs	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4909      	ldr	r1, [pc, #36]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40022000 	.word	0x40022000

08003b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d118      	bne.n	8003b58 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e005      	b.n	8003b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b4e:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b56:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d002      	beq.n	8003b6e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d003      	beq.n	8003b74 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003b6c:	e005      	b.n	8003b7a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b70:	613b      	str	r3, [r7, #16]
    break;
 8003b72:	e005      	b.n	8003b80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b76:	613b      	str	r3, [r7, #16]
    break;
 8003b78:	e002      	b.n	8003b80 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
    break;
 8003b7e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	fb02 f203 	mul.w	r2, r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	0e5b      	lsrs	r3, r3, #25
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003bc0:	683b      	ldr	r3, [r7, #0]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08005b88 	.word	0x08005b88
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003be8:	2300      	movs	r3, #0
 8003bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bec:	2300      	movs	r3, #0
 8003bee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d00b      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d804      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c10:	e01d      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003c12:	2b60      	cmp	r3, #96	; 0x60
 8003c14:	d01e      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d01c      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c1a:	e018      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c1c:	4b86      	ldr	r3, [pc, #536]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a85      	ldr	r2, [pc, #532]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c28:	e015      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fafd 	bl	8004230 <RCCEx_PLLSAI1_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3a:	e00c      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3320      	adds	r3, #32
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fbe4 	bl	8004410 <RCCEx_PLLSAI2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	74fb      	strb	r3, [r7, #19]
      break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c5c:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c62:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6a:	4973      	ldr	r1, [pc, #460]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c72:	e001      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d042      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	d00f      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c92:	d805      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9c:	d017      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003c9e:	e01f      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cac:	e018      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cae:	4b62      	ldr	r3, [pc, #392]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a61      	ldr	r2, [pc, #388]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cba:	e015      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fab4 	bl	8004230 <RCCEx_PLLSAI1_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fb9b 	bl	8004410 <RCCEx_PLLSAI2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	74fb      	strb	r3, [r7, #19]
      break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cee:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	494e      	ldr	r1, [pc, #312]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d04:	e001      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 809f 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d1c:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fe2b 	bl	80019b4 <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d60:	e009      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fd fe27 	bl	80019b4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d902      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	74fb      	strb	r3, [r7, #19]
        break;
 8003d74:	e005      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ef      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d15b      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01f      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d019      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fde6 	bl	80019b4 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e00b      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd fde2 	bl	80019b4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d902      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	74fb      	strb	r3, [r7, #19]
            break;
 8003e02:	e006      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ec      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e30:	e008      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	74bb      	strb	r3, [r7, #18]
 8003e36:	e005      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e44:	7c7b      	ldrb	r3, [r7, #17]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4ba0      	ldr	r3, [pc, #640]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4a9f      	ldr	r2, [pc, #636]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e62:	4b9a      	ldr	r3, [pc, #616]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 0203 	bic.w	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	4996      	ldr	r1, [pc, #600]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e84:	4b91      	ldr	r3, [pc, #580]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 020c 	bic.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	498e      	ldr	r1, [pc, #568]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ea6:	4b89      	ldr	r3, [pc, #548]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	4985      	ldr	r1, [pc, #532]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ec8:	4b80      	ldr	r3, [pc, #512]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	497d      	ldr	r1, [pc, #500]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eea:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef8:	4974      	ldr	r1, [pc, #464]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0c:	4b6f      	ldr	r3, [pc, #444]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	496c      	ldr	r1, [pc, #432]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2e:	4b67      	ldr	r3, [pc, #412]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3c:	4963      	ldr	r1, [pc, #396]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f50:	4b5e      	ldr	r3, [pc, #376]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5e:	495b      	ldr	r1, [pc, #364]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f72:	4b56      	ldr	r3, [pc, #344]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	4952      	ldr	r1, [pc, #328]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f94:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	494a      	ldr	r1, [pc, #296]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	4941      	ldr	r1, [pc, #260]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fd8:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	4939      	ldr	r1, [pc, #228]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d028      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004008:	4930      	ldr	r1, [pc, #192]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d106      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004024:	60d3      	str	r3, [r2, #12]
 8004026:	e011      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f8f9 	bl	8004230 <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d04d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004060:	d108      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004072:	e012      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004080:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	490e      	ldr	r1, [pc, #56]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a2:	d106      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
 80040b0:	e020      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ba:	d109      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a02      	ldr	r2, [pc, #8]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	60d3      	str	r3, [r2, #12]
 80040c8:	e014      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f8a5 	bl	8004230 <RCCEx_PLLSAI1_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d028      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	4947      	ldr	r1, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411e:	d106      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004120:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a41      	ldr	r2, [pc, #260]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412a:	60d3      	str	r3, [r2, #12]
 800412c:	e011      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004136:	d10c      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f876 	bl	8004230 <RCCEx_PLLSAI1_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01e      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	492f      	ldr	r1, [pc, #188]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f851 	bl	8004230 <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041a8:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ae:	f023 0204 	bic.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	491c      	ldr	r1, [pc, #112]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d2:	f023 0218 	bic.w	r2, r3, #24
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	4913      	ldr	r1, [pc, #76]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d017      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004200:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a04      	ldr	r2, [pc, #16]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004220:	7cbb      	ldrb	r3, [r7, #18]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423e:	4b70      	ldr	r3, [pc, #448]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0203 	and.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d103      	bne.n	8004262 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
       ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d13f      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e03c      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d00c      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x5a>
 8004270:	2b03      	cmp	r3, #3
 8004272:	d013      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x6c>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d120      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004278:	4b61      	ldr	r3, [pc, #388]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11d      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e01a      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800428a:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429a:	e013      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800429c:	4b58      	ldr	r3, [pc, #352]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a8:	4b55      	ldr	r3, [pc, #340]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b8:	e006      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      break;
 80042be:	e004      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80042c0:	bf00      	nop
 80042c2:	e002      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80042c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d108      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80042d0:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f023 0203 	bic.w	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4948      	ldr	r1, [pc, #288]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f040 8086 	bne.w	80043f6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042ea:	4b45      	ldr	r3, [pc, #276]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a44      	ldr	r2, [pc, #272]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f6:	f7fd fb5d 	bl	80019b4 <HAL_GetTick>
 80042fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042fc:	e009      	b.n	8004312 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042fe:	f7fd fb59 	bl	80019b4 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d902      	bls.n	8004312 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	73fb      	strb	r3, [r7, #15]
        break;
 8004310:	e005      	b.n	800431e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ef      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d168      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432a:	4b35      	ldr	r3, [pc, #212]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	4b35      	ldr	r3, [pc, #212]	; (8004404 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6892      	ldr	r2, [r2, #8]
 8004336:	0211      	lsls	r1, r2, #8
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68d2      	ldr	r2, [r2, #12]
 800433c:	06d2      	lsls	r2, r2, #27
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6852      	ldr	r2, [r2, #4]
 8004344:	3a01      	subs	r2, #1
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	430a      	orrs	r2, r1
 800434a:	492d      	ldr	r1, [pc, #180]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
 8004350:	e02d      	b.n	80043ae <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d115      	bne.n	8004384 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <RCCEx_PLLSAI1_Config+0x1d8>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6912      	ldr	r2, [r2, #16]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0552      	lsls	r2, r2, #21
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6852      	ldr	r2, [r2, #4]
 8004376:	3a01      	subs	r2, #1
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	430a      	orrs	r2, r1
 800437c:	4920      	ldr	r1, [pc, #128]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]
 8004382:	e014      	b.n	80043ae <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <RCCEx_PLLSAI1_Config+0x1dc>)
 800438a:	4013      	ands	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	0211      	lsls	r1, r2, #8
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6952      	ldr	r2, [r2, #20]
 8004396:	0852      	lsrs	r2, r2, #1
 8004398:	3a01      	subs	r2, #1
 800439a:	0652      	lsls	r2, r2, #25
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6852      	ldr	r2, [r2, #4]
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0112      	lsls	r2, r2, #4
 80043a6:	430a      	orrs	r2, r1
 80043a8:	4915      	ldr	r1, [pc, #84]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fd fafb 	bl	80019b4 <HAL_GetTick>
 80043be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c0:	e009      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c2:	f7fd faf7 	bl	80019b4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d902      	bls.n	80043d6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	73fb      	strb	r3, [r7, #15]
          break;
 80043d4:	e005      	b.n	80043e2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ef      	beq.n	80043c2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	07ff800f 	.word	0x07ff800f
 8004408:	ff9f800f 	.word	0xff9f800f
 800440c:	f9ff800f 	.word	0xf9ff800f

08004410 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800441e:	4b70      	ldr	r3, [pc, #448]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00e      	beq.n	8004448 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0203 	and.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d103      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
       ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	d13f      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e03c      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d00c      	beq.n	800446a <RCCEx_PLLSAI2_Config+0x5a>
 8004450:	2b03      	cmp	r3, #3
 8004452:	d013      	beq.n	800447c <RCCEx_PLLSAI2_Config+0x6c>
 8004454:	2b01      	cmp	r3, #1
 8004456:	d120      	bne.n	800449a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004468:	e01a      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446a:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447a:	e013      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447c:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004488:	4b55      	ldr	r3, [pc, #340]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004498:	e006      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      break;
 800449e:	e004      	b.n	80044aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80044a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f023 0203 	bic.w	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4948      	ldr	r1, [pc, #288]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 8086 	bne.w	80045d6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044ca:	4b45      	ldr	r3, [pc, #276]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d6:	f7fd fa6d 	bl	80019b4 <HAL_GetTick>
 80044da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044dc:	e009      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044de:	f7fd fa69 	bl	80019b4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	73fb      	strb	r3, [r7, #15]
        break;
 80044f0:	e005      	b.n	80044fe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ef      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d168      	bne.n	80045d6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800450a:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6892      	ldr	r2, [r2, #8]
 8004516:	0211      	lsls	r1, r2, #8
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68d2      	ldr	r2, [r2, #12]
 800451c:	06d2      	lsls	r2, r2, #27
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	3a01      	subs	r2, #1
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	430a      	orrs	r2, r1
 800452a:	492d      	ldr	r1, [pc, #180]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	614b      	str	r3, [r1, #20]
 8004530:	e02d      	b.n	800458e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d115      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6892      	ldr	r2, [r2, #8]
 8004544:	0211      	lsls	r1, r2, #8
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6912      	ldr	r2, [r2, #16]
 800454a:	0852      	lsrs	r2, r2, #1
 800454c:	3a01      	subs	r2, #1
 800454e:	0552      	lsls	r2, r2, #21
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6852      	ldr	r2, [r2, #4]
 8004556:	3a01      	subs	r2, #1
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	430a      	orrs	r2, r1
 800455c:	4920      	ldr	r1, [pc, #128]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	614b      	str	r3, [r1, #20]
 8004562:	e014      	b.n	800458e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <RCCEx_PLLSAI2_Config+0x1dc>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6892      	ldr	r2, [r2, #8]
 8004570:	0211      	lsls	r1, r2, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6952      	ldr	r2, [r2, #20]
 8004576:	0852      	lsrs	r2, r2, #1
 8004578:	3a01      	subs	r2, #1
 800457a:	0652      	lsls	r2, r2, #25
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6852      	ldr	r2, [r2, #4]
 8004582:	3a01      	subs	r2, #1
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	430a      	orrs	r2, r1
 8004588:	4915      	ldr	r1, [pc, #84]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fd fa0b 	bl	80019b4 <HAL_GetTick>
 800459e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a0:	e009      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a2:	f7fd fa07 	bl	80019b4 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d902      	bls.n	80045b6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	73fb      	strb	r3, [r7, #15]
          break;
 80045b4:	e005      	b.n	80045c2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ef      	beq.n	80045a2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	07ff800f 	.word	0x07ff800f
 80045e8:	ff9f800f 	.word	0xff9f800f
 80045ec:	f9ff800f 	.word	0xf9ff800f

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e042      	b.n	8004688 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fd f859 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8c4 	bl	80047c0 <UART_SetConfig>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e022      	b.n	8004688 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fb8a 	bl	8004d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fc11 	bl	8004ea8 <UART_CheckIdleState>
 8004686:	4603      	mov	r3, r0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 8084 	bne.w	80047b4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_UART_Transmit+0x28>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e07c      	b.n	80047b6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Transmit+0x3a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e075      	b.n	80047b6 <HAL_UART_Transmit+0x126>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046e2:	f7fd f967 	bl	80019b4 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Transmit+0x84>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004724:	e02d      	b.n	8004782 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fc01 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e03a      	b.n	80047b6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	881a      	ldrh	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004752:	b292      	uxth	r2, r2
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3302      	adds	r3, #2
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	e008      	b.n	8004770 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b292      	uxth	r2, r2
 8004768:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1cb      	bne.n	8004726 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	2140      	movs	r1, #64	; 0x40
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fbcd 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e006      	b.n	80047b6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4bb1      	ldr	r3, [pc, #708]	; (8004abc <UART_SetConfig+0x2fc>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	69f9      	ldr	r1, [r7, #28]
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4aa6      	ldr	r2, [pc, #664]	; (8004ac0 <UART_SetConfig+0x300>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800483e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f023 010f 	bic.w	r1, r3, #15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a97      	ldr	r2, [pc, #604]	; (8004ac4 <UART_SetConfig+0x304>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d121      	bne.n	80048b0 <UART_SetConfig+0xf0>
 800486c:	4b96      	ldr	r3, [pc, #600]	; (8004ac8 <UART_SetConfig+0x308>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d816      	bhi.n	80048a8 <UART_SetConfig+0xe8>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <UART_SetConfig+0xc0>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004891 	.word	0x08004891
 8004884:	0800489d 	.word	0x0800489d
 8004888:	08004897 	.word	0x08004897
 800488c:	080048a3 	.word	0x080048a3
 8004890:	2301      	movs	r3, #1
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e0e8      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004896:	2302      	movs	r3, #2
 8004898:	76fb      	strb	r3, [r7, #27]
 800489a:	e0e5      	b.n	8004a68 <UART_SetConfig+0x2a8>
 800489c:	2304      	movs	r3, #4
 800489e:	76fb      	strb	r3, [r7, #27]
 80048a0:	e0e2      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80048a2:	2308      	movs	r3, #8
 80048a4:	76fb      	strb	r3, [r7, #27]
 80048a6:	e0df      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80048a8:	2310      	movs	r3, #16
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	bf00      	nop
 80048ae:	e0db      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a85      	ldr	r2, [pc, #532]	; (8004acc <UART_SetConfig+0x30c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d134      	bne.n	8004924 <UART_SetConfig+0x164>
 80048ba:	4b83      	ldr	r3, [pc, #524]	; (8004ac8 <UART_SetConfig+0x308>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d829      	bhi.n	800491c <UART_SetConfig+0x15c>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x110>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	08004905 	.word	0x08004905
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	0800491d 	.word	0x0800491d
 80048dc:	0800491d 	.word	0x0800491d
 80048e0:	08004911 	.word	0x08004911
 80048e4:	0800491d 	.word	0x0800491d
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	0800490b 	.word	0x0800490b
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	0800491d 	.word	0x0800491d
 8004900:	08004917 	.word	0x08004917
 8004904:	2300      	movs	r3, #0
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	e0ae      	b.n	8004a68 <UART_SetConfig+0x2a8>
 800490a:	2302      	movs	r3, #2
 800490c:	76fb      	strb	r3, [r7, #27]
 800490e:	e0ab      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004910:	2304      	movs	r3, #4
 8004912:	76fb      	strb	r3, [r7, #27]
 8004914:	e0a8      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004916:	2308      	movs	r3, #8
 8004918:	76fb      	strb	r3, [r7, #27]
 800491a:	e0a5      	b.n	8004a68 <UART_SetConfig+0x2a8>
 800491c:	2310      	movs	r3, #16
 800491e:	76fb      	strb	r3, [r7, #27]
 8004920:	bf00      	nop
 8004922:	e0a1      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a69      	ldr	r2, [pc, #420]	; (8004ad0 <UART_SetConfig+0x310>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d120      	bne.n	8004970 <UART_SetConfig+0x1b0>
 800492e:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <UART_SetConfig+0x308>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004938:	2b10      	cmp	r3, #16
 800493a:	d00f      	beq.n	800495c <UART_SetConfig+0x19c>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d802      	bhi.n	8004946 <UART_SetConfig+0x186>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <UART_SetConfig+0x190>
 8004944:	e010      	b.n	8004968 <UART_SetConfig+0x1a8>
 8004946:	2b20      	cmp	r3, #32
 8004948:	d005      	beq.n	8004956 <UART_SetConfig+0x196>
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d009      	beq.n	8004962 <UART_SetConfig+0x1a2>
 800494e:	e00b      	b.n	8004968 <UART_SetConfig+0x1a8>
 8004950:	2300      	movs	r3, #0
 8004952:	76fb      	strb	r3, [r7, #27]
 8004954:	e088      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004956:	2302      	movs	r3, #2
 8004958:	76fb      	strb	r3, [r7, #27]
 800495a:	e085      	b.n	8004a68 <UART_SetConfig+0x2a8>
 800495c:	2304      	movs	r3, #4
 800495e:	76fb      	strb	r3, [r7, #27]
 8004960:	e082      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004962:	2308      	movs	r3, #8
 8004964:	76fb      	strb	r3, [r7, #27]
 8004966:	e07f      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004968:	2310      	movs	r3, #16
 800496a:	76fb      	strb	r3, [r7, #27]
 800496c:	bf00      	nop
 800496e:	e07b      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <UART_SetConfig+0x314>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d120      	bne.n	80049bc <UART_SetConfig+0x1fc>
 800497a:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <UART_SetConfig+0x308>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d00f      	beq.n	80049a8 <UART_SetConfig+0x1e8>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d802      	bhi.n	8004992 <UART_SetConfig+0x1d2>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <UART_SetConfig+0x1dc>
 8004990:	e010      	b.n	80049b4 <UART_SetConfig+0x1f4>
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d005      	beq.n	80049a2 <UART_SetConfig+0x1e2>
 8004996:	2bc0      	cmp	r3, #192	; 0xc0
 8004998:	d009      	beq.n	80049ae <UART_SetConfig+0x1ee>
 800499a:	e00b      	b.n	80049b4 <UART_SetConfig+0x1f4>
 800499c:	2300      	movs	r3, #0
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	e062      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049a2:	2302      	movs	r3, #2
 80049a4:	76fb      	strb	r3, [r7, #27]
 80049a6:	e05f      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049a8:	2304      	movs	r3, #4
 80049aa:	76fb      	strb	r3, [r7, #27]
 80049ac:	e05c      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049ae:	2308      	movs	r3, #8
 80049b0:	76fb      	strb	r3, [r7, #27]
 80049b2:	e059      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049b4:	2310      	movs	r3, #16
 80049b6:	76fb      	strb	r3, [r7, #27]
 80049b8:	bf00      	nop
 80049ba:	e055      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a45      	ldr	r2, [pc, #276]	; (8004ad8 <UART_SetConfig+0x318>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d124      	bne.n	8004a10 <UART_SetConfig+0x250>
 80049c6:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <UART_SetConfig+0x308>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d4:	d012      	beq.n	80049fc <UART_SetConfig+0x23c>
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d802      	bhi.n	80049e2 <UART_SetConfig+0x222>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <UART_SetConfig+0x230>
 80049e0:	e012      	b.n	8004a08 <UART_SetConfig+0x248>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d006      	beq.n	80049f6 <UART_SetConfig+0x236>
 80049e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ec:	d009      	beq.n	8004a02 <UART_SetConfig+0x242>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x248>
 80049f0:	2300      	movs	r3, #0
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e038      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049f6:	2302      	movs	r3, #2
 80049f8:	76fb      	strb	r3, [r7, #27]
 80049fa:	e035      	b.n	8004a68 <UART_SetConfig+0x2a8>
 80049fc:	2304      	movs	r3, #4
 80049fe:	76fb      	strb	r3, [r7, #27]
 8004a00:	e032      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a02:	2308      	movs	r3, #8
 8004a04:	76fb      	strb	r3, [r7, #27]
 8004a06:	e02f      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	76fb      	strb	r3, [r7, #27]
 8004a0c:	bf00      	nop
 8004a0e:	e02b      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <UART_SetConfig+0x300>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d124      	bne.n	8004a64 <UART_SetConfig+0x2a4>
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <UART_SetConfig+0x308>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a28:	d012      	beq.n	8004a50 <UART_SetConfig+0x290>
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d802      	bhi.n	8004a36 <UART_SetConfig+0x276>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <UART_SetConfig+0x284>
 8004a34:	e012      	b.n	8004a5c <UART_SetConfig+0x29c>
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	d006      	beq.n	8004a4a <UART_SetConfig+0x28a>
 8004a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a40:	d009      	beq.n	8004a56 <UART_SetConfig+0x296>
 8004a42:	e00b      	b.n	8004a5c <UART_SetConfig+0x29c>
 8004a44:	2300      	movs	r3, #0
 8004a46:	76fb      	strb	r3, [r7, #27]
 8004a48:	e00e      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	76fb      	strb	r3, [r7, #27]
 8004a4e:	e00b      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a50:	2304      	movs	r3, #4
 8004a52:	76fb      	strb	r3, [r7, #27]
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a56:	2308      	movs	r3, #8
 8004a58:	76fb      	strb	r3, [r7, #27]
 8004a5a:	e005      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	bf00      	nop
 8004a62:	e001      	b.n	8004a68 <UART_SetConfig+0x2a8>
 8004a64:	2310      	movs	r3, #16
 8004a66:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <UART_SetConfig+0x300>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f040 80a1 	bne.w	8004bb6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a74:	7efb      	ldrb	r3, [r7, #27]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d836      	bhi.n	8004ae8 <UART_SetConfig+0x328>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0x2c0>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004ae9 	.word	0x08004ae9
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ae9 	.word	0x08004ae9
 8004a90:	08004ab3 	.word	0x08004ab3
 8004a94:	08004ae9 	.word	0x08004ae9
 8004a98:	08004ae9 	.word	0x08004ae9
 8004a9c:	08004ae9 	.word	0x08004ae9
 8004aa0:	08004ae1 	.word	0x08004ae1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f7fe ffae 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	6178      	str	r0, [r7, #20]
        break;
 8004aaa:	e022      	b.n	8004af2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <UART_SetConfig+0x31c>)
 8004aae:	617b      	str	r3, [r7, #20]
        break;
 8004ab0:	e01f      	b.n	8004af2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fe ff11 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	6178      	str	r0, [r7, #20]
        break;
 8004ab8:	e01b      	b.n	8004af2 <UART_SetConfig+0x332>
 8004aba:	bf00      	nop
 8004abc:	cfff69f3 	.word	0xcfff69f3
 8004ac0:	40008000 	.word	0x40008000
 8004ac4:	40013800 	.word	0x40013800
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40004400 	.word	0x40004400
 8004ad0:	40004800 	.word	0x40004800
 8004ad4:	40004c00 	.word	0x40004c00
 8004ad8:	40005000 	.word	0x40005000
 8004adc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae4:	617b      	str	r3, [r7, #20]
        break;
 8004ae6:	e004      	b.n	8004af2 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	76bb      	strb	r3, [r7, #26]
        break;
 8004af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 811d 	beq.w	8004d34 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	4a97      	ldr	r2, [pc, #604]	; (8004d5c <UART_SetConfig+0x59c>)
 8004b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b04:	461a      	mov	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d305      	bcc.n	8004b2a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d902      	bls.n	8004b30 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	76bb      	strb	r3, [r7, #26]
 8004b2e:	e101      	b.n	8004d34 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	4a87      	ldr	r2, [pc, #540]	; (8004d5c <UART_SetConfig+0x59c>)
 8004b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	f7fb fba8 	bl	80002a0 <__aeabi_uldivmod>
 8004b50:	4603      	mov	r3, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	4619      	mov	r1, r3
 8004b56:	4622      	mov	r2, r4
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	0214      	lsls	r4, r2, #8
 8004b62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b66:	020b      	lsls	r3, r1, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6852      	ldr	r2, [r2, #4]
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	eb13 0b01 	adds.w	fp, r3, r1
 8004b78:	eb44 0c02 	adc.w	ip, r4, r2
 8004b7c:	4658      	mov	r0, fp
 8004b7e:	4661      	mov	r1, ip
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f04f 0400 	mov.w	r4, #0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	f7fb fb88 	bl	80002a0 <__aeabi_uldivmod>
 8004b90:	4603      	mov	r3, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d308      	bcc.n	8004bb0 <UART_SetConfig+0x3f0>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d204      	bcs.n	8004bb0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e0c1      	b.n	8004d34 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	76bb      	strb	r3, [r7, #26]
 8004bb4:	e0be      	b.n	8004d34 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d164      	bne.n	8004c8a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004bc0:	7efb      	ldrb	r3, [r7, #27]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d827      	bhi.n	8004c16 <UART_SetConfig+0x456>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x40c>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe ff08 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	6178      	str	r0, [r7, #20]
        break;
 8004bf6:	e013      	b.n	8004c20 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe ff1a 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	6178      	str	r0, [r7, #20]
        break;
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <UART_SetConfig+0x5a0>)
 8004c02:	617b      	str	r3, [r7, #20]
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fe67 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004c0a:	6178      	str	r0, [r7, #20]
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	617b      	str	r3, [r7, #20]
        break;
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8086 	beq.w	8004d34 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <UART_SetConfig+0x59c>)
 8004c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c32:	461a      	mov	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3a:	005a      	lsls	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	441a      	add	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d916      	bls.n	8004c84 <UART_SetConfig+0x4c4>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d212      	bcs.n	8004c84 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f023 030f 	bic.w	r3, r3, #15
 8004c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	89fa      	ldrh	r2, [r7, #14]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e057      	b.n	8004d34 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	76bb      	strb	r3, [r7, #26]
 8004c88:	e054      	b.n	8004d34 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c8a:	7efb      	ldrb	r3, [r7, #27]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d828      	bhi.n	8004ce2 <UART_SetConfig+0x522>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0x4d8>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004ccd 	.word	0x08004ccd
 8004ca4:	08004ce3 	.word	0x08004ce3
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004ce3 	.word	0x08004ce3
 8004cb0:	08004ce3 	.word	0x08004ce3
 8004cb4:	08004ce3 	.word	0x08004ce3
 8004cb8:	08004cdb 	.word	0x08004cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f7fe fea2 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	6178      	str	r0, [r7, #20]
        break;
 8004cc2:	e013      	b.n	8004cec <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7fe feb4 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	6178      	str	r0, [r7, #20]
        break;
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <UART_SetConfig+0x5a0>)
 8004cce:	617b      	str	r3, [r7, #20]
        break;
 8004cd0:	e00c      	b.n	8004cec <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd2:	f7fe fe01 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8004cd6:	6178      	str	r0, [r7, #20]
        break;
 8004cd8:	e008      	b.n	8004cec <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cde:	617b      	str	r3, [r7, #20]
        break;
 8004ce0:	e004      	b.n	8004cec <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	76bb      	strb	r3, [r7, #26]
        break;
 8004cea:	bf00      	nop
    }

    if (pclk != 0U)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <UART_SetConfig+0x59c>)
 8004cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d908      	bls.n	8004d30 <UART_SetConfig+0x570>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d204      	bcs.n	8004d30 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e001      	b.n	8004d34 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004d50:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004d5c:	08005bb8 	.word	0x08005bb8
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d10a      	bne.n	8004e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004eb8:	f7fc fd7c 	bl	80019b4 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d10e      	bne.n	8004eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f82c 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e022      	b.n	8004f30 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d10e      	bne.n	8004f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f816 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e00c      	b.n	8004f30 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	e062      	b.n	8005010 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d05e      	beq.n	8005010 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f52:	f7fc fd2f 	bl	80019b4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11d      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f76:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e045      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02e      	beq.n	8005010 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc0:	d126      	bne.n	8005010 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fda:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e00f      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	429a      	cmp	r2, r3
 800502c:	d08d      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_UARTEx_DisableFifoMode+0x16>
 800504a:	2302      	movs	r3, #2
 800504c:	e027      	b.n	800509e <HAL_UARTEx_DisableFifoMode+0x66>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2224      	movs	r2, #36	; 0x24
 800505a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800507c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050be:	2302      	movs	r3, #2
 80050c0:	e02d      	b.n	800511e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2224      	movs	r2, #36	; 0x24
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f850 	bl	80051a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800513a:	2302      	movs	r3, #2
 800513c:	e02d      	b.n	800519a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2224      	movs	r2, #36	; 0x24
 800514a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f812 	bl	80051a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80051ac:	4a2f      	ldr	r2, [pc, #188]	; (800526c <UARTEx_SetNbDataToProcess+0xc8>)
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051b6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80051ba:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <UARTEx_SetNbDataToProcess+0xcc>)
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051c4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051e0:	e03d      	b.n	800525e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051e2:	2308      	movs	r3, #8
 80051e4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051e6:	2308      	movs	r3, #8
 80051e8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	0e5b      	lsrs	r3, r3, #25
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	0f5b      	lsrs	r3, r3, #29
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800520a:	7fbb      	ldrb	r3, [r7, #30]
 800520c:	7f3a      	ldrb	r2, [r7, #28]
 800520e:	f107 0120 	add.w	r1, r7, #32
 8005212:	440a      	add	r2, r1
 8005214:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005218:	fb02 f303 	mul.w	r3, r2, r3
 800521c:	7f3a      	ldrb	r2, [r7, #28]
 800521e:	f107 0120 	add.w	r1, r7, #32
 8005222:	440a      	add	r2, r1
 8005224:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005228:	fb93 f3f2 	sdiv	r3, r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	7f7a      	ldrb	r2, [r7, #29]
 8005238:	f107 0120 	add.w	r1, r7, #32
 800523c:	440a      	add	r2, r1
 800523e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	7f7a      	ldrb	r2, [r7, #29]
 8005248:	f107 0120 	add.w	r1, r7, #32
 800524c:	440a      	add	r2, r1
 800524e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005252:	fb93 f3f2 	sdiv	r3, r3, r2
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800525e:	bf00      	nop
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	08005b60 	.word	0x08005b60
 8005270:	08005b68 	.word	0x08005b68

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	2000008c 	.word	0x2000008c

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4e0d      	ldr	r6, [pc, #52]	; (80052b8 <__libc_init_array+0x38>)
 8005284:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005286:	1ba4      	subs	r4, r4, r6
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	2500      	movs	r5, #0
 800528c:	42a5      	cmp	r5, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	4e0b      	ldr	r6, [pc, #44]	; (80052c0 <__libc_init_array+0x40>)
 8005292:	4c0c      	ldr	r4, [pc, #48]	; (80052c4 <__libc_init_array+0x44>)
 8005294:	f000 fc28 	bl	8005ae8 <_init>
 8005298:	1ba4      	subs	r4, r4, r6
 800529a:	10a4      	asrs	r4, r4, #2
 800529c:	2500      	movs	r5, #0
 800529e:	42a5      	cmp	r5, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a8:	4798      	blx	r3
 80052aa:	3501      	adds	r5, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b2:	4798      	blx	r3
 80052b4:	3501      	adds	r5, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08005c0c 	.word	0x08005c0c
 80052bc:	08005c0c 	.word	0x08005c0c
 80052c0:	08005c0c 	.word	0x08005c0c
 80052c4:	08005c10 	.word	0x08005c10

080052c8 <memcpy>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	1e43      	subs	r3, r0, #1
 80052cc:	440a      	add	r2, r1
 80052ce:	4291      	cmp	r1, r2
 80052d0:	d100      	bne.n	80052d4 <memcpy+0xc>
 80052d2:	bd10      	pop	{r4, pc}
 80052d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052dc:	e7f7      	b.n	80052ce <memcpy+0x6>

080052de <memset>:
 80052de:	4402      	add	r2, r0
 80052e0:	4603      	mov	r3, r0
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d100      	bne.n	80052e8 <memset+0xa>
 80052e6:	4770      	bx	lr
 80052e8:	f803 1b01 	strb.w	r1, [r3], #1
 80052ec:	e7f9      	b.n	80052e2 <memset+0x4>
	...

080052f0 <siprintf>:
 80052f0:	b40e      	push	{r1, r2, r3}
 80052f2:	b500      	push	{lr}
 80052f4:	b09c      	sub	sp, #112	; 0x70
 80052f6:	ab1d      	add	r3, sp, #116	; 0x74
 80052f8:	9002      	str	r0, [sp, #8]
 80052fa:	9006      	str	r0, [sp, #24]
 80052fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005300:	4809      	ldr	r0, [pc, #36]	; (8005328 <siprintf+0x38>)
 8005302:	9107      	str	r1, [sp, #28]
 8005304:	9104      	str	r1, [sp, #16]
 8005306:	4909      	ldr	r1, [pc, #36]	; (800532c <siprintf+0x3c>)
 8005308:	f853 2b04 	ldr.w	r2, [r3], #4
 800530c:	9105      	str	r1, [sp, #20]
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	a902      	add	r1, sp, #8
 8005314:	f000 f866 	bl	80053e4 <_svfiprintf_r>
 8005318:	9b02      	ldr	r3, [sp, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	b01c      	add	sp, #112	; 0x70
 8005320:	f85d eb04 	ldr.w	lr, [sp], #4
 8005324:	b003      	add	sp, #12
 8005326:	4770      	bx	lr
 8005328:	2000008c 	.word	0x2000008c
 800532c:	ffff0208 	.word	0xffff0208

08005330 <__ssputs_r>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	688e      	ldr	r6, [r1, #8]
 8005336:	429e      	cmp	r6, r3
 8005338:	4682      	mov	sl, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4690      	mov	r8, r2
 800533e:	4699      	mov	r9, r3
 8005340:	d837      	bhi.n	80053b2 <__ssputs_r+0x82>
 8005342:	898a      	ldrh	r2, [r1, #12]
 8005344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005348:	d031      	beq.n	80053ae <__ssputs_r+0x7e>
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	6909      	ldr	r1, [r1, #16]
 800534e:	1a6f      	subs	r7, r5, r1
 8005350:	6965      	ldr	r5, [r4, #20]
 8005352:	2302      	movs	r3, #2
 8005354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005358:	fb95 f5f3 	sdiv	r5, r5, r3
 800535c:	f109 0301 	add.w	r3, r9, #1
 8005360:	443b      	add	r3, r7
 8005362:	429d      	cmp	r5, r3
 8005364:	bf38      	it	cc
 8005366:	461d      	movcc	r5, r3
 8005368:	0553      	lsls	r3, r2, #21
 800536a:	d530      	bpl.n	80053ce <__ssputs_r+0x9e>
 800536c:	4629      	mov	r1, r5
 800536e:	f000 fb21 	bl	80059b4 <_malloc_r>
 8005372:	4606      	mov	r6, r0
 8005374:	b950      	cbnz	r0, 800538c <__ssputs_r+0x5c>
 8005376:	230c      	movs	r3, #12
 8005378:	f8ca 3000 	str.w	r3, [sl]
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	463a      	mov	r2, r7
 800538e:	6921      	ldr	r1, [r4, #16]
 8005390:	f7ff ff9a 	bl	80052c8 <memcpy>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	6126      	str	r6, [r4, #16]
 80053a2:	6165      	str	r5, [r4, #20]
 80053a4:	443e      	add	r6, r7
 80053a6:	1bed      	subs	r5, r5, r7
 80053a8:	6026      	str	r6, [r4, #0]
 80053aa:	60a5      	str	r5, [r4, #8]
 80053ac:	464e      	mov	r6, r9
 80053ae:	454e      	cmp	r6, r9
 80053b0:	d900      	bls.n	80053b4 <__ssputs_r+0x84>
 80053b2:	464e      	mov	r6, r9
 80053b4:	4632      	mov	r2, r6
 80053b6:	4641      	mov	r1, r8
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	f000 fa93 	bl	80058e4 <memmove>
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	1b9b      	subs	r3, r3, r6
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	441e      	add	r6, r3
 80053c8:	6026      	str	r6, [r4, #0]
 80053ca:	2000      	movs	r0, #0
 80053cc:	e7dc      	b.n	8005388 <__ssputs_r+0x58>
 80053ce:	462a      	mov	r2, r5
 80053d0:	f000 fb4a 	bl	8005a68 <_realloc_r>
 80053d4:	4606      	mov	r6, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1e2      	bne.n	80053a0 <__ssputs_r+0x70>
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	4650      	mov	r0, sl
 80053de:	f000 fa9b 	bl	8005918 <_free_r>
 80053e2:	e7c8      	b.n	8005376 <__ssputs_r+0x46>

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	461d      	mov	r5, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	061f      	lsls	r7, r3, #24
 80053ee:	b09d      	sub	sp, #116	; 0x74
 80053f0:	4680      	mov	r8, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	4616      	mov	r6, r2
 80053f6:	d50f      	bpl.n	8005418 <_svfiprintf_r+0x34>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b96b      	cbnz	r3, 8005418 <_svfiprintf_r+0x34>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f000 fad9 	bl	80059b4 <_malloc_r>
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	6120      	str	r0, [r4, #16]
 8005406:	b928      	cbnz	r0, 8005414 <_svfiprintf_r+0x30>
 8005408:	230c      	movs	r3, #12
 800540a:	f8c8 3000 	str.w	r3, [r8]
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	e0c8      	b.n	80055a6 <_svfiprintf_r+0x1c2>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	6163      	str	r3, [r4, #20]
 8005418:	2300      	movs	r3, #0
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	2320      	movs	r3, #32
 800541e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005422:	2330      	movs	r3, #48	; 0x30
 8005424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005428:	9503      	str	r5, [sp, #12]
 800542a:	f04f 0b01 	mov.w	fp, #1
 800542e:	4637      	mov	r7, r6
 8005430:	463d      	mov	r5, r7
 8005432:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005436:	b10b      	cbz	r3, 800543c <_svfiprintf_r+0x58>
 8005438:	2b25      	cmp	r3, #37	; 0x25
 800543a:	d13e      	bne.n	80054ba <_svfiprintf_r+0xd6>
 800543c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005440:	d00b      	beq.n	800545a <_svfiprintf_r+0x76>
 8005442:	4653      	mov	r3, sl
 8005444:	4632      	mov	r2, r6
 8005446:	4621      	mov	r1, r4
 8005448:	4640      	mov	r0, r8
 800544a:	f7ff ff71 	bl	8005330 <__ssputs_r>
 800544e:	3001      	adds	r0, #1
 8005450:	f000 80a4 	beq.w	800559c <_svfiprintf_r+0x1b8>
 8005454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005456:	4453      	add	r3, sl
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	783b      	ldrb	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 809d 	beq.w	800559c <_svfiprintf_r+0x1b8>
 8005462:	2300      	movs	r3, #0
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005474:	931a      	str	r3, [sp, #104]	; 0x68
 8005476:	462f      	mov	r7, r5
 8005478:	2205      	movs	r2, #5
 800547a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800547e:	4850      	ldr	r0, [pc, #320]	; (80055c0 <_svfiprintf_r+0x1dc>)
 8005480:	f7fa febe 	bl	8000200 <memchr>
 8005484:	9b04      	ldr	r3, [sp, #16]
 8005486:	b9d0      	cbnz	r0, 80054be <_svfiprintf_r+0xda>
 8005488:	06d9      	lsls	r1, r3, #27
 800548a:	bf44      	itt	mi
 800548c:	2220      	movmi	r2, #32
 800548e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005492:	071a      	lsls	r2, r3, #28
 8005494:	bf44      	itt	mi
 8005496:	222b      	movmi	r2, #43	; 0x2b
 8005498:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800549c:	782a      	ldrb	r2, [r5, #0]
 800549e:	2a2a      	cmp	r2, #42	; 0x2a
 80054a0:	d015      	beq.n	80054ce <_svfiprintf_r+0xea>
 80054a2:	9a07      	ldr	r2, [sp, #28]
 80054a4:	462f      	mov	r7, r5
 80054a6:	2000      	movs	r0, #0
 80054a8:	250a      	movs	r5, #10
 80054aa:	4639      	mov	r1, r7
 80054ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b0:	3b30      	subs	r3, #48	; 0x30
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d94d      	bls.n	8005552 <_svfiprintf_r+0x16e>
 80054b6:	b1b8      	cbz	r0, 80054e8 <_svfiprintf_r+0x104>
 80054b8:	e00f      	b.n	80054da <_svfiprintf_r+0xf6>
 80054ba:	462f      	mov	r7, r5
 80054bc:	e7b8      	b.n	8005430 <_svfiprintf_r+0x4c>
 80054be:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <_svfiprintf_r+0x1dc>)
 80054c0:	1a80      	subs	r0, r0, r2
 80054c2:	fa0b f000 	lsl.w	r0, fp, r0
 80054c6:	4318      	orrs	r0, r3
 80054c8:	9004      	str	r0, [sp, #16]
 80054ca:	463d      	mov	r5, r7
 80054cc:	e7d3      	b.n	8005476 <_svfiprintf_r+0x92>
 80054ce:	9a03      	ldr	r2, [sp, #12]
 80054d0:	1d11      	adds	r1, r2, #4
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	9103      	str	r1, [sp, #12]
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	db01      	blt.n	80054de <_svfiprintf_r+0xfa>
 80054da:	9207      	str	r2, [sp, #28]
 80054dc:	e004      	b.n	80054e8 <_svfiprintf_r+0x104>
 80054de:	4252      	negs	r2, r2
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	9207      	str	r2, [sp, #28]
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	783b      	ldrb	r3, [r7, #0]
 80054ea:	2b2e      	cmp	r3, #46	; 0x2e
 80054ec:	d10c      	bne.n	8005508 <_svfiprintf_r+0x124>
 80054ee:	787b      	ldrb	r3, [r7, #1]
 80054f0:	2b2a      	cmp	r3, #42	; 0x2a
 80054f2:	d133      	bne.n	800555c <_svfiprintf_r+0x178>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	9203      	str	r2, [sp, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfb8      	it	lt
 8005500:	f04f 33ff 	movlt.w	r3, #4294967295
 8005504:	3702      	adds	r7, #2
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	4d2e      	ldr	r5, [pc, #184]	; (80055c4 <_svfiprintf_r+0x1e0>)
 800550a:	7839      	ldrb	r1, [r7, #0]
 800550c:	2203      	movs	r2, #3
 800550e:	4628      	mov	r0, r5
 8005510:	f7fa fe76 	bl	8000200 <memchr>
 8005514:	b138      	cbz	r0, 8005526 <_svfiprintf_r+0x142>
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	1b40      	subs	r0, r0, r5
 800551a:	fa03 f000 	lsl.w	r0, r3, r0
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	4303      	orrs	r3, r0
 8005522:	3701      	adds	r7, #1
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	7839      	ldrb	r1, [r7, #0]
 8005528:	4827      	ldr	r0, [pc, #156]	; (80055c8 <_svfiprintf_r+0x1e4>)
 800552a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800552e:	2206      	movs	r2, #6
 8005530:	1c7e      	adds	r6, r7, #1
 8005532:	f7fa fe65 	bl	8000200 <memchr>
 8005536:	2800      	cmp	r0, #0
 8005538:	d038      	beq.n	80055ac <_svfiprintf_r+0x1c8>
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <_svfiprintf_r+0x1e8>)
 800553c:	bb13      	cbnz	r3, 8005584 <_svfiprintf_r+0x1a0>
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554c:	444b      	add	r3, r9
 800554e:	9309      	str	r3, [sp, #36]	; 0x24
 8005550:	e76d      	b.n	800542e <_svfiprintf_r+0x4a>
 8005552:	fb05 3202 	mla	r2, r5, r2, r3
 8005556:	2001      	movs	r0, #1
 8005558:	460f      	mov	r7, r1
 800555a:	e7a6      	b.n	80054aa <_svfiprintf_r+0xc6>
 800555c:	2300      	movs	r3, #0
 800555e:	3701      	adds	r7, #1
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	4619      	mov	r1, r3
 8005564:	250a      	movs	r5, #10
 8005566:	4638      	mov	r0, r7
 8005568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556c:	3a30      	subs	r2, #48	; 0x30
 800556e:	2a09      	cmp	r2, #9
 8005570:	d903      	bls.n	800557a <_svfiprintf_r+0x196>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0c8      	beq.n	8005508 <_svfiprintf_r+0x124>
 8005576:	9105      	str	r1, [sp, #20]
 8005578:	e7c6      	b.n	8005508 <_svfiprintf_r+0x124>
 800557a:	fb05 2101 	mla	r1, r5, r1, r2
 800557e:	2301      	movs	r3, #1
 8005580:	4607      	mov	r7, r0
 8005582:	e7f0      	b.n	8005566 <_svfiprintf_r+0x182>
 8005584:	ab03      	add	r3, sp, #12
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4622      	mov	r2, r4
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800558c:	a904      	add	r1, sp, #16
 800558e:	4640      	mov	r0, r8
 8005590:	f3af 8000 	nop.w
 8005594:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005598:	4681      	mov	r9, r0
 800559a:	d1d6      	bne.n	800554a <_svfiprintf_r+0x166>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	065b      	lsls	r3, r3, #25
 80055a0:	f53f af35 	bmi.w	800540e <_svfiprintf_r+0x2a>
 80055a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055a6:	b01d      	add	sp, #116	; 0x74
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	ab03      	add	r3, sp, #12
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4622      	mov	r2, r4
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <_svfiprintf_r+0x1ec>)
 80055b4:	a904      	add	r1, sp, #16
 80055b6:	4640      	mov	r0, r8
 80055b8:	f000 f882 	bl	80056c0 <_printf_i>
 80055bc:	e7ea      	b.n	8005594 <_svfiprintf_r+0x1b0>
 80055be:	bf00      	nop
 80055c0:	08005bd0 	.word	0x08005bd0
 80055c4:	08005bd6 	.word	0x08005bd6
 80055c8:	08005bda 	.word	0x08005bda
 80055cc:	00000000 	.word	0x00000000
 80055d0:	08005331 	.word	0x08005331

080055d4 <_printf_common>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	4691      	mov	r9, r2
 80055da:	461f      	mov	r7, r3
 80055dc:	688a      	ldr	r2, [r1, #8]
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bfb8      	it	lt
 80055e8:	4613      	movlt	r3, r2
 80055ea:	f8c9 3000 	str.w	r3, [r9]
 80055ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f2:	4606      	mov	r6, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	b112      	cbz	r2, 80055fe <_printf_common+0x2a>
 80055f8:	3301      	adds	r3, #1
 80055fa:	f8c9 3000 	str.w	r3, [r9]
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	0699      	lsls	r1, r3, #26
 8005602:	bf42      	ittt	mi
 8005604:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005608:	3302      	addmi	r3, #2
 800560a:	f8c9 3000 	strmi.w	r3, [r9]
 800560e:	6825      	ldr	r5, [r4, #0]
 8005610:	f015 0506 	ands.w	r5, r5, #6
 8005614:	d107      	bne.n	8005626 <_printf_common+0x52>
 8005616:	f104 0a19 	add.w	sl, r4, #25
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	f8d9 2000 	ldr.w	r2, [r9]
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	42ab      	cmp	r3, r5
 8005624:	dc28      	bgt.n	8005678 <_printf_common+0xa4>
 8005626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	3300      	adds	r3, #0
 800562e:	bf18      	it	ne
 8005630:	2301      	movne	r3, #1
 8005632:	0692      	lsls	r2, r2, #26
 8005634:	d42d      	bmi.n	8005692 <_printf_common+0xbe>
 8005636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800563a:	4639      	mov	r1, r7
 800563c:	4630      	mov	r0, r6
 800563e:	47c0      	blx	r8
 8005640:	3001      	adds	r0, #1
 8005642:	d020      	beq.n	8005686 <_printf_common+0xb2>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	68e5      	ldr	r5, [r4, #12]
 8005648:	f8d9 2000 	ldr.w	r2, [r9]
 800564c:	f003 0306 	and.w	r3, r3, #6
 8005650:	2b04      	cmp	r3, #4
 8005652:	bf08      	it	eq
 8005654:	1aad      	subeq	r5, r5, r2
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	6922      	ldr	r2, [r4, #16]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	341a      	adds	r4, #26
 8005670:	454d      	cmp	r5, r9
 8005672:	d11a      	bne.n	80056aa <_printf_common+0xd6>
 8005674:	2000      	movs	r0, #0
 8005676:	e008      	b.n	800568a <_printf_common+0xb6>
 8005678:	2301      	movs	r3, #1
 800567a:	4652      	mov	r2, sl
 800567c:	4639      	mov	r1, r7
 800567e:	4630      	mov	r0, r6
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d103      	bne.n	800568e <_printf_common+0xba>
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
 800568a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568e:	3501      	adds	r5, #1
 8005690:	e7c3      	b.n	800561a <_printf_common+0x46>
 8005692:	18e1      	adds	r1, r4, r3
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	2030      	movs	r0, #48	; 0x30
 8005698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800569c:	4422      	add	r2, r4
 800569e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a6:	3302      	adds	r3, #2
 80056a8:	e7c5      	b.n	8005636 <_printf_common+0x62>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4622      	mov	r2, r4
 80056ae:	4639      	mov	r1, r7
 80056b0:	4630      	mov	r0, r6
 80056b2:	47c0      	blx	r8
 80056b4:	3001      	adds	r0, #1
 80056b6:	d0e6      	beq.n	8005686 <_printf_common+0xb2>
 80056b8:	f109 0901 	add.w	r9, r9, #1
 80056bc:	e7d8      	b.n	8005670 <_printf_common+0x9c>
	...

080056c0 <_printf_i>:
 80056c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056c8:	460c      	mov	r4, r1
 80056ca:	7e09      	ldrb	r1, [r1, #24]
 80056cc:	b085      	sub	sp, #20
 80056ce:	296e      	cmp	r1, #110	; 0x6e
 80056d0:	4617      	mov	r7, r2
 80056d2:	4606      	mov	r6, r0
 80056d4:	4698      	mov	r8, r3
 80056d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d8:	f000 80b3 	beq.w	8005842 <_printf_i+0x182>
 80056dc:	d822      	bhi.n	8005724 <_printf_i+0x64>
 80056de:	2963      	cmp	r1, #99	; 0x63
 80056e0:	d036      	beq.n	8005750 <_printf_i+0x90>
 80056e2:	d80a      	bhi.n	80056fa <_printf_i+0x3a>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	f000 80b9 	beq.w	800585c <_printf_i+0x19c>
 80056ea:	2958      	cmp	r1, #88	; 0x58
 80056ec:	f000 8083 	beq.w	80057f6 <_printf_i+0x136>
 80056f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056f8:	e032      	b.n	8005760 <_printf_i+0xa0>
 80056fa:	2964      	cmp	r1, #100	; 0x64
 80056fc:	d001      	beq.n	8005702 <_printf_i+0x42>
 80056fe:	2969      	cmp	r1, #105	; 0x69
 8005700:	d1f6      	bne.n	80056f0 <_printf_i+0x30>
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	6813      	ldr	r3, [r2, #0]
 8005706:	0605      	lsls	r5, r0, #24
 8005708:	f103 0104 	add.w	r1, r3, #4
 800570c:	d52a      	bpl.n	8005764 <_printf_i+0xa4>
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6011      	str	r1, [r2, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da03      	bge.n	800571e <_printf_i+0x5e>
 8005716:	222d      	movs	r2, #45	; 0x2d
 8005718:	425b      	negs	r3, r3
 800571a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800571e:	486f      	ldr	r0, [pc, #444]	; (80058dc <_printf_i+0x21c>)
 8005720:	220a      	movs	r2, #10
 8005722:	e039      	b.n	8005798 <_printf_i+0xd8>
 8005724:	2973      	cmp	r1, #115	; 0x73
 8005726:	f000 809d 	beq.w	8005864 <_printf_i+0x1a4>
 800572a:	d808      	bhi.n	800573e <_printf_i+0x7e>
 800572c:	296f      	cmp	r1, #111	; 0x6f
 800572e:	d020      	beq.n	8005772 <_printf_i+0xb2>
 8005730:	2970      	cmp	r1, #112	; 0x70
 8005732:	d1dd      	bne.n	80056f0 <_printf_i+0x30>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	e003      	b.n	8005746 <_printf_i+0x86>
 800573e:	2975      	cmp	r1, #117	; 0x75
 8005740:	d017      	beq.n	8005772 <_printf_i+0xb2>
 8005742:	2978      	cmp	r1, #120	; 0x78
 8005744:	d1d4      	bne.n	80056f0 <_printf_i+0x30>
 8005746:	2378      	movs	r3, #120	; 0x78
 8005748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800574c:	4864      	ldr	r0, [pc, #400]	; (80058e0 <_printf_i+0x220>)
 800574e:	e055      	b.n	80057fc <_printf_i+0x13c>
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	1d19      	adds	r1, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6011      	str	r1, [r2, #0]
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005760:	2301      	movs	r3, #1
 8005762:	e08c      	b.n	800587e <_printf_i+0x1be>
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6011      	str	r1, [r2, #0]
 8005768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800576c:	bf18      	it	ne
 800576e:	b21b      	sxthne	r3, r3
 8005770:	e7cf      	b.n	8005712 <_printf_i+0x52>
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	6825      	ldr	r5, [r4, #0]
 8005776:	1d18      	adds	r0, r3, #4
 8005778:	6010      	str	r0, [r2, #0]
 800577a:	0628      	lsls	r0, r5, #24
 800577c:	d501      	bpl.n	8005782 <_printf_i+0xc2>
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	e002      	b.n	8005788 <_printf_i+0xc8>
 8005782:	0668      	lsls	r0, r5, #25
 8005784:	d5fb      	bpl.n	800577e <_printf_i+0xbe>
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4854      	ldr	r0, [pc, #336]	; (80058dc <_printf_i+0x21c>)
 800578a:	296f      	cmp	r1, #111	; 0x6f
 800578c:	bf14      	ite	ne
 800578e:	220a      	movne	r2, #10
 8005790:	2208      	moveq	r2, #8
 8005792:	2100      	movs	r1, #0
 8005794:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005798:	6865      	ldr	r5, [r4, #4]
 800579a:	60a5      	str	r5, [r4, #8]
 800579c:	2d00      	cmp	r5, #0
 800579e:	f2c0 8095 	blt.w	80058cc <_printf_i+0x20c>
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	f021 0104 	bic.w	r1, r1, #4
 80057a8:	6021      	str	r1, [r4, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d13d      	bne.n	800582a <_printf_i+0x16a>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f040 808e 	bne.w	80058d0 <_printf_i+0x210>
 80057b4:	4665      	mov	r5, ip
 80057b6:	2a08      	cmp	r2, #8
 80057b8:	d10b      	bne.n	80057d2 <_printf_i+0x112>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	07db      	lsls	r3, r3, #31
 80057be:	d508      	bpl.n	80057d2 <_printf_i+0x112>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bfde      	ittt	le
 80057c8:	2330      	movle	r3, #48	; 0x30
 80057ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d2:	ebac 0305 	sub.w	r3, ip, r5
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	f8cd 8000 	str.w	r8, [sp]
 80057dc:	463b      	mov	r3, r7
 80057de:	aa03      	add	r2, sp, #12
 80057e0:	4621      	mov	r1, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff fef6 	bl	80055d4 <_printf_common>
 80057e8:	3001      	adds	r0, #1
 80057ea:	d14d      	bne.n	8005888 <_printf_i+0x1c8>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f6:	4839      	ldr	r0, [pc, #228]	; (80058dc <_printf_i+0x21c>)
 80057f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80057fc:	6813      	ldr	r3, [r2, #0]
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	1d1d      	adds	r5, r3, #4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6015      	str	r5, [r2, #0]
 8005806:	060a      	lsls	r2, r1, #24
 8005808:	d50b      	bpl.n	8005822 <_printf_i+0x162>
 800580a:	07ca      	lsls	r2, r1, #31
 800580c:	bf44      	itt	mi
 800580e:	f041 0120 	orrmi.w	r1, r1, #32
 8005812:	6021      	strmi	r1, [r4, #0]
 8005814:	b91b      	cbnz	r3, 800581e <_printf_i+0x15e>
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	f022 0220 	bic.w	r2, r2, #32
 800581c:	6022      	str	r2, [r4, #0]
 800581e:	2210      	movs	r2, #16
 8005820:	e7b7      	b.n	8005792 <_printf_i+0xd2>
 8005822:	064d      	lsls	r5, r1, #25
 8005824:	bf48      	it	mi
 8005826:	b29b      	uxthmi	r3, r3
 8005828:	e7ef      	b.n	800580a <_printf_i+0x14a>
 800582a:	4665      	mov	r5, ip
 800582c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005830:	fb02 3311 	mls	r3, r2, r1, r3
 8005834:	5cc3      	ldrb	r3, [r0, r3]
 8005836:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800583a:	460b      	mov	r3, r1
 800583c:	2900      	cmp	r1, #0
 800583e:	d1f5      	bne.n	800582c <_printf_i+0x16c>
 8005840:	e7b9      	b.n	80057b6 <_printf_i+0xf6>
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	6961      	ldr	r1, [r4, #20]
 8005848:	1d18      	adds	r0, r3, #4
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	0628      	lsls	r0, r5, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x196>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x19c>
 8005856:	066a      	lsls	r2, r5, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x192>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	4665      	mov	r5, ip
 8005862:	e7b9      	b.n	80057d8 <_printf_i+0x118>
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	1d19      	adds	r1, r3, #4
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	681d      	ldr	r5, [r3, #0]
 800586c:	6862      	ldr	r2, [r4, #4]
 800586e:	2100      	movs	r1, #0
 8005870:	4628      	mov	r0, r5
 8005872:	f7fa fcc5 	bl	8000200 <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1bc>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a7      	b.n	80057d8 <_printf_i+0x118>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	462a      	mov	r2, r5
 800588c:	4639      	mov	r1, r7
 800588e:	4630      	mov	r0, r6
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d0aa      	beq.n	80057ec <_printf_i+0x12c>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x204>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a3      	b.n	80057f0 <_printf_i+0x130>
 80058a8:	2301      	movs	r3, #1
 80058aa:	464a      	mov	r2, r9
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09a      	beq.n	80057ec <_printf_i+0x12c>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9a03      	ldr	r2, [sp, #12]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x1e8>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x1dc>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0919 	add.w	r9, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x1f8>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ac      	bne.n	800582a <_printf_i+0x16a>
 80058d0:	7803      	ldrb	r3, [r0, #0]
 80058d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058da:	e76c      	b.n	80057b6 <_printf_i+0xf6>
 80058dc:	08005be1 	.word	0x08005be1
 80058e0:	08005bf2 	.word	0x08005bf2

080058e4 <memmove>:
 80058e4:	4288      	cmp	r0, r1
 80058e6:	b510      	push	{r4, lr}
 80058e8:	eb01 0302 	add.w	r3, r1, r2
 80058ec:	d807      	bhi.n	80058fe <memmove+0x1a>
 80058ee:	1e42      	subs	r2, r0, #1
 80058f0:	4299      	cmp	r1, r3
 80058f2:	d00a      	beq.n	800590a <memmove+0x26>
 80058f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80058fc:	e7f8      	b.n	80058f0 <memmove+0xc>
 80058fe:	4283      	cmp	r3, r0
 8005900:	d9f5      	bls.n	80058ee <memmove+0xa>
 8005902:	1881      	adds	r1, r0, r2
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	42d3      	cmn	r3, r2
 8005908:	d100      	bne.n	800590c <memmove+0x28>
 800590a:	bd10      	pop	{r4, pc}
 800590c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005910:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005914:	e7f7      	b.n	8005906 <memmove+0x22>
	...

08005918 <_free_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4605      	mov	r5, r0
 800591c:	2900      	cmp	r1, #0
 800591e:	d045      	beq.n	80059ac <_free_r+0x94>
 8005920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005924:	1f0c      	subs	r4, r1, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	bfb8      	it	lt
 800592a:	18e4      	addlt	r4, r4, r3
 800592c:	f000 f8d2 	bl	8005ad4 <__malloc_lock>
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <_free_r+0x98>)
 8005932:	6813      	ldr	r3, [r2, #0]
 8005934:	4610      	mov	r0, r2
 8005936:	b933      	cbnz	r3, 8005946 <_free_r+0x2e>
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	6014      	str	r4, [r2, #0]
 800593c:	4628      	mov	r0, r5
 800593e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005942:	f000 b8c8 	b.w	8005ad6 <__malloc_unlock>
 8005946:	42a3      	cmp	r3, r4
 8005948:	d90c      	bls.n	8005964 <_free_r+0x4c>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	1862      	adds	r2, r4, r1
 800594e:	4293      	cmp	r3, r2
 8005950:	bf04      	itt	eq
 8005952:	681a      	ldreq	r2, [r3, #0]
 8005954:	685b      	ldreq	r3, [r3, #4]
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	bf04      	itt	eq
 800595a:	1852      	addeq	r2, r2, r1
 800595c:	6022      	streq	r2, [r4, #0]
 800595e:	6004      	str	r4, [r0, #0]
 8005960:	e7ec      	b.n	800593c <_free_r+0x24>
 8005962:	4613      	mov	r3, r2
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	b10a      	cbz	r2, 800596c <_free_r+0x54>
 8005968:	42a2      	cmp	r2, r4
 800596a:	d9fa      	bls.n	8005962 <_free_r+0x4a>
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	1858      	adds	r0, r3, r1
 8005970:	42a0      	cmp	r0, r4
 8005972:	d10b      	bne.n	800598c <_free_r+0x74>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	4401      	add	r1, r0
 8005978:	1858      	adds	r0, r3, r1
 800597a:	4282      	cmp	r2, r0
 800597c:	6019      	str	r1, [r3, #0]
 800597e:	d1dd      	bne.n	800593c <_free_r+0x24>
 8005980:	6810      	ldr	r0, [r2, #0]
 8005982:	6852      	ldr	r2, [r2, #4]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	4401      	add	r1, r0
 8005988:	6019      	str	r1, [r3, #0]
 800598a:	e7d7      	b.n	800593c <_free_r+0x24>
 800598c:	d902      	bls.n	8005994 <_free_r+0x7c>
 800598e:	230c      	movs	r3, #12
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	e7d3      	b.n	800593c <_free_r+0x24>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	1821      	adds	r1, r4, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	bf04      	itt	eq
 800599c:	6811      	ldreq	r1, [r2, #0]
 800599e:	6852      	ldreq	r2, [r2, #4]
 80059a0:	6062      	str	r2, [r4, #4]
 80059a2:	bf04      	itt	eq
 80059a4:	1809      	addeq	r1, r1, r0
 80059a6:	6021      	streq	r1, [r4, #0]
 80059a8:	605c      	str	r4, [r3, #4]
 80059aa:	e7c7      	b.n	800593c <_free_r+0x24>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	20000124 	.word	0x20000124

080059b4 <_malloc_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	1ccd      	adds	r5, r1, #3
 80059b8:	f025 0503 	bic.w	r5, r5, #3
 80059bc:	3508      	adds	r5, #8
 80059be:	2d0c      	cmp	r5, #12
 80059c0:	bf38      	it	cc
 80059c2:	250c      	movcc	r5, #12
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	4606      	mov	r6, r0
 80059c8:	db01      	blt.n	80059ce <_malloc_r+0x1a>
 80059ca:	42a9      	cmp	r1, r5
 80059cc:	d903      	bls.n	80059d6 <_malloc_r+0x22>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	2000      	movs	r0, #0
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	f000 f87d 	bl	8005ad4 <__malloc_lock>
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <_malloc_r+0xac>)
 80059dc:	6814      	ldr	r4, [r2, #0]
 80059de:	4621      	mov	r1, r4
 80059e0:	b991      	cbnz	r1, 8005a08 <_malloc_r+0x54>
 80059e2:	4c20      	ldr	r4, [pc, #128]	; (8005a64 <_malloc_r+0xb0>)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	b91b      	cbnz	r3, 80059f0 <_malloc_r+0x3c>
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 f863 	bl	8005ab4 <_sbrk_r>
 80059ee:	6020      	str	r0, [r4, #0]
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 f85e 	bl	8005ab4 <_sbrk_r>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d124      	bne.n	8005a46 <_malloc_r+0x92>
 80059fc:	230c      	movs	r3, #12
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f868 	bl	8005ad6 <__malloc_unlock>
 8005a06:	e7e4      	b.n	80059d2 <_malloc_r+0x1e>
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	1b5b      	subs	r3, r3, r5
 8005a0c:	d418      	bmi.n	8005a40 <_malloc_r+0x8c>
 8005a0e:	2b0b      	cmp	r3, #11
 8005a10:	d90f      	bls.n	8005a32 <_malloc_r+0x7e>
 8005a12:	600b      	str	r3, [r1, #0]
 8005a14:	50cd      	str	r5, [r1, r3]
 8005a16:	18cc      	adds	r4, r1, r3
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f85c 	bl	8005ad6 <__malloc_unlock>
 8005a1e:	f104 000b 	add.w	r0, r4, #11
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	f020 0007 	bic.w	r0, r0, #7
 8005a28:	1ac3      	subs	r3, r0, r3
 8005a2a:	d0d3      	beq.n	80059d4 <_malloc_r+0x20>
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	50e2      	str	r2, [r4, r3]
 8005a30:	e7d0      	b.n	80059d4 <_malloc_r+0x20>
 8005a32:	428c      	cmp	r4, r1
 8005a34:	684b      	ldr	r3, [r1, #4]
 8005a36:	bf16      	itet	ne
 8005a38:	6063      	strne	r3, [r4, #4]
 8005a3a:	6013      	streq	r3, [r2, #0]
 8005a3c:	460c      	movne	r4, r1
 8005a3e:	e7eb      	b.n	8005a18 <_malloc_r+0x64>
 8005a40:	460c      	mov	r4, r1
 8005a42:	6849      	ldr	r1, [r1, #4]
 8005a44:	e7cc      	b.n	80059e0 <_malloc_r+0x2c>
 8005a46:	1cc4      	adds	r4, r0, #3
 8005a48:	f024 0403 	bic.w	r4, r4, #3
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d005      	beq.n	8005a5c <_malloc_r+0xa8>
 8005a50:	1a21      	subs	r1, r4, r0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f82e 	bl	8005ab4 <_sbrk_r>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d0cf      	beq.n	80059fc <_malloc_r+0x48>
 8005a5c:	6025      	str	r5, [r4, #0]
 8005a5e:	e7db      	b.n	8005a18 <_malloc_r+0x64>
 8005a60:	20000124 	.word	0x20000124
 8005a64:	20000128 	.word	0x20000128

08005a68 <_realloc_r>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	460e      	mov	r6, r1
 8005a70:	b921      	cbnz	r1, 8005a7c <_realloc_r+0x14>
 8005a72:	4611      	mov	r1, r2
 8005a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a78:	f7ff bf9c 	b.w	80059b4 <_malloc_r>
 8005a7c:	b922      	cbnz	r2, 8005a88 <_realloc_r+0x20>
 8005a7e:	f7ff ff4b 	bl	8005918 <_free_r>
 8005a82:	4625      	mov	r5, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a88:	f000 f826 	bl	8005ad8 <_malloc_usable_size_r>
 8005a8c:	42a0      	cmp	r0, r4
 8005a8e:	d20f      	bcs.n	8005ab0 <_realloc_r+0x48>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4638      	mov	r0, r7
 8005a94:	f7ff ff8e 	bl	80059b4 <_malloc_r>
 8005a98:	4605      	mov	r5, r0
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d0f2      	beq.n	8005a84 <_realloc_r+0x1c>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	f7ff fc11 	bl	80052c8 <memcpy>
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff35 	bl	8005918 <_free_r>
 8005aae:	e7e9      	b.n	8005a84 <_realloc_r+0x1c>
 8005ab0:	4635      	mov	r5, r6
 8005ab2:	e7e7      	b.n	8005a84 <_realloc_r+0x1c>

08005ab4 <_sbrk_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4c06      	ldr	r4, [pc, #24]	; (8005ad0 <_sbrk_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4605      	mov	r5, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	f7fb fe7a 	bl	80017b8 <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_sbrk_r+0x1a>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_sbrk_r+0x1a>
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	2000035c 	.word	0x2000035c

08005ad4 <__malloc_lock>:
 8005ad4:	4770      	bx	lr

08005ad6 <__malloc_unlock>:
 8005ad6:	4770      	bx	lr

08005ad8 <_malloc_usable_size_r>:
 8005ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005adc:	1f18      	subs	r0, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfbc      	itt	lt
 8005ae2:	580b      	ldrlt	r3, [r1, r0]
 8005ae4:	18c0      	addlt	r0, r0, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
