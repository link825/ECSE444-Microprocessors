
kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006f70  08006f70  00016f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d0  080071d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000074  0800724c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800724c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000dabd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00013a4b  00000000  00000000  0002db61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000272a  00000000  00000000  000415ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001008  00000000  00000000  00043cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010bed8  00000000  00000000  00044ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ec8  00000000  00000000  00150bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002acdd  00000000  00000000  00151a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0017c75d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  0017c850  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002ff5  00000000  00000000  00180f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006f54 	.word	0x08006f54

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08006f54 	.word	0x08006f54

08000200 <kalman_update>:
.text
.syntax unified
.global kalman_update

kalman_update:
	STMDB SP!, {R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,LR}	//push all registers to the stack on entering subroutine
 8000200:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	MOV R2, R0											//make a copy of address of struct's starting point in R2
 8000204:	4602      	mov	r2, r0
	VLDR S1, [R2]										//S1 contains kalman_filtre.q
 8000206:	edd2 0a00 	vldr	s1, [r2]
	ADD R2, R2, #4										//increment struct pointer
 800020a:	f102 0204 	add.w	r2, r2, #4
	VLDR S2, [R2]										//S2 contains kalman_filtre.r
 800020e:	ed92 1a00 	vldr	s2, [r2]
	ADD R2, R2, #4										//incrment struct pointer
 8000212:	f102 0204 	add.w	r2, r2, #4
	VLDR S3, [R2]										//S3 contains kalman_filtre.x
 8000216:	edd2 1a00 	vldr	s3, [r2]
	ADD R2, R2, #4										//increment struct pointer
 800021a:	f102 0204 	add.w	r2, r2, #4
	VLDR S4, [R2]										//S4 contains kalman_filtre.p
 800021e:	ed92 2a00 	vldr	s4, [r2]
	ADD R2, R2, #4										//increment struct pointer
 8000222:	f102 0204 	add.w	r2, r2, #4
	VLDR S5, [R2]										//S5 contains kalman_filtre.k
 8000226:	edd2 2a00 	vldr	s5, [r2]
	VADD.f32 S4, S4, S1									//p=p+q
 800022a:	ee32 2a20 	vadd.f32	s4, s4, s1
	//after every operation need to check for overflow and underflow
	VADD.f32 S6, S4, S2									//S6=p+r
 800022e:	ee32 3a01 	vadd.f32	s6, s4, s2
	//if p+r = 0 branch error, division by zero
	//check for overflow and underflow
	VDIV.f32 S5, S4, S6									//k=p/S6=p/(p+r)
 8000232:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.f32 S6, S0, S3									//S6=measurement-x
 8000236:	ee30 3a61 	vsub.f32	s6, s0, s3
	//check for overflow and underflow
	VMUL.f32 S6, S6, S5									//S6=k*(S6)=k*(measurment-x)
 800023a:	ee23 3a22 	vmul.f32	s6, s6, s5
	//check for overflow and underflow
	VADD.f32 S3, S3, S6									//x=x+S6=x+k*(measurement-x)
 800023e:	ee71 1a83 	vadd.f32	s3, s3, s6
	//check for overflow and underflow
	VMOV.f32 S7, #1.0									//move float 1.0 into S7
 8000242:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	VSUB.f32 S6, S7, S5									//S6=1-k
 8000246:	ee33 3ae2 	vsub.f32	s6, s7, s5
	//check for overflow and underflow
	VMUL.f32 S4, S6, S4									//p=S6*p=(1-k)*p
 800024a:	ee23 2a02 	vmul.f32	s4, s6, s4
	//check for overflow and underflow
	//VSTR S1, [R0]										//store updated q back to first position in struct
	//VSTR S2, [R0, #4]									//store updated r back to second position in struct
	VSTR S3, [R0, #8]									//store updated x back to third position in struct
 800024e:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR S4, [R0, #12]									//store updated p back to fourth position in struct
 8000252:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR S5, [R0, #16]									//store updated k back to fifth position in struct
 8000256:	edc0 2a04 	vstr	s5, [r0, #16]
	VMOV.f32 S0, S3										//return x
 800025a:	eeb0 0a61 	vmov.f32	s0, s3
	//ADD R0, R0, #8										//return address of x
	LDMIA SP!, {R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,LR} //pop the original values back from the stack
 800025e:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	BX LR	 											//branch back to the point in the loop in link register
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a2:	f1a4 0401 	sub.w	r4, r4, #1
 80003a6:	d1e9      	bne.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <create_filtre>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// outputs a kalman filtre struct from five kalman parameters
struct kalman_filtre create_filtre (float q, float r, float x, float p, float k){
 8000edc:	b4b0      	push	{r4, r5, r7}
 8000ede:	b08d      	sub	sp, #52	; 0x34
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6178      	str	r0, [r7, #20]
 8000ee4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ee8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000eec:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ef0:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ef4:	ed87 2a00 	vstr	s4, [r7]
	struct kalman_filtre my_filtre;
	my_filtre.q = q;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	61fb      	str	r3, [r7, #28]
	my_filtre.r = r;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	623b      	str	r3, [r7, #32]
	my_filtre.x = x;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
	my_filtre.p = p;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
	my_filtre.k = k;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

	return my_filtre;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	461d      	mov	r5, r3
 8000f10:	f107 041c 	add.w	r4, r7, #28
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	602b      	str	r3, [r5, #0]
}
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	3734      	adds	r7, #52	; 0x34
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bcb0      	pop	{r4, r5, r7}
 8000f24:	4770      	bx	lr

08000f26 <c_kalman_update>:

// function to update kalman filtre in C
float c_kalman_update(struct kalman_filtre* kalman_filtre, float measurement){
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	ed87 0a00 	vstr	s0, [r7]
    kalman_filtre->p += kalman_filtre->q;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	edd3 7a00 	vldr	s15, [r3]
 8000f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman_filtre->k = kalman_filtre->p / (kalman_filtre->p + kalman_filtre->r);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman_filtre->x = kalman_filtre->x + kalman_filtre->k * (measurement - kalman_filtre->x);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f7a:	ed97 6a00 	vldr	s12, [r7]
 8000f7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman_filtre->p = (1 - kalman_filtre->k) * kalman_filtre->p;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edc3 7a03 	vstr	s15, [r3, #12]

    return kalman_filtre->x;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	ee07 3a90 	vmov	s15, r3
}
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <asm_kalman_filtre>:

// function to populate the output array with kalman_filtre.x after each update using assembly sub routine
int asm_kalman_filtre(float input_array[], float output_array[], struct kalman_filtre* kstate, int length){
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
	int max = length;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
	for(int i=0; i<max; i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e016      	b.n	800100a <asm_kalman_filtre+0x46>
			output_array[i] = kalman_update((int)kstate, input_array[i]);
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	18d4      	adds	r4, r2, r3
 8000ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	f7ff f902 	bl	8000200 <kalman_update>
 8000ffc:	eef0 7a40 	vmov.f32	s15, s0
 8001000:	edc4 7a00 	vstr	s15, [r4]
	for(int i=0; i<max; i++){
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbe4      	blt.n	8000fdc <asm_kalman_filtre+0x18>
		}
	return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <c_kalman_filtre>:

// function to populate the output array with kalman_filtre.x after each update using c function
int c_kalman_filtre(float input_array[], float output_array[], struct kalman_filtre* kstate, int length){
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	for(int i=0; i<length; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e015      	b.n	800105c <c_kalman_filtre+0x40>
			output_array[i] = c_kalman_update(kstate, input_array[i]);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	18d4      	adds	r4, r2, r3
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff6c 	bl	8000f26 <c_kalman_update>
 800104e:	eef0 7a40 	vmov.f32	s15, s0
 8001052:	edc4 7a00 	vstr	s15, [r4]
	for(int i=0; i<length; i++){
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbe5      	blt.n	8001030 <c_kalman_filtre+0x14>
		}
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}

0800106e <c_subtraction>:

// our c implementation of a subtraction function for kalman fltre output
int c_subtraction(float input_array_one[], float input_array_two[], float output_array[], int length){
 800106e:	b480      	push	{r7}
 8001070:	b087      	sub	sp, #28
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
	for(int i=0; i<length; i++){
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e016      	b.n	80010b0 <c_subtraction+0x42>
		output_array[i] = input_array_one[i] - input_array_two[i];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a6:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<length; i++){
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbe4      	blt.n	8001082 <c_subtraction+0x14>
	}
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <c_average>:

// our c implementation of the average function for kalman subtraction output
float c_average(float input_array[], int length){
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
	float sum;
	float output_average;
	for(int i=0; i<length; i++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e00e      	b.n	80010f4 <c_average+0x2e>
		sum += input_array[i];
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0; i<length; i++){
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3301      	adds	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbec      	blt.n	80010d6 <c_average+0x10>
	}
	return output_average = sum/length;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	edd7 6a05 	vldr	s13, [r7, #20]
 800110a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	ee07 3a90 	vmov	s15, r3
}
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <c_standarddev>:

// our c implementation of the standard deviation function for kalman subtraction output
float c_standarddev(float input_array[], float output_average, int length){
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	ed87 0a02 	vstr	s0, [r7, #8]
 8001134:	6079      	str	r1, [r7, #4]
	float output_standarddev;
	for(int i=0; i<length; i++){
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	e02d      	b.n	8001198 <c_standarddev+0x70>
		output_standarddev += pow((input_array[i]-output_average),2);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	edd7 7a02 	vldr	s15, [r7, #8]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff f9ea 	bl	800052c <__aeabi_f2d>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80011d8 <c_standarddev+0xb0>
 8001160:	ec44 3b10 	vmov	d0, r3, r4
 8001164:	f004 fdf4 	bl	8005d50 <pow>
 8001168:	ec56 5b10 	vmov	r5, r6, d0
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f7ff f9dd 	bl	800052c <__aeabi_f2d>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	461a      	mov	r2, r3
 8001178:	4623      	mov	r3, r4
 800117a:	4628      	mov	r0, r5
 800117c:	4631      	mov	r1, r6
 800117e:	f7ff f877 	bl	8000270 <__adddf3>
 8001182:	4603      	mov	r3, r0
 8001184:	460c      	mov	r4, r1
 8001186:	4618      	mov	r0, r3
 8001188:	4621      	mov	r1, r4
 800118a:	f7ff fcd7 	bl	8000b3c <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	617b      	str	r3, [r7, #20]
	for(int i=0; i<length; i++){
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbcd      	blt.n	800113c <c_standarddev+0x14>
	}
	output_standarddev = sqrt(output_standarddev);
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff f9c3 	bl	800052c <__aeabi_f2d>
 80011a6:	4603      	mov	r3, r0
 80011a8:	460c      	mov	r4, r1
 80011aa:	ec44 3b10 	vmov	d0, r3, r4
 80011ae:	f004 ff3f 	bl	8006030 <sqrt>
 80011b2:	ec54 3b10 	vmov	r3, r4, d0
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	f7ff fcbf 	bl	8000b3c <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	617b      	str	r3, [r7, #20]
	return output_standarddev;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	ee07 3a90 	vmov	s15, r3
}
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40000000 	.word	0x40000000

080011e0 <c_correlation>:

// our c implementation of a correlation function for kalman filtres
// based on an implementation from stack overflow for 1D convolution
// https://stackoverflow.com/questions/8424170/1d-linear-convolution-in-ansi-c-code
int c_correlation(float input_array_one[], int length_one, float input_array_two[], int length_two, float output_array[]){
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	for (int n = 0; n < length_one + length_two - 1; n++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e048      	b.n	8001286 <c_correlation+0xa6>
	   for (int k = 0; k < max(length_one, length_two) && n >= k; k++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	e036      	b.n	8001268 <c_correlation+0x88>
	      output_array[n] += (k < length_one ? input_array_one[k] : 0) * ((length_two-1) + (k - n) < length_two ? input_array_two[(length_two-1) + (k - n)] : 0);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	6a3a      	ldr	r2, [r7, #32]
 8001200:	4413      	add	r3, r2
 8001202:	edd3 6a00 	vldr	s13, [r3]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	da06      	bge.n	800121c <c_correlation+0x3c>
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	e001      	b.n	8001220 <c_correlation+0x40>
 800121c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80012a4 <c_correlation+0xc4>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	6939      	ldr	r1, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	1acb      	subs	r3, r1, r3
 800122a:	4413      	add	r3, r2
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dd0b      	ble.n	800124a <c_correlation+0x6a>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	1acb      	subs	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	e001      	b.n	800124e <c_correlation+0x6e>
 800124a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80012a4 <c_correlation+0xc4>
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	4413      	add	r3, r2
 800125a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800125e:	edc3 7a00 	vstr	s15, [r3]
	   for (int k = 0; k < max(length_one, length_two) && n >= k; k++)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4293      	cmp	r3, r2
 800126e:	bfb8      	it	lt
 8001270:	4613      	movlt	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	da03      	bge.n	8001280 <c_correlation+0xa0>
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	dabc      	bge.n	80011fa <c_correlation+0x1a>
	for (int n = 0; n < length_one + length_two - 1; n++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4413      	add	r3, r2
 800128c:	3b01      	subs	r3, #1
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbaf      	blt.n	80011f4 <c_correlation+0x14>
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	00000000 	.word	0x00000000

080012a8 <c_convolution>:

// our c implementation of a convolution function for kalman filtres
// based on an implementation from stack overflow for 1D convolution
// https://stackoverflow.com/questions/8424170/1d-linear-convolution-in-ansi-c-code
int c_convolution(float input_array_one[], int length_one, float input_array_two[], int length_two, float output_array[]){
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
    for (int n = 0; n < length_one + length_two - 1; n++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e042      	b.n	8001342 <c_convolution+0x9a>
        for (int k = 0; k < max(length_one, length_two) && n >= k; k++)
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	e030      	b.n	8001324 <c_convolution+0x7c>
        	output_array[n] += (k < length_one ? input_array_one[k] : 0) * (n - k < length_two ? input_array_two[n - k] : 0);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	6a3a      	ldr	r2, [r7, #32]
 80012c8:	4413      	add	r3, r2
 80012ca:	edd3 6a00 	vldr	s13, [r3]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	da06      	bge.n	80012e4 <c_convolution+0x3c>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	ed93 7a00 	vldr	s14, [r3]
 80012e2:	e001      	b.n	80012e8 <c_convolution+0x40>
 80012e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001360 <c_convolution+0xb8>
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd08      	ble.n	8001306 <c_convolution+0x5e>
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	e001      	b.n	800130a <c_convolution+0x62>
 8001306:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001360 <c_convolution+0xb8>
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	6a3a      	ldr	r2, [r7, #32]
 8001314:	4413      	add	r3, r2
 8001316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800131a:	edc3 7a00 	vstr	s15, [r3]
        for (int k = 0; k < max(length_one, length_two) && n >= k; k++)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4293      	cmp	r3, r2
 800132a:	bfb8      	it	lt
 800132c:	4613      	movlt	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	da03      	bge.n	800133c <c_convolution+0x94>
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	dac2      	bge.n	80012c2 <c_convolution+0x1a>
    for (int n = 0; n < length_one + length_two - 1; n++)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	3b01      	subs	r3, #1
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbb5      	blt.n	80012bc <c_convolution+0x14>
    return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	00000000 	.word	0x00000000

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	f5ad 5dda 	sub.w	sp, sp, #6976	; 0x1b40
 800136a:	b085      	sub	sp, #20
 800136c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//TEST_ARRAY has 101 members
	float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991, 9.5799256668};
 800136e:	f507 53ca 	add.w	r3, r7, #6464	; 0x1940
 8001372:	f103 031c 	add.w	r3, r3, #28
 8001376:	4ae8      	ldr	r2, [pc, #928]	; (8001718 <main+0x3b4>)
 8001378:	4618      	mov	r0, r3
 800137a:	4611      	mov	r1, r2
 800137c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001380:	461a      	mov	r2, r3
 8001382:	f004 fcd1 	bl	8005d28 <memcpy>

	const int input_len = 101;
 8001386:	2365      	movs	r3, #101	; 0x65
 8001388:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 800138c:	f102 021c 	add.w	r2, r2, #28
 8001390:	6013      	str	r3, [r2, #0]

	float q = 0.1;
 8001392:	4be2      	ldr	r3, [pc, #904]	; (800171c <main+0x3b8>)
 8001394:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8001398:	6013      	str	r3, [r2, #0]
	float r = 0.1;
 800139a:	4be0      	ldr	r3, [pc, #896]	; (800171c <main+0x3b8>)
 800139c:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013a0:	f102 0204 	add.w	r2, r2, #4
 80013a4:	6013      	str	r3, [r2, #0]
	float x = 5;
 80013a6:	4bde      	ldr	r3, [pc, #888]	; (8001720 <main+0x3bc>)
 80013a8:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013ac:	f102 0208 	add.w	r2, r2, #8
 80013b0:	6013      	str	r3, [r2, #0]
	float p = 0.5;
 80013b2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013b6:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013ba:	f102 020c 	add.w	r2, r2, #12
 80013be:	6013      	str	r3, [r2, #0]
	float k = 0.1;
 80013c0:	4bd6      	ldr	r3, [pc, #856]	; (800171c <main+0x3b8>)
 80013c2:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013c6:	f102 0210 	add.w	r2, r2, #16
 80013ca:	6013      	str	r3, [r2, #0]

	// create a kalman filtre struct
	struct kalman_filtre test = create_filtre(q, r, x, p, k);
 80013cc:	f507 53ca 	add.w	r3, r7, #6464	; 0x1940
 80013d0:	f103 0308 	add.w	r3, r3, #8
 80013d4:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013d8:	f102 0210 	add.w	r2, r2, #16
 80013dc:	ed92 2a00 	vldr	s4, [r2]
 80013e0:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013e4:	f102 020c 	add.w	r2, r2, #12
 80013e8:	edd2 1a00 	vldr	s3, [r2]
 80013ec:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013f0:	f102 0208 	add.w	r2, r2, #8
 80013f4:	ed92 1a00 	vldr	s2, [r2]
 80013f8:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80013fc:	f102 0204 	add.w	r2, r2, #4
 8001400:	edd2 0a00 	vldr	s1, [r2]
 8001404:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8001408:	ed92 0a00 	vldr	s0, [r2]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd65 	bl	8000edc <create_filtre>
	struct kalman_filtre test2 = create_filtre(q, r, x, p, k);
 8001412:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8001416:	f103 0314 	add.w	r3, r3, #20
 800141a:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800141e:	f102 0210 	add.w	r2, r2, #16
 8001422:	ed92 2a00 	vldr	s4, [r2]
 8001426:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800142a:	f102 020c 	add.w	r2, r2, #12
 800142e:	edd2 1a00 	vldr	s3, [r2]
 8001432:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8001436:	f102 0208 	add.w	r2, r2, #8
 800143a:	ed92 1a00 	vldr	s2, [r2]
 800143e:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8001442:	f102 0204 	add.w	r2, r2, #4
 8001446:	edd2 0a00 	vldr	s1, [r2]
 800144a:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800144e:	ed92 0a00 	vldr	s0, [r2]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fd42 	bl	8000edc <create_filtre>

	// create arrays for update function outputs
	float asm_output[input_len];
 8001458:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800145c:	f103 031c 	add.w	r3, r3, #28
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8001468:	f102 0214 	add.w	r2, r2, #20
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001472:	f103 031c 	add.w	r3, r3, #28
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	f04f 0400 	mov.w	r4, #0
 8001486:	0154      	lsls	r4, r2, #5
 8001488:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800148c:	014b      	lsls	r3, r1, #5
 800148e:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001492:	f103 031c 	add.w	r3, r3, #28
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f04f 0400 	mov.w	r4, #0
 80014a6:	0154      	lsls	r4, r2, #5
 80014a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ac:	014b      	lsls	r3, r1, #5
 80014ae:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80014b2:	f103 031c 	add.w	r3, r3, #28
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	3303      	adds	r3, #3
 80014bc:	3307      	adds	r3, #7
 80014be:	08db      	lsrs	r3, r3, #3
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	ebad 0d03 	sub.w	sp, sp, r3
 80014c6:	ab02      	add	r3, sp, #8
 80014c8:	3303      	adds	r3, #3
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80014d2:	f102 0218 	add.w	r2, r2, #24
 80014d6:	6013      	str	r3, [r2, #0]
	float c_output[input_len];
 80014d8:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80014dc:	f103 031c 	add.w	r3, r3, #28
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80014e8:	f102 021c 	add.w	r2, r2, #28
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80014f2:	f103 031c 	add.w	r3, r3, #28
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	f04f 0400 	mov.w	r4, #0
 8001506:	0154      	lsls	r4, r2, #5
 8001508:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800150c:	014b      	lsls	r3, r1, #5
 800150e:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001512:	f103 031c 	add.w	r3, r3, #28
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	0154      	lsls	r4, r2, #5
 8001528:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800152c:	014b      	lsls	r3, r1, #5
 800152e:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001532:	f103 031c 	add.w	r3, r3, #28
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	3303      	adds	r3, #3
 800153c:	3307      	adds	r3, #7
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	ebad 0d03 	sub.w	sp, sp, r3
 8001546:	ab02      	add	r3, sp, #8
 8001548:	3303      	adds	r3, #3
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001552:	6013      	str	r3, [r2, #0]

	// create variables for c vs cmsis tests, _a for subroutine tests, and _c for c function tests
	float c_sub_a[input_len];
 8001554:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001558:	f103 031c 	add.w	r3, r3, #28
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001564:	f102 0204 	add.w	r2, r2, #4
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800156e:	f103 031c 	add.w	r3, r3, #28
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f04f 0400 	mov.w	r4, #0
 8001582:	0154      	lsls	r4, r2, #5
 8001584:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001588:	014b      	lsls	r3, r1, #5
 800158a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800158e:	f103 031c 	add.w	r3, r3, #28
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	f04f 0400 	mov.w	r4, #0
 80015a2:	0154      	lsls	r4, r2, #5
 80015a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015a8:	014b      	lsls	r3, r1, #5
 80015aa:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80015ae:	f103 031c 	add.w	r3, r3, #28
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	3303      	adds	r3, #3
 80015b8:	3307      	adds	r3, #7
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	ebad 0d03 	sub.w	sp, sp, r3
 80015c2:	ab02      	add	r3, sp, #8
 80015c4:	3303      	adds	r3, #3
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 80015ce:	f102 0218 	add.w	r2, r2, #24
 80015d2:	6013      	str	r3, [r2, #0]
	float c_average_a;
	float c_stdev_a;
	float c_corr_a[201] = {0};
 80015d4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80015d8:	f103 0310 	add.w	r3, r3, #16
 80015dc:	4618      	mov	r0, r3
 80015de:	f44f 7349 	mov.w	r3, #804	; 0x324
 80015e2:	461a      	mov	r2, r3
 80015e4:	2100      	movs	r1, #0
 80015e6:	f004 fbaa 	bl	8005d3e <memset>
	float c_conv_a[201] = {0};
 80015ea:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80015ee:	f103 030c 	add.w	r3, r3, #12
 80015f2:	4618      	mov	r0, r3
 80015f4:	f44f 7349 	mov.w	r3, #804	; 0x324
 80015f8:	461a      	mov	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f004 fb9f 	bl	8005d3e <memset>

	float c_sub_c[input_len];
 8001600:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001604:	f103 031c 	add.w	r3, r3, #28
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3b01      	subs	r3, #1
 800160c:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 8001610:	f102 0214 	add.w	r2, r2, #20
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800161a:	f103 031c 	add.w	r3, r3, #28
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	0154      	lsls	r4, r2, #5
 8001630:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001634:	014b      	lsls	r3, r1, #5
 8001636:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800163a:	f103 031c 	add.w	r3, r3, #28
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f04f 0400 	mov.w	r4, #0
 800164e:	0154      	lsls	r4, r2, #5
 8001650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001654:	014b      	lsls	r3, r1, #5
 8001656:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800165a:	f103 031c 	add.w	r3, r3, #28
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	3303      	adds	r3, #3
 8001664:	3307      	adds	r3, #7
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	ebad 0d03 	sub.w	sp, sp, r3
 800166e:	ab02      	add	r3, sp, #8
 8001670:	3303      	adds	r3, #3
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 800167a:	f102 0210 	add.w	r2, r2, #16
 800167e:	6013      	str	r3, [r2, #0]
	float c_average_c;
	float c_stdev_c;
	float c_corr_c[201] = {0};
 8001680:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8001684:	4618      	mov	r0, r3
 8001686:	f44f 7349 	mov.w	r3, #804	; 0x324
 800168a:	461a      	mov	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f004 fb56 	bl	8005d3e <memset>
	float c_conv_c[201] = {0};
 8001692:	f607 43a4 	addw	r3, r7, #3236	; 0xca4
 8001696:	4618      	mov	r0, r3
 8001698:	f44f 7349 	mov.w	r3, #804	; 0x324
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f004 fb4d 	bl	8005d3e <memset>

	float32_t cmsis_sub_a[input_len];
 80016a4:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80016a8:	f103 031c 	add.w	r3, r3, #28
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 80016b4:	f102 020c 	add.w	r2, r2, #12
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80016be:	f103 031c 	add.w	r3, r3, #28
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	f04f 0400 	mov.w	r4, #0
 80016d2:	0154      	lsls	r4, r2, #5
 80016d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016d8:	014b      	lsls	r3, r1, #5
 80016da:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80016de:	f103 031c 	add.w	r3, r3, #28
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	0154      	lsls	r4, r2, #5
 80016f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016f8:	014b      	lsls	r3, r1, #5
 80016fa:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80016fe:	f103 031c 	add.w	r3, r3, #28
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	3303      	adds	r3, #3
 8001708:	3307      	adds	r3, #7
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	ebad 0d03 	sub.w	sp, sp, r3
 8001712:	ab02      	add	r3, sp, #8
 8001714:	e006      	b.n	8001724 <main+0x3c0>
 8001716:	bf00      	nop
 8001718:	08006f70 	.word	0x08006f70
 800171c:	3dcccccd 	.word	0x3dcccccd
 8001720:	40a00000 	.word	0x40a00000
 8001724:	3303      	adds	r3, #3
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 800172e:	f102 0208 	add.w	r2, r2, #8
 8001732:	6013      	str	r3, [r2, #0]
	float32_t cmsis_average_a;
	float32_t cmsis_stdev_a;
	float32_t cmsis_corr_a[201];
	float32_t cmsis_conv_a[201];

	float32_t cmsis_sub_c[input_len];
 8001734:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001738:	f103 031c 	add.w	r3, r3, #28
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 8001744:	f102 0204 	add.w	r2, r2, #4
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800174e:	f103 031c 	add.w	r3, r3, #28
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	f04f 0400 	mov.w	r4, #0
 8001762:	0154      	lsls	r4, r2, #5
 8001764:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001768:	014b      	lsls	r3, r1, #5
 800176a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800176e:	f103 031c 	add.w	r3, r3, #28
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f04f 0400 	mov.w	r4, #0
 8001782:	0154      	lsls	r4, r2, #5
 8001784:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001788:	014b      	lsls	r3, r1, #5
 800178a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800178e:	f103 031c 	add.w	r3, r3, #28
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	3303      	adds	r3, #3
 8001798:	3307      	adds	r3, #7
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	ebad 0d03 	sub.w	sp, sp, r3
 80017a2:	ab02      	add	r3, sp, #8
 80017a4:	3303      	adds	r3, #3
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 80017ae:	6013      	str	r3, [r2, #0]
	float32_t cmsis_corr_c[201];
	float32_t cmsis_conv_c[201];


	// populate arrays
	asm_kalman_filtre(TEST_ARRAY, asm_output, &test, input_len);
 80017b0:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 80017b4:	f103 0318 	add.w	r3, r3, #24
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	f507 52ca 	add.w	r2, r7, #6464	; 0x1940
 80017be:	f102 0208 	add.w	r2, r2, #8
 80017c2:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 80017c6:	f100 001c 	add.w	r0, r0, #28
 80017ca:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80017ce:	f103 031c 	add.w	r3, r3, #28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f7ff fbf6 	bl	8000fc4 <asm_kalman_filtre>
	c_kalman_filtre(TEST_ARRAY, c_output, &test2, input_len);
 80017d8:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80017e2:	f102 0214 	add.w	r2, r2, #20
 80017e6:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 80017ea:	f100 001c 	add.w	r0, r0, #28
 80017ee:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80017f2:	f103 031c 	add.w	r3, r3, #28
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f7ff fc10 	bl	800101c <c_kalman_filtre>

	////////////////////// C FUNCTION TESTS ////////////////////////
	////////////////////// USING ASM SUBROUTINE //////////////////////////////
	c_subtraction(TEST_ARRAY, asm_output, c_sub_a, input_len);
 80017fc:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8001800:	f103 0318 	add.w	r3, r3, #24
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800180a:	f103 0318 	add.w	r3, r3, #24
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001814:	f100 001c 	add.w	r0, r0, #28
 8001818:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800181c:	f103 031c 	add.w	r3, r3, #28
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f7ff fc24 	bl	800106e <c_subtraction>
	c_average_a = c_average(c_sub_a, input_len);
 8001826:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800182a:	f103 0318 	add.w	r3, r3, #24
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 8001834:	f102 021c 	add.w	r2, r2, #28
 8001838:	6811      	ldr	r1, [r2, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc43 	bl	80010c6 <c_average>
 8001840:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 8001844:	f103 031c 	add.w	r3, r3, #28
 8001848:	ed83 0a00 	vstr	s0, [r3]
	c_stdev_a = c_standarddev(c_sub_a, c_average_a, input_len);
 800184c:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001850:	f103 0318 	add.w	r3, r3, #24
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 800185a:	f102 021c 	add.w	r2, r2, #28
 800185e:	6811      	ldr	r1, [r2, #0]
 8001860:	f507 52d7 	add.w	r2, r7, #6880	; 0x1ae0
 8001864:	f102 021c 	add.w	r2, r2, #28
 8001868:	ed92 0a00 	vldr	s0, [r2]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc5b 	bl	8001128 <c_standarddev>
 8001872:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 8001876:	f103 0318 	add.w	r3, r3, #24
 800187a:	ed83 0a00 	vstr	s0, [r3]
	c_correlation(TEST_ARRAY, input_len, asm_output, input_len, c_corr_a);
 800187e:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8001882:	f103 0318 	add.w	r3, r3, #24
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 800188c:	f100 001c 	add.w	r0, r0, #28
 8001890:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8001894:	f103 0310 	add.w	r3, r3, #16
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800189e:	f103 031c 	add.w	r3, r3, #28
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 80018a8:	f101 011c 	add.w	r1, r1, #28
 80018ac:	6809      	ldr	r1, [r1, #0]
 80018ae:	f7ff fc97 	bl	80011e0 <c_correlation>
	c_convolution(TEST_ARRAY, input_len, asm_output, input_len, c_conv_a);
 80018b2:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 80018b6:	f103 0318 	add.w	r3, r3, #24
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 80018c0:	f100 001c 	add.w	r0, r0, #28
 80018c4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80018c8:	f103 030c 	add.w	r3, r3, #12
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80018d2:	f103 031c 	add.w	r3, r3, #28
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 80018dc:	f101 011c 	add.w	r1, r1, #28
 80018e0:	6809      	ldr	r1, [r1, #0]
 80018e2:	f7ff fce1 	bl	80012a8 <c_convolution>

	////////////////////// USING C FILTRE //////////////////////////////
	c_subtraction(TEST_ARRAY, c_output, c_sub_c, input_len);
 80018e6:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80018f0:	f103 0310 	add.w	r3, r3, #16
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 80018fa:	f100 001c 	add.w	r0, r0, #28
 80018fe:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001902:	f103 031c 	add.w	r3, r3, #28
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f7ff fbb1 	bl	800106e <c_subtraction>
	c_average_c = c_average(c_sub_c, input_len);
 800190c:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001910:	f103 0310 	add.w	r3, r3, #16
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 800191a:	f102 021c 	add.w	r2, r2, #28
 800191e:	6811      	ldr	r1, [r2, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fbd0 	bl	80010c6 <c_average>
 8001926:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 800192a:	f103 0314 	add.w	r3, r3, #20
 800192e:	ed83 0a00 	vstr	s0, [r3]
	c_stdev_c = c_standarddev(c_sub_c, c_average_c, input_len);
 8001932:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001936:	f103 0310 	add.w	r3, r3, #16
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 8001940:	f102 021c 	add.w	r2, r2, #28
 8001944:	6811      	ldr	r1, [r2, #0]
 8001946:	f507 52d7 	add.w	r2, r7, #6880	; 0x1ae0
 800194a:	f102 0214 	add.w	r2, r2, #20
 800194e:	ed92 0a00 	vldr	s0, [r2]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fbe8 	bl	8001128 <c_standarddev>
 8001958:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 800195c:	f103 0310 	add.w	r3, r3, #16
 8001960:	ed83 0a00 	vstr	s0, [r3]
	c_correlation(TEST_ARRAY, input_len, c_output, input_len, c_corr_c);
 8001964:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 800196e:	f100 001c 	add.w	r0, r0, #28
 8001972:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800197c:	f103 031c 	add.w	r3, r3, #28
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 8001986:	f101 011c 	add.w	r1, r1, #28
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	f7ff fc28 	bl	80011e0 <c_correlation>
	c_convolution(TEST_ARRAY, input_len, c_output, input_len, c_conv_c);
 8001990:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 800199a:	f100 001c 	add.w	r0, r0, #28
 800199e:	f607 43a4 	addw	r3, r7, #3236	; 0xca4
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80019a8:	f103 031c 	add.w	r3, r3, #28
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 80019b2:	f101 011c 	add.w	r1, r1, #28
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	f7ff fc76 	bl	80012a8 <c_convolution>


	////////////////////// CMSIS FUNCTION TESTS ////////////////////////
	////////////////////// USING ASM SUBROUTINE //////////////////////////////
	arm_sub_f32(TEST_ARRAY, asm_output, cmsis_sub_a, input_len);
 80019bc:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 80019c0:	f103 0318 	add.w	r3, r3, #24
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80019ca:	f103 0308 	add.w	r3, r3, #8
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80019d4:	f103 031c 	add.w	r3, r3, #28
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 80019de:	f100 001c 	add.w	r0, r0, #28
 80019e2:	f004 f91d 	bl	8005c20 <arm_sub_f32>
	arm_mean_f32(cmsis_sub_a, input_len, &cmsis_average_a);
 80019e6:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 80019ea:	f103 0308 	add.w	r3, r3, #8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 80019f4:	f102 021c 	add.w	r2, r2, #28
 80019f8:	6811      	ldr	r1, [r2, #0]
 80019fa:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fb80 	bl	8005104 <arm_mean_f32>
	arm_std_f32(cmsis_sub_a, input_len, &cmsis_stdev_a);
 8001a04:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a08:	f103 0308 	add.w	r3, r3, #8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f507 52d8 	add.w	r2, r7, #6912	; 0x1b00
 8001a12:	f102 021c 	add.w	r2, r2, #28
 8001a16:	6811      	ldr	r1, [r2, #0]
 8001a18:	f607 429c 	addw	r2, r7, #3228	; 0xc9c
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fae7 	bl	8004ff0 <arm_std_f32>
	arm_correlate_f32(TEST_ARRAY, input_len, asm_output, input_len, cmsis_corr_a);
 8001a22:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a26:	f103 031c 	add.w	r3, r3, #28
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8001a30:	f103 0318 	add.w	r3, r3, #24
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a3a:	f103 031c 	add.w	r3, r3, #28
 8001a3e:	681c      	ldr	r4, [r3, #0]
 8001a40:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001a44:	f100 001c 	add.w	r0, r0, #28
 8001a48:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001a4c:	3b10      	subs	r3, #16
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4623      	mov	r3, r4
 8001a52:	f003 fb95 	bl	8005180 <arm_correlate_f32>
	arm_conv_f32(TEST_ARRAY, input_len, asm_output, input_len, cmsis_conv_a);
 8001a56:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a5a:	f103 031c 	add.w	r3, r3, #28
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8001a64:	f103 0318 	add.w	r3, r3, #24
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a6e:	f103 031c 	add.w	r3, r3, #28
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001a78:	f100 001c 	add.w	r0, r0, #28
 8001a7c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8001a80:	3b14      	subs	r3, #20
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	f003 fe31 	bl	80056ec <arm_conv_f32>


	////////////////////// USING C FILTRE //////////////////////////////////
	arm_sub_f32(TEST_ARRAY, c_output, cmsis_sub_c, input_len);
 8001a8a:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001a9a:	f103 031c 	add.w	r3, r3, #28
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001aa4:	f100 001c 	add.w	r0, r0, #28
 8001aa8:	f004 f8ba 	bl	8005c20 <arm_sub_f32>
	arm_mean_f32(cmsis_sub_c, input_len, &cmsis_average_c);
 8001aac:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001ab6:	f103 031c 	add.w	r3, r3, #28
 8001aba:	6819      	ldr	r1, [r3, #0]
 8001abc:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8001ac0:	3b18      	subs	r3, #24
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f003 fb1e 	bl	8005104 <arm_mean_f32>
	arm_std_f32(cmsis_sub_c, input_len, &cmsis_stdev_c);
 8001ac8:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001ad2:	f103 031c 	add.w	r3, r3, #28
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8001adc:	3b1c      	subs	r3, #28
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f003 fa86 	bl	8004ff0 <arm_std_f32>
	arm_correlate_f32(TEST_ARRAY, input_len, c_output, input_len, cmsis_corr_c);
 8001ae4:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001ae8:	f103 031c 	add.w	r3, r3, #28
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001af8:	f103 031c 	add.w	r3, r3, #28
 8001afc:	681c      	ldr	r4, [r3, #0]
 8001afe:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001b02:	f100 001c 	add.w	r0, r0, #28
 8001b06:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	f003 fb37 	bl	8005180 <arm_correlate_f32>
	arm_conv_f32(TEST_ARRAY, input_len, c_output, input_len, cmsis_conv_c);
 8001b12:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001b16:	f103 031c 	add.w	r3, r3, #28
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8001b26:	f103 031c 	add.w	r3, r3, #28
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	f507 50ca 	add.w	r0, r7, #6464	; 0x1940
 8001b30:	f100 001c 	add.w	r0, r0, #28
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	3b04      	subs	r3, #4
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	f003 fdd5 	bl	80056ec <arm_conv_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b42:	f000 fa50 	bl	8001fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 f807 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f000 f915 	bl	8001d78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b4e:	f000 f879 	bl	8001c44 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001b52:	f000 f8c5 	bl	8001ce0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <main+0x7f2>

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0bc      	sub	sp, #240	; 0xf0
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b62:	2244      	movs	r2, #68	; 0x44
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f8e9 	bl	8005d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2294      	movs	r2, #148	; 0x94
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f8db 	bl	8005d3e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 fd39 	bl	8002600 <HAL_PWREx_ControlVoltageScaling>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001b94:	f000 f914 	bl	8001dc0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001baa:	2360      	movs	r3, #96	; 0x60
 8001bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001bc2:	233c      	movs	r3, #60	; 0x3c
 8001bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fdb2 	bl	8002748 <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bea:	f000 f8e9 	bl	8001dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	230f      	movs	r3, #15
 8001bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c10:	2105      	movs	r1, #5
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 f9be 	bl	8002f94 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c1e:	f000 f8cf 	bl	8001dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c26:	2300      	movs	r3, #0
 8001c28:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fc61 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001c38:	f000 f8c2 	bl	8001dc0 <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	37f0      	adds	r7, #240	; 0xf0
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c6c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8c:	4813      	ldr	r0, [pc, #76]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001c8e:	f002 f939 	bl	8003f04 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c98:	f000 f892 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001caa:	f002 f982 	bl	8003fb2 <HAL_TIM_ConfigClockSource>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001cb4:	f000 f884 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_TIM2_Init+0x98>)
 8001cc6:	f002 fb61 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001cd0:	f000 f876 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000011c 	.word	0x2000011c

08001ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <MX_USART1_UART_Init+0x94>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d2a:	f002 fbb7 	bl	800449c <HAL_UART_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d34:	f000 f844 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d3c:	f003 f873 	bl	8004e26 <HAL_UARTEx_SetTxFifoThreshold>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d46:	f000 f83b 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d4e:	f003 f8a8 	bl	8004ea2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d58:	f000 f832 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_USART1_UART_Init+0x90>)
 8001d5e:	f003 f829 	bl	8004db4 <HAL_UARTEx_DisableFifoMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d68:	f000 f82a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000090 	.word	0x20000090
 8001d74:	40013800 	.word	0x40013800

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_GPIO_Init+0x44>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <Error_Handler+0x6>

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_MspInit+0x44>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x44>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x44>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x44>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d10b      	bne.n	8001e3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_TIM_Base_MspInit+0x38>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_TIM_Base_MspInit+0x38>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_TIM_Base_MspInit+0x38>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x80>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d129      	bne.n	8001ec2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f000 f9ed 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 f8b6 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <SystemInit+0x64>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <SystemInit+0x64>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <SystemInit+0x68>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <SystemInit+0x68>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <SystemInit+0x68>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <SystemInit+0x68>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <SystemInit+0x68>)
 8001f54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <SystemInit+0x68>)
 8001f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <SystemInit+0x68>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <SystemInit+0x68>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <SystemInit+0x68>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SystemInit+0x64>)
 8001f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	40021000 	.word	0x40021000

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff ffc6 	bl	8001f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f9e:	e003      	b.n	8001fa8 <LoopCopyDataInit>

08001fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fa6:	3104      	adds	r1, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fa8:	480a      	ldr	r0, [pc, #40]	; (8001fd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fb0:	d3f6      	bcc.n	8001fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fb4:	e002      	b.n	8001fbc <LoopFillZerobss>

08001fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fb8:	f842 3b04 	str.w	r3, [r2], #4

08001fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <LoopForever+0x16>)
	cmp	r2, r3
 8001fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fc0:	d3f9      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f003 fe8d 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7ff f9cd 	bl	8001364 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001fd0:	080071d8 	.word	0x080071d8
	ldr	r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fd8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001fdc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001fe0:	2000016c 	.word	0x2000016c

08001fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_IRQHandler>

08001fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f91f 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f80e 	bl	8002018 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e001      	b.n	800200c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002008:	f7ff fede 	bl	8001dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_InitTick+0x70>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f91d 	bl	8002282 <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d809      	bhi.n	8002068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 f8f5 	bl	800224a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_InitTick+0x74>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e007      	b.n	8002078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e004      	b.n	8002078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e001      	b.n	8002078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000168 	.word	0x20000168

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000168 	.word	0x20000168

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff47 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff5c 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffb0 	bl	80021f0 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	e166      	b.n	800257a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8158 	beq.w	8002574 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d00b      	beq.n	80022e4 <HAL_GPIO_Init+0x48>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0xea>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b12      	cmp	r3, #18
 8002384:	d123      	bne.n	80023ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0203 	and.w	r2, r3, #3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80b2 	beq.w	8002574 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6613      	str	r3, [r2, #96]	; 0x60
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002428:	4a5c      	ldr	r2, [pc, #368]	; (800259c <HAL_GPIO_Init+0x300>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002452:	d02b      	beq.n	80024ac <HAL_GPIO_Init+0x210>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d025      	beq.n	80024a8 <HAL_GPIO_Init+0x20c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x308>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01f      	beq.n	80024a4 <HAL_GPIO_Init+0x208>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x204>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x310>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x200>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_GPIO_Init+0x314>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1fc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x318>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1f8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x31c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1f4>
 800248c:	2307      	movs	r3, #7
 800248e:	e00e      	b.n	80024ae <HAL_GPIO_Init+0x212>
 8002490:	2308      	movs	r3, #8
 8002492:	e00c      	b.n	80024ae <HAL_GPIO_Init+0x212>
 8002494:	2306      	movs	r3, #6
 8002496:	e00a      	b.n	80024ae <HAL_GPIO_Init+0x212>
 8002498:	2305      	movs	r3, #5
 800249a:	e008      	b.n	80024ae <HAL_GPIO_Init+0x212>
 800249c:	2304      	movs	r3, #4
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x212>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x212>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x212>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x212>
 80024ac:	2300      	movs	r3, #0
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024be:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_GPIO_Init+0x300>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_GPIO_Init+0x320>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HAL_GPIO_Init+0x320>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_GPIO_Init+0x320>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <HAL_GPIO_Init+0x320>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_GPIO_Init+0x320>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f ae91 	bne.w	80022ac <HAL_GPIO_Init+0x10>
  }
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	48000400 	.word	0x48000400
 80025a4:	48000800 	.word	0x48000800
 80025a8:	48000c00 	.word	0x48000c00
 80025ac:	48001000 	.word	0x48001000
 80025b0:	48001400 	.word	0x48001400
 80025b4:	48001800 	.word	0x48001800
 80025b8:	48001c00 	.word	0x48001c00
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d102      	bne.n	80025d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d6:	e00b      	b.n	80025f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d102      	bne.n	80025ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ec:	e000      	b.n	80025f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40007000 	.word	0x40007000

08002600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d141      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800260e:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d131      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002622:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002634:	4a41      	ldr	r2, [pc, #260]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2232      	movs	r2, #50	; 0x32
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a3f      	ldr	r2, [pc, #252]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002652:	e002      	b.n	800265a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d102      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f2      	bne.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267a:	d158      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e057      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002690:	e04d      	b.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d141      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d131      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2232      	movs	r2, #50	; 0x32
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026de:	e002      	b.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d102      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f2      	bne.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d112      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e011      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800271c:	e007      	b.n	800272e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40007000 	.word	0x40007000
 8002740:	20000000 	.word	0x20000000
 8002744:	431bde83 	.word	0x431bde83

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f000 bc16 	b.w	8002f88 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275c:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002766:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80e4 	beq.w	8002946 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_RCC_OscConfig+0x4c>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	f040 808b 	bne.w	80028a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 8087 	bne.w	80028a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002794:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x64>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e3ed      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_RCC_OscConfig+0x7e>
 80027bc:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	e005      	b.n	80027d2 <HAL_RCC_OscConfig+0x8a>
 80027c6:	4b86      	ldr	r3, [pc, #536]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d223      	bcs.n	800281e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fdc8 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e3ce      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ea:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4977      	ldr	r1, [pc, #476]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002808:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4972      	ldr	r1, [pc, #456]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e025      	b.n	800286a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6f      	ldr	r2, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	496a      	ldr	r1, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fd88 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e38e      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 fcbf 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a5a      	ldr	r2, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x29c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa21 f303 	lsr.w	r3, r1, r3
 8002886:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_OscConfig+0x2a0>)
 8002888:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_RCC_OscConfig+0x2a4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fbc2 	bl	8002018 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	e372      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d032      	beq.n	8002910 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b6:	f7ff fbff 	bl	80020b8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028be:	f7ff fbfb 	bl	80020b8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e35b      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d0:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a3f      	ldr	r2, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	493a      	ldr	r1, [pc, #232]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4935      	ldr	r1, [pc, #212]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
 800290e:	e01a      	b.n	8002946 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800291c:	f7ff fbcc 	bl	80020b8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7ff fbc8 	bl	80020b8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e328      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1dc>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d073      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x21c>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d10e      	bne.n	800297c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d10b      	bne.n	800297c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d063      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d15f      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e305      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x24c>
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e01d      	b.n	80029d0 <HAL_RCC_OscConfig+0x288>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x270>
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x288>
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7ff fb6e 	bl	80020b8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	e010      	b.n	8002a02 <HAL_RCC_OscConfig+0x2ba>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08007114 	.word	0x08007114
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fb62 	bl	80020b8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e2c2      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	4baf      	ldr	r3, [pc, #700]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2a8>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff fb52 	bl	80020b8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fb4e 	bl	80020b8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e2ae      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2a:	4ba5      	ldr	r3, [pc, #660]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2d0>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d060      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x310>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d116      	bne.n	8002a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_OscConfig+0x328>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e28b      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b93      	ldr	r3, [pc, #588]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	4990      	ldr	r1, [pc, #576]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a84:	e040      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d023      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8e:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8b      	ldr	r2, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff fb0d 	bl	80020b8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fb09 	bl	80020b8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e269      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	497c      	ldr	r1, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	e018      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a79      	ldr	r2, [pc, #484]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff fae9 	bl	80020b8 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff fae5 	bl	80020b8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e245      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afc:	4b70      	ldr	r3, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7ff fac4 	bl	80020b8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff fac0 	bl	80020b8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e220      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b46:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ef      	beq.n	8002b34 <HAL_RCC_OscConfig+0x3ec>
 8002b54:	e01b      	b.n	8002b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b56:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7ff faa7 	bl	80020b8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff faa3 	bl	80020b8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e203      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ef      	bne.n	8002b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80a6 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d118      	bne.n	8002c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be0:	f7ff fa6a 	bl	80020b8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff fa66 	bl	80020b8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1c6      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d108      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4d8>
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1e:	e024      	b.n	8002c6a <HAL_RCC_OscConfig+0x522>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d110      	bne.n	8002c4a <HAL_RCC_OscConfig+0x502>
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c48:	e00f      	b.n	8002c6a <HAL_RCC_OscConfig+0x522>
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7ff fa21 	bl	80020b8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7ff fa1d 	bl	80020b8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e17b      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ed      	beq.n	8002c7a <HAL_RCC_OscConfig+0x532>
 8002c9e:	e01a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fa0a 	bl	80020b8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca6:	e00f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7ff fa06 	bl	80020b8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d906      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e164      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc8:	4ba8      	ldr	r3, [pc, #672]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e8      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4ba3      	ldr	r3, [pc, #652]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4aa2      	ldr	r2, [pc, #648]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cfc:	4b9b      	ldr	r3, [pc, #620]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d02:	4a9a      	ldr	r2, [pc, #616]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7ff f9d4 	bl	80020b8 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d14:	f7ff f9d0 	bl	80020b8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e130      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d26:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <HAL_RCC_OscConfig+0x5cc>
 8002d34:	e01b      	b.n	8002d6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d36:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3c:	4a8b      	ldr	r2, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7ff f9b7 	bl	80020b8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4e:	f7ff f9b3 	bl	80020b8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e113      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d60:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ef      	bne.n	8002d4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8107 	beq.w	8002f86 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f040 80cb 	bne.w	8002f18 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d82:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d12c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	3b01      	subs	r3, #1
 8002da2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d123      	bne.n	8002df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d11b      	bne.n	8002df0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d113      	bne.n	8002df0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d06d      	beq.n	8002ecc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d068      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e02:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ba      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e12:	4b56      	ldr	r3, [pc, #344]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a55      	ldr	r2, [pc, #340]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e1e:	f7ff f94b 	bl	80020b8 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7ff f947 	bl	80020b8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0a7      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e44:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <HAL_RCC_OscConfig+0x828>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e54:	3a01      	subs	r2, #1
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e5e:	0212      	lsls	r2, r2, #8
 8002e60:	4311      	orrs	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0552      	lsls	r2, r2, #21
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	0652      	lsls	r2, r2, #25
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7e:	06d2      	lsls	r2, r2, #27
 8002e80:	430a      	orrs	r2, r1
 8002e82:	493a      	ldr	r1, [pc, #232]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea0:	f7ff f90a 	bl	80020b8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7ff f906 	bl	80020b8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e066      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec6:	e05e      	b.n	8002f86 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e05d      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d156      	bne.n	8002f86 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef0:	f7ff f8e2 	bl	80020b8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff f8de 	bl	80020b8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e03e      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x7b0>
 8002f16:	e036      	b.n	8002f86 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d031      	beq.n	8002f82 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x824>)
 8002f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7ff f8b1 	bl	80020b8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f58:	e00c      	b.n	8002f74 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7ff f8ad 	bl	80020b8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d905      	bls.n	8002f74 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e00d      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_OscConfig+0x848>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ec      	bne.n	8002f5a <HAL_RCC_OscConfig+0x812>
 8002f80:	e001      	b.n	8002f86 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e10f      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d910      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b86      	ldr	r3, [pc, #536]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 020f 	bic.w	r2, r3, #15
 8002fc2:	4984      	ldr	r1, [pc, #528]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0f7      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8089 	beq.w	80030fc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d133      	bne.n	800305a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e4      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003002:	f000 fa0f 	bl	8003424 <RCC_GetSysClockFreqFromPLLSource>
 8003006:	4602      	mov	r2, r0
 8003008:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCC_ClockConfig+0x248>)
 800300a:	429a      	cmp	r2, r3
 800300c:	d955      	bls.n	80030ba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800301a:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003022:	4a6d      	ldr	r2, [pc, #436]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e044      	b.n	80030ba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d03e      	beq.n	80030ba <HAL_RCC_ClockConfig+0x126>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d13a      	bne.n	80030ba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304c:	4a62      	ldr	r2, [pc, #392]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800304e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003052:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e02f      	b.n	80030ba <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4b5d      	ldr	r3, [pc, #372]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0ac      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307a:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0a0      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e098      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800309a:	f000 f8a7 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_RCC_ClockConfig+0x248>)
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d909      	bls.n	80030ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030a6:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4944      	ldr	r1, [pc, #272]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe fff4 	bl	80020b8 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe fff0 	bl	80020b8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e070      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4930      	ldr	r1, [pc, #192]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
 800311a:	e008      	b.n	800312e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d105      	bne.n	800312e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d210      	bcs.n	800315e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 020f 	bic.w	r2, r3, #15
 8003144:	4923      	ldr	r1, [pc, #140]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_ClockConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e036      	b.n	80031cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4918      	ldr	r1, [pc, #96]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4910      	ldr	r1, [pc, #64]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800319c:	f000 f826 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031a0:	4601      	mov	r1, r0
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_RCC_ClockConfig+0x24c>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa21 f303 	lsr.w	r3, r1, r3
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x250>)
 80031ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x254>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe ff29 	bl	8002018 <HAL_InitTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	04c4b400 	.word	0x04c4b400
 80031e0:	08007114 	.word	0x08007114
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x34>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d121      	bne.n	800325e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d11e      	bne.n	800325e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800322e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e005      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003250:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10d      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d102      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e004      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d101      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003272:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d133      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xa4>
 800328a:	2b03      	cmp	r3, #3
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0xaa>
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003292:	617b      	str	r3, [r7, #20]
      break;
 8003294:	e005      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003298:	617b      	str	r3, [r7, #20]
      break;
 800329a:	e002      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	617b      	str	r3, [r7, #20]
      break;
 80032a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	3301      	adds	r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	fb02 f203 	mul.w	r2, r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0e5b      	lsrs	r3, r3, #25
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032e2:	69bb      	ldr	r3, [r7, #24]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3724      	adds	r7, #36	; 0x24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40021000 	.word	0x40021000
 80032f4:	0800712c 	.word	0x0800712c
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4601      	mov	r1, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	08007124 	.word	0x08007124

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003348:	f7ff ffda 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08007124 	.word	0x08007124

08003370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f91a 	bl	80025c0 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
 800338e:	e014      	b.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	4a21      	ldr	r2, [pc, #132]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a8:	f7ff f90a 	bl	80025c0 <HAL_PWREx_GetVoltageRange>
 80033ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d10b      	bne.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d913      	bls.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2ba0      	cmp	r3, #160	; 0xa0
 80033cc:	d902      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ce:	2302      	movs	r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e00d      	b.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e00a      	b.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b7f      	cmp	r3, #127	; 0x7f
 80033de:	d902      	bls.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033e0:	2302      	movs	r3, #2
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e004      	b.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d101      	bne.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 020f 	bic.w	r2, r3, #15
 80033f8:	4909      	ldr	r1, [pc, #36]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	40022000 	.word	0x40022000

08003424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d118      	bne.n	800346c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e005      	b.n	8003462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003462:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d002      	beq.n	8003482 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800347c:	2b03      	cmp	r3, #3
 800347e:	d003      	beq.n	8003488 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003480:	e005      	b.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003484:	613b      	str	r3, [r7, #16]
    break;
 8003486:	e005      	b.n	8003494 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800348a:	613b      	str	r3, [r7, #16]
    break;
 800348c:	e002      	b.n	8003494 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
    break;
 8003492:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	fb02 f203 	mul.w	r2, r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	0e5b      	lsrs	r3, r3, #25
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	3301      	adds	r3, #1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034d4:	683b      	ldr	r3, [r7, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	0800712c 	.word	0x0800712c
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	007a1200 	.word	0x007a1200

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003500:	2300      	movs	r3, #0
 8003502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03d      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d00b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d804      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003524:	e01d      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003526:	2b60      	cmp	r3, #96	; 0x60
 8003528:	d01e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d01c      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800352e:	e018      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003530:	4b86      	ldr	r3, [pc, #536]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a85      	ldr	r2, [pc, #532]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fafd 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3320      	adds	r3, #32
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fbe4 	bl	8003d24 <RCCEx_PLLSAI2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	74fb      	strb	r3, [r7, #19]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003576:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357e:	4973      	ldr	r1, [pc, #460]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003586:	e001      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d042      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d00f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80035a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a6:	d805      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d011      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d017      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80035b2:	e01f      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80035b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b8:	d01f      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d01c      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c0:	e018      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c2:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ce:	e015      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fab4 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3320      	adds	r3, #32
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb9b 	bl	8003d24 <RCCEx_PLLSAI2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	74fb      	strb	r3, [r7, #19]
      break;
 80035f8:	e000      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80035fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003602:	4b52      	ldr	r3, [pc, #328]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	494e      	ldr	r1, [pc, #312]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003618:	e001      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 809f 	beq.w	800376a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003630:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	4a40      	ldr	r2, [pc, #256]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6593      	str	r3, [r2, #88]	; 0x58
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3a      	ldr	r2, [pc, #232]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800366e:	f7fe fd23 	bl	80020b8 <HAL_GetTick>
 8003672:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003674:	e009      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fe fd1f 	bl	80020b8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d902      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	74fb      	strb	r3, [r7, #19]
        break;
 8003688:	e005      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ef      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d15b      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01f      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d019      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e6:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fcde 	bl	80020b8 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fe:	e00b      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fcda 	bl	80020b8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d902      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	74fb      	strb	r3, [r7, #19]
            break;
 8003716:	e006      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ec      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10c      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003744:	e008      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	74bb      	strb	r3, [r7, #18]
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003758:	7c7b      	ldrb	r3, [r7, #17]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4ba0      	ldr	r3, [pc, #640]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	4a9f      	ldr	r2, [pc, #636]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003776:	4b9a      	ldr	r3, [pc, #616]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f023 0203 	bic.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	4996      	ldr	r1, [pc, #600]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003798:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 020c 	bic.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	498e      	ldr	r1, [pc, #568]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ba:	4b89      	ldr	r3, [pc, #548]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	4985      	ldr	r1, [pc, #532]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037dc:	4b80      	ldr	r3, [pc, #512]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	497d      	ldr	r1, [pc, #500]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fe:	4b78      	ldr	r3, [pc, #480]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	4974      	ldr	r1, [pc, #464]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003820:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	496c      	ldr	r1, [pc, #432]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003850:	4963      	ldr	r1, [pc, #396]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003872:	495b      	ldr	r1, [pc, #364]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003886:	4b56      	ldr	r3, [pc, #344]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	4952      	ldr	r1, [pc, #328]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a8:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	494a      	ldr	r1, [pc, #296]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ca:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	4941      	ldr	r1, [pc, #260]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ec:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	4939      	ldr	r1, [pc, #228]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d028      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	4930      	ldr	r1, [pc, #192]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392e:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003938:	60d3      	str	r3, [r2, #12]
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f8f9 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04d      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003974:	d108      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003982:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003986:	e012      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003994:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e020      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ce:	d109      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
 80039dc:	e014      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f8a5 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a22:	4947      	ldr	r1, [pc, #284]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a41      	ldr	r2, [pc, #260]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e011      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f876 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a82:	492f      	ldr	r1, [pc, #188]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f851 	bl	8003b44 <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac2:	f023 0204 	bic.w	r2, r3, #4
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	491c      	ldr	r1, [pc, #112]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ae6:	f023 0218 	bic.w	r2, r3, #24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	4913      	ldr	r1, [pc, #76]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b14:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000

08003b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b52:	4b70      	ldr	r3, [pc, #448]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0203 	and.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d103      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
       ||
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d13f      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e03c      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d00c      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x5a>
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d013      	beq.n	8003bb0 <RCCEx_PLLSAI1_Config+0x6c>
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d120      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b8c:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11d      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e01a      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bae:	e013      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bb0:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bcc:	e006      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd2:	e004      	b.n	8003bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 0203 	bic.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4948      	ldr	r1, [pc, #288]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8086 	bne.w	8003d0a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bfe:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a44      	ldr	r2, [pc, #272]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0a:	f7fe fa55 	bl	80020b8 <HAL_GetTick>
 8003c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c10:	e009      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c12:	f7fe fa51 	bl	80020b8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d902      	bls.n	8003c26 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	73fb      	strb	r3, [r7, #15]
        break;
 8003c24:	e005      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ef      	bne.n	8003c12 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d168      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d113      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c3e:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6892      	ldr	r2, [r2, #8]
 8003c4a:	0211      	lsls	r1, r2, #8
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68d2      	ldr	r2, [r2, #12]
 8003c50:	06d2      	lsls	r2, r2, #27
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6852      	ldr	r2, [r2, #4]
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	492d      	ldr	r1, [pc, #180]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	610b      	str	r3, [r1, #16]
 8003c64:	e02d      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d115      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6c:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	0211      	lsls	r1, r2, #8
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6912      	ldr	r2, [r2, #16]
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0552      	lsls	r2, r2, #21
 8003c84:	4311      	orrs	r1, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6852      	ldr	r2, [r2, #4]
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	4920      	ldr	r1, [pc, #128]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]
 8003c96:	e014      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6952      	ldr	r2, [r2, #20]
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0652      	lsls	r2, r2, #25
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6852      	ldr	r2, [r2, #4]
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	4915      	ldr	r1, [pc, #84]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cc2:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe f9f3 	bl	80020b8 <HAL_GetTick>
 8003cd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cd4:	e009      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd6:	f7fe f9ef 	bl	80020b8 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ce8:	e005      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	07ff800f 	.word	0x07ff800f
 8003d1c:	ff9f800f 	.word	0xff9f800f
 8003d20:	f9ff800f 	.word	0xf9ff800f

08003d24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d32:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d103      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
       ||
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d13f      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e03c      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d00c      	beq.n	8003d7e <RCCEx_PLLSAI2_Config+0x5a>
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d013      	beq.n	8003d90 <RCCEx_PLLSAI2_Config+0x6c>
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d120      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d6c:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11d      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e01a      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8e:	e013      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d90:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d9c:	4b55      	ldr	r3, [pc, #340]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dac:	e006      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      break;
 8003db2:	e004      	b.n	8003dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dbc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f023 0203 	bic.w	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4948      	ldr	r1, [pc, #288]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8086 	bne.w	8003eea <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dde:	4b45      	ldr	r3, [pc, #276]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a44      	ldr	r2, [pc, #272]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fe f965 	bl	80020b8 <HAL_GetTick>
 8003dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df0:	e009      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003df2:	f7fe f961 	bl	80020b8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d902      	bls.n	8003e06 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	73fb      	strb	r3, [r7, #15]
        break;
 8003e04:	e005      	b.n	8003e12 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ef      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d168      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d113      	bne.n	8003e46 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e1e:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6892      	ldr	r2, [r2, #8]
 8003e2a:	0211      	lsls	r1, r2, #8
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68d2      	ldr	r2, [r2, #12]
 8003e30:	06d2      	lsls	r2, r2, #27
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6852      	ldr	r2, [r2, #4]
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	614b      	str	r3, [r1, #20]
 8003e44:	e02d      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d115      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4c:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	0211      	lsls	r1, r2, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6912      	ldr	r2, [r2, #16]
 8003e5e:	0852      	lsrs	r2, r2, #1
 8003e60:	3a01      	subs	r2, #1
 8003e62:	0552      	lsls	r2, r2, #21
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6852      	ldr	r2, [r2, #4]
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	4920      	ldr	r1, [pc, #128]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	614b      	str	r3, [r1, #20]
 8003e76:	e014      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6892      	ldr	r2, [r2, #8]
 8003e84:	0211      	lsls	r1, r2, #8
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6952      	ldr	r2, [r2, #20]
 8003e8a:	0852      	lsrs	r2, r2, #1
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	0652      	lsls	r2, r2, #25
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6852      	ldr	r2, [r2, #4]
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	4915      	ldr	r1, [pc, #84]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fe f903 	bl	80020b8 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eb4:	e009      	b.n	8003eca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb6:	f7fe f8ff 	bl	80020b8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d902      	bls.n	8003eca <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec8:	e005      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ef      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	07ff800f 	.word	0x07ff800f
 8003efc:	ff9f800f 	.word	0xff9f800f
 8003f00:	f9ff800f 	.word	0xf9ff800f

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e049      	b.n	8003faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd ff70 	bl	8001e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 f8ee 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_ConfigClockSource+0x18>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0a8      	b.n	800411c <HAL_TIM_ConfigClockSource+0x16a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d067      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x124>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d80b      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x70>
 800400a:	2b10      	cmp	r3, #16
 800400c:	d073      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x144>
 800400e:	2b10      	cmp	r3, #16
 8004010:	d802      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x66>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d06f      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004016:	e078      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004018:	2b20      	cmp	r3, #32
 800401a:	d06c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x144>
 800401c:	2b30      	cmp	r3, #48	; 0x30
 800401e:	d06a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004020:	e073      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004022:	2b70      	cmp	r3, #112	; 0x70
 8004024:	d00d      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x90>
 8004026:	2b70      	cmp	r3, #112	; 0x70
 8004028:	d804      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x82>
 800402a:	2b50      	cmp	r3, #80	; 0x50
 800402c:	d033      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xe4>
 800402e:	2b60      	cmp	r3, #96	; 0x60
 8004030:	d041      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004032:	e06a      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004038:	d066      	beq.n	8004108 <HAL_TIM_ConfigClockSource+0x156>
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d017      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004040:	e063      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f000 f97b 	bl	800434c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	609a      	str	r2, [r3, #8]
      break;
 800406e:	e04c      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 f964 	bl	800434c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004092:	609a      	str	r2, [r3, #8]
      break;
 8004094:	e039      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 f8d8 	bl	8004258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2150      	movs	r1, #80	; 0x50
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f931 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e029      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 f8f7 	bl	80042b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2160      	movs	r1, #96	; 0x60
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f921 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e019      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 f8b8 	bl	8004258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2140      	movs	r1, #64	; 0x40
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f911 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e009      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 f908 	bl	8004316 <TIM_ITRx_SetConfig>
        break;
 8004106:	e000      	b.n	800410a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a40      	ldr	r2, [pc, #256]	; (8004238 <TIM_Base_SetConfig+0x114>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d00f      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3d      	ldr	r2, [pc, #244]	; (800423c <TIM_Base_SetConfig+0x118>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3c      	ldr	r2, [pc, #240]	; (8004240 <TIM_Base_SetConfig+0x11c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3b      	ldr	r2, [pc, #236]	; (8004244 <TIM_Base_SetConfig+0x120>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3a      	ldr	r2, [pc, #232]	; (8004248 <TIM_Base_SetConfig+0x124>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d108      	bne.n	8004176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <TIM_Base_SetConfig+0x114>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01f      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d01b      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <TIM_Base_SetConfig+0x118>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d017      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <TIM_Base_SetConfig+0x11c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <TIM_Base_SetConfig+0x120>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a29      	ldr	r2, [pc, #164]	; (8004248 <TIM_Base_SetConfig+0x124>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <TIM_Base_SetConfig+0x128>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <TIM_Base_SetConfig+0x12c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a26      	ldr	r2, [pc, #152]	; (8004254 <TIM_Base_SetConfig+0x130>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <TIM_Base_SetConfig+0x114>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <TIM_Base_SetConfig+0x124>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a11      	ldr	r2, [pc, #68]	; (800424c <TIM_Base_SetConfig+0x128>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <TIM_Base_SetConfig+0x12c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <TIM_Base_SetConfig+0x130>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800

08004258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0201 	bic.w	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f023 030a 	bic.w	r3, r3, #10
 8004294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0210 	bic.w	r2, r3, #16
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	031b      	lsls	r3, r3, #12
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	f043 0307 	orr.w	r3, r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	431a      	orrs	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e068      	b.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d108      	bne.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d018      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1b      	ldr	r2, [pc, #108]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a13      	ldr	r2, [pc, #76]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10c      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4313      	orrs	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40014000 	.word	0x40014000

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e042      	b.n	8004534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fcc3 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f82c 	bl	800453c <UART_SetConfig>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e022      	b.n	8004534 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 faf2 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb79 	bl	8004c24 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4313      	orrs	r3, r2
 8004560:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	4313      	orrs	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4bb1      	ldr	r3, [pc, #708]	; (8004838 <UART_SetConfig+0x2fc>)
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	69f9      	ldr	r1, [r7, #28]
 800457c:	430b      	orrs	r3, r1
 800457e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4aa6      	ldr	r2, [pc, #664]	; (800483c <UART_SetConfig+0x300>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	69f9      	ldr	r1, [r7, #28]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f023 010f 	bic.w	r1, r3, #15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a97      	ldr	r2, [pc, #604]	; (8004840 <UART_SetConfig+0x304>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d121      	bne.n	800462c <UART_SetConfig+0xf0>
 80045e8:	4b96      	ldr	r3, [pc, #600]	; (8004844 <UART_SetConfig+0x308>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d816      	bhi.n	8004624 <UART_SetConfig+0xe8>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0xc0>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	08004619 	.word	0x08004619
 8004604:	08004613 	.word	0x08004613
 8004608:	0800461f 	.word	0x0800461f
 800460c:	2301      	movs	r3, #1
 800460e:	76fb      	strb	r3, [r7, #27]
 8004610:	e0e8      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004612:	2302      	movs	r3, #2
 8004614:	76fb      	strb	r3, [r7, #27]
 8004616:	e0e5      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004618:	2304      	movs	r3, #4
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	e0e2      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800461e:	2308      	movs	r3, #8
 8004620:	76fb      	strb	r3, [r7, #27]
 8004622:	e0df      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004624:	2310      	movs	r3, #16
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	bf00      	nop
 800462a:	e0db      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a85      	ldr	r2, [pc, #532]	; (8004848 <UART_SetConfig+0x30c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d134      	bne.n	80046a0 <UART_SetConfig+0x164>
 8004636:	4b83      	ldr	r3, [pc, #524]	; (8004844 <UART_SetConfig+0x308>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d829      	bhi.n	8004698 <UART_SetConfig+0x15c>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x110>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	08004699 	.word	0x08004699
 8004654:	08004699 	.word	0x08004699
 8004658:	08004699 	.word	0x08004699
 800465c:	0800468d 	.word	0x0800468d
 8004660:	08004699 	.word	0x08004699
 8004664:	08004699 	.word	0x08004699
 8004668:	08004699 	.word	0x08004699
 800466c:	08004687 	.word	0x08004687
 8004670:	08004699 	.word	0x08004699
 8004674:	08004699 	.word	0x08004699
 8004678:	08004699 	.word	0x08004699
 800467c:	08004693 	.word	0x08004693
 8004680:	2300      	movs	r3, #0
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e0ae      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004686:	2302      	movs	r3, #2
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e0ab      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800468c:	2304      	movs	r3, #4
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e0a8      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004692:	2308      	movs	r3, #8
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e0a5      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004698:	2310      	movs	r3, #16
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	bf00      	nop
 800469e:	e0a1      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a69      	ldr	r2, [pc, #420]	; (800484c <UART_SetConfig+0x310>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d120      	bne.n	80046ec <UART_SetConfig+0x1b0>
 80046aa:	4b66      	ldr	r3, [pc, #408]	; (8004844 <UART_SetConfig+0x308>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d00f      	beq.n	80046d8 <UART_SetConfig+0x19c>
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d802      	bhi.n	80046c2 <UART_SetConfig+0x186>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <UART_SetConfig+0x190>
 80046c0:	e010      	b.n	80046e4 <UART_SetConfig+0x1a8>
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d005      	beq.n	80046d2 <UART_SetConfig+0x196>
 80046c6:	2b30      	cmp	r3, #48	; 0x30
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x1a2>
 80046ca:	e00b      	b.n	80046e4 <UART_SetConfig+0x1a8>
 80046cc:	2300      	movs	r3, #0
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e088      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046d2:	2302      	movs	r3, #2
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e085      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046d8:	2304      	movs	r3, #4
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e082      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046de:	2308      	movs	r3, #8
 80046e0:	76fb      	strb	r3, [r7, #27]
 80046e2:	e07f      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046e4:	2310      	movs	r3, #16
 80046e6:	76fb      	strb	r3, [r7, #27]
 80046e8:	bf00      	nop
 80046ea:	e07b      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a57      	ldr	r2, [pc, #348]	; (8004850 <UART_SetConfig+0x314>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d120      	bne.n	8004738 <UART_SetConfig+0x1fc>
 80046f6:	4b53      	ldr	r3, [pc, #332]	; (8004844 <UART_SetConfig+0x308>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d00f      	beq.n	8004724 <UART_SetConfig+0x1e8>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d802      	bhi.n	800470e <UART_SetConfig+0x1d2>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <UART_SetConfig+0x1dc>
 800470c:	e010      	b.n	8004730 <UART_SetConfig+0x1f4>
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d005      	beq.n	800471e <UART_SetConfig+0x1e2>
 8004712:	2bc0      	cmp	r3, #192	; 0xc0
 8004714:	d009      	beq.n	800472a <UART_SetConfig+0x1ee>
 8004716:	e00b      	b.n	8004730 <UART_SetConfig+0x1f4>
 8004718:	2300      	movs	r3, #0
 800471a:	76fb      	strb	r3, [r7, #27]
 800471c:	e062      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800471e:	2302      	movs	r3, #2
 8004720:	76fb      	strb	r3, [r7, #27]
 8004722:	e05f      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004724:	2304      	movs	r3, #4
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e05c      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800472a:	2308      	movs	r3, #8
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e059      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004730:	2310      	movs	r3, #16
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	bf00      	nop
 8004736:	e055      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a45      	ldr	r2, [pc, #276]	; (8004854 <UART_SetConfig+0x318>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d124      	bne.n	800478c <UART_SetConfig+0x250>
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <UART_SetConfig+0x308>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004750:	d012      	beq.n	8004778 <UART_SetConfig+0x23c>
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d802      	bhi.n	800475e <UART_SetConfig+0x222>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <UART_SetConfig+0x230>
 800475c:	e012      	b.n	8004784 <UART_SetConfig+0x248>
 800475e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004762:	d006      	beq.n	8004772 <UART_SetConfig+0x236>
 8004764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004768:	d009      	beq.n	800477e <UART_SetConfig+0x242>
 800476a:	e00b      	b.n	8004784 <UART_SetConfig+0x248>
 800476c:	2300      	movs	r3, #0
 800476e:	76fb      	strb	r3, [r7, #27]
 8004770:	e038      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004772:	2302      	movs	r3, #2
 8004774:	76fb      	strb	r3, [r7, #27]
 8004776:	e035      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004778:	2304      	movs	r3, #4
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e032      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800477e:	2308      	movs	r3, #8
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e02f      	b.n	80047e4 <UART_SetConfig+0x2a8>
 8004784:	2310      	movs	r3, #16
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	bf00      	nop
 800478a:	e02b      	b.n	80047e4 <UART_SetConfig+0x2a8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <UART_SetConfig+0x300>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d124      	bne.n	80047e0 <UART_SetConfig+0x2a4>
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <UART_SetConfig+0x308>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d012      	beq.n	80047cc <UART_SetConfig+0x290>
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d802      	bhi.n	80047b2 <UART_SetConfig+0x276>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <UART_SetConfig+0x284>
 80047b0:	e012      	b.n	80047d8 <UART_SetConfig+0x29c>
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b6:	d006      	beq.n	80047c6 <UART_SetConfig+0x28a>
 80047b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047bc:	d009      	beq.n	80047d2 <UART_SetConfig+0x296>
 80047be:	e00b      	b.n	80047d8 <UART_SetConfig+0x29c>
 80047c0:	2300      	movs	r3, #0
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e00e      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80047c6:	2302      	movs	r3, #2
 80047c8:	76fb      	strb	r3, [r7, #27]
 80047ca:	e00b      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80047cc:	2304      	movs	r3, #4
 80047ce:	76fb      	strb	r3, [r7, #27]
 80047d0:	e008      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80047d2:	2308      	movs	r3, #8
 80047d4:	76fb      	strb	r3, [r7, #27]
 80047d6:	e005      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80047d8:	2310      	movs	r3, #16
 80047da:	76fb      	strb	r3, [r7, #27]
 80047dc:	bf00      	nop
 80047de:	e001      	b.n	80047e4 <UART_SetConfig+0x2a8>
 80047e0:	2310      	movs	r3, #16
 80047e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <UART_SetConfig+0x300>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f040 80a1 	bne.w	8004932 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047f0:	7efb      	ldrb	r3, [r7, #27]
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d836      	bhi.n	8004864 <UART_SetConfig+0x328>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x2c0>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004865 	.word	0x08004865
 8004804:	08004829 	.word	0x08004829
 8004808:	08004865 	.word	0x08004865
 800480c:	0800482f 	.word	0x0800482f
 8004810:	08004865 	.word	0x08004865
 8004814:	08004865 	.word	0x08004865
 8004818:	08004865 	.word	0x08004865
 800481c:	0800485d 	.word	0x0800485d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fd7a 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004824:	6178      	str	r0, [r7, #20]
        break;
 8004826:	e022      	b.n	800486e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <UART_SetConfig+0x31c>)
 800482a:	617b      	str	r3, [r7, #20]
        break;
 800482c:	e01f      	b.n	800486e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe fcdd 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004832:	6178      	str	r0, [r7, #20]
        break;
 8004834:	e01b      	b.n	800486e <UART_SetConfig+0x332>
 8004836:	bf00      	nop
 8004838:	cfff69f3 	.word	0xcfff69f3
 800483c:	40008000 	.word	0x40008000
 8004840:	40013800 	.word	0x40013800
 8004844:	40021000 	.word	0x40021000
 8004848:	40004400 	.word	0x40004400
 800484c:	40004800 	.word	0x40004800
 8004850:	40004c00 	.word	0x40004c00
 8004854:	40005000 	.word	0x40005000
 8004858:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004860:	617b      	str	r3, [r7, #20]
        break;
 8004862:	e004      	b.n	800486e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	76bb      	strb	r3, [r7, #26]
        break;
 800486c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 811d 	beq.w	8004ab0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	4a97      	ldr	r2, [pc, #604]	; (8004ad8 <UART_SetConfig+0x59c>)
 800487c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004880:	461a      	mov	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fbb3 f3f2 	udiv	r3, r3, r2
 8004888:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d305      	bcc.n	80048a6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d902      	bls.n	80048ac <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	76bb      	strb	r3, [r7, #26]
 80048aa:	e101      	b.n	8004ab0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	4a87      	ldr	r2, [pc, #540]	; (8004ad8 <UART_SetConfig+0x59c>)
 80048ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	461a      	mov	r2, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	f7fc f988 	bl	8000bdc <__aeabi_uldivmod>
 80048cc:	4603      	mov	r3, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4619      	mov	r1, r3
 80048d2:	4622      	mov	r2, r4
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	0214      	lsls	r4, r2, #8
 80048de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048e2:	020b      	lsls	r3, r1, #8
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	0852      	lsrs	r2, r2, #1
 80048ea:	4611      	mov	r1, r2
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	eb13 0b01 	adds.w	fp, r3, r1
 80048f4:	eb44 0c02 	adc.w	ip, r4, r2
 80048f8:	4658      	mov	r0, fp
 80048fa:	4661      	mov	r1, ip
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f04f 0400 	mov.w	r4, #0
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	f7fc f968 	bl	8000bdc <__aeabi_uldivmod>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004918:	d308      	bcc.n	800492c <UART_SetConfig+0x3f0>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004920:	d204      	bcs.n	800492c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	e0c1      	b.n	8004ab0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	76bb      	strb	r3, [r7, #26]
 8004930:	e0be      	b.n	8004ab0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	d164      	bne.n	8004a06 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800493c:	7efb      	ldrb	r3, [r7, #27]
 800493e:	2b08      	cmp	r3, #8
 8004940:	d827      	bhi.n	8004992 <UART_SetConfig+0x456>
 8004942:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <UART_SetConfig+0x40c>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004993 	.word	0x08004993
 8004958:	08004983 	.word	0x08004983
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
 8004968:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fe fcd4 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004970:	6178      	str	r0, [r7, #20]
        break;
 8004972:	e013      	b.n	800499c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fe fce6 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004978:	6178      	str	r0, [r7, #20]
        break;
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b57      	ldr	r3, [pc, #348]	; (8004adc <UART_SetConfig+0x5a0>)
 800497e:	617b      	str	r3, [r7, #20]
        break;
 8004980:	e00c      	b.n	800499c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe fc33 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004986:	6178      	str	r0, [r7, #20]
        break;
 8004988:	e008      	b.n	800499c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	617b      	str	r3, [r7, #20]
        break;
 8004990:	e004      	b.n	800499c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	76bb      	strb	r3, [r7, #26]
        break;
 800499a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8086 	beq.w	8004ab0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <UART_SetConfig+0x59c>)
 80049aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ae:	461a      	mov	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80049b6:	005a      	lsls	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	d916      	bls.n	8004a00 <UART_SetConfig+0x4c4>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d212      	bcs.n	8004a00 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f023 030f 	bic.w	r3, r3, #15
 80049e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	89fb      	ldrh	r3, [r7, #14]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	89fa      	ldrh	r2, [r7, #14]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e057      	b.n	8004ab0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	76bb      	strb	r3, [r7, #26]
 8004a04:	e054      	b.n	8004ab0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a06:	7efb      	ldrb	r3, [r7, #27]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d828      	bhi.n	8004a5e <UART_SetConfig+0x522>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0x4d8>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a57 	.word	0x08004a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fc6e 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	6178      	str	r0, [r7, #20]
        break;
 8004a3e:	e013      	b.n	8004a68 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fc80 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004a44:	6178      	str	r0, [r7, #20]
        break;
 8004a46:	e00f      	b.n	8004a68 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <UART_SetConfig+0x5a0>)
 8004a4a:	617b      	str	r3, [r7, #20]
        break;
 8004a4c:	e00c      	b.n	8004a68 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7fe fbcd 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004a52:	6178      	str	r0, [r7, #20]
        break;
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a5a:	617b      	str	r3, [r7, #20]
        break;
 8004a5c:	e004      	b.n	8004a68 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	76bb      	strb	r3, [r7, #26]
        break;
 8004a66:	bf00      	nop
    }

    if (pclk != 0U)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <UART_SetConfig+0x59c>)
 8004a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d908      	bls.n	8004aac <UART_SetConfig+0x570>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d204      	bcs.n	8004aac <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e001      	b.n	8004ab0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004acc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ad8:	0800715c 	.word	0x0800715c
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bde:	d10a      	bne.n	8004bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c34:	f7fd fa40 	bl	80020b8 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10e      	bne.n	8004c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f82c 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e022      	b.n	8004cac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f816 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e00c      	b.n	8004cac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	e062      	b.n	8004d8c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d05e      	beq.n	8004d8c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fd f9f3 	bl	80020b8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11d      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cf2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e045      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02e      	beq.n	8004d8c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3c:	d126      	bne.n	8004d8c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d56:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e00f      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4013      	ands	r3, r2
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d08d      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_UARTEx_DisableFifoMode+0x16>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e027      	b.n	8004e1a <HAL_UARTEx_DisableFifoMode+0x66>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2224      	movs	r2, #36	; 0x24
 8004dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004df8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e02d      	b.n	8004e9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2224      	movs	r2, #36	; 0x24
 8004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f850 	bl	8004f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e02d      	b.n	8004f16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f812 	bl	8004f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004f28:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <UARTEx_SetNbDataToProcess+0xc8>)
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004f36:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <UARTEx_SetNbDataToProcess+0xcc>)
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f5c:	e03d      	b.n	8004fda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f62:	2308      	movs	r3, #8
 8004f64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	0e5b      	lsrs	r3, r3, #25
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	0f5b      	lsrs	r3, r3, #29
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004f86:	7fbb      	ldrb	r3, [r7, #30]
 8004f88:	7f3a      	ldrb	r2, [r7, #28]
 8004f8a:	f107 0120 	add.w	r1, r7, #32
 8004f8e:	440a      	add	r2, r1
 8004f90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	7f3a      	ldrb	r2, [r7, #28]
 8004f9a:	f107 0120 	add.w	r1, r7, #32
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
 8004fb2:	7f7a      	ldrb	r2, [r7, #29]
 8004fb4:	f107 0120 	add.w	r1, r7, #32
 8004fb8:	440a      	add	r2, r1
 8004fba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	7f7a      	ldrb	r2, [r7, #29]
 8004fc4:	f107 0120 	add.w	r1, r7, #32
 8004fc8:	440a      	add	r2, r1
 8004fca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fce:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	08007104 	.word	0x08007104
 8004fec:	0800710c 	.word	0x0800710c

08004ff0 <arm_std_f32>:
 8004ff0:	2901      	cmp	r1, #1
 8004ff2:	d97d      	bls.n	80050f0 <arm_std_f32+0x100>
 8004ff4:	b530      	push	{r4, r5, lr}
 8004ff6:	ed2d 8b02 	vpush	{d8}
 8004ffa:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005100 <arm_std_f32+0x110>
 8004ffe:	088d      	lsrs	r5, r1, #2
 8005000:	b083      	sub	sp, #12
 8005002:	eef0 4a47 	vmov.f32	s9, s14
 8005006:	d028      	beq.n	800505a <arm_std_f32+0x6a>
 8005008:	f100 0310 	add.w	r3, r0, #16
 800500c:	462c      	mov	r4, r5
 800500e:	ed53 7a04 	vldr	s15, [r3, #-16]
 8005012:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005016:	ed53 5a02 	vldr	s11, [r3, #-8]
 800501a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800501e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005022:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005026:	ee36 7a87 	vadd.f32	s14, s13, s14
 800502a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800502e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005032:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005036:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800503a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800503e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005042:	ee26 7a06 	vmul.f32	s14, s12, s12
 8005046:	3c01      	subs	r4, #1
 8005048:	ee77 4a86 	vadd.f32	s9, s15, s12
 800504c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005050:	f103 0310 	add.w	r3, r3, #16
 8005054:	d1db      	bne.n	800500e <arm_std_f32+0x1e>
 8005056:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800505a:	f011 0303 	ands.w	r3, r1, #3
 800505e:	d01b      	beq.n	8005098 <arm_std_f32+0xa8>
 8005060:	edd0 7a00 	vldr	s15, [r0]
 8005064:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005068:	3b01      	subs	r3, #1
 800506a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800506e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005072:	d011      	beq.n	8005098 <arm_std_f32+0xa8>
 8005074:	edd0 7a01 	vldr	s15, [r0, #4]
 8005078:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800507c:	2b01      	cmp	r3, #1
 800507e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005082:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005086:	d007      	beq.n	8005098 <arm_std_f32+0xa8>
 8005088:	edd0 7a02 	vldr	s15, [r0, #8]
 800508c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005090:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005094:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005098:	ee07 1a90 	vmov	s15, r1
 800509c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80050a4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80050a8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 80050ac:	eec7 5a86 	vdiv.f32	s11, s15, s12
 80050b0:	ee87 0a06 	vdiv.f32	s0, s14, s12
 80050b4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80050b8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80050bc:	ee30 0a66 	vsub.f32	s0, s0, s13
 80050c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	db0c      	blt.n	80050e4 <arm_std_f32+0xf4>
 80050ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80050d6:	d40e      	bmi.n	80050f6 <arm_std_f32+0x106>
 80050d8:	ed82 8a00 	vstr	s16, [r2]
 80050dc:	b003      	add	sp, #12
 80050de:	ecbd 8b02 	vpop	{d8}
 80050e2:	bd30      	pop	{r4, r5, pc}
 80050e4:	2300      	movs	r3, #0
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	b003      	add	sp, #12
 80050ea:	ecbd 8b02 	vpop	{d8}
 80050ee:	bd30      	pop	{r4, r5, pc}
 80050f0:	2300      	movs	r3, #0
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4770      	bx	lr
 80050f6:	9201      	str	r2, [sp, #4]
 80050f8:	f000 fff4 	bl	80060e4 <sqrtf>
 80050fc:	9a01      	ldr	r2, [sp, #4]
 80050fe:	e7eb      	b.n	80050d8 <arm_std_f32+0xe8>
 8005100:	00000000 	.word	0x00000000

08005104 <arm_mean_f32>:
 8005104:	b430      	push	{r4, r5}
 8005106:	088d      	lsrs	r5, r1, #2
 8005108:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800517c <arm_mean_f32+0x78>
 800510c:	d018      	beq.n	8005140 <arm_mean_f32+0x3c>
 800510e:	f100 0310 	add.w	r3, r0, #16
 8005112:	462c      	mov	r4, r5
 8005114:	ed53 5a04 	vldr	s11, [r3, #-16]
 8005118:	ed13 6a03 	vldr	s12, [r3, #-12]
 800511c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005120:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005124:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005128:	3c01      	subs	r4, #1
 800512a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800512e:	f103 0310 	add.w	r3, r3, #16
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800513a:	d1eb      	bne.n	8005114 <arm_mean_f32+0x10>
 800513c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005140:	f011 0303 	ands.w	r3, r1, #3
 8005144:	d00f      	beq.n	8005166 <arm_mean_f32+0x62>
 8005146:	ed90 7a00 	vldr	s14, [r0]
 800514a:	3b01      	subs	r3, #1
 800514c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005150:	d009      	beq.n	8005166 <arm_mean_f32+0x62>
 8005152:	ed90 7a01 	vldr	s14, [r0, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800515c:	bf1c      	itt	ne
 800515e:	ed90 7a02 	vldrne	s14, [r0, #8]
 8005162:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8005166:	ee07 1a10 	vmov	s14, r1
 800516a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800516e:	bc30      	pop	{r4, r5}
 8005170:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005174:	edc2 6a00 	vstr	s13, [r2]
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	00000000 	.word	0x00000000

08005180 <arm_correlate_f32>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4299      	cmp	r1, r3
 8005186:	b08d      	sub	sp, #52	; 0x34
 8005188:	f0c0 824c 	bcc.w	8005624 <arm_correlate_f32+0x4a4>
 800518c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800518e:	eba1 0c03 	sub.w	ip, r1, r3
 8005192:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8005196:	f04f 0e04 	mov.w	lr, #4
 800519a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800519e:	3101      	adds	r1, #1
 80051a0:	1ac9      	subs	r1, r1, r3
 80051a2:	3c01      	subs	r4, #1
 80051a4:	1e5e      	subs	r6, r3, #1
 80051a6:	9102      	str	r1, [sp, #8]
 80051a8:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80051ac:	f000 8294 	beq.w	80056d8 <arm_correlate_f32+0x558>
 80051b0:	eddf 7a53 	vldr	s15, [pc, #332]	; 8005300 <arm_correlate_f32+0x180>
 80051b4:	f1a1 0804 	sub.w	r8, r1, #4
 80051b8:	46e1      	mov	r9, ip
 80051ba:	4605      	mov	r5, r0
 80051bc:	2401      	movs	r4, #1
 80051be:	f014 0703 	ands.w	r7, r4, #3
 80051c2:	d01b      	beq.n	80051fc <arm_correlate_f32+0x7c>
 80051c4:	ed91 7a00 	vldr	s14, [r1]
 80051c8:	edd5 6a00 	vldr	s13, [r5]
 80051cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80051d0:	3f01      	subs	r7, #1
 80051d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051d6:	d011      	beq.n	80051fc <arm_correlate_f32+0x7c>
 80051d8:	ed91 7a01 	vldr	s14, [r1, #4]
 80051dc:	edd5 6a01 	vldr	s13, [r5, #4]
 80051e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80051e4:	2f01      	cmp	r7, #1
 80051e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ea:	d007      	beq.n	80051fc <arm_correlate_f32+0x7c>
 80051ec:	ed95 7a02 	vldr	s14, [r5, #8]
 80051f0:	edd1 6a02 	vldr	s13, [r1, #8]
 80051f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80051f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051fc:	1c67      	adds	r7, r4, #1
 80051fe:	42bb      	cmp	r3, r7
 8005200:	edc9 7a00 	vstr	s15, [r9]
 8005204:	4641      	mov	r1, r8
 8005206:	44f1      	add	r9, lr
 8005208:	d03a      	beq.n	8005280 <arm_correlate_f32+0x100>
 800520a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800520e:	f000 8267 	beq.w	80056e0 <arm_correlate_f32+0x560>
 8005212:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8005216:	f100 0110 	add.w	r1, r0, #16
 800521a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005300 <arm_correlate_f32+0x180>
 800521e:	eb01 050a 	add.w	r5, r1, sl
 8005222:	f108 0410 	add.w	r4, r8, #16
 8005226:	ed11 7a04 	vldr	s14, [r1, #-16]
 800522a:	ed54 3a04 	vldr	s7, [r4, #-16]
 800522e:	ed11 6a03 	vldr	s12, [r1, #-12]
 8005232:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005236:	ed51 6a02 	vldr	s13, [r1, #-8]
 800523a:	ed54 4a02 	vldr	s9, [r4, #-8]
 800523e:	ed51 5a01 	vldr	s11, [r1, #-4]
 8005242:	ed14 5a01 	vldr	s10, [r4, #-4]
 8005246:	ee27 7a23 	vmul.f32	s14, s14, s7
 800524a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800524e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005252:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005256:	ee76 7a27 	vadd.f32	s15, s12, s15
 800525a:	ee65 6a85 	vmul.f32	s13, s11, s10
 800525e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005262:	3110      	adds	r1, #16
 8005264:	428d      	cmp	r5, r1
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	f104 0410 	add.w	r4, r4, #16
 800526e:	d1da      	bne.n	8005226 <arm_correlate_f32+0xa6>
 8005270:	eb00 050a 	add.w	r5, r0, sl
 8005274:	eb08 010a 	add.w	r1, r8, sl
 8005278:	f1a8 0804 	sub.w	r8, r8, #4
 800527c:	463c      	mov	r4, r7
 800527e:	e79e      	b.n	80051be <arm_correlate_f32+0x3e>
 8005280:	2b03      	cmp	r3, #3
 8005282:	fb0e cc04 	mla	ip, lr, r4, ip
 8005286:	f240 81dd 	bls.w	8005644 <arm_correlate_f32+0x4c4>
 800528a:	9b02      	ldr	r3, [sp, #8]
 800528c:	0899      	lsrs	r1, r3, #2
 800528e:	9103      	str	r1, [sp, #12]
 8005290:	f000 8220 	beq.w	80056d4 <arm_correlate_f32+0x554>
 8005294:	08bb      	lsrs	r3, r7, #2
 8005296:	f007 0403 	and.w	r4, r7, #3
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	f103 0b0c 	add.w	fp, r3, #12
 80052a2:	18d5      	adds	r5, r2, r3
 80052a4:	1e63      	subs	r3, r4, #1
 80052a6:	0109      	lsls	r1, r1, #4
 80052a8:	9306      	str	r3, [sp, #24]
 80052aa:	f100 080c 	add.w	r8, r0, #12
 80052ae:	9401      	str	r4, [sp, #4]
 80052b0:	9104      	str	r1, [sp, #16]
 80052b2:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80052b6:	4441      	add	r1, r8
 80052b8:	f102 0310 	add.w	r3, r2, #16
 80052bc:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 80052c0:	9e06      	ldr	r6, [sp, #24]
 80052c2:	9405      	str	r4, [sp, #20]
 80052c4:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 80052c8:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 80052cc:	46e1      	mov	r9, ip
 80052ce:	4483      	add	fp, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80052d4:	469c      	mov	ip, r3
 80052d6:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005300 <arm_correlate_f32+0x180>
 80052da:	ed58 1a03 	vldr	s3, [r8, #-12]
 80052de:	ed18 2a02 	vldr	s4, [r8, #-8]
 80052e2:	ed58 2a01 	vldr	s5, [r8, #-4]
 80052e6:	ed98 0a00 	vldr	s0, [r8]
 80052ea:	9900      	ldr	r1, [sp, #0]
 80052ec:	eef0 5a46 	vmov.f32	s11, s12
 80052f0:	eeb0 5a46 	vmov.f32	s10, s12
 80052f4:	eef0 4a46 	vmov.f32	s9, s12
 80052f8:	4663      	mov	r3, ip
 80052fa:	4642      	mov	r2, r8
 80052fc:	e005      	b.n	800530a <arm_correlate_f32+0x18a>
 80052fe:	bf00      	nop
 8005300:	00000000 	.word	0x00000000
 8005304:	ed90 0a04 	vldr	s0, [r0, #16]
 8005308:	3210      	adds	r2, #16
 800530a:	ed53 6a04 	vldr	s13, [r3, #-16]
 800530e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005312:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005316:	ed13 1a01 	vldr	s2, [r3, #-4]
 800531a:	ee62 3a26 	vmul.f32	s7, s4, s13
 800531e:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8005322:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8005326:	edd2 1a01 	vldr	s3, [r2, #4]
 800532a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800532e:	ee22 3a07 	vmul.f32	s6, s4, s14
 8005332:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005336:	ee74 5a25 	vadd.f32	s11, s8, s11
 800533a:	ee62 3a87 	vmul.f32	s7, s5, s14
 800533e:	ee20 4a07 	vmul.f32	s8, s0, s14
 8005342:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8005346:	ee36 6a86 	vadd.f32	s12, s13, s12
 800534a:	ed92 2a02 	vldr	s4, [r2, #8]
 800534e:	ee27 7a21 	vmul.f32	s14, s14, s3
 8005352:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005356:	ee37 7a06 	vadd.f32	s14, s14, s12
 800535a:	ee20 5a27 	vmul.f32	s10, s0, s15
 800535e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005362:	ee34 4a25 	vadd.f32	s8, s8, s11
 8005366:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800536a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800536e:	edd2 2a03 	vldr	s5, [r2, #12]
 8005372:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005376:	ee35 5a23 	vadd.f32	s10, s10, s7
 800537a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800537e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005382:	ee20 0a01 	vmul.f32	s0, s0, s2
 8005386:	ee61 3a81 	vmul.f32	s7, s3, s2
 800538a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800538e:	ee22 7a01 	vmul.f32	s14, s4, s2
 8005392:	ee21 6a22 	vmul.f32	s12, s2, s5
 8005396:	3901      	subs	r1, #1
 8005398:	f103 0310 	add.w	r3, r3, #16
 800539c:	ee70 4a24 	vadd.f32	s9, s0, s9
 80053a0:	ee33 5a85 	vadd.f32	s10, s7, s10
 80053a4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80053a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053ac:	4610      	mov	r0, r2
 80053ae:	d1a9      	bne.n	8005304 <arm_correlate_f32+0x184>
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	b3f3      	cbz	r3, 8005432 <arm_correlate_f32+0x2b2>
 80053b4:	edd5 7a00 	vldr	s15, [r5]
 80053b8:	ed9b 4a00 	vldr	s8, [fp]
 80053bc:	ee61 6aa7 	vmul.f32	s13, s3, s15
 80053c0:	ee62 3a27 	vmul.f32	s7, s4, s15
 80053c4:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80053c8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80053cc:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80053d0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80053d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80053d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053dc:	b34e      	cbz	r6, 8005432 <arm_correlate_f32+0x2b2>
 80053de:	edd5 7a01 	vldr	s15, [r5, #4]
 80053e2:	eddb 6a01 	vldr	s13, [fp, #4]
 80053e6:	ee22 7a27 	vmul.f32	s14, s4, s15
 80053ea:	ee22 3aa7 	vmul.f32	s6, s5, s15
 80053ee:	ee67 3a84 	vmul.f32	s7, s15, s8
 80053f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053f6:	2e01      	cmp	r6, #1
 80053f8:	ee74 4a87 	vadd.f32	s9, s9, s14
 80053fc:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005400:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8005404:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005408:	d013      	beq.n	8005432 <arm_correlate_f32+0x2b2>
 800540a:	ed95 7a02 	vldr	s14, [r5, #8]
 800540e:	eddb 3a02 	vldr	s7, [fp, #8]
 8005412:	ee62 7a87 	vmul.f32	s15, s5, s14
 8005416:	ee27 4a04 	vmul.f32	s8, s14, s8
 800541a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800541e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005422:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005426:	ee35 5a04 	vadd.f32	s10, s10, s8
 800542a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800542e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005432:	f108 0810 	add.w	r8, r8, #16
 8005436:	eb09 020e 	add.w	r2, r9, lr
 800543a:	eb0a 030e 	add.w	r3, sl, lr
 800543e:	4547      	cmp	r7, r8
 8005440:	edc9 4a00 	vstr	s9, [r9]
 8005444:	f10b 0b10 	add.w	fp, fp, #16
 8005448:	ed82 5a00 	vstr	s10, [r2]
 800544c:	44a1      	add	r9, r4
 800544e:	edca 5a00 	vstr	s11, [sl]
 8005452:	ed83 6a00 	vstr	s12, [r3]
 8005456:	44a2      	add	sl, r4
 8005458:	f47f af3d 	bne.w	80052d6 <arm_correlate_f32+0x156>
 800545c:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8005460:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	9c05      	ldr	r4, [sp, #20]
 8005468:	9904      	ldr	r1, [sp, #16]
 800546a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800546c:	fb04 cc03 	mla	ip, r4, r3, ip
 8005470:	4401      	add	r1, r0
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	460d      	mov	r5, r1
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	9b02      	ldr	r3, [sp, #8]
 800547a:	f013 0303 	ands.w	r3, r3, #3
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	d071      	beq.n	8005566 <arm_correlate_f32+0x3e6>
 8005482:	9903      	ldr	r1, [sp, #12]
 8005484:	9205      	str	r2, [sp, #20]
 8005486:	f007 0403 	and.w	r4, r7, #3
 800548a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800548e:	1c4f      	adds	r7, r1, #1
 8005490:	1859      	adds	r1, r3, r1
 8005492:	1d03      	adds	r3, r0, #4
 8005494:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005498:	9400      	str	r4, [sp, #0]
 800549a:	f102 0110 	add.w	r1, r2, #16
 800549e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 80054a2:	3c01      	subs	r4, #1
 80054a4:	e9cd 6003 	strd	r6, r0, [sp, #12]
 80054a8:	eb02 090a 	add.w	r9, r2, sl
 80054ac:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80054b0:	46e0      	mov	r8, ip
 80054b2:	4618      	mov	r0, r3
 80054b4:	460e      	mov	r6, r1
 80054b6:	4622      	mov	r2, r4
 80054b8:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8005300 <arm_correlate_f32+0x180>
 80054bc:	f105 0110 	add.w	r1, r5, #16
 80054c0:	4633      	mov	r3, r6
 80054c2:	465c      	mov	r4, fp
 80054c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80054c8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80054cc:	ed11 6a03 	vldr	s12, [r1, #-12]
 80054d0:	ed13 4a03 	vldr	s8, [r3, #-12]
 80054d4:	ed51 6a02 	vldr	s13, [r1, #-8]
 80054d8:	ed53 4a02 	vldr	s9, [r3, #-8]
 80054dc:	ed51 5a01 	vldr	s11, [r1, #-4]
 80054e0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80054e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80054e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80054ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80054f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80054f8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80054fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005500:	3c01      	subs	r4, #1
 8005502:	f101 0110 	add.w	r1, r1, #16
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	f103 0310 	add.w	r3, r3, #16
 800550e:	d1d9      	bne.n	80054c4 <arm_correlate_f32+0x344>
 8005510:	9b00      	ldr	r3, [sp, #0]
 8005512:	4455      	add	r5, sl
 8005514:	b1d3      	cbz	r3, 800554c <arm_correlate_f32+0x3cc>
 8005516:	ed99 7a00 	vldr	s14, [r9]
 800551a:	edd5 6a00 	vldr	s13, [r5]
 800551e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005526:	b18a      	cbz	r2, 800554c <arm_correlate_f32+0x3cc>
 8005528:	ed99 7a01 	vldr	s14, [r9, #4]
 800552c:	edd5 6a01 	vldr	s13, [r5, #4]
 8005530:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005534:	2a01      	cmp	r2, #1
 8005536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800553a:	d007      	beq.n	800554c <arm_correlate_f32+0x3cc>
 800553c:	ed95 7a02 	vldr	s14, [r5, #8]
 8005540:	edd9 6a02 	vldr	s13, [r9, #8]
 8005544:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800554c:	463d      	mov	r5, r7
 800554e:	3704      	adds	r7, #4
 8005550:	42b8      	cmp	r0, r7
 8005552:	edc8 7a00 	vstr	s15, [r8]
 8005556:	44f0      	add	r8, lr
 8005558:	d1ae      	bne.n	80054b8 <arm_correlate_f32+0x338>
 800555a:	9b01      	ldr	r3, [sp, #4]
 800555c:	9a05      	ldr	r2, [sp, #20]
 800555e:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8005562:	fb0e cc03 	mla	ip, lr, r3, ip
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800556c:	08b5      	lsrs	r5, r6, #2
 800556e:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8005300 <arm_correlate_f32+0x180>
 8005572:	f000 80ac 	beq.w	80056ce <arm_correlate_f32+0x54e>
 8005576:	f100 0110 	add.w	r1, r0, #16
 800557a:	f102 0310 	add.w	r3, r2, #16
 800557e:	462c      	mov	r4, r5
 8005580:	ed51 6a04 	vldr	s13, [r1, #-16]
 8005584:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005588:	ed11 7a03 	vldr	s14, [r1, #-12]
 800558c:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005590:	ed51 7a02 	vldr	s15, [r1, #-8]
 8005594:	ed53 4a02 	vldr	s9, [r3, #-8]
 8005598:	ed11 6a01 	vldr	s12, [r1, #-4]
 800559c:	ed13 5a01 	vldr	s10, [r3, #-4]
 80055a0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80055a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80055a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80055ac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80055b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80055b4:	ee66 6a05 	vmul.f32	s13, s12, s10
 80055b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055bc:	3c01      	subs	r4, #1
 80055be:	f101 0110 	add.w	r1, r1, #16
 80055c2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80055c6:	f103 0310 	add.w	r3, r3, #16
 80055ca:	d1d9      	bne.n	8005580 <arm_correlate_f32+0x400>
 80055cc:	012d      	lsls	r5, r5, #4
 80055ce:	1941      	adds	r1, r0, r5
 80055d0:	4415      	add	r5, r2
 80055d2:	f016 0303 	ands.w	r3, r6, #3
 80055d6:	d01b      	beq.n	8005610 <arm_correlate_f32+0x490>
 80055d8:	edd5 7a00 	vldr	s15, [r5]
 80055dc:	ed91 7a00 	vldr	s14, [r1]
 80055e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055e4:	3b01      	subs	r3, #1
 80055e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80055ea:	d011      	beq.n	8005610 <arm_correlate_f32+0x490>
 80055ec:	edd5 7a01 	vldr	s15, [r5, #4]
 80055f0:	ed91 7a01 	vldr	s14, [r1, #4]
 80055f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80055fe:	d007      	beq.n	8005610 <arm_correlate_f32+0x490>
 8005600:	edd1 7a02 	vldr	s15, [r1, #8]
 8005604:	ed95 7a02 	vldr	s14, [r5, #8]
 8005608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800560c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005610:	3e01      	subs	r6, #1
 8005612:	edcc 5a00 	vstr	s11, [ip]
 8005616:	f100 0004 	add.w	r0, r0, #4
 800561a:	44f4      	add	ip, lr
 800561c:	d1a6      	bne.n	800556c <arm_correlate_f32+0x3ec>
 800561e:	b00d      	add	sp, #52	; 0x34
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8005628:	4606      	mov	r6, r0
 800562a:	3c02      	subs	r4, #2
 800562c:	4610      	mov	r0, r2
 800562e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005630:	440c      	add	r4, r1
 8005632:	460d      	mov	r5, r1
 8005634:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8005638:	4619      	mov	r1, r3
 800563a:	4632      	mov	r2, r6
 800563c:	f06f 0e03 	mvn.w	lr, #3
 8005640:	462b      	mov	r3, r5
 8005642:	e5aa      	b.n	800519a <arm_correlate_f32+0x1a>
 8005644:	9902      	ldr	r1, [sp, #8]
 8005646:	2900      	cmp	r1, #0
 8005648:	d090      	beq.n	800556c <arm_correlate_f32+0x3ec>
 800564a:	9902      	ldr	r1, [sp, #8]
 800564c:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8005300 <arm_correlate_f32+0x180>
 8005650:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8005654:	eb00 0708 	add.w	r7, r0, r8
 8005658:	4601      	mov	r1, r0
 800565a:	4665      	mov	r5, ip
 800565c:	e020      	b.n	80056a0 <arm_correlate_f32+0x520>
 800565e:	edd2 7a00 	vldr	s15, [r2]
 8005662:	ecb4 7a01 	vldmia	r4!, {s14}
 8005666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800566a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800566e:	b18e      	cbz	r6, 8005694 <arm_correlate_f32+0x514>
 8005670:	ed92 7a01 	vldr	s14, [r2, #4]
 8005674:	edd1 6a01 	vldr	s13, [r1, #4]
 8005678:	ee27 7a26 	vmul.f32	s14, s14, s13
 800567c:	2b02      	cmp	r3, #2
 800567e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005682:	d007      	beq.n	8005694 <arm_correlate_f32+0x514>
 8005684:	ed91 7a02 	vldr	s14, [r1, #8]
 8005688:	edd2 6a02 	vldr	s13, [r2, #8]
 800568c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005694:	42bc      	cmp	r4, r7
 8005696:	edc5 7a00 	vstr	s15, [r5]
 800569a:	4621      	mov	r1, r4
 800569c:	4475      	add	r5, lr
 800569e:	d00b      	beq.n	80056b8 <arm_correlate_f32+0x538>
 80056a0:	460c      	mov	r4, r1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1db      	bne.n	800565e <arm_correlate_f32+0x4de>
 80056a6:	1d0c      	adds	r4, r1, #4
 80056a8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80056e8 <arm_correlate_f32+0x568>
 80056ac:	42bc      	cmp	r4, r7
 80056ae:	edc5 7a00 	vstr	s15, [r5]
 80056b2:	4621      	mov	r1, r4
 80056b4:	4475      	add	r5, lr
 80056b6:	d1f3      	bne.n	80056a0 <arm_correlate_f32+0x520>
 80056b8:	9b02      	ldr	r3, [sp, #8]
 80056ba:	4440      	add	r0, r8
 80056bc:	fb0e cc03 	mla	ip, lr, r3, ip
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	d0ac      	beq.n	800561e <arm_correlate_f32+0x49e>
 80056c4:	08b5      	lsrs	r5, r6, #2
 80056c6:	eddf 5a08 	vldr	s11, [pc, #32]	; 80056e8 <arm_correlate_f32+0x568>
 80056ca:	f47f af54 	bne.w	8005576 <arm_correlate_f32+0x3f6>
 80056ce:	4615      	mov	r5, r2
 80056d0:	4601      	mov	r1, r0
 80056d2:	e77e      	b.n	80055d2 <arm_correlate_f32+0x452>
 80056d4:	4605      	mov	r5, r0
 80056d6:	e6cf      	b.n	8005478 <arm_correlate_f32+0x2f8>
 80056d8:	9902      	ldr	r1, [sp, #8]
 80056da:	2900      	cmp	r1, #0
 80056dc:	d1b5      	bne.n	800564a <arm_correlate_f32+0x4ca>
 80056de:	e79e      	b.n	800561e <arm_correlate_f32+0x49e>
 80056e0:	eddf 7a01 	vldr	s15, [pc, #4]	; 80056e8 <arm_correlate_f32+0x568>
 80056e4:	4605      	mov	r5, r0
 80056e6:	e5c7      	b.n	8005278 <arm_correlate_f32+0xf8>
 80056e8:	00000000 	.word	0x00000000

080056ec <arm_conv_f32>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	b08b      	sub	sp, #44	; 0x2c
 80056f2:	4299      	cmp	r1, r3
 80056f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80056f6:	d205      	bcs.n	8005704 <arm_conv_f32+0x18>
 80056f8:	4606      	mov	r6, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	4632      	mov	r2, r6
 8005702:	4623      	mov	r3, r4
 8005704:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8005708:	3101      	adds	r1, #1
 800570a:	1ac9      	subs	r1, r1, r3
 800570c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005710:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005714:	9101      	str	r1, [sp, #4]
 8005716:	1e59      	subs	r1, r3, #1
 8005718:	eb02 070b 	add.w	r7, r2, fp
 800571c:	f000 8277 	beq.w	8005c0e <arm_conv_f32+0x522>
 8005720:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80059e0 <arm_conv_f32+0x2f4>
 8005724:	f102 0904 	add.w	r9, r2, #4
 8005728:	46aa      	mov	sl, r5
 800572a:	4680      	mov	r8, r0
 800572c:	2401      	movs	r4, #1
 800572e:	f014 0603 	ands.w	r6, r4, #3
 8005732:	d01b      	beq.n	800576c <arm_conv_f32+0x80>
 8005734:	ed92 7a00 	vldr	s14, [r2]
 8005738:	edd8 6a00 	vldr	s13, [r8]
 800573c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005740:	3e01      	subs	r6, #1
 8005742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005746:	d011      	beq.n	800576c <arm_conv_f32+0x80>
 8005748:	ed12 7a01 	vldr	s14, [r2, #-4]
 800574c:	edd8 6a01 	vldr	s13, [r8, #4]
 8005750:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005754:	2e01      	cmp	r6, #1
 8005756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800575a:	d007      	beq.n	800576c <arm_conv_f32+0x80>
 800575c:	ed98 7a02 	vldr	s14, [r8, #8]
 8005760:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005764:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800576c:	3401      	adds	r4, #1
 800576e:	42a3      	cmp	r3, r4
 8005770:	ecea 7a01 	vstmia	sl!, {s15}
 8005774:	464a      	mov	r2, r9
 8005776:	d03a      	beq.n	80057ee <arm_conv_f32+0x102>
 8005778:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800577c:	f000 824c 	beq.w	8005c18 <arm_conv_f32+0x52c>
 8005780:	f100 0210 	add.w	r2, r0, #16
 8005784:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8005788:	eddf 7a95 	vldr	s15, [pc, #596]	; 80059e0 <arm_conv_f32+0x2f4>
 800578c:	eb02 0c08 	add.w	ip, r2, r8
 8005790:	f1a9 0610 	sub.w	r6, r9, #16
 8005794:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005798:	edd6 3a04 	vldr	s7, [r6, #16]
 800579c:	ed12 6a03 	vldr	s12, [r2, #-12]
 80057a0:	ed96 4a03 	vldr	s8, [r6, #12]
 80057a4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80057a8:	edd6 4a02 	vldr	s9, [r6, #8]
 80057ac:	ed52 5a01 	vldr	s11, [r2, #-4]
 80057b0:	ed96 5a01 	vldr	s10, [r6, #4]
 80057b4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80057b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80057bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80057c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80057c8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80057cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d0:	3210      	adds	r2, #16
 80057d2:	4594      	cmp	ip, r2
 80057d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d8:	f1a6 0610 	sub.w	r6, r6, #16
 80057dc:	d1da      	bne.n	8005794 <arm_conv_f32+0xa8>
 80057de:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80057e2:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80057e6:	4480      	add	r8, r0
 80057e8:	f109 0904 	add.w	r9, r9, #4
 80057ec:	e79f      	b.n	800572e <arm_conv_f32+0x42>
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	445d      	add	r5, fp
 80057f2:	f240 80e9 	bls.w	80059c8 <arm_conv_f32+0x2dc>
 80057f6:	9b01      	ldr	r3, [sp, #4]
 80057f8:	089a      	lsrs	r2, r3, #2
 80057fa:	9202      	str	r2, [sp, #8]
 80057fc:	f000 8203 	beq.w	8005c06 <arm_conv_f32+0x51a>
 8005800:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8005804:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8005808:	0112      	lsls	r2, r2, #4
 800580a:	f004 0603 	and.w	r6, r4, #3
 800580e:	9203      	str	r2, [sp, #12]
 8005810:	f1a3 0a10 	sub.w	sl, r3, #16
 8005814:	f1a3 020c 	sub.w	r2, r3, #12
 8005818:	3b08      	subs	r3, #8
 800581a:	9204      	str	r2, [sp, #16]
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	f106 39ff 	add.w	r9, r6, #4294967295
 8005822:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8005826:	9a03      	ldr	r2, [sp, #12]
 8005828:	f100 0c1c 	add.w	ip, r0, #28
 800582c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8005830:	464c      	mov	r4, r9
 8005832:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8005836:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800583a:	f1a7 0310 	sub.w	r3, r7, #16
 800583e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8005842:	eb05 0b02 	add.w	fp, r5, r2
 8005846:	461f      	mov	r7, r3
 8005848:	3510      	adds	r5, #16
 800584a:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80059e0 <arm_conv_f32+0x2f4>
 800584e:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8005852:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8005856:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800585a:	eeb0 5a46 	vmov.f32	s10, s12
 800585e:	eef0 4a46 	vmov.f32	s9, s12
 8005862:	eef0 5a46 	vmov.f32	s11, s12
 8005866:	463a      	mov	r2, r7
 8005868:	4663      	mov	r3, ip
 800586a:	4641      	mov	r1, r8
 800586c:	edd2 6a04 	vldr	s13, [r2, #16]
 8005870:	ed13 0a04 	vldr	s0, [r3, #-16]
 8005874:	ed92 7a03 	vldr	s14, [r2, #12]
 8005878:	edd2 7a02 	vldr	s15, [r2, #8]
 800587c:	edd2 0a01 	vldr	s1, [r2, #4]
 8005880:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8005884:	ee62 3a26 	vmul.f32	s7, s4, s13
 8005888:	ee61 2a26 	vmul.f32	s5, s2, s13
 800588c:	ed13 1a03 	vldr	s2, [r3, #-12]
 8005890:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005894:	ee21 4a87 	vmul.f32	s8, s3, s14
 8005898:	ee73 4a24 	vadd.f32	s9, s6, s9
 800589c:	ee33 5a85 	vadd.f32	s10, s7, s10
 80058a0:	ee22 3a07 	vmul.f32	s6, s4, s14
 80058a4:	ed53 1a02 	vldr	s3, [r3, #-8]
 80058a8:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80058ac:	ee36 6a86 	vadd.f32	s12, s13, s12
 80058b0:	ee60 3a07 	vmul.f32	s7, s0, s14
 80058b4:	ee27 7a01 	vmul.f32	s14, s14, s2
 80058b8:	ee33 3a24 	vadd.f32	s6, s6, s9
 80058bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80058c0:	ee74 2a22 	vadd.f32	s5, s8, s5
 80058c4:	ee60 4a27 	vmul.f32	s9, s0, s15
 80058c8:	ee22 4a27 	vmul.f32	s8, s4, s15
 80058cc:	ee73 3a85 	vadd.f32	s7, s7, s10
 80058d0:	ed13 2a01 	vldr	s4, [r3, #-4]
 80058d4:	ee21 5a27 	vmul.f32	s10, s2, s15
 80058d8:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80058dc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80058e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058e4:	ee34 4a22 	vadd.f32	s8, s8, s5
 80058e8:	ee60 5a20 	vmul.f32	s11, s0, s1
 80058ec:	ee21 3a20 	vmul.f32	s6, s2, s1
 80058f0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80058f4:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80058f8:	ee20 6a82 	vmul.f32	s12, s1, s4
 80058fc:	3901      	subs	r1, #1
 80058fe:	f1a2 0210 	sub.w	r2, r2, #16
 8005902:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005906:	ee73 4a24 	vadd.f32	s9, s6, s9
 800590a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800590e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005912:	f103 0310 	add.w	r3, r3, #16
 8005916:	d1a9      	bne.n	800586c <arm_conv_f32+0x180>
 8005918:	eb0a 030c 	add.w	r3, sl, ip
 800591c:	2e00      	cmp	r6, #0
 800591e:	d042      	beq.n	80059a6 <arm_conv_f32+0x2ba>
 8005920:	edde 7a00 	vldr	s15, [lr]
 8005924:	ed93 4a00 	vldr	s8, [r3]
 8005928:	ee61 6a27 	vmul.f32	s13, s2, s15
 800592c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8005930:	ee22 7a27 	vmul.f32	s14, s4, s15
 8005934:	ee64 7a27 	vmul.f32	s15, s8, s15
 8005938:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800593c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005940:	ee35 5a07 	vadd.f32	s10, s10, s14
 8005944:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005948:	eb09 030c 	add.w	r3, r9, ip
 800594c:	b35c      	cbz	r4, 80059a6 <arm_conv_f32+0x2ba>
 800594e:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8005952:	edd3 6a00 	vldr	s13, [r3]
 8005956:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800595a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800595e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8005962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005966:	2c01      	cmp	r4, #1
 8005968:	ee75 5a87 	vadd.f32	s11, s11, s14
 800596c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005970:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005974:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005978:	eb00 030c 	add.w	r3, r0, ip
 800597c:	d013      	beq.n	80059a6 <arm_conv_f32+0x2ba>
 800597e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8005982:	edd3 3a00 	vldr	s7, [r3]
 8005986:	ee62 7a07 	vmul.f32	s15, s4, s14
 800598a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800598e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005992:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005996:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800599a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800599e:	ee35 5a26 	vadd.f32	s10, s10, s13
 80059a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80059a6:	45ab      	cmp	fp, r5
 80059a8:	ed45 5a04 	vstr	s11, [r5, #-16]
 80059ac:	ed45 4a03 	vstr	s9, [r5, #-12]
 80059b0:	ed05 5a02 	vstr	s10, [r5, #-8]
 80059b4:	ed05 6a01 	vstr	s12, [r5, #-4]
 80059b8:	f10c 0c10 	add.w	ip, ip, #16
 80059bc:	f105 0310 	add.w	r3, r5, #16
 80059c0:	f000 809e 	beq.w	8005b00 <arm_conv_f32+0x414>
 80059c4:	461d      	mov	r5, r3
 80059c6:	e740      	b.n	800584a <arm_conv_f32+0x15e>
 80059c8:	9a01      	ldr	r2, [sp, #4]
 80059ca:	46ac      	mov	ip, r5
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	d037      	beq.n	8005a40 <arm_conv_f32+0x354>
 80059d0:	9a01      	ldr	r2, [sp, #4]
 80059d2:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80059e0 <arm_conv_f32+0x2f4>
 80059d6:	0096      	lsls	r6, r2, #2
 80059d8:	eb05 0c06 	add.w	ip, r5, r6
 80059dc:	4604      	mov	r4, r0
 80059de:	e021      	b.n	8005a24 <arm_conv_f32+0x338>
 80059e0:	00000000 	.word	0x00000000
 80059e4:	edd7 7a00 	vldr	s15, [r7]
 80059e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80059ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80059f4:	b189      	cbz	r1, 8005a1a <arm_conv_f32+0x32e>
 80059f6:	ed17 7a01 	vldr	s14, [r7, #-4]
 80059fa:	edd4 6a01 	vldr	s13, [r4, #4]
 80059fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a08:	d007      	beq.n	8005a1a <arm_conv_f32+0x32e>
 8005a0a:	ed94 7a02 	vldr	s14, [r4, #8]
 8005a0e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8005a12:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a1a:	ece5 7a01 	vstmia	r5!, {s15}
 8005a1e:	4565      	cmp	r5, ip
 8005a20:	4614      	mov	r4, r2
 8005a22:	d00a      	beq.n	8005a3a <arm_conv_f32+0x34e>
 8005a24:	4622      	mov	r2, r4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1dc      	bne.n	80059e4 <arm_conv_f32+0x2f8>
 8005a2a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80059e0 <arm_conv_f32+0x2f4>
 8005a2e:	ece5 7a01 	vstmia	r5!, {s15}
 8005a32:	1d22      	adds	r2, r4, #4
 8005a34:	4565      	cmp	r5, ip
 8005a36:	4614      	mov	r4, r2
 8005a38:	d1f4      	bne.n	8005a24 <arm_conv_f32+0x338>
 8005a3a:	4430      	add	r0, r6
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d059      	beq.n	8005af4 <arm_conv_f32+0x408>
 8005a40:	088d      	lsrs	r5, r1, #2
 8005a42:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80059e0 <arm_conv_f32+0x2f4>
 8005a46:	d058      	beq.n	8005afa <arm_conv_f32+0x40e>
 8005a48:	f100 0210 	add.w	r2, r0, #16
 8005a4c:	f1a7 0310 	sub.w	r3, r7, #16
 8005a50:	462c      	mov	r4, r5
 8005a52:	ed52 6a04 	vldr	s13, [r2, #-16]
 8005a56:	edd3 3a04 	vldr	s7, [r3, #16]
 8005a5a:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005a5e:	ed93 4a03 	vldr	s8, [r3, #12]
 8005a62:	ed52 7a02 	vldr	s15, [r2, #-8]
 8005a66:	edd3 4a02 	vldr	s9, [r3, #8]
 8005a6a:	ed12 6a01 	vldr	s12, [r2, #-4]
 8005a6e:	ed93 5a01 	vldr	s10, [r3, #4]
 8005a72:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005a76:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a7a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005a7e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8005a82:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a86:	ee66 6a05 	vmul.f32	s13, s12, s10
 8005a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a8e:	3c01      	subs	r4, #1
 8005a90:	f102 0210 	add.w	r2, r2, #16
 8005a94:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8005a98:	f1a3 0310 	sub.w	r3, r3, #16
 8005a9c:	d1d9      	bne.n	8005a52 <arm_conv_f32+0x366>
 8005a9e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8005aa2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8005aa6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8005aaa:	f011 0203 	ands.w	r2, r1, #3
 8005aae:	d01b      	beq.n	8005ae8 <arm_conv_f32+0x3fc>
 8005ab0:	edd3 7a00 	vldr	s15, [r3]
 8005ab4:	ed95 7a00 	vldr	s14, [r5]
 8005ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005abc:	3a01      	subs	r2, #1
 8005abe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ac2:	d011      	beq.n	8005ae8 <arm_conv_f32+0x3fc>
 8005ac4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005ac8:	ed95 7a01 	vldr	s14, [r5, #4]
 8005acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ad6:	d007      	beq.n	8005ae8 <arm_conv_f32+0x3fc>
 8005ad8:	edd5 7a02 	vldr	s15, [r5, #8]
 8005adc:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ae4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ae8:	3901      	subs	r1, #1
 8005aea:	ecec 5a01 	vstmia	ip!, {s11}
 8005aee:	f100 0004 	add.w	r0, r0, #4
 8005af2:	d1a5      	bne.n	8005a40 <arm_conv_f32+0x354>
 8005af4:	b00b      	add	sp, #44	; 0x2c
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	463b      	mov	r3, r7
 8005afc:	4605      	mov	r5, r0
 8005afe:	e7d4      	b.n	8005aaa <arm_conv_f32+0x3be>
 8005b00:	9b02      	ldr	r3, [sp, #8]
 8005b02:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8005b10:	4403      	add	r3, r0
 8005b12:	465d      	mov	r5, fp
 8005b14:	469e      	mov	lr, r3
 8005b16:	9b01      	ldr	r3, [sp, #4]
 8005b18:	f013 0c03 	ands.w	ip, r3, #3
 8005b1c:	d075      	beq.n	8005c0a <arm_conv_f32+0x51e>
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8005b24:	f004 0403 	and.w	r4, r4, #3
 8005b28:	f104 3bff 	add.w	fp, r4, #4294967295
 8005b2c:	f103 0801 	add.w	r8, r3, #1
 8005b30:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8005b34:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8005b38:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8005b3c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005b40:	f1a7 0210 	sub.w	r2, r7, #16
 8005b44:	4618      	mov	r0, r3
 8005b46:	465b      	mov	r3, fp
 8005b48:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8005b4c:	468b      	mov	fp, r1
 8005b4e:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8005b52:	4621      	mov	r1, r4
 8005b54:	4617      	mov	r7, r2
 8005b56:	461c      	mov	r4, r3
 8005b58:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80059e0 <arm_conv_f32+0x2f4>
 8005b5c:	f10e 0210 	add.w	r2, lr, #16
 8005b60:	463b      	mov	r3, r7
 8005b62:	4656      	mov	r6, sl
 8005b64:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005b68:	edd3 3a04 	vldr	s7, [r3, #16]
 8005b6c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005b70:	ed93 4a03 	vldr	s8, [r3, #12]
 8005b74:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005b78:	edd3 4a02 	vldr	s9, [r3, #8]
 8005b7c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8005b80:	ed93 5a01 	vldr	s10, [r3, #4]
 8005b84:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005b88:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b90:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005b94:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005b98:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ba0:	3e01      	subs	r6, #1
 8005ba2:	f102 0210 	add.w	r2, r2, #16
 8005ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005baa:	f1a3 0310 	sub.w	r3, r3, #16
 8005bae:	d1d9      	bne.n	8005b64 <arm_conv_f32+0x478>
 8005bb0:	4486      	add	lr, r0
 8005bb2:	b1d1      	cbz	r1, 8005bea <arm_conv_f32+0x4fe>
 8005bb4:	ed99 7a00 	vldr	s14, [r9]
 8005bb8:	edde 6a00 	vldr	s13, [lr]
 8005bbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bc4:	b18c      	cbz	r4, 8005bea <arm_conv_f32+0x4fe>
 8005bc6:	ed19 7a01 	vldr	s14, [r9, #-4]
 8005bca:	edde 6a01 	vldr	s13, [lr, #4]
 8005bce:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005bd2:	2c01      	cmp	r4, #1
 8005bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bd8:	d007      	beq.n	8005bea <arm_conv_f32+0x4fe>
 8005bda:	ed9e 7a02 	vldr	s14, [lr, #8]
 8005bde:	ed59 6a02 	vldr	s13, [r9, #-8]
 8005be2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bea:	ece5 7a01 	vstmia	r5!, {s15}
 8005bee:	4565      	cmp	r5, ip
 8005bf0:	46c6      	mov	lr, r8
 8005bf2:	f108 0804 	add.w	r8, r8, #4
 8005bf6:	d1af      	bne.n	8005b58 <arm_conv_f32+0x46c>
 8005bf8:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005c04:	e71c      	b.n	8005a40 <arm_conv_f32+0x354>
 8005c06:	4686      	mov	lr, r0
 8005c08:	e785      	b.n	8005b16 <arm_conv_f32+0x42a>
 8005c0a:	46ac      	mov	ip, r5
 8005c0c:	e7f7      	b.n	8005bfe <arm_conv_f32+0x512>
 8005c0e:	9a01      	ldr	r2, [sp, #4]
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	f47f aedd 	bne.w	80059d0 <arm_conv_f32+0x2e4>
 8005c16:	e76d      	b.n	8005af4 <arm_conv_f32+0x408>
 8005c18:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80059e0 <arm_conv_f32+0x2f4>
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	e5e3      	b.n	80057e8 <arm_conv_f32+0xfc>

08005c20 <arm_sub_f32>:
 8005c20:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005c24:	b4f0      	push	{r4, r5, r6, r7}
 8005c26:	d033      	beq.n	8005c90 <arm_sub_f32+0x70>
 8005c28:	f100 0610 	add.w	r6, r0, #16
 8005c2c:	f101 0510 	add.w	r5, r1, #16
 8005c30:	f102 0410 	add.w	r4, r2, #16
 8005c34:	4667      	mov	r7, ip
 8005c36:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005c3a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8005c3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c42:	3f01      	subs	r7, #1
 8005c44:	ed44 7a04 	vstr	s15, [r4, #-16]
 8005c48:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005c4c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8005c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c54:	f106 0610 	add.w	r6, r6, #16
 8005c58:	ed44 7a03 	vstr	s15, [r4, #-12]
 8005c5c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005c60:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c68:	f105 0510 	add.w	r5, r5, #16
 8005c6c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8005c70:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005c74:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c7c:	f104 0410 	add.w	r4, r4, #16
 8005c80:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005c84:	d1d7      	bne.n	8005c36 <arm_sub_f32+0x16>
 8005c86:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005c8a:	4420      	add	r0, r4
 8005c8c:	4421      	add	r1, r4
 8005c8e:	4422      	add	r2, r4
 8005c90:	f013 0303 	ands.w	r3, r3, #3
 8005c94:	d01b      	beq.n	8005cce <arm_sub_f32+0xae>
 8005c96:	edd0 7a00 	vldr	s15, [r0]
 8005c9a:	ed91 7a00 	vldr	s14, [r1]
 8005c9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	edc2 7a00 	vstr	s15, [r2]
 8005ca8:	d011      	beq.n	8005cce <arm_sub_f32+0xae>
 8005caa:	edd0 7a01 	vldr	s15, [r0, #4]
 8005cae:	ed91 7a01 	vldr	s14, [r1, #4]
 8005cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	edc2 7a01 	vstr	s15, [r2, #4]
 8005cbc:	d007      	beq.n	8005cce <arm_sub_f32+0xae>
 8005cbe:	edd0 7a02 	vldr	s15, [r0, #8]
 8005cc2:	ed91 7a02 	vldr	s14, [r1, #8]
 8005cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cca:	edc2 7a02 	vstr	s15, [r2, #8]
 8005cce:	bcf0      	pop	{r4, r5, r6, r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop

08005cd4 <__errno>:
 8005cd4:	4b01      	ldr	r3, [pc, #4]	; (8005cdc <__errno+0x8>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	2000000c 	.word	0x2000000c

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4e0d      	ldr	r6, [pc, #52]	; (8005d18 <__libc_init_array+0x38>)
 8005ce4:	4c0d      	ldr	r4, [pc, #52]	; (8005d1c <__libc_init_array+0x3c>)
 8005ce6:	1ba4      	subs	r4, r4, r6
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	2500      	movs	r5, #0
 8005cec:	42a5      	cmp	r5, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4e0b      	ldr	r6, [pc, #44]	; (8005d20 <__libc_init_array+0x40>)
 8005cf2:	4c0c      	ldr	r4, [pc, #48]	; (8005d24 <__libc_init_array+0x44>)
 8005cf4:	f001 f92e 	bl	8006f54 <_init>
 8005cf8:	1ba4      	subs	r4, r4, r6
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	2500      	movs	r5, #0
 8005cfe:	42a5      	cmp	r5, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d08:	4798      	blx	r3
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d12:	4798      	blx	r3
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	080071d0 	.word	0x080071d0
 8005d1c:	080071d0 	.word	0x080071d0
 8005d20:	080071d0 	.word	0x080071d0
 8005d24:	080071d4 	.word	0x080071d4

08005d28 <memcpy>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	1e43      	subs	r3, r0, #1
 8005d2c:	440a      	add	r2, r1
 8005d2e:	4291      	cmp	r1, r2
 8005d30:	d100      	bne.n	8005d34 <memcpy+0xc>
 8005d32:	bd10      	pop	{r4, pc}
 8005d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d3c:	e7f7      	b.n	8005d2e <memcpy+0x6>

08005d3e <memset>:
 8005d3e:	4402      	add	r2, r0
 8005d40:	4603      	mov	r3, r0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d100      	bne.n	8005d48 <memset+0xa>
 8005d46:	4770      	bx	lr
 8005d48:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4c:	e7f9      	b.n	8005d42 <memset+0x4>
	...

08005d50 <pow>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	ed2d 8b04 	vpush	{d8-d9}
 8005d58:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800602c <pow+0x2dc>
 8005d5c:	b08d      	sub	sp, #52	; 0x34
 8005d5e:	ec57 6b10 	vmov	r6, r7, d0
 8005d62:	ec55 4b11 	vmov	r4, r5, d1
 8005d66:	f000 fa0f 	bl	8006188 <__ieee754_pow>
 8005d6a:	f999 3000 	ldrsb.w	r3, [r9]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	eeb0 8a40 	vmov.f32	s16, s0
 8005d76:	eef0 8a60 	vmov.f32	s17, s1
 8005d7a:	46c8      	mov	r8, r9
 8005d7c:	d05f      	beq.n	8005e3e <pow+0xee>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7fa fec3 	bl	8000b10 <__aeabi_dcmpun>
 8005d8a:	4683      	mov	fp, r0
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d156      	bne.n	8005e3e <pow+0xee>
 8005d90:	4632      	mov	r2, r6
 8005d92:	463b      	mov	r3, r7
 8005d94:	4630      	mov	r0, r6
 8005d96:	4639      	mov	r1, r7
 8005d98:	f7fa feba 	bl	8000b10 <__aeabi_dcmpun>
 8005d9c:	9001      	str	r0, [sp, #4]
 8005d9e:	b1e8      	cbz	r0, 8005ddc <pow+0x8c>
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	4620      	mov	r0, r4
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fe80 	bl	8000aac <__aeabi_dcmpeq>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d046      	beq.n	8005e3e <pow+0xee>
 8005db0:	2301      	movs	r3, #1
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	4b96      	ldr	r3, [pc, #600]	; (8006010 <pow+0x2c0>)
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	4b96      	ldr	r3, [pc, #600]	; (8006014 <pow+0x2c4>)
 8005dba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005dc4:	9b00      	ldr	r3, [sp, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005dcc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005dd0:	d033      	beq.n	8005e3a <pow+0xea>
 8005dd2:	a802      	add	r0, sp, #8
 8005dd4:	f000 ffaa 	bl	8006d2c <matherr>
 8005dd8:	bb48      	cbnz	r0, 8005e2e <pow+0xde>
 8005dda:	e05d      	b.n	8005e98 <pow+0x148>
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	f04f 0b00 	mov.w	fp, #0
 8005de4:	4652      	mov	r2, sl
 8005de6:	465b      	mov	r3, fp
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fe5e 	bl	8000aac <__aeabi_dcmpeq>
 8005df0:	ec4b ab19 	vmov	d9, sl, fp
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d054      	beq.n	8005ea2 <pow+0x152>
 8005df8:	4652      	mov	r2, sl
 8005dfa:	465b      	mov	r3, fp
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fe54 	bl	8000aac <__aeabi_dcmpeq>
 8005e04:	4680      	mov	r8, r0
 8005e06:	b318      	cbz	r0, 8005e50 <pow+0x100>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	9302      	str	r3, [sp, #8]
 8005e0c:	4b80      	ldr	r3, [pc, #512]	; (8006010 <pow+0x2c0>)
 8005e0e:	9303      	str	r3, [sp, #12]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	930a      	str	r3, [sp, #40]	; 0x28
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005e1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0d5      	beq.n	8005dd2 <pow+0x82>
 8005e26:	4b7b      	ldr	r3, [pc, #492]	; (8006014 <pow+0x2c4>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e30:	b11b      	cbz	r3, 8005e3a <pow+0xea>
 8005e32:	f7ff ff4f 	bl	8005cd4 <__errno>
 8005e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8005e42:	eef0 0a68 	vmov.f32	s1, s17
 8005e46:	b00d      	add	sp, #52	; 0x34
 8005e48:	ecbd 8b04 	vpop	{d8-d9}
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	ec45 4b10 	vmov	d0, r4, r5
 8005e54:	f000 ff62 	bl	8006d1c <finite>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0f0      	beq.n	8005e3e <pow+0xee>
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	465b      	mov	r3, fp
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fe2c 	bl	8000ac0 <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d0e8      	beq.n	8005e3e <pow+0xee>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9302      	str	r3, [sp, #8]
 8005e70:	4b67      	ldr	r3, [pc, #412]	; (8006010 <pow+0x2c0>)
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	f999 3000 	ldrsb.w	r3, [r9]
 8005e78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005e7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005e80:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005e84:	b913      	cbnz	r3, 8005e8c <pow+0x13c>
 8005e86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005e8a:	e7a2      	b.n	8005dd2 <pow+0x82>
 8005e8c:	4962      	ldr	r1, [pc, #392]	; (8006018 <pow+0x2c8>)
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d19c      	bne.n	8005dd2 <pow+0x82>
 8005e98:	f7ff ff1c 	bl	8005cd4 <__errno>
 8005e9c:	2321      	movs	r3, #33	; 0x21
 8005e9e:	6003      	str	r3, [r0, #0]
 8005ea0:	e7c5      	b.n	8005e2e <pow+0xde>
 8005ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ea6:	eef0 0a68 	vmov.f32	s1, s17
 8005eaa:	f000 ff37 	bl	8006d1c <finite>
 8005eae:	9000      	str	r0, [sp, #0]
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 8081 	bne.w	8005fb8 <pow+0x268>
 8005eb6:	ec47 6b10 	vmov	d0, r6, r7
 8005eba:	f000 ff2f 	bl	8006d1c <finite>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d07a      	beq.n	8005fb8 <pow+0x268>
 8005ec2:	ec45 4b10 	vmov	d0, r4, r5
 8005ec6:	f000 ff29 	bl	8006d1c <finite>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d074      	beq.n	8005fb8 <pow+0x268>
 8005ece:	ec53 2b18 	vmov	r2, r3, d8
 8005ed2:	ee18 0a10 	vmov	r0, s16
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f7fa fe1a 	bl	8000b10 <__aeabi_dcmpun>
 8005edc:	f999 9000 	ldrsb.w	r9, [r9]
 8005ee0:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <pow+0x2c0>)
 8005ee2:	b1b0      	cbz	r0, 8005f12 <pow+0x1c2>
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	930a      	str	r3, [sp, #40]	; 0x28
 8005eee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ef2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	d0c4      	beq.n	8005e86 <pow+0x136>
 8005efc:	4652      	mov	r2, sl
 8005efe:	465b      	mov	r3, fp
 8005f00:	4650      	mov	r0, sl
 8005f02:	4659      	mov	r1, fp
 8005f04:	f7fa fc94 	bl	8000830 <__aeabi_ddiv>
 8005f08:	f1b9 0f02 	cmp.w	r9, #2
 8005f0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f10:	e7c1      	b.n	8005e96 <pow+0x146>
 8005f12:	2203      	movs	r2, #3
 8005f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f18:	900a      	str	r0, [sp, #40]	; 0x28
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b3e      	ldr	r3, [pc, #248]	; (800601c <pow+0x2cc>)
 8005f22:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005f26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f2a:	f7fa fb57 	bl	80005dc <__aeabi_dmul>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	f1b9 0f00 	cmp.w	r9, #0
 8005f36:	d124      	bne.n	8005f82 <pow+0x232>
 8005f38:	4b39      	ldr	r3, [pc, #228]	; (8006020 <pow+0x2d0>)
 8005f3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005f3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f42:	4630      	mov	r0, r6
 8005f44:	4652      	mov	r2, sl
 8005f46:	465b      	mov	r3, fp
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fdb9 	bl	8000ac0 <__aeabi_dcmplt>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d056      	beq.n	8006000 <pow+0x2b0>
 8005f52:	ec45 4b10 	vmov	d0, r4, r5
 8005f56:	f000 fef3 	bl	8006d40 <rint>
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	ec51 0b10 	vmov	r0, r1, d0
 8005f62:	f7fa fda3 	bl	8000aac <__aeabi_dcmpeq>
 8005f66:	b920      	cbnz	r0, 8005f72 <pow+0x222>
 8005f68:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <pow+0x2d4>)
 8005f6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f72:	f998 3000 	ldrsb.w	r3, [r8]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d142      	bne.n	8006000 <pow+0x2b0>
 8005f7a:	f7ff feab 	bl	8005cd4 <__errno>
 8005f7e:	2322      	movs	r3, #34	; 0x22
 8005f80:	e78d      	b.n	8005e9e <pow+0x14e>
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <pow+0x2d8>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	465b      	mov	r3, fp
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa fd95 	bl	8000ac0 <__aeabi_dcmplt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0eb      	beq.n	8005f72 <pow+0x222>
 8005f9a:	ec45 4b10 	vmov	d0, r4, r5
 8005f9e:	f000 fecf 	bl	8006d40 <rint>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	ec51 0b10 	vmov	r0, r1, d0
 8005faa:	f7fa fd7f 	bl	8000aac <__aeabi_dcmpeq>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d1df      	bne.n	8005f72 <pow+0x222>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4b18      	ldr	r3, [pc, #96]	; (8006018 <pow+0x2c8>)
 8005fb6:	e7da      	b.n	8005f6e <pow+0x21e>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	ec51 0b18 	vmov	r0, r1, d8
 8005fc0:	f7fa fd74 	bl	8000aac <__aeabi_dcmpeq>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f43f af3a 	beq.w	8005e3e <pow+0xee>
 8005fca:	ec47 6b10 	vmov	d0, r6, r7
 8005fce:	f000 fea5 	bl	8006d1c <finite>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f43f af33 	beq.w	8005e3e <pow+0xee>
 8005fd8:	ec45 4b10 	vmov	d0, r4, r5
 8005fdc:	f000 fe9e 	bl	8006d1c <finite>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f43f af2c 	beq.w	8005e3e <pow+0xee>
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <pow+0x2c0>)
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ff6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ffa:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005ffe:	e7b8      	b.n	8005f72 <pow+0x222>
 8006000:	a802      	add	r0, sp, #8
 8006002:	f000 fe93 	bl	8006d2c <matherr>
 8006006:	2800      	cmp	r0, #0
 8006008:	f47f af11 	bne.w	8005e2e <pow+0xde>
 800600c:	e7b5      	b.n	8005f7a <pow+0x22a>
 800600e:	bf00      	nop
 8006010:	08007174 	.word	0x08007174
 8006014:	3ff00000 	.word	0x3ff00000
 8006018:	fff00000 	.word	0xfff00000
 800601c:	3fe00000 	.word	0x3fe00000
 8006020:	47efffff 	.word	0x47efffff
 8006024:	c7efffff 	.word	0xc7efffff
 8006028:	7ff00000 	.word	0x7ff00000
 800602c:	20000070 	.word	0x20000070

08006030 <sqrt>:
 8006030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006034:	ed2d 8b02 	vpush	{d8}
 8006038:	b08b      	sub	sp, #44	; 0x2c
 800603a:	ec55 4b10 	vmov	r4, r5, d0
 800603e:	f000 fdb1 	bl	8006ba4 <__ieee754_sqrt>
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <sqrt+0xac>)
 8006044:	eeb0 8a40 	vmov.f32	s16, s0
 8006048:	eef0 8a60 	vmov.f32	s17, s1
 800604c:	f993 6000 	ldrsb.w	r6, [r3]
 8006050:	1c73      	adds	r3, r6, #1
 8006052:	d02a      	beq.n	80060aa <sqrt+0x7a>
 8006054:	4622      	mov	r2, r4
 8006056:	462b      	mov	r3, r5
 8006058:	4620      	mov	r0, r4
 800605a:	4629      	mov	r1, r5
 800605c:	f7fa fd58 	bl	8000b10 <__aeabi_dcmpun>
 8006060:	4607      	mov	r7, r0
 8006062:	bb10      	cbnz	r0, 80060aa <sqrt+0x7a>
 8006064:	f04f 0800 	mov.w	r8, #0
 8006068:	f04f 0900 	mov.w	r9, #0
 800606c:	4642      	mov	r2, r8
 800606e:	464b      	mov	r3, r9
 8006070:	4620      	mov	r0, r4
 8006072:	4629      	mov	r1, r5
 8006074:	f7fa fd24 	bl	8000ac0 <__aeabi_dcmplt>
 8006078:	b1b8      	cbz	r0, 80060aa <sqrt+0x7a>
 800607a:	2301      	movs	r3, #1
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <sqrt+0xb0>)
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	9708      	str	r7, [sp, #32]
 8006084:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006088:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800608c:	b9b6      	cbnz	r6, 80060bc <sqrt+0x8c>
 800608e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006092:	4668      	mov	r0, sp
 8006094:	f000 fe4a 	bl	8006d2c <matherr>
 8006098:	b1d0      	cbz	r0, 80060d0 <sqrt+0xa0>
 800609a:	9b08      	ldr	r3, [sp, #32]
 800609c:	b11b      	cbz	r3, 80060a6 <sqrt+0x76>
 800609e:	f7ff fe19 	bl	8005cd4 <__errno>
 80060a2:	9b08      	ldr	r3, [sp, #32]
 80060a4:	6003      	str	r3, [r0, #0]
 80060a6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80060aa:	eeb0 0a48 	vmov.f32	s0, s16
 80060ae:	eef0 0a68 	vmov.f32	s1, s17
 80060b2:	b00b      	add	sp, #44	; 0x2c
 80060b4:	ecbd 8b02 	vpop	{d8}
 80060b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa fbb4 	bl	8000830 <__aeabi_ddiv>
 80060c8:	2e02      	cmp	r6, #2
 80060ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060ce:	d1e0      	bne.n	8006092 <sqrt+0x62>
 80060d0:	f7ff fe00 	bl	8005cd4 <__errno>
 80060d4:	2321      	movs	r3, #33	; 0x21
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	e7df      	b.n	800609a <sqrt+0x6a>
 80060da:	bf00      	nop
 80060dc:	20000070 	.word	0x20000070
 80060e0:	08007178 	.word	0x08007178

080060e4 <sqrtf>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	ed2d 8b02 	vpush	{d8}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	eeb0 8a40 	vmov.f32	s16, s0
 80060f0:	f000 fe08 	bl	8006d04 <__ieee754_sqrtf>
 80060f4:	4b21      	ldr	r3, [pc, #132]	; (800617c <sqrtf+0x98>)
 80060f6:	f993 4000 	ldrsb.w	r4, [r3]
 80060fa:	1c63      	adds	r3, r4, #1
 80060fc:	d02c      	beq.n	8006158 <sqrtf+0x74>
 80060fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	d627      	bvs.n	8006158 <sqrtf+0x74>
 8006108:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	d522      	bpl.n	8006158 <sqrtf+0x74>
 8006112:	2301      	movs	r3, #1
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <sqrtf+0x9c>)
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	ee18 0a10 	vmov	r0, s16
 800611e:	2300      	movs	r3, #0
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	f7fa fa03 	bl	800052c <__aeabi_f2d>
 8006126:	2200      	movs	r2, #0
 8006128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	2300      	movs	r3, #0
 8006132:	b9ac      	cbnz	r4, 8006160 <sqrtf+0x7c>
 8006134:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006138:	4668      	mov	r0, sp
 800613a:	f000 fdf7 	bl	8006d2c <matherr>
 800613e:	b1b8      	cbz	r0, 8006170 <sqrtf+0x8c>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	b11b      	cbz	r3, 800614c <sqrtf+0x68>
 8006144:	f7ff fdc6 	bl	8005cd4 <__errno>
 8006148:	9b08      	ldr	r3, [sp, #32]
 800614a:	6003      	str	r3, [r0, #0]
 800614c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006150:	f7fa fcf4 	bl	8000b3c <__aeabi_d2f>
 8006154:	ee00 0a10 	vmov	s0, r0
 8006158:	b00a      	add	sp, #40	; 0x28
 800615a:	ecbd 8b02 	vpop	{d8}
 800615e:	bd10      	pop	{r4, pc}
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	f7fa fb64 	bl	8000830 <__aeabi_ddiv>
 8006168:	2c02      	cmp	r4, #2
 800616a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800616e:	d1e3      	bne.n	8006138 <sqrtf+0x54>
 8006170:	f7ff fdb0 	bl	8005cd4 <__errno>
 8006174:	2321      	movs	r3, #33	; 0x21
 8006176:	6003      	str	r3, [r0, #0]
 8006178:	e7e2      	b.n	8006140 <sqrtf+0x5c>
 800617a:	bf00      	nop
 800617c:	20000070 	.word	0x20000070
 8006180:	0800717d 	.word	0x0800717d
 8006184:	00000000 	.word	0x00000000

08006188 <__ieee754_pow>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b091      	sub	sp, #68	; 0x44
 800618e:	ed8d 1b00 	vstr	d1, [sp]
 8006192:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006196:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800619a:	ea58 0302 	orrs.w	r3, r8, r2
 800619e:	ec57 6b10 	vmov	r6, r7, d0
 80061a2:	f000 84be 	beq.w	8006b22 <__ieee754_pow+0x99a>
 80061a6:	4b7a      	ldr	r3, [pc, #488]	; (8006390 <__ieee754_pow+0x208>)
 80061a8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80061ac:	429c      	cmp	r4, r3
 80061ae:	463d      	mov	r5, r7
 80061b0:	ee10 aa10 	vmov	sl, s0
 80061b4:	dc09      	bgt.n	80061ca <__ieee754_pow+0x42>
 80061b6:	d103      	bne.n	80061c0 <__ieee754_pow+0x38>
 80061b8:	b93e      	cbnz	r6, 80061ca <__ieee754_pow+0x42>
 80061ba:	45a0      	cmp	r8, r4
 80061bc:	dc0d      	bgt.n	80061da <__ieee754_pow+0x52>
 80061be:	e001      	b.n	80061c4 <__ieee754_pow+0x3c>
 80061c0:	4598      	cmp	r8, r3
 80061c2:	dc02      	bgt.n	80061ca <__ieee754_pow+0x42>
 80061c4:	4598      	cmp	r8, r3
 80061c6:	d10e      	bne.n	80061e6 <__ieee754_pow+0x5e>
 80061c8:	b16a      	cbz	r2, 80061e6 <__ieee754_pow+0x5e>
 80061ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80061ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80061d2:	ea54 030a 	orrs.w	r3, r4, sl
 80061d6:	f000 84a4 	beq.w	8006b22 <__ieee754_pow+0x99a>
 80061da:	486e      	ldr	r0, [pc, #440]	; (8006394 <__ieee754_pow+0x20c>)
 80061dc:	b011      	add	sp, #68	; 0x44
 80061de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e2:	f000 bda5 	b.w	8006d30 <nan>
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	da53      	bge.n	8006292 <__ieee754_pow+0x10a>
 80061ea:	4b6b      	ldr	r3, [pc, #428]	; (8006398 <__ieee754_pow+0x210>)
 80061ec:	4598      	cmp	r8, r3
 80061ee:	dc4d      	bgt.n	800628c <__ieee754_pow+0x104>
 80061f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80061f4:	4598      	cmp	r8, r3
 80061f6:	dd4c      	ble.n	8006292 <__ieee754_pow+0x10a>
 80061f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80061fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006200:	2b14      	cmp	r3, #20
 8006202:	dd26      	ble.n	8006252 <__ieee754_pow+0xca>
 8006204:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006208:	fa22 f103 	lsr.w	r1, r2, r3
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	4293      	cmp	r3, r2
 8006212:	d13e      	bne.n	8006292 <__ieee754_pow+0x10a>
 8006214:	f001 0101 	and.w	r1, r1, #1
 8006218:	f1c1 0b02 	rsb	fp, r1, #2
 800621c:	2a00      	cmp	r2, #0
 800621e:	d15b      	bne.n	80062d8 <__ieee754_pow+0x150>
 8006220:	4b5b      	ldr	r3, [pc, #364]	; (8006390 <__ieee754_pow+0x208>)
 8006222:	4598      	cmp	r8, r3
 8006224:	d124      	bne.n	8006270 <__ieee754_pow+0xe8>
 8006226:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800622a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800622e:	ea53 030a 	orrs.w	r3, r3, sl
 8006232:	f000 8476 	beq.w	8006b22 <__ieee754_pow+0x99a>
 8006236:	4b59      	ldr	r3, [pc, #356]	; (800639c <__ieee754_pow+0x214>)
 8006238:	429c      	cmp	r4, r3
 800623a:	dd2d      	ble.n	8006298 <__ieee754_pow+0x110>
 800623c:	f1b9 0f00 	cmp.w	r9, #0
 8006240:	f280 8473 	bge.w	8006b2a <__ieee754_pow+0x9a2>
 8006244:	2000      	movs	r0, #0
 8006246:	2100      	movs	r1, #0
 8006248:	ec41 0b10 	vmov	d0, r0, r1
 800624c:	b011      	add	sp, #68	; 0x44
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	2a00      	cmp	r2, #0
 8006254:	d13e      	bne.n	80062d4 <__ieee754_pow+0x14c>
 8006256:	f1c3 0314 	rsb	r3, r3, #20
 800625a:	fa48 f103 	asr.w	r1, r8, r3
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	4543      	cmp	r3, r8
 8006264:	f040 8469 	bne.w	8006b3a <__ieee754_pow+0x9b2>
 8006268:	f001 0101 	and.w	r1, r1, #1
 800626c:	f1c1 0b02 	rsb	fp, r1, #2
 8006270:	4b4b      	ldr	r3, [pc, #300]	; (80063a0 <__ieee754_pow+0x218>)
 8006272:	4598      	cmp	r8, r3
 8006274:	d118      	bne.n	80062a8 <__ieee754_pow+0x120>
 8006276:	f1b9 0f00 	cmp.w	r9, #0
 800627a:	f280 845a 	bge.w	8006b32 <__ieee754_pow+0x9aa>
 800627e:	4948      	ldr	r1, [pc, #288]	; (80063a0 <__ieee754_pow+0x218>)
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	2000      	movs	r0, #0
 8006286:	f7fa fad3 	bl	8000830 <__aeabi_ddiv>
 800628a:	e7dd      	b.n	8006248 <__ieee754_pow+0xc0>
 800628c:	f04f 0b02 	mov.w	fp, #2
 8006290:	e7c4      	b.n	800621c <__ieee754_pow+0x94>
 8006292:	f04f 0b00 	mov.w	fp, #0
 8006296:	e7c1      	b.n	800621c <__ieee754_pow+0x94>
 8006298:	f1b9 0f00 	cmp.w	r9, #0
 800629c:	dad2      	bge.n	8006244 <__ieee754_pow+0xbc>
 800629e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80062a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062a6:	e7cf      	b.n	8006248 <__ieee754_pow+0xc0>
 80062a8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80062ac:	d106      	bne.n	80062bc <__ieee754_pow+0x134>
 80062ae:	4632      	mov	r2, r6
 80062b0:	463b      	mov	r3, r7
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	f7fa f991 	bl	80005dc <__aeabi_dmul>
 80062ba:	e7c5      	b.n	8006248 <__ieee754_pow+0xc0>
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <__ieee754_pow+0x21c>)
 80062be:	4599      	cmp	r9, r3
 80062c0:	d10a      	bne.n	80062d8 <__ieee754_pow+0x150>
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	db08      	blt.n	80062d8 <__ieee754_pow+0x150>
 80062c6:	ec47 6b10 	vmov	d0, r6, r7
 80062ca:	b011      	add	sp, #68	; 0x44
 80062cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	f000 bc68 	b.w	8006ba4 <__ieee754_sqrt>
 80062d4:	f04f 0b00 	mov.w	fp, #0
 80062d8:	ec47 6b10 	vmov	d0, r6, r7
 80062dc:	f000 fd15 	bl	8006d0a <fabs>
 80062e0:	ec51 0b10 	vmov	r0, r1, d0
 80062e4:	f1ba 0f00 	cmp.w	sl, #0
 80062e8:	d127      	bne.n	800633a <__ieee754_pow+0x1b2>
 80062ea:	b124      	cbz	r4, 80062f6 <__ieee754_pow+0x16e>
 80062ec:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <__ieee754_pow+0x218>)
 80062ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d121      	bne.n	800633a <__ieee754_pow+0x1b2>
 80062f6:	f1b9 0f00 	cmp.w	r9, #0
 80062fa:	da05      	bge.n	8006308 <__ieee754_pow+0x180>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	2000      	movs	r0, #0
 8006302:	4927      	ldr	r1, [pc, #156]	; (80063a0 <__ieee754_pow+0x218>)
 8006304:	f7fa fa94 	bl	8000830 <__aeabi_ddiv>
 8006308:	2d00      	cmp	r5, #0
 800630a:	da9d      	bge.n	8006248 <__ieee754_pow+0xc0>
 800630c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006310:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006314:	ea54 030b 	orrs.w	r3, r4, fp
 8006318:	d108      	bne.n	800632c <__ieee754_pow+0x1a4>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f7f9 ffa3 	bl	800026c <__aeabi_dsub>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	e7ac      	b.n	8006286 <__ieee754_pow+0xfe>
 800632c:	f1bb 0f01 	cmp.w	fp, #1
 8006330:	d18a      	bne.n	8006248 <__ieee754_pow+0xc0>
 8006332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006336:	4619      	mov	r1, r3
 8006338:	e786      	b.n	8006248 <__ieee754_pow+0xc0>
 800633a:	0fed      	lsrs	r5, r5, #31
 800633c:	1e6b      	subs	r3, r5, #1
 800633e:	930d      	str	r3, [sp, #52]	; 0x34
 8006340:	ea5b 0303 	orrs.w	r3, fp, r3
 8006344:	d102      	bne.n	800634c <__ieee754_pow+0x1c4>
 8006346:	4632      	mov	r2, r6
 8006348:	463b      	mov	r3, r7
 800634a:	e7e8      	b.n	800631e <__ieee754_pow+0x196>
 800634c:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <__ieee754_pow+0x220>)
 800634e:	4598      	cmp	r8, r3
 8006350:	f340 80fe 	ble.w	8006550 <__ieee754_pow+0x3c8>
 8006354:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006358:	4598      	cmp	r8, r3
 800635a:	dd0a      	ble.n	8006372 <__ieee754_pow+0x1ea>
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <__ieee754_pow+0x214>)
 800635e:	429c      	cmp	r4, r3
 8006360:	dc0d      	bgt.n	800637e <__ieee754_pow+0x1f6>
 8006362:	f1b9 0f00 	cmp.w	r9, #0
 8006366:	f6bf af6d 	bge.w	8006244 <__ieee754_pow+0xbc>
 800636a:	a307      	add	r3, pc, #28	; (adr r3, 8006388 <__ieee754_pow+0x200>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	e79f      	b.n	80062b2 <__ieee754_pow+0x12a>
 8006372:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <__ieee754_pow+0x224>)
 8006374:	429c      	cmp	r4, r3
 8006376:	ddf4      	ble.n	8006362 <__ieee754_pow+0x1da>
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <__ieee754_pow+0x218>)
 800637a:	429c      	cmp	r4, r3
 800637c:	dd18      	ble.n	80063b0 <__ieee754_pow+0x228>
 800637e:	f1b9 0f00 	cmp.w	r9, #0
 8006382:	dcf2      	bgt.n	800636a <__ieee754_pow+0x1e2>
 8006384:	e75e      	b.n	8006244 <__ieee754_pow+0xbc>
 8006386:	bf00      	nop
 8006388:	8800759c 	.word	0x8800759c
 800638c:	7e37e43c 	.word	0x7e37e43c
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	08007182 	.word	0x08007182
 8006398:	433fffff 	.word	0x433fffff
 800639c:	3fefffff 	.word	0x3fefffff
 80063a0:	3ff00000 	.word	0x3ff00000
 80063a4:	3fe00000 	.word	0x3fe00000
 80063a8:	41e00000 	.word	0x41e00000
 80063ac:	3feffffe 	.word	0x3feffffe
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b63      	ldr	r3, [pc, #396]	; (8006540 <__ieee754_pow+0x3b8>)
 80063b4:	f7f9 ff5a 	bl	800026c <__aeabi_dsub>
 80063b8:	a355      	add	r3, pc, #340	; (adr r3, 8006510 <__ieee754_pow+0x388>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	4604      	mov	r4, r0
 80063c0:	460d      	mov	r5, r1
 80063c2:	f7fa f90b 	bl	80005dc <__aeabi_dmul>
 80063c6:	a354      	add	r3, pc, #336	; (adr r3, 8006518 <__ieee754_pow+0x390>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	4606      	mov	r6, r0
 80063ce:	460f      	mov	r7, r1
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7fa f902 	bl	80005dc <__aeabi_dmul>
 80063d8:	2200      	movs	r2, #0
 80063da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063de:	4b59      	ldr	r3, [pc, #356]	; (8006544 <__ieee754_pow+0x3bc>)
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7fa f8fa 	bl	80005dc <__aeabi_dmul>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	a14c      	add	r1, pc, #304	; (adr r1, 8006520 <__ieee754_pow+0x398>)
 80063ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063f2:	f7f9 ff3b 	bl	800026c <__aeabi_dsub>
 80063f6:	4622      	mov	r2, r4
 80063f8:	462b      	mov	r3, r5
 80063fa:	f7fa f8ef 	bl	80005dc <__aeabi_dmul>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	2000      	movs	r0, #0
 8006404:	4950      	ldr	r1, [pc, #320]	; (8006548 <__ieee754_pow+0x3c0>)
 8006406:	f7f9 ff31 	bl	800026c <__aeabi_dsub>
 800640a:	4622      	mov	r2, r4
 800640c:	462b      	mov	r3, r5
 800640e:	4680      	mov	r8, r0
 8006410:	4689      	mov	r9, r1
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7fa f8e1 	bl	80005dc <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7fa f8db 	bl	80005dc <__aeabi_dmul>
 8006426:	a340      	add	r3, pc, #256	; (adr r3, 8006528 <__ieee754_pow+0x3a0>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f7fa f8d6 	bl	80005dc <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006438:	f7f9 ff18 	bl	800026c <__aeabi_dsub>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	4630      	mov	r0, r6
 8006446:	4639      	mov	r1, r7
 8006448:	f7f9 ff12 	bl	8000270 <__adddf3>
 800644c:	2000      	movs	r0, #0
 800644e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006452:	4632      	mov	r2, r6
 8006454:	463b      	mov	r3, r7
 8006456:	f7f9 ff09 	bl	800026c <__aeabi_dsub>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7f9 ff03 	bl	800026c <__aeabi_dsub>
 8006466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006468:	f10b 33ff 	add.w	r3, fp, #4294967295
 800646c:	4313      	orrs	r3, r2
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	f040 81eb 	bne.w	800684c <__ieee754_pow+0x6c4>
 8006476:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006530 <__ieee754_pow+0x3a8>
 800647a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800647e:	2400      	movs	r4, #0
 8006480:	4622      	mov	r2, r4
 8006482:	462b      	mov	r3, r5
 8006484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800648c:	f7f9 feee 	bl	800026c <__aeabi_dsub>
 8006490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006494:	f7fa f8a2 	bl	80005dc <__aeabi_dmul>
 8006498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7fa f89a 	bl	80005dc <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f7f9 fede 	bl	8000270 <__adddf3>
 80064b4:	4622      	mov	r2, r4
 80064b6:	462b      	mov	r3, r5
 80064b8:	4680      	mov	r8, r0
 80064ba:	4689      	mov	r9, r1
 80064bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c0:	f7fa f88c 	bl	80005dc <__aeabi_dmul>
 80064c4:	460b      	mov	r3, r1
 80064c6:	4604      	mov	r4, r0
 80064c8:	460d      	mov	r5, r1
 80064ca:	4602      	mov	r2, r0
 80064cc:	4649      	mov	r1, r9
 80064ce:	4640      	mov	r0, r8
 80064d0:	e9cd 4500 	strd	r4, r5, [sp]
 80064d4:	f7f9 fecc 	bl	8000270 <__adddf3>
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <__ieee754_pow+0x3c4>)
 80064da:	4299      	cmp	r1, r3
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	468b      	mov	fp, r1
 80064e2:	f340 82f7 	ble.w	8006ad4 <__ieee754_pow+0x94c>
 80064e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80064ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80064ee:	4303      	orrs	r3, r0
 80064f0:	f000 81ea 	beq.w	80068c8 <__ieee754_pow+0x740>
 80064f4:	a310      	add	r3, pc, #64	; (adr r3, 8006538 <__ieee754_pow+0x3b0>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fe:	f7fa f86d 	bl	80005dc <__aeabi_dmul>
 8006502:	a30d      	add	r3, pc, #52	; (adr r3, 8006538 <__ieee754_pow+0x3b0>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	e6d5      	b.n	80062b6 <__ieee754_pow+0x12e>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	60000000 	.word	0x60000000
 8006514:	3ff71547 	.word	0x3ff71547
 8006518:	f85ddf44 	.word	0xf85ddf44
 800651c:	3e54ae0b 	.word	0x3e54ae0b
 8006520:	55555555 	.word	0x55555555
 8006524:	3fd55555 	.word	0x3fd55555
 8006528:	652b82fe 	.word	0x652b82fe
 800652c:	3ff71547 	.word	0x3ff71547
 8006530:	00000000 	.word	0x00000000
 8006534:	bff00000 	.word	0xbff00000
 8006538:	8800759c 	.word	0x8800759c
 800653c:	7e37e43c 	.word	0x7e37e43c
 8006540:	3ff00000 	.word	0x3ff00000
 8006544:	3fd00000 	.word	0x3fd00000
 8006548:	3fe00000 	.word	0x3fe00000
 800654c:	408fffff 	.word	0x408fffff
 8006550:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	da05      	bge.n	8006566 <__ieee754_pow+0x3de>
 800655a:	4bd3      	ldr	r3, [pc, #844]	; (80068a8 <__ieee754_pow+0x720>)
 800655c:	f7fa f83e 	bl	80005dc <__aeabi_dmul>
 8006560:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006564:	460c      	mov	r4, r1
 8006566:	1523      	asrs	r3, r4, #20
 8006568:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800656c:	4413      	add	r3, r2
 800656e:	9309      	str	r3, [sp, #36]	; 0x24
 8006570:	4bce      	ldr	r3, [pc, #824]	; (80068ac <__ieee754_pow+0x724>)
 8006572:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006576:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800657a:	429c      	cmp	r4, r3
 800657c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006580:	dd08      	ble.n	8006594 <__ieee754_pow+0x40c>
 8006582:	4bcb      	ldr	r3, [pc, #812]	; (80068b0 <__ieee754_pow+0x728>)
 8006584:	429c      	cmp	r4, r3
 8006586:	f340 815e 	ble.w	8006846 <__ieee754_pow+0x6be>
 800658a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658c:	3301      	adds	r3, #1
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
 8006590:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006594:	f04f 0a00 	mov.w	sl, #0
 8006598:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800659c:	930c      	str	r3, [sp, #48]	; 0x30
 800659e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a0:	4bc4      	ldr	r3, [pc, #784]	; (80068b4 <__ieee754_pow+0x72c>)
 80065a2:	4413      	add	r3, r2
 80065a4:	ed93 7b00 	vldr	d7, [r3]
 80065a8:	4629      	mov	r1, r5
 80065aa:	ec53 2b17 	vmov	r2, r3, d7
 80065ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80065b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065b6:	f7f9 fe59 	bl	800026c <__aeabi_dsub>
 80065ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065be:	4606      	mov	r6, r0
 80065c0:	460f      	mov	r7, r1
 80065c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c6:	f7f9 fe53 	bl	8000270 <__adddf3>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	2000      	movs	r0, #0
 80065d0:	49b9      	ldr	r1, [pc, #740]	; (80068b8 <__ieee754_pow+0x730>)
 80065d2:	f7fa f92d 	bl	8000830 <__aeabi_ddiv>
 80065d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fffb 	bl	80005dc <__aeabi_dmul>
 80065e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80065fa:	106d      	asrs	r5, r5, #1
 80065fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006600:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006604:	2200      	movs	r2, #0
 8006606:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	4614      	mov	r4, r2
 8006610:	461d      	mov	r5, r3
 8006612:	f7f9 ffe3 	bl	80005dc <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7f9 fe25 	bl	800026c <__aeabi_dsub>
 8006622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 fe1d 	bl	800026c <__aeabi_dsub>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663a:	f7f9 fe17 	bl	800026c <__aeabi_dsub>
 800663e:	4642      	mov	r2, r8
 8006640:	464b      	mov	r3, r9
 8006642:	f7f9 ffcb 	bl	80005dc <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7f9 fe0d 	bl	800026c <__aeabi_dsub>
 8006652:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006656:	f7f9 ffc1 	bl	80005dc <__aeabi_dmul>
 800665a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7f9 ffb9 	bl	80005dc <__aeabi_dmul>
 800666a:	a37b      	add	r3, pc, #492	; (adr r3, 8006858 <__ieee754_pow+0x6d0>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	f7f9 ffb2 	bl	80005dc <__aeabi_dmul>
 8006678:	a379      	add	r3, pc, #484	; (adr r3, 8006860 <__ieee754_pow+0x6d8>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fdf7 	bl	8000270 <__adddf3>
 8006682:	4622      	mov	r2, r4
 8006684:	462b      	mov	r3, r5
 8006686:	f7f9 ffa9 	bl	80005dc <__aeabi_dmul>
 800668a:	a377      	add	r3, pc, #476	; (adr r3, 8006868 <__ieee754_pow+0x6e0>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 fdee 	bl	8000270 <__adddf3>
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	f7f9 ffa0 	bl	80005dc <__aeabi_dmul>
 800669c:	a374      	add	r3, pc, #464	; (adr r3, 8006870 <__ieee754_pow+0x6e8>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f7f9 fde5 	bl	8000270 <__adddf3>
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	f7f9 ff97 	bl	80005dc <__aeabi_dmul>
 80066ae:	a372      	add	r3, pc, #456	; (adr r3, 8006878 <__ieee754_pow+0x6f0>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fddc 	bl	8000270 <__adddf3>
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	f7f9 ff8e 	bl	80005dc <__aeabi_dmul>
 80066c0:	a36f      	add	r3, pc, #444	; (adr r3, 8006880 <__ieee754_pow+0x6f8>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fdd3 	bl	8000270 <__adddf3>
 80066ca:	4622      	mov	r2, r4
 80066cc:	4606      	mov	r6, r0
 80066ce:	460f      	mov	r7, r1
 80066d0:	462b      	mov	r3, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 ff81 	bl	80005dc <__aeabi_dmul>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 ff7b 	bl	80005dc <__aeabi_dmul>
 80066e6:	4642      	mov	r2, r8
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	464b      	mov	r3, r9
 80066ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f2:	f7f9 fdbd 	bl	8000270 <__adddf3>
 80066f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066fa:	f7f9 ff6f 	bl	80005dc <__aeabi_dmul>
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f7f9 fdb5 	bl	8000270 <__adddf3>
 8006706:	4642      	mov	r2, r8
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	464b      	mov	r3, r9
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 ff63 	bl	80005dc <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <__ieee754_pow+0x734>)
 800671a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800671e:	f7f9 fda7 	bl	8000270 <__adddf3>
 8006722:	4632      	mov	r2, r6
 8006724:	463b      	mov	r3, r7
 8006726:	f7f9 fda3 	bl	8000270 <__adddf3>
 800672a:	9802      	ldr	r0, [sp, #8]
 800672c:	460d      	mov	r5, r1
 800672e:	4604      	mov	r4, r0
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7f9 ff50 	bl	80005dc <__aeabi_dmul>
 800673c:	2200      	movs	r2, #0
 800673e:	4680      	mov	r8, r0
 8006740:	4689      	mov	r9, r1
 8006742:	4b5e      	ldr	r3, [pc, #376]	; (80068bc <__ieee754_pow+0x734>)
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 fd90 	bl	800026c <__aeabi_dsub>
 800674c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006750:	f7f9 fd8c 	bl	800026c <__aeabi_dsub>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 fd86 	bl	800026c <__aeabi_dsub>
 8006760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006764:	f7f9 ff3a 	bl	80005dc <__aeabi_dmul>
 8006768:	4622      	mov	r2, r4
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	462b      	mov	r3, r5
 8006770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006774:	f7f9 ff32 	bl	80005dc <__aeabi_dmul>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7f9 fd76 	bl	8000270 <__adddf3>
 8006784:	4606      	mov	r6, r0
 8006786:	460f      	mov	r7, r1
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7f9 fd6e 	bl	8000270 <__adddf3>
 8006794:	9802      	ldr	r0, [sp, #8]
 8006796:	a33c      	add	r3, pc, #240	; (adr r3, 8006888 <__ieee754_pow+0x700>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	f7f9 ff1c 	bl	80005dc <__aeabi_dmul>
 80067a4:	4642      	mov	r2, r8
 80067a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067aa:	464b      	mov	r3, r9
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 fd5c 	bl	800026c <__aeabi_dsub>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7f9 fd56 	bl	800026c <__aeabi_dsub>
 80067c0:	a333      	add	r3, pc, #204	; (adr r3, 8006890 <__ieee754_pow+0x708>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 ff09 	bl	80005dc <__aeabi_dmul>
 80067ca:	a333      	add	r3, pc, #204	; (adr r3, 8006898 <__ieee754_pow+0x710>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	4620      	mov	r0, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7f9 ff00 	bl	80005dc <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fd44 	bl	8000270 <__adddf3>
 80067e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ea:	4b35      	ldr	r3, [pc, #212]	; (80068c0 <__ieee754_pow+0x738>)
 80067ec:	4413      	add	r3, r2
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7f9 fd3d 	bl	8000270 <__adddf3>
 80067f6:	4604      	mov	r4, r0
 80067f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fa:	460d      	mov	r5, r1
 80067fc:	f7f9 fe84 	bl	8000508 <__aeabi_i2d>
 8006800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006802:	4b30      	ldr	r3, [pc, #192]	; (80068c4 <__ieee754_pow+0x73c>)
 8006804:	4413      	add	r3, r2
 8006806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	4622      	mov	r2, r4
 8006810:	462b      	mov	r3, r5
 8006812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006816:	f7f9 fd2b 	bl	8000270 <__adddf3>
 800681a:	4642      	mov	r2, r8
 800681c:	464b      	mov	r3, r9
 800681e:	f7f9 fd27 	bl	8000270 <__adddf3>
 8006822:	4632      	mov	r2, r6
 8006824:	463b      	mov	r3, r7
 8006826:	f7f9 fd23 	bl	8000270 <__adddf3>
 800682a:	9802      	ldr	r0, [sp, #8]
 800682c:	4632      	mov	r2, r6
 800682e:	463b      	mov	r3, r7
 8006830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006834:	f7f9 fd1a 	bl	800026c <__aeabi_dsub>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	f7f9 fd16 	bl	800026c <__aeabi_dsub>
 8006840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006844:	e607      	b.n	8006456 <__ieee754_pow+0x2ce>
 8006846:	f04f 0a01 	mov.w	sl, #1
 800684a:	e6a5      	b.n	8006598 <__ieee754_pow+0x410>
 800684c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80068a0 <__ieee754_pow+0x718>
 8006850:	e613      	b.n	800647a <__ieee754_pow+0x2f2>
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
 8006858:	4a454eef 	.word	0x4a454eef
 800685c:	3fca7e28 	.word	0x3fca7e28
 8006860:	93c9db65 	.word	0x93c9db65
 8006864:	3fcd864a 	.word	0x3fcd864a
 8006868:	a91d4101 	.word	0xa91d4101
 800686c:	3fd17460 	.word	0x3fd17460
 8006870:	518f264d 	.word	0x518f264d
 8006874:	3fd55555 	.word	0x3fd55555
 8006878:	db6fabff 	.word	0xdb6fabff
 800687c:	3fdb6db6 	.word	0x3fdb6db6
 8006880:	33333303 	.word	0x33333303
 8006884:	3fe33333 	.word	0x3fe33333
 8006888:	e0000000 	.word	0xe0000000
 800688c:	3feec709 	.word	0x3feec709
 8006890:	dc3a03fd 	.word	0xdc3a03fd
 8006894:	3feec709 	.word	0x3feec709
 8006898:	145b01f5 	.word	0x145b01f5
 800689c:	be3e2fe0 	.word	0xbe3e2fe0
 80068a0:	00000000 	.word	0x00000000
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	43400000 	.word	0x43400000
 80068ac:	0003988e 	.word	0x0003988e
 80068b0:	000bb679 	.word	0x000bb679
 80068b4:	08007188 	.word	0x08007188
 80068b8:	3ff00000 	.word	0x3ff00000
 80068bc:	40080000 	.word	0x40080000
 80068c0:	080071a8 	.word	0x080071a8
 80068c4:	08007198 	.word	0x08007198
 80068c8:	a3b4      	add	r3, pc, #720	; (adr r3, 8006b9c <__ieee754_pow+0xa14>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7f9 fccd 	bl	8000270 <__adddf3>
 80068d6:	4622      	mov	r2, r4
 80068d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068dc:	462b      	mov	r3, r5
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 fcc3 	bl	800026c <__aeabi_dsub>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ee:	f7fa f905 	bl	8000afc <__aeabi_dcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f47f adfe 	bne.w	80064f4 <__ieee754_pow+0x36c>
 80068f8:	4aa3      	ldr	r2, [pc, #652]	; (8006b88 <__ieee754_pow+0xa00>)
 80068fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80068fe:	4293      	cmp	r3, r2
 8006900:	f340 810a 	ble.w	8006b18 <__ieee754_pow+0x990>
 8006904:	151b      	asrs	r3, r3, #20
 8006906:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800690a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800690e:	fa4a f303 	asr.w	r3, sl, r3
 8006912:	445b      	add	r3, fp
 8006914:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006918:	4e9c      	ldr	r6, [pc, #624]	; (8006b8c <__ieee754_pow+0xa04>)
 800691a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800691e:	4116      	asrs	r6, r2
 8006920:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006924:	2000      	movs	r0, #0
 8006926:	ea23 0106 	bic.w	r1, r3, r6
 800692a:	f1c2 0214 	rsb	r2, r2, #20
 800692e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006932:	fa4a fa02 	asr.w	sl, sl, r2
 8006936:	f1bb 0f00 	cmp.w	fp, #0
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	bfb8      	it	lt
 8006944:	f1ca 0a00 	rsblt	sl, sl, #0
 8006948:	f7f9 fc90 	bl	800026c <__aeabi_dsub>
 800694c:	e9cd 0100 	strd	r0, r1, [sp]
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006958:	f7f9 fc8a 	bl	8000270 <__adddf3>
 800695c:	2000      	movs	r0, #0
 800695e:	a378      	add	r3, pc, #480	; (adr r3, 8006b40 <__ieee754_pow+0x9b8>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
 8006968:	f7f9 fe38 	bl	80005dc <__aeabi_dmul>
 800696c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	4620      	mov	r0, r4
 8006976:	4629      	mov	r1, r5
 8006978:	f7f9 fc78 	bl	800026c <__aeabi_dsub>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7f9 fc72 	bl	800026c <__aeabi_dsub>
 8006988:	a36f      	add	r3, pc, #444	; (adr r3, 8006b48 <__ieee754_pow+0x9c0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fe25 	bl	80005dc <__aeabi_dmul>
 8006992:	a36f      	add	r3, pc, #444	; (adr r3, 8006b50 <__ieee754_pow+0x9c8>)
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	4680      	mov	r8, r0
 800699a:	4689      	mov	r9, r1
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fe1c 	bl	80005dc <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7f9 fc60 	bl	8000270 <__adddf3>
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fc58 	bl	8000270 <__adddf3>
 80069c0:	4632      	mov	r2, r6
 80069c2:	463b      	mov	r3, r7
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	f7f9 fc50 	bl	800026c <__aeabi_dsub>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4620      	mov	r0, r4
 80069d2:	4629      	mov	r1, r5
 80069d4:	f7f9 fc4a 	bl	800026c <__aeabi_dsub>
 80069d8:	4642      	mov	r2, r8
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fdfa 	bl	80005dc <__aeabi_dmul>
 80069e8:	a35b      	add	r3, pc, #364	; (adr r3, 8006b58 <__ieee754_pow+0x9d0>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	f7f9 fdf3 	bl	80005dc <__aeabi_dmul>
 80069f6:	a35a      	add	r3, pc, #360	; (adr r3, 8006b60 <__ieee754_pow+0x9d8>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fc36 	bl	800026c <__aeabi_dsub>
 8006a00:	4622      	mov	r2, r4
 8006a02:	462b      	mov	r3, r5
 8006a04:	f7f9 fdea 	bl	80005dc <__aeabi_dmul>
 8006a08:	a357      	add	r3, pc, #348	; (adr r3, 8006b68 <__ieee754_pow+0x9e0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fc2f 	bl	8000270 <__adddf3>
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	f7f9 fde1 	bl	80005dc <__aeabi_dmul>
 8006a1a:	a355      	add	r3, pc, #340	; (adr r3, 8006b70 <__ieee754_pow+0x9e8>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fc24 	bl	800026c <__aeabi_dsub>
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	f7f9 fdd8 	bl	80005dc <__aeabi_dmul>
 8006a2c:	a352      	add	r3, pc, #328	; (adr r3, 8006b78 <__ieee754_pow+0x9f0>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f7f9 fc1d 	bl	8000270 <__adddf3>
 8006a36:	4622      	mov	r2, r4
 8006a38:	462b      	mov	r3, r5
 8006a3a:	f7f9 fdcf 	bl	80005dc <__aeabi_dmul>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4640      	mov	r0, r8
 8006a44:	4649      	mov	r1, r9
 8006a46:	f7f9 fc11 	bl	800026c <__aeabi_dsub>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fdc1 	bl	80005dc <__aeabi_dmul>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	e9cd 0100 	strd	r0, r1, [sp]
 8006a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fc00 	bl	800026c <__aeabi_dsub>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a74:	f7f9 fedc 	bl	8000830 <__aeabi_ddiv>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4640      	mov	r0, r8
 8006a82:	4649      	mov	r1, r9
 8006a84:	f7f9 fdaa 	bl	80005dc <__aeabi_dmul>
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	f7f9 fbf0 	bl	8000270 <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7f9 fbe8 	bl	800026c <__aeabi_dsub>
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	f7f9 fbe4 	bl	800026c <__aeabi_dsub>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4939      	ldr	r1, [pc, #228]	; (8006b90 <__ieee754_pow+0xa08>)
 8006aac:	f7f9 fbde 	bl	800026c <__aeabi_dsub>
 8006ab0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006ab4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	da2f      	bge.n	8006b1e <__ieee754_pow+0x996>
 8006abe:	4650      	mov	r0, sl
 8006ac0:	ec43 2b10 	vmov	d0, r2, r3
 8006ac4:	f000 f9c0 	bl	8006e48 <scalbn>
 8006ac8:	ec51 0b10 	vmov	r0, r1, d0
 8006acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad0:	f7ff bbf1 	b.w	80062b6 <__ieee754_pow+0x12e>
 8006ad4:	4b2f      	ldr	r3, [pc, #188]	; (8006b94 <__ieee754_pow+0xa0c>)
 8006ad6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006ada:	429e      	cmp	r6, r3
 8006adc:	f77f af0c 	ble.w	80068f8 <__ieee754_pow+0x770>
 8006ae0:	4b2d      	ldr	r3, [pc, #180]	; (8006b98 <__ieee754_pow+0xa10>)
 8006ae2:	440b      	add	r3, r1
 8006ae4:	4303      	orrs	r3, r0
 8006ae6:	d00b      	beq.n	8006b00 <__ieee754_pow+0x978>
 8006ae8:	a325      	add	r3, pc, #148	; (adr r3, 8006b80 <__ieee754_pow+0x9f8>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af2:	f7f9 fd73 	bl	80005dc <__aeabi_dmul>
 8006af6:	a322      	add	r3, pc, #136	; (adr r3, 8006b80 <__ieee754_pow+0x9f8>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f7ff bbdb 	b.w	80062b6 <__ieee754_pow+0x12e>
 8006b00:	4622      	mov	r2, r4
 8006b02:	462b      	mov	r3, r5
 8006b04:	f7f9 fbb2 	bl	800026c <__aeabi_dsub>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f7f9 ffec 	bl	8000ae8 <__aeabi_dcmpge>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f aef1 	beq.w	80068f8 <__ieee754_pow+0x770>
 8006b16:	e7e7      	b.n	8006ae8 <__ieee754_pow+0x960>
 8006b18:	f04f 0a00 	mov.w	sl, #0
 8006b1c:	e718      	b.n	8006950 <__ieee754_pow+0x7c8>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	e7d4      	b.n	8006acc <__ieee754_pow+0x944>
 8006b22:	2000      	movs	r0, #0
 8006b24:	491a      	ldr	r1, [pc, #104]	; (8006b90 <__ieee754_pow+0xa08>)
 8006b26:	f7ff bb8f 	b.w	8006248 <__ieee754_pow+0xc0>
 8006b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b2e:	f7ff bb8b 	b.w	8006248 <__ieee754_pow+0xc0>
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7ff bb87 	b.w	8006248 <__ieee754_pow+0xc0>
 8006b3a:	4693      	mov	fp, r2
 8006b3c:	f7ff bb98 	b.w	8006270 <__ieee754_pow+0xe8>
 8006b40:	00000000 	.word	0x00000000
 8006b44:	3fe62e43 	.word	0x3fe62e43
 8006b48:	fefa39ef 	.word	0xfefa39ef
 8006b4c:	3fe62e42 	.word	0x3fe62e42
 8006b50:	0ca86c39 	.word	0x0ca86c39
 8006b54:	be205c61 	.word	0xbe205c61
 8006b58:	72bea4d0 	.word	0x72bea4d0
 8006b5c:	3e663769 	.word	0x3e663769
 8006b60:	c5d26bf1 	.word	0xc5d26bf1
 8006b64:	3ebbbd41 	.word	0x3ebbbd41
 8006b68:	af25de2c 	.word	0xaf25de2c
 8006b6c:	3f11566a 	.word	0x3f11566a
 8006b70:	16bebd93 	.word	0x16bebd93
 8006b74:	3f66c16c 	.word	0x3f66c16c
 8006b78:	5555553e 	.word	0x5555553e
 8006b7c:	3fc55555 	.word	0x3fc55555
 8006b80:	c2f8f359 	.word	0xc2f8f359
 8006b84:	01a56e1f 	.word	0x01a56e1f
 8006b88:	3fe00000 	.word	0x3fe00000
 8006b8c:	000fffff 	.word	0x000fffff
 8006b90:	3ff00000 	.word	0x3ff00000
 8006b94:	4090cbff 	.word	0x4090cbff
 8006b98:	3f6f3400 	.word	0x3f6f3400
 8006b9c:	652b82fe 	.word	0x652b82fe
 8006ba0:	3c971547 	.word	0x3c971547

08006ba4 <__ieee754_sqrt>:
 8006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba8:	4955      	ldr	r1, [pc, #340]	; (8006d00 <__ieee754_sqrt+0x15c>)
 8006baa:	ec55 4b10 	vmov	r4, r5, d0
 8006bae:	43a9      	bics	r1, r5
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	d112      	bne.n	8006bdc <__ieee754_sqrt+0x38>
 8006bb6:	ee10 2a10 	vmov	r2, s0
 8006bba:	ee10 0a10 	vmov	r0, s0
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	f7f9 fd0c 	bl	80005dc <__aeabi_dmul>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f7f9 fb50 	bl	8000270 <__adddf3>
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	460d      	mov	r5, r1
 8006bd4:	ec45 4b10 	vmov	d0, r4, r5
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	ee10 0a10 	vmov	r0, s0
 8006be2:	4621      	mov	r1, r4
 8006be4:	dc0f      	bgt.n	8006c06 <__ieee754_sqrt+0x62>
 8006be6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bea:	4330      	orrs	r0, r6
 8006bec:	d0f2      	beq.n	8006bd4 <__ieee754_sqrt+0x30>
 8006bee:	b155      	cbz	r5, 8006c06 <__ieee754_sqrt+0x62>
 8006bf0:	ee10 2a10 	vmov	r2, s0
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 fb38 	bl	800026c <__aeabi_dsub>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	f7f9 fe16 	bl	8000830 <__aeabi_ddiv>
 8006c04:	e7e4      	b.n	8006bd0 <__ieee754_sqrt+0x2c>
 8006c06:	151b      	asrs	r3, r3, #20
 8006c08:	d073      	beq.n	8006cf2 <__ieee754_sqrt+0x14e>
 8006c0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c0e:	07dd      	lsls	r5, r3, #31
 8006c10:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c14:	bf48      	it	mi
 8006c16:	0fc8      	lsrmi	r0, r1, #31
 8006c18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c1c:	bf44      	itt	mi
 8006c1e:	0049      	lslmi	r1, r1, #1
 8006c20:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006c24:	2500      	movs	r5, #0
 8006c26:	1058      	asrs	r0, r3, #1
 8006c28:	0fcb      	lsrs	r3, r1, #31
 8006c2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006c2e:	0049      	lsls	r1, r1, #1
 8006c30:	2316      	movs	r3, #22
 8006c32:	462c      	mov	r4, r5
 8006c34:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006c38:	19a7      	adds	r7, r4, r6
 8006c3a:	4297      	cmp	r7, r2
 8006c3c:	bfde      	ittt	le
 8006c3e:	19bc      	addle	r4, r7, r6
 8006c40:	1bd2      	suble	r2, r2, r7
 8006c42:	19ad      	addle	r5, r5, r6
 8006c44:	0fcf      	lsrs	r7, r1, #31
 8006c46:	3b01      	subs	r3, #1
 8006c48:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006c4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006c54:	d1f0      	bne.n	8006c38 <__ieee754_sqrt+0x94>
 8006c56:	f04f 0c20 	mov.w	ip, #32
 8006c5a:	469e      	mov	lr, r3
 8006c5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c60:	42a2      	cmp	r2, r4
 8006c62:	eb06 070e 	add.w	r7, r6, lr
 8006c66:	dc02      	bgt.n	8006c6e <__ieee754_sqrt+0xca>
 8006c68:	d112      	bne.n	8006c90 <__ieee754_sqrt+0xec>
 8006c6a:	428f      	cmp	r7, r1
 8006c6c:	d810      	bhi.n	8006c90 <__ieee754_sqrt+0xec>
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	eb07 0e06 	add.w	lr, r7, r6
 8006c74:	da42      	bge.n	8006cfc <__ieee754_sqrt+0x158>
 8006c76:	f1be 0f00 	cmp.w	lr, #0
 8006c7a:	db3f      	blt.n	8006cfc <__ieee754_sqrt+0x158>
 8006c7c:	f104 0801 	add.w	r8, r4, #1
 8006c80:	1b12      	subs	r2, r2, r4
 8006c82:	428f      	cmp	r7, r1
 8006c84:	bf88      	it	hi
 8006c86:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006c8a:	1bc9      	subs	r1, r1, r7
 8006c8c:	4433      	add	r3, r6
 8006c8e:	4644      	mov	r4, r8
 8006c90:	0052      	lsls	r2, r2, #1
 8006c92:	f1bc 0c01 	subs.w	ip, ip, #1
 8006c96:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006c9a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006c9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ca2:	d1dd      	bne.n	8006c60 <__ieee754_sqrt+0xbc>
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	d006      	beq.n	8006cb6 <__ieee754_sqrt+0x112>
 8006ca8:	1c5c      	adds	r4, r3, #1
 8006caa:	bf13      	iteet	ne
 8006cac:	3301      	addne	r3, #1
 8006cae:	3501      	addeq	r5, #1
 8006cb0:	4663      	moveq	r3, ip
 8006cb2:	f023 0301 	bicne.w	r3, r3, #1
 8006cb6:	106a      	asrs	r2, r5, #1
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	07e9      	lsls	r1, r5, #31
 8006cbc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006cc0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006cc4:	bf48      	it	mi
 8006cc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006cce:	461c      	mov	r4, r3
 8006cd0:	e780      	b.n	8006bd4 <__ieee754_sqrt+0x30>
 8006cd2:	0aca      	lsrs	r2, r1, #11
 8006cd4:	3815      	subs	r0, #21
 8006cd6:	0549      	lsls	r1, r1, #21
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	d0fa      	beq.n	8006cd2 <__ieee754_sqrt+0x12e>
 8006cdc:	02d6      	lsls	r6, r2, #11
 8006cde:	d50a      	bpl.n	8006cf6 <__ieee754_sqrt+0x152>
 8006ce0:	f1c3 0420 	rsb	r4, r3, #32
 8006ce4:	fa21 f404 	lsr.w	r4, r1, r4
 8006ce8:	1e5d      	subs	r5, r3, #1
 8006cea:	4099      	lsls	r1, r3
 8006cec:	4322      	orrs	r2, r4
 8006cee:	1b43      	subs	r3, r0, r5
 8006cf0:	e78b      	b.n	8006c0a <__ieee754_sqrt+0x66>
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	e7f0      	b.n	8006cd8 <__ieee754_sqrt+0x134>
 8006cf6:	0052      	lsls	r2, r2, #1
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	e7ef      	b.n	8006cdc <__ieee754_sqrt+0x138>
 8006cfc:	46a0      	mov	r8, r4
 8006cfe:	e7bf      	b.n	8006c80 <__ieee754_sqrt+0xdc>
 8006d00:	7ff00000 	.word	0x7ff00000

08006d04 <__ieee754_sqrtf>:
 8006d04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d08:	4770      	bx	lr

08006d0a <fabs>:
 8006d0a:	ec51 0b10 	vmov	r0, r1, d0
 8006d0e:	ee10 2a10 	vmov	r2, s0
 8006d12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d16:	ec43 2b10 	vmov	d0, r2, r3
 8006d1a:	4770      	bx	lr

08006d1c <finite>:
 8006d1c:	ee10 3a90 	vmov	r3, s1
 8006d20:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006d24:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006d28:	0fc0      	lsrs	r0, r0, #31
 8006d2a:	4770      	bx	lr

08006d2c <matherr>:
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	4770      	bx	lr

08006d30 <nan>:
 8006d30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006d38 <nan+0x8>
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	00000000 	.word	0x00000000
 8006d3c:	7ff80000 	.word	0x7ff80000

08006d40 <rint>:
 8006d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d42:	ec51 0b10 	vmov	r0, r1, d0
 8006d46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d4a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006d4e:	2e13      	cmp	r6, #19
 8006d50:	460b      	mov	r3, r1
 8006d52:	ee10 4a10 	vmov	r4, s0
 8006d56:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006d5a:	dc56      	bgt.n	8006e0a <rint+0xca>
 8006d5c:	2e00      	cmp	r6, #0
 8006d5e:	da2b      	bge.n	8006db8 <rint+0x78>
 8006d60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006d64:	4302      	orrs	r2, r0
 8006d66:	d023      	beq.n	8006db0 <rint+0x70>
 8006d68:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006d6c:	4302      	orrs	r2, r0
 8006d6e:	4254      	negs	r4, r2
 8006d70:	4314      	orrs	r4, r2
 8006d72:	0c4b      	lsrs	r3, r1, #17
 8006d74:	0b24      	lsrs	r4, r4, #12
 8006d76:	045b      	lsls	r3, r3, #17
 8006d78:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006d7c:	ea44 0103 	orr.w	r1, r4, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	492f      	ldr	r1, [pc, #188]	; (8006e40 <rint+0x100>)
 8006d84:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006d88:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4639      	mov	r1, r7
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7f9 fa6d 	bl	8000270 <__adddf3>
 8006d96:	e9cd 0100 	strd	r0, r1, [sp]
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da2:	f7f9 fa63 	bl	800026c <__aeabi_dsub>
 8006da6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006daa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006dae:	4639      	mov	r1, r7
 8006db0:	ec41 0b10 	vmov	d0, r0, r1
 8006db4:	b003      	add	sp, #12
 8006db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db8:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <rint+0x104>)
 8006dba:	4132      	asrs	r2, r6
 8006dbc:	ea01 0702 	and.w	r7, r1, r2
 8006dc0:	4307      	orrs	r7, r0
 8006dc2:	d0f5      	beq.n	8006db0 <rint+0x70>
 8006dc4:	0852      	lsrs	r2, r2, #1
 8006dc6:	4011      	ands	r1, r2
 8006dc8:	430c      	orrs	r4, r1
 8006dca:	d00b      	beq.n	8006de4 <rint+0xa4>
 8006dcc:	ea23 0202 	bic.w	r2, r3, r2
 8006dd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dd4:	2e13      	cmp	r6, #19
 8006dd6:	fa43 f306 	asr.w	r3, r3, r6
 8006dda:	bf0c      	ite	eq
 8006ddc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006de0:	2400      	movne	r4, #0
 8006de2:	4313      	orrs	r3, r2
 8006de4:	4916      	ldr	r1, [pc, #88]	; (8006e40 <rint+0x100>)
 8006de6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006dea:	4622      	mov	r2, r4
 8006dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7f9 fa3c 	bl	8000270 <__adddf3>
 8006df8:	e9cd 0100 	strd	r0, r1, [sp]
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	462b      	mov	r3, r5
 8006e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e04:	f7f9 fa32 	bl	800026c <__aeabi_dsub>
 8006e08:	e7d2      	b.n	8006db0 <rint+0x70>
 8006e0a:	2e33      	cmp	r6, #51	; 0x33
 8006e0c:	dd07      	ble.n	8006e1e <rint+0xde>
 8006e0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e12:	d1cd      	bne.n	8006db0 <rint+0x70>
 8006e14:	ee10 2a10 	vmov	r2, s0
 8006e18:	f7f9 fa2a 	bl	8000270 <__adddf3>
 8006e1c:	e7c8      	b.n	8006db0 <rint+0x70>
 8006e1e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	40f2      	lsrs	r2, r6
 8006e28:	4210      	tst	r0, r2
 8006e2a:	d0c1      	beq.n	8006db0 <rint+0x70>
 8006e2c:	0852      	lsrs	r2, r2, #1
 8006e2e:	4210      	tst	r0, r2
 8006e30:	bf1f      	itttt	ne
 8006e32:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006e36:	ea20 0202 	bicne.w	r2, r0, r2
 8006e3a:	4134      	asrne	r4, r6
 8006e3c:	4314      	orrne	r4, r2
 8006e3e:	e7d1      	b.n	8006de4 <rint+0xa4>
 8006e40:	080071b8 	.word	0x080071b8
 8006e44:	000fffff 	.word	0x000fffff

08006e48 <scalbn>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	ec55 4b10 	vmov	r4, r5, d0
 8006e4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006e52:	4606      	mov	r6, r0
 8006e54:	462b      	mov	r3, r5
 8006e56:	b9aa      	cbnz	r2, 8006e84 <scalbn+0x3c>
 8006e58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e5c:	4323      	orrs	r3, r4
 8006e5e:	d03b      	beq.n	8006ed8 <scalbn+0x90>
 8006e60:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <scalbn+0xe0>)
 8006e62:	4629      	mov	r1, r5
 8006e64:	2200      	movs	r2, #0
 8006e66:	ee10 0a10 	vmov	r0, s0
 8006e6a:	f7f9 fbb7 	bl	80005dc <__aeabi_dmul>
 8006e6e:	4b2f      	ldr	r3, [pc, #188]	; (8006f2c <scalbn+0xe4>)
 8006e70:	429e      	cmp	r6, r3
 8006e72:	4604      	mov	r4, r0
 8006e74:	460d      	mov	r5, r1
 8006e76:	da12      	bge.n	8006e9e <scalbn+0x56>
 8006e78:	a327      	add	r3, pc, #156	; (adr r3, 8006f18 <scalbn+0xd0>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 fbad 	bl	80005dc <__aeabi_dmul>
 8006e82:	e009      	b.n	8006e98 <scalbn+0x50>
 8006e84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006e88:	428a      	cmp	r2, r1
 8006e8a:	d10c      	bne.n	8006ea6 <scalbn+0x5e>
 8006e8c:	ee10 2a10 	vmov	r2, s0
 8006e90:	4620      	mov	r0, r4
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7f9 f9ec 	bl	8000270 <__adddf3>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	e01c      	b.n	8006ed8 <scalbn+0x90>
 8006e9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	3a36      	subs	r2, #54	; 0x36
 8006ea6:	4432      	add	r2, r6
 8006ea8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006eac:	428a      	cmp	r2, r1
 8006eae:	dd0b      	ble.n	8006ec8 <scalbn+0x80>
 8006eb0:	ec45 4b11 	vmov	d1, r4, r5
 8006eb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006f20 <scalbn+0xd8>
 8006eb8:	f000 f83c 	bl	8006f34 <copysign>
 8006ebc:	a318      	add	r3, pc, #96	; (adr r3, 8006f20 <scalbn+0xd8>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	ec51 0b10 	vmov	r0, r1, d0
 8006ec6:	e7da      	b.n	8006e7e <scalbn+0x36>
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	dd08      	ble.n	8006ede <scalbn+0x96>
 8006ecc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ed0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ed4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ed8:	ec45 4b10 	vmov	d0, r4, r5
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
 8006ede:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ee2:	da0d      	bge.n	8006f00 <scalbn+0xb8>
 8006ee4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ee8:	429e      	cmp	r6, r3
 8006eea:	ec45 4b11 	vmov	d1, r4, r5
 8006eee:	dce1      	bgt.n	8006eb4 <scalbn+0x6c>
 8006ef0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006f18 <scalbn+0xd0>
 8006ef4:	f000 f81e 	bl	8006f34 <copysign>
 8006ef8:	a307      	add	r3, pc, #28	; (adr r3, 8006f18 <scalbn+0xd0>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	e7e0      	b.n	8006ec2 <scalbn+0x7a>
 8006f00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f04:	3236      	adds	r2, #54	; 0x36
 8006f06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	2200      	movs	r2, #0
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <scalbn+0xe8>)
 8006f16:	e7b2      	b.n	8006e7e <scalbn+0x36>
 8006f18:	c2f8f359 	.word	0xc2f8f359
 8006f1c:	01a56e1f 	.word	0x01a56e1f
 8006f20:	8800759c 	.word	0x8800759c
 8006f24:	7e37e43c 	.word	0x7e37e43c
 8006f28:	43500000 	.word	0x43500000
 8006f2c:	ffff3cb0 	.word	0xffff3cb0
 8006f30:	3c900000 	.word	0x3c900000

08006f34 <copysign>:
 8006f34:	ec51 0b10 	vmov	r0, r1, d0
 8006f38:	ee11 0a90 	vmov	r0, s3
 8006f3c:	ee10 2a10 	vmov	r2, s0
 8006f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006f48:	ea41 0300 	orr.w	r3, r1, r0
 8006f4c:	ec43 2b10 	vmov	d0, r2, r3
 8006f50:	4770      	bx	lr
	...

08006f54 <_init>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr

08006f60 <_fini>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr
