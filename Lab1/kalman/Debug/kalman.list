
kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d3c  08003d3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d44  08003d44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003d58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003d58  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000baf3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000f0f1  00000000  00000000  0002bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001c06  00000000  00000000  0003ac20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f28  00000000  00000000  0003c828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00107663  00000000  00000000  0003d750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000e20  00000000  00000000  00144db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002a064  00000000  00000000  00145bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016fc3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa4  00000000  00000000  0016fcb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003b20 	.word	0x08003b20

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003b20 	.word	0x08003b20

080001fc <kalman_update>:
.text
.syntax unified
.global kalman_update

kalman_update:
	STMDB SP!, {R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,LR}	//push all registers to the stack on entering subroutine
 80001fc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	MOV R2, R0											//make a copy of address of struct's starting point in R2
 8000200:	4602      	mov	r2, r0
	VLDR S1, [R2]										//S1 contains kalman_filtre.q
 8000202:	edd2 0a00 	vldr	s1, [r2]
	ADD R2, R2, #4										//increment struct pointer
 8000206:	f102 0204 	add.w	r2, r2, #4
	VLDR S2, [R2]										//S2 contains kalman_filtre.r
 800020a:	ed92 1a00 	vldr	s2, [r2]
	ADD R2, R2, #4										//incrment struct pointer
 800020e:	f102 0204 	add.w	r2, r2, #4
	VLDR S3, [R2]										//S3 contains kalman_filtre.x
 8000212:	edd2 1a00 	vldr	s3, [r2]
	ADD R2, R2, #4										//increment struct pointer
 8000216:	f102 0204 	add.w	r2, r2, #4
	VLDR S4, [R2]										//S4 contains kalman_filtre.p
 800021a:	ed92 2a00 	vldr	s4, [r2]
	ADD R2, R2, #4										//increment struct pointer
 800021e:	f102 0204 	add.w	r2, r2, #4
	VLDR S5, [R2]										//S5 contains kalman_filtre.k
 8000222:	edd2 2a00 	vldr	s5, [r2]
	VADD.f32 S4, S4, S1									//p=p+q
 8000226:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.f32 S6, S4, S2									//S6=p+r
 800022a:	ee32 3a01 	vadd.f32	s6, s4, s2
	VDIV.f32 S5, S4, S6									//k=p/S6=p/(p+r)
 800022e:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.f32 S6, S0, S3									//S6=measurement-x
 8000232:	ee30 3a61 	vsub.f32	s6, s0, s3
	VMUL.f32 S6, S6, S5									//S6=k*(S6)=k*(measurment-x)
 8000236:	ee23 3a22 	vmul.f32	s6, s6, s5
	VADD.f32 S3, S3, S6									//x=x+S6=x+k*(measurement-x)
 800023a:	ee71 1a83 	vadd.f32	s3, s3, s6
	VMOV.f32 S7, #1.0									//move float 1.0 into S7
 800023e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	VSUB.f32 S6, S7, S5									//S6=1-k
 8000242:	ee33 3ae2 	vsub.f32	s6, s7, s5
	VMUL.f32 S4, S6, S4									//p=S6*p=(1-k)*p
 8000246:	ee23 2a02 	vmul.f32	s4, s6, s4
	//VSTR S1, [R0]										//store updated q back to first position in struct
	//VSTR S2, [R0, #4]									//store updated r back to second position in struct
	VSTR S3, [R0, #8]									//store updated x back to third position in struct
 800024a:	edc0 1a02 	vstr	s3, [r0, #8]
	VSTR S4, [R0, #16]									//store updated p back to fourth position in struct
 800024e:	ed80 2a04 	vstr	s4, [r0, #16]
	VSTR S5, [R0, #20]									//store updated k back to fifth position in struct
 8000252:	edc0 2a05 	vstr	s5, [r0, #20]
	VMOV.f32 S0, S3										//return x
 8000256:	eeb0 0a61 	vmov.f32	s0, s3
	//ADD R0, R0, #8										//return address of x
	LDMIA SP!, {R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,LR} //pop the original values back from the stack
 800025a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	BX LR	 											//branch back to the point in the loop in link register
 800025e:	4770      	bx	lr

08000260 <__aeabi_uldivmod>:
 8000260:	b953      	cbnz	r3, 8000278 <__aeabi_uldivmod+0x18>
 8000262:	b94a      	cbnz	r2, 8000278 <__aeabi_uldivmod+0x18>
 8000264:	2900      	cmp	r1, #0
 8000266:	bf08      	it	eq
 8000268:	2800      	cmpeq	r0, #0
 800026a:	bf1c      	itt	ne
 800026c:	f04f 31ff 	movne.w	r1, #4294967295
 8000270:	f04f 30ff 	movne.w	r0, #4294967295
 8000274:	f000 b972 	b.w	800055c <__aeabi_idiv0>
 8000278:	f1ad 0c08 	sub.w	ip, sp, #8
 800027c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000280:	f000 f806 	bl	8000290 <__udivmoddi4>
 8000284:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800028c:	b004      	add	sp, #16
 800028e:	4770      	bx	lr

08000290 <__udivmoddi4>:
 8000290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000294:	9e08      	ldr	r6, [sp, #32]
 8000296:	4604      	mov	r4, r0
 8000298:	4688      	mov	r8, r1
 800029a:	2b00      	cmp	r3, #0
 800029c:	d14b      	bne.n	8000336 <__udivmoddi4+0xa6>
 800029e:	428a      	cmp	r2, r1
 80002a0:	4615      	mov	r5, r2
 80002a2:	d967      	bls.n	8000374 <__udivmoddi4+0xe4>
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	b14a      	cbz	r2, 80002be <__udivmoddi4+0x2e>
 80002aa:	f1c2 0720 	rsb	r7, r2, #32
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	fa20 f707 	lsr.w	r7, r0, r7
 80002b6:	4095      	lsls	r5, r2
 80002b8:	ea47 0803 	orr.w	r8, r7, r3
 80002bc:	4094      	lsls	r4, r2
 80002be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002c8:	fa1f fc85 	uxth.w	ip, r5
 80002cc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d4:	fb07 f10c 	mul.w	r1, r7, ip
 80002d8:	4299      	cmp	r1, r3
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x60>
 80002dc:	18eb      	adds	r3, r5, r3
 80002de:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e2:	f080 811b 	bcs.w	800051c <__udivmoddi4+0x28c>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 8118 	bls.w	800051c <__udivmoddi4+0x28c>
 80002ec:	3f02      	subs	r7, #2
 80002ee:	442b      	add	r3, r5
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 fc0c 	mul.w	ip, r0, ip
 8000304:	45a4      	cmp	ip, r4
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x8c>
 8000308:	192c      	adds	r4, r5, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	f080 8107 	bcs.w	8000520 <__udivmoddi4+0x290>
 8000312:	45a4      	cmp	ip, r4
 8000314:	f240 8104 	bls.w	8000520 <__udivmoddi4+0x290>
 8000318:	3802      	subs	r0, #2
 800031a:	442c      	add	r4, r5
 800031c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000320:	eba4 040c 	sub.w	r4, r4, ip
 8000324:	2700      	movs	r7, #0
 8000326:	b11e      	cbz	r6, 8000330 <__udivmoddi4+0xa0>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c6 4300 	strd	r4, r3, [r6]
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xbe>
 800033a:	2e00      	cmp	r6, #0
 800033c:	f000 80eb 	beq.w	8000516 <__udivmoddi4+0x286>
 8000340:	2700      	movs	r7, #0
 8000342:	e9c6 0100 	strd	r0, r1, [r6]
 8000346:	4638      	mov	r0, r7
 8000348:	4639      	mov	r1, r7
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f783 	clz	r7, r3
 8000352:	2f00      	cmp	r7, #0
 8000354:	d147      	bne.n	80003e6 <__udivmoddi4+0x156>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd0>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80fa 	bhi.w	8000554 <__udivmoddi4+0x2c4>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	4698      	mov	r8, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa0>
 800036e:	e9c6 4800 	strd	r4, r8, [r6]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa0>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xe8>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 808f 	bne.w	80004a0 <__udivmoddi4+0x210>
 8000382:	1b49      	subs	r1, r1, r5
 8000384:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000388:	fa1f f885 	uxth.w	r8, r5
 800038c:	2701      	movs	r7, #1
 800038e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fb0e 111c 	mls	r1, lr, ip, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb08 f10c 	mul.w	r1, r8, ip
 80003a0:	4299      	cmp	r1, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x124>
 80003a4:	18eb      	adds	r3, r5, r3
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x122>
 80003ac:	4299      	cmp	r1, r3
 80003ae:	f200 80cd 	bhi.w	800054c <__udivmoddi4+0x2bc>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x14c>
 80003cc:	192c      	adds	r4, r5, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x14a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80b6 	bhi.w	8000546 <__udivmoddi4+0x2b6>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e79f      	b.n	8000326 <__udivmoddi4+0x96>
 80003e6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ea:	40bb      	lsls	r3, r7
 80003ec:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f4:	fa01 f407 	lsl.w	r4, r1, r7
 80003f8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003fc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000400:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000404:	4325      	orrs	r5, r4
 8000406:	fbb3 f9f8 	udiv	r9, r3, r8
 800040a:	0c2c      	lsrs	r4, r5, #16
 800040c:	fb08 3319 	mls	r3, r8, r9, r3
 8000410:	fa1f fa8e 	uxth.w	sl, lr
 8000414:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000418:	fb09 f40a 	mul.w	r4, r9, sl
 800041c:	429c      	cmp	r4, r3
 800041e:	fa02 f207 	lsl.w	r2, r2, r7
 8000422:	fa00 f107 	lsl.w	r1, r0, r7
 8000426:	d90b      	bls.n	8000440 <__udivmoddi4+0x1b0>
 8000428:	eb1e 0303 	adds.w	r3, lr, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	f080 8087 	bcs.w	8000542 <__udivmoddi4+0x2b2>
 8000434:	429c      	cmp	r4, r3
 8000436:	f240 8084 	bls.w	8000542 <__udivmoddi4+0x2b2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4473      	add	r3, lr
 8000440:	1b1b      	subs	r3, r3, r4
 8000442:	b2ad      	uxth	r5, r5
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000450:	fb00 fa0a 	mul.w	sl, r0, sl
 8000454:	45a2      	cmp	sl, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x1da>
 8000458:	eb1e 0404 	adds.w	r4, lr, r4
 800045c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000460:	d26b      	bcs.n	800053a <__udivmoddi4+0x2aa>
 8000462:	45a2      	cmp	sl, r4
 8000464:	d969      	bls.n	800053a <__udivmoddi4+0x2aa>
 8000466:	3802      	subs	r0, #2
 8000468:	4474      	add	r4, lr
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	eba4 040a 	sub.w	r4, r4, sl
 8000476:	454c      	cmp	r4, r9
 8000478:	46c2      	mov	sl, r8
 800047a:	464b      	mov	r3, r9
 800047c:	d354      	bcc.n	8000528 <__udivmoddi4+0x298>
 800047e:	d051      	beq.n	8000524 <__udivmoddi4+0x294>
 8000480:	2e00      	cmp	r6, #0
 8000482:	d069      	beq.n	8000558 <__udivmoddi4+0x2c8>
 8000484:	ebb1 050a 	subs.w	r5, r1, sl
 8000488:	eb64 0403 	sbc.w	r4, r4, r3
 800048c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000490:	40fd      	lsrs	r5, r7
 8000492:	40fc      	lsrs	r4, r7
 8000494:	ea4c 0505 	orr.w	r5, ip, r5
 8000498:	e9c6 5400 	strd	r5, r4, [r6]
 800049c:	2700      	movs	r7, #0
 800049e:	e747      	b.n	8000330 <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f703 	lsr.w	r7, r0, r3
 80004a8:	4095      	lsls	r5, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	fa21 f303 	lsr.w	r3, r1, r3
 80004b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b6:	4338      	orrs	r0, r7
 80004b8:	0c01      	lsrs	r1, r0, #16
 80004ba:	fbb3 f7fe 	udiv	r7, r3, lr
 80004be:	fa1f f885 	uxth.w	r8, r5
 80004c2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb07 f308 	mul.w	r3, r7, r8
 80004ce:	428b      	cmp	r3, r1
 80004d0:	fa04 f402 	lsl.w	r4, r4, r2
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x256>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004dc:	d22f      	bcs.n	800053e <__udivmoddi4+0x2ae>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d92d      	bls.n	800053e <__udivmoddi4+0x2ae>
 80004e2:	3f02      	subs	r7, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1acb      	subs	r3, r1, r3
 80004e8:	b281      	uxth	r1, r0
 80004ea:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ee:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f6:	fb00 f308 	mul.w	r3, r0, r8
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x27e>
 80004fe:	1869      	adds	r1, r5, r1
 8000500:	f100 3cff 	add.w	ip, r0, #4294967295
 8000504:	d217      	bcs.n	8000536 <__udivmoddi4+0x2a6>
 8000506:	428b      	cmp	r3, r1
 8000508:	d915      	bls.n	8000536 <__udivmoddi4+0x2a6>
 800050a:	3802      	subs	r0, #2
 800050c:	4429      	add	r1, r5
 800050e:	1ac9      	subs	r1, r1, r3
 8000510:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000514:	e73b      	b.n	800038e <__udivmoddi4+0xfe>
 8000516:	4637      	mov	r7, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e709      	b.n	8000330 <__udivmoddi4+0xa0>
 800051c:	4607      	mov	r7, r0
 800051e:	e6e7      	b.n	80002f0 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fb      	b.n	800031c <__udivmoddi4+0x8c>
 8000524:	4541      	cmp	r1, r8
 8000526:	d2ab      	bcs.n	8000480 <__udivmoddi4+0x1f0>
 8000528:	ebb8 0a02 	subs.w	sl, r8, r2
 800052c:	eb69 020e 	sbc.w	r2, r9, lr
 8000530:	3801      	subs	r0, #1
 8000532:	4613      	mov	r3, r2
 8000534:	e7a4      	b.n	8000480 <__udivmoddi4+0x1f0>
 8000536:	4660      	mov	r0, ip
 8000538:	e7e9      	b.n	800050e <__udivmoddi4+0x27e>
 800053a:	4618      	mov	r0, r3
 800053c:	e795      	b.n	800046a <__udivmoddi4+0x1da>
 800053e:	4667      	mov	r7, ip
 8000540:	e7d1      	b.n	80004e6 <__udivmoddi4+0x256>
 8000542:	4681      	mov	r9, r0
 8000544:	e77c      	b.n	8000440 <__udivmoddi4+0x1b0>
 8000546:	3802      	subs	r0, #2
 8000548:	442c      	add	r4, r5
 800054a:	e747      	b.n	80003dc <__udivmoddi4+0x14c>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	442b      	add	r3, r5
 8000552:	e72f      	b.n	80003b4 <__udivmoddi4+0x124>
 8000554:	4638      	mov	r0, r7
 8000556:	e708      	b.n	800036a <__udivmoddi4+0xda>
 8000558:	4637      	mov	r7, r6
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0xa0>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <create_filtre>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
struct kalman_filtre create_filtre (float q, float r, float x, float p, float k){
 8000560:	b4b0      	push	{r4, r5, r7}
 8000562:	b08d      	sub	sp, #52	; 0x34
 8000564:	af00      	add	r7, sp, #0
 8000566:	6178      	str	r0, [r7, #20]
 8000568:	ed87 0a04 	vstr	s0, [r7, #16]
 800056c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000570:	ed87 1a02 	vstr	s2, [r7, #8]
 8000574:	edc7 1a01 	vstr	s3, [r7, #4]
 8000578:	ed87 2a00 	vstr	s4, [r7]
	struct kalman_filtre my_filtre;
	my_filtre.q = q;
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	61fb      	str	r3, [r7, #28]
	my_filtre.r = r;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	623b      	str	r3, [r7, #32]
	my_filtre.x = x;
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
	my_filtre.p = p;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
	my_filtre.k = k;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c

	return my_filtre;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	461d      	mov	r5, r3
 8000594:	f107 041c 	add.w	r4, r7, #28
 8000598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800059a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	602b      	str	r3, [r5, #0]
}
 80005a0:	6978      	ldr	r0, [r7, #20]
 80005a2:	3734      	adds	r7, #52	; 0x34
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bcb0      	pop	{r4, r5, r7}
 80005a8:	4770      	bx	lr
	...

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q = 1;
 80005b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
	float r = 1;
 80005b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
	float x = 0;
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
	float p = 0;
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
	float k = 0;
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]

	struct kalman_filtre test = create_filtre(q, r, x, p, k);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	ed97 2a06 	vldr	s4, [r7, #24]
 80005d6:	edd7 1a07 	vldr	s3, [r7, #28]
 80005da:	ed97 1a08 	vldr	s2, [r7, #32]
 80005de:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80005e2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffba 	bl	8000560 <create_filtre>

	//kalman_update(&test, 2.0);

	for(int i=0; i<101; i++){
 80005ec:	2300      	movs	r3, #0
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005f0:	e00e      	b.n	8000610 <main+0x64>
		kalman_update(&test, TEST_ARRAY[i]);
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <main+0x80>)
 80005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	edd3 7a00 	vldr	s15, [r3]
 8000600:	eeb0 0a67 	vmov.f32	s0, s15
 8000604:	4608      	mov	r0, r1
 8000606:	f7ff fdf9 	bl	80001fc <kalman_update>
	for(int i=0; i<101; i++){
 800060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060c:	3301      	adds	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000612:	2b64      	cmp	r3, #100	; 0x64
 8000614:	dded      	ble.n	80005f2 <main+0x46>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fa52 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f809 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f917 	bl	8000850 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000622:	f000 f87b 	bl	800071c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000626:	f000 f8c7 	bl	80007b8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0x7e>
 800062c:	08003b48 	.word	0x08003b48

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0bc      	sub	sp, #240	; 0xf0
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fa66 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2294      	movs	r2, #148	; 0x94
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fa58 	bl	8003b10 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fd39 	bl	80010d8 <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800066c:	f000 f914 	bl	8000898 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000670:	2310      	movs	r3, #16
 8000672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000682:	2360      	movs	r3, #96	; 0x60
 8000684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800068e:	2301      	movs	r3, #1
 8000690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800069a:	233c      	movs	r3, #60	; 0x3c
 800069c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fdb2 	bl	8001220 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c2:	f000 f8e9 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9be 	bl	8001a6c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f6:	f000 f8cf 	bl	8000898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006fe:	2300      	movs	r3, #0
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fc61 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000710:	f000 f8c2 	bl	8000898 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	37f0      	adds	r7, #240	; 0xf0
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_TIM2_Init+0x98>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000744:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000748:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM2_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_TIM2_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000766:	f002 f939 	bl	80029dc <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000770:	f000 f892 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000782:	f002 f982 	bl	8002a8a <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800078c:	f000 f884 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_TIM2_Init+0x98>)
 800079e:	f002 fb61 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 f876 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000b4 	.word	0x200000b4

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <MX_USART1_UART_Init+0x94>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x90>)
 8000802:	f002 fbb7 	bl	8002f74 <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 f844 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_USART1_UART_Init+0x90>)
 8000814:	f003 f873 	bl	80038fe <HAL_UARTEx_SetTxFifoThreshold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800081e:	f000 f83b 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_USART1_UART_Init+0x90>)
 8000826:	f003 f8a8 	bl	800397a <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 f832 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_USART1_UART_Init+0x90>)
 8000836:	f003 f829 	bl	800388c <HAL_UARTEx_DisableFifoMode>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f82a 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000028 	.word	0x20000028
 800084c:	40013800 	.word	0x40013800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0x44>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <MX_GPIO_Init+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_GPIO_Init+0x44>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_GPIO_Init+0x44>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <MX_GPIO_Init+0x44>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_GPIO_Init+0x44>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089e:	e7fe      	b.n	800089e <Error_Handler+0x6>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_TIM_Base_MspInit+0x38>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_TIM_Base_MspInit+0x38>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_TIM_Base_MspInit+0x38>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x80>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d129      	bne.n	800099a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x84>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_UART_MspInit+0x84>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000988:	2307      	movs	r3, #7
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f000 f9ed 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8b6 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <SystemInit+0x64>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <SystemInit+0x64>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <SystemInit+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <SystemInit+0x68>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <SystemInit+0x68>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <SystemInit+0x68>)
 8000a2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <SystemInit+0x68>)
 8000a38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <SystemInit+0x68>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <SystemInit+0x68>)
 8000a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <SystemInit+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x64>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	40021000 	.word	0x40021000

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffc6 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a76:	e003      	b.n	8000a80 <LoopCopyDataInit>

08000a78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a7e:	3104      	adds	r1, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a80:	480a      	ldr	r0, [pc, #40]	; (8000aac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a88:	d3f6      	bcc.n	8000a78 <CopyDataInit>
	ldr	r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a8c:	e002      	b.n	8000a94 <LoopFillZerobss>

08000a8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a90:	f842 3b04 	str.w	r3, [r2], #4

08000a94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LoopForever+0x16>)
	cmp	r2, r3
 8000a96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a98:	d3f9      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 f815 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fd85 	bl	80005ac <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000aa8:	08003d4c 	.word	0x08003d4c
	ldr	r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ab0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ab8:	20000104 	.word	0x20000104

08000abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f91f 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff fede 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_InitTick+0x6c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d023      	beq.n	8000b4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_InitTick+0x70>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_InitTick+0x6c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f91d 	bl	8000d5a <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10f      	bne.n	8000b46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d809      	bhi.n	8000b40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f8f5 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_InitTick+0x74>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e004      	b.n	8000b50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e001      	b.n	8000b50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000100 	.word	0x20000100

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000100 	.word	0x20000100

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5c 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e166      	b.n	8001052 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8158 	beq.w	800104c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d00b      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db0:	2b11      	cmp	r3, #17
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0xea>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 80b2 	beq.w	800104c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b61      	ldr	r3, [pc, #388]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	4a60      	ldr	r2, [pc, #384]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef4:	4b5e      	ldr	r3, [pc, #376]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a5c      	ldr	r2, [pc, #368]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2a:	d02b      	beq.n	8000f84 <HAL_GPIO_Init+0x210>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x304>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d025      	beq.n	8000f80 <HAL_GPIO_Init+0x20c>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a51      	ldr	r2, [pc, #324]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d01f      	beq.n	8000f7c <HAL_GPIO_Init+0x208>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d019      	beq.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_GPIO_Init+0x200>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00d      	beq.n	8000f70 <HAL_GPIO_Init+0x1fc>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4d      	ldr	r2, [pc, #308]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_GPIO_Init+0x1f4>
 8000f64:	2307      	movs	r3, #7
 8000f66:	e00e      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f68:	2308      	movs	r3, #8
 8000f6a:	e00c      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	e00a      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f70:	2305      	movs	r3, #5
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc8:	4a32      	ldr	r2, [pc, #200]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_GPIO_Init+0x320>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_GPIO_Init+0x320>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_GPIO_Init+0x320>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f ae91 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	48001400 	.word	0x48001400
 800108c:	48001800 	.word	0x48001800
 8001090:	48001c00 	.word	0x48001c00
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a8:	d102      	bne.n	80010b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	e00b      	b.n	80010c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010be:	d102      	bne.n	80010c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	e000      	b.n	80010c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80010c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d141      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d131      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f4:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fa:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110c:	4a41      	ldr	r2, [pc, #260]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2232      	movs	r2, #50	; 0x32
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	4a3f      	ldr	r2, [pc, #252]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0c9b      	lsrs	r3, r3, #18
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112a:	e002      	b.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3b01      	subs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113e:	d102      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f2      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001152:	d158      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e057      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800115e:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001168:	e04d      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001170:	d141      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d131      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2232      	movs	r2, #50	; 0x32
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b6:	e002      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d102      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f2      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011de:	d112      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e011      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011f4:	e007      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001204:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40007000 	.word	0x40007000
 8001218:	20000000 	.word	0x20000000
 800121c:	431bde83 	.word	0x431bde83

08001220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f000 bc16 	b.w	8001a60 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001234:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123e:	4b9e      	ldr	r3, [pc, #632]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80e4 	beq.w	800141e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_RCC_OscConfig+0x4c>
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	f040 808b 	bne.w	800137a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b01      	cmp	r3, #1
 8001268:	f040 8087 	bne.w	800137a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800126c:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_OscConfig+0x64>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e3ed      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <HAL_RCC_OscConfig+0x7e>
 8001294:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800129c:	e005      	b.n	80012aa <HAL_RCC_OscConfig+0x8a>
 800129e:	4b86      	ldr	r3, [pc, #536]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d223      	bcs.n	80012f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fdc8 	bl	8001e48 <RCC_SetFlashLatencyFromMSIRange>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e3ce      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b7d      	ldr	r3, [pc, #500]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7c      	ldr	r2, [pc, #496]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4977      	ldr	r1, [pc, #476]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4972      	ldr	r1, [pc, #456]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e025      	b.n	8001342 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	496a      	ldr	r1, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001314:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4965      	ldr	r1, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd88 	bl	8001e48 <RCC_SetFlashLatencyFromMSIRange>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e38e      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001342:	f000 fcbf 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001346:	4601      	mov	r1, r0
 8001348:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <HAL_RCC_OscConfig+0x29c>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa21 f303 	lsr.w	r3, r1, r3
 800135e:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x2a0>)
 8001360:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_RCC_OscConfig+0x2a4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fbc2 	bl	8000af0 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d052      	beq.n	800141c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	e372      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d032      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138e:	f7ff fbff 	bl	8000b90 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001396:	f7ff fbfb 	bl	8000b90 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e35b      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a3f      	ldr	r2, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	493a      	ldr	r1, [pc, #232]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
 80013e6:	e01a      	b.n	800141e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbcc 	bl	8000b90 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fc:	f7ff fbc8 	bl	8000b90 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e328      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1dc>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d073      	beq.n	8001512 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x21c>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d10e      	bne.n	8001454 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d063      	beq.n	8001510 <HAL_RCC_OscConfig+0x2f0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d15f      	bne.n	8001510 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e305      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x24c>
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0x288>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x270>
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x288>
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_RCC_OscConfig+0x298>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb6e 	bl	8000b90 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e010      	b.n	80014da <HAL_RCC_OscConfig+0x2ba>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08003cdc 	.word	0x08003cdc
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb62 	bl	8000b90 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2c2      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	4baf      	ldr	r3, [pc, #700]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2a8>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb52 	bl	8000b90 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb4e 	bl	8000b90 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e2ae      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001502:	4ba5      	ldr	r3, [pc, #660]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2d0>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d060      	beq.n	80015e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x310>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d119      	bne.n	800155e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d116      	bne.n	800155e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x328>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e28b      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b93      	ldr	r3, [pc, #588]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	4990      	ldr	r1, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155c:	e040      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d023      	beq.n	80015ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001566:	4b8c      	ldr	r3, [pc, #560]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a8b      	ldr	r2, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fb0d 	bl	8000b90 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fb09 	bl	8000b90 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e269      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	497c      	ldr	r1, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e018      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b7a      	ldr	r3, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a79      	ldr	r2, [pc, #484]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fae9 	bl	8000b90 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fae5 	bl	8000b90 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e245      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03c      	beq.n	8001666 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fa:	4a67      	ldr	r2, [pc, #412]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fac4 	bl	8000b90 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fac0 	bl	8000b90 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e220      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ef      	beq.n	800160c <HAL_RCC_OscConfig+0x3ec>
 800162c:	e01b      	b.n	8001666 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff faa7 	bl	8000b90 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff faa3 	bl	8000b90 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e203      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ef      	bne.n	8001646 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a6 	beq.w	80017c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	4b44      	ldr	r3, [pc, #272]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	4a43      	ldr	r2, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6593      	str	r3, [r2, #88]	; 0x58
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169c:	2301      	movs	r3, #1
 800169e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_OscConfig+0x57c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d118      	bne.n	80016de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_OscConfig+0x57c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	; (800179c <HAL_RCC_OscConfig+0x57c>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fa6a 	bl	8000b90 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff fa66 	bl	8000b90 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1c6      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_RCC_OscConfig+0x57c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4d8>
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	4a2a      	ldr	r2, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f6:	e024      	b.n	8001742 <HAL_RCC_OscConfig+0x522>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d110      	bne.n	8001722 <HAL_RCC_OscConfig+0x502>
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001720:	e00f      	b.n	8001742 <HAL_RCC_OscConfig+0x522>
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d016      	beq.n	8001778 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fa21 	bl	8000b90 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fa1d 	bl	8000b90 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e17b      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x578>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ed      	beq.n	8001752 <HAL_RCC_OscConfig+0x532>
 8001776:	e01a      	b.n	80017ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fa0a 	bl	8000b90 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fa06 	bl	8000b90 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d906      	bls.n	80017a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e164      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a0:	4ba8      	ldr	r3, [pc, #672]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1e8      	bne.n	8001780 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4ba3      	ldr	r3, [pc, #652]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	4aa2      	ldr	r2, [pc, #648]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80017ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d03c      	beq.n	8001846 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01c      	beq.n	800180e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017d4:	4b9b      	ldr	r3, [pc, #620]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80017d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017da:	4a9a      	ldr	r2, [pc, #616]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff f9d4 	bl	8000b90 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ec:	f7ff f9d0 	bl	8000b90 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e130      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ef      	beq.n	80017ec <HAL_RCC_OscConfig+0x5cc>
 800180c:	e01b      	b.n	8001846 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800180e:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001814:	4a8b      	ldr	r2, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff f9b7 	bl	8000b90 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001826:	f7ff f9b3 	bl	8000b90 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e113      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001838:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 800183a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ef      	bne.n	8001826 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8107 	beq.w	8001a5e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 80cb 	bne.w	80019f0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	429a      	cmp	r2, r3
 800186c:	d12c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	3b01      	subs	r3, #1
 800187a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d123      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d11b      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d113      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d109      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d06d      	beq.n	80019a4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d068      	beq.n	80019a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f6:	f7ff f94b 	bl	8000b90 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f947 	bl	8000b90 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0a7      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x828>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800192c:	3a01      	subs	r2, #1
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001936:	0212      	lsls	r2, r2, #8
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800193e:	0852      	lsrs	r2, r2, #1
 8001940:	3a01      	subs	r2, #1
 8001942:	0552      	lsls	r2, r2, #21
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	0652      	lsls	r2, r2, #25
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001956:	06d2      	lsls	r2, r2, #27
 8001958:	430a      	orrs	r2, r1
 800195a:	493a      	ldr	r1, [pc, #232]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a34      	ldr	r2, [pc, #208]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001978:	f7ff f90a 	bl	8000b90 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f906 	bl	8000b90 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e066      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199e:	e05e      	b.n	8001a5e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e05d      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d156      	bne.n	8001a5e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c8:	f7ff f8e2 	bl	8000b90 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8de 	bl	8000b90 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e03e      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x7b0>
 80019ee:	e036      	b.n	8001a5e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d031      	beq.n	8001a5a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 80019fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001a14:	f023 0303 	bic.w	r3, r3, #3
 8001a18:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_RCC_OscConfig+0x824>)
 8001a20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f8b1 	bl	8000b90 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e00c      	b.n	8001a4c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f8ad 	bl	8000b90 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d905      	bls.n	8001a4c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e00d      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
 8001a44:	40021000 	.word	0x40021000
 8001a48:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x848>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ec      	bne.n	8001a32 <HAL_RCC_OscConfig+0x812>
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e10f      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b86      	ldr	r3, [pc, #536]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 020f 	bic.w	r2, r3, #15
 8001a9a:	4984      	ldr	r1, [pc, #528]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0f7      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8089 	beq.w	8001bd4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d133      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0e4      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ada:	f000 fa0f 	bl	8001efc <RCC_GetSysClockFreqFromPLLSource>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <HAL_RCC_ClockConfig+0x248>)
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d955      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afa:	4a6d      	ldr	r2, [pc, #436]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e044      	b.n	8001b92 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03e      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x126>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13a      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1c:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b24:	4a62      	ldr	r2, [pc, #392]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e02f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0ac      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0a0      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e098      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b72:	f000 f8a7 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCC_ClockConfig+0x248>)
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d909      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b86:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4944      	ldr	r1, [pc, #272]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba4:	f7fe fff4 	bl	8000b90 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7fe fff0 	bl	8000b90 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e070      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b80      	cmp	r3, #128	; 0x80
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c04:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d210      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 020f 	bic.w	r2, r3, #15
 8001c1c:	4923      	ldr	r1, [pc, #140]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_ClockConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e036      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4910      	ldr	r1, [pc, #64]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c74:	f000 f826 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c78:	4601      	mov	r1, r0
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_RCC_ClockConfig+0x24c>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa21 f303 	lsr.w	r3, r1, r3
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x250>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x254>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff29 	bl	8000af0 <HAL_InitTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40022000 	.word	0x40022000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	04c4b400 	.word	0x04c4b400
 8001cb8:	08003cdc 	.word	0x08003cdc
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11e      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d20:	4a2a      	ldr	r2, [pc, #168]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d133      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xaa>
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6a:	617b      	str	r3, [r7, #20]
      break;
 8001d6c:	e005      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	617b      	str	r3, [r7, #20]
      break;
 8001d78:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	3301      	adds	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	fb02 f203 	mul.w	r2, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0e5b      	lsrs	r3, r3, #25
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dba:	69bb      	ldr	r3, [r7, #24]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08003cf4 	.word	0x08003cf4
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200

08001dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08003cec 	.word	0x08003cec

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e20:	f7ff ffda 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e24:	4601      	mov	r1, r0
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08003cec 	.word	0x08003cec

08001e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff f91a 	bl	8001098 <HAL_PWREx_GetVoltageRange>
 8001e64:	6178      	str	r0, [r7, #20]
 8001e66:	e014      	b.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6593      	str	r3, [r2, #88]	; 0x58
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e80:	f7ff f90a 	bl	8001098 <HAL_PWREx_GetVoltageRange>
 8001e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e98:	d10b      	bne.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
 8001e9e:	d913      	bls.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea4:	d902      	bls.n	8001eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e00d      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e00a      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb6:	d902      	bls.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e004      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b70      	cmp	r3, #112	; 0x70
 8001ec2:	d101      	bne.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 020f 	bic.w	r2, r3, #15
 8001ed0:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40022000 	.word	0x40022000

08001efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d118      	bne.n	8001f44 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e005      	b.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d002      	beq.n	8001f5a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d003      	beq.n	8001f60 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001f58:	e005      	b.n	8001f66 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f5c:	613b      	str	r3, [r7, #16]
    break;
 8001f5e:	e005      	b.n	8001f6c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f62:	613b      	str	r3, [r7, #16]
    break;
 8001f64:	e002      	b.n	8001f6c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	613b      	str	r3, [r7, #16]
    break;
 8001f6a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	fb02 f203 	mul.w	r2, r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	0e5b      	lsrs	r3, r3, #25
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001fac:	683b      	ldr	r3, [r7, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08003cf4 	.word	0x08003cf4
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03d      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d00b      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d804      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d015      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ffc:	e01d      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001ffe:	2b60      	cmp	r3, #96	; 0x60
 8002000:	d01e      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d01c      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002006:	e018      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002008:	4b86      	ldr	r3, [pc, #536]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a85      	ldr	r2, [pc, #532]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002014:	e015      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fafd 	bl	800261c <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3320      	adds	r3, #32
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fbe4 	bl	80027fc <RCCEx_PLLSAI2_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002038:	e003      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	74fb      	strb	r3, [r7, #19]
      break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800204a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800204e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002056:	4973      	ldr	r1, [pc, #460]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800205e:	e001      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d042      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002078:	d00f      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800207a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207e:	d805      	bhi.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d011      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002088:	d017      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xee>
 800208a:	e01f      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x100>
 800208c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002090:	d01f      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d01c      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002098:	e018      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800209a:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4a61      	ldr	r2, [pc, #388]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a6:	e015      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fab4 	bl	800261c <RCCEx_PLLSAI1_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b8:	e00c      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3320      	adds	r3, #32
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fb9b 	bl	80027fc <RCCEx_PLLSAI2_Config>
 80020c6:	4603      	mov	r3, r0
 80020c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ca:	e003      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	74fb      	strb	r3, [r7, #19]
      break;
 80020d0:	e000      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80020d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	494e      	ldr	r1, [pc, #312]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80020f0:	e001      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 809f 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002146:	f7fe fd23 	bl	8000b90 <HAL_GetTick>
 800214a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214c:	e009      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe fd1f 	bl	8000b90 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	74fb      	strb	r3, [r7, #19]
        break;
 8002160:	e005      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ef      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d15b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01f      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	429a      	cmp	r2, r3
 8002190:	d019      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d016      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fcde 	bl	8000b90 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	e00b      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fcda 	bl	8000b90 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d902      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	74fb      	strb	r3, [r7, #19]
            break;
 80021ee:	e006      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ec      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10c      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	74bb      	strb	r3, [r7, #18]
 8002222:	e005      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7c7b      	ldrb	r3, [r7, #17]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4ba0      	ldr	r3, [pc, #640]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4a9f      	ldr	r2, [pc, #636]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224e:	4b9a      	ldr	r3, [pc, #616]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	4996      	ldr	r1, [pc, #600]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f023 020c 	bic.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	498e      	ldr	r1, [pc, #568]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	4985      	ldr	r1, [pc, #532]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	497d      	ldr	r1, [pc, #500]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d6:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	4974      	ldr	r1, [pc, #464]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	496c      	ldr	r1, [pc, #432]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002328:	4963      	ldr	r1, [pc, #396]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234a:	495b      	ldr	r1, [pc, #364]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235e:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	4952      	ldr	r1, [pc, #328]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	494a      	ldr	r1, [pc, #296]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a2:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	4941      	ldr	r1, [pc, #260]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023c4:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	4930      	ldr	r1, [pc, #192]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d106      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002410:	60d3      	str	r3, [r2, #12]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f8f9 	bl	800261c <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d04d      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244c:	d108      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800245e:	e012      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002466:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	d106      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e020      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a6:	d109      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	60d3      	str	r3, [r2, #12]
 80024b4:	e014      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f8a5 	bl	800261c <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d028      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fa:	4947      	ldr	r1, [pc, #284]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250a:	d106      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a41      	ldr	r2, [pc, #260]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	60d3      	str	r3, [r2, #12]
 8002518:	e011      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002522:	d10c      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f876 	bl	800261c <RCCEx_PLLSAI1_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01e      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255a:	492f      	ldr	r1, [pc, #188]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256c:	d10c      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	2102      	movs	r1, #2
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f851 	bl	800261c <RCCEx_PLLSAI1_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800259a:	f023 0204 	bic.w	r2, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a4:	491c      	ldr	r1, [pc, #112]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025be:	f023 0218 	bic.w	r2, r3, #24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	4913      	ldr	r1, [pc, #76]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fe:	d105      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800260c:	7cbb      	ldrb	r3, [r7, #18]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d103      	bne.n	800264e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
       ||
 800264a:	2b00      	cmp	r3, #0
 800264c:	d13f      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e03c      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d00c      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0x5a>
 800265c:	2b03      	cmp	r3, #3
 800265e:	d013      	beq.n	8002688 <RCCEx_PLLSAI1_Config+0x6c>
 8002660:	2b01      	cmp	r3, #1
 8002662:	d120      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002664:	4b61      	ldr	r3, [pc, #388]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11d      	bne.n	80026ac <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e01a      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002686:	e013      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10f      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002694:	4b55      	ldr	r3, [pc, #340]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026a4:	e006      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      break;
 80026aa:	e004      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80026ac:	bf00      	nop
 80026ae:	e002      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80026b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d108      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4948      	ldr	r1, [pc, #288]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 8086 	bne.w	80027e2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a44      	ldr	r2, [pc, #272]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80026dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e2:	f7fe fa55 	bl	8000b90 <HAL_GetTick>
 80026e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e8:	e009      	b.n	80026fe <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ea:	f7fe fa51 	bl	8000b90 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d902      	bls.n	80026fe <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	73fb      	strb	r3, [r7, #15]
        break;
 80026fc:	e005      	b.n	800270a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d168      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002716:	4b35      	ldr	r3, [pc, #212]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <RCCEx_PLLSAI1_Config+0x1d4>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	0211      	lsls	r1, r2, #8
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68d2      	ldr	r2, [r2, #12]
 8002728:	06d2      	lsls	r2, r2, #27
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6852      	ldr	r2, [r2, #4]
 8002730:	3a01      	subs	r2, #1
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	430a      	orrs	r2, r1
 8002736:	492d      	ldr	r1, [pc, #180]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	610b      	str	r3, [r1, #16]
 800273c:	e02d      	b.n	800279a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d115      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6912      	ldr	r2, [r2, #16]
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	3a01      	subs	r2, #1
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	430a      	orrs	r2, r1
 8002768:	4920      	ldr	r1, [pc, #128]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
 800276e:	e014      	b.n	800279a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6952      	ldr	r2, [r2, #20]
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	3a01      	subs	r2, #1
 8002786:	0652      	lsls	r2, r2, #25
 8002788:	4311      	orrs	r1, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6852      	ldr	r2, [r2, #4]
 800278e:	3a01      	subs	r2, #1
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	430a      	orrs	r2, r1
 8002794:	4915      	ldr	r1, [pc, #84]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80027a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe f9f3 	bl	8000b90 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ac:	e009      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ae:	f7fe f9ef 	bl	8000b90 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	73fb      	strb	r3, [r7, #15]
          break;
 80027c0:	e005      	b.n	80027ce <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ef      	beq.n	80027ae <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <RCCEx_PLLSAI1_Config+0x1d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	07ff800f 	.word	0x07ff800f
 80027f4:	ff9f800f 	.word	0xff9f800f
 80027f8:	f9ff800f 	.word	0xf9ff800f

080027fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002816:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d103      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
       ||
 800282a:	2b00      	cmp	r3, #0
 800282c:	d13f      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e03c      	b.n	80028ae <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d00c      	beq.n	8002856 <RCCEx_PLLSAI2_Config+0x5a>
 800283c:	2b03      	cmp	r3, #3
 800283e:	d013      	beq.n	8002868 <RCCEx_PLLSAI2_Config+0x6c>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d120      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11d      	bne.n	800288c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e01a      	b.n	800288c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002866:	e013      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002874:	4b55      	ldr	r3, [pc, #340]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002884:	e006      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
      break;
 800288a:	e004      	b.n	8002896 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800288c:	bf00      	nop
 800288e:	e002      	b.n	8002896 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002894:	bf00      	nop
    }

    if(status == HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f023 0203 	bic.w	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4948      	ldr	r1, [pc, #288]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8086 	bne.w	80029c2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a44      	ldr	r2, [pc, #272]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c2:	f7fe f965 	bl	8000b90 <HAL_GetTick>
 80028c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c8:	e009      	b.n	80028de <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ca:	f7fe f961 	bl	8000b90 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d902      	bls.n	80028de <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	73fb      	strb	r3, [r7, #15]
        break;
 80028dc:	e005      	b.n	80028ea <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d168      	bne.n	80029c2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d113      	bne.n	800291e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f6:	4b35      	ldr	r3, [pc, #212]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <RCCEx_PLLSAI2_Config+0x1d4>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	0211      	lsls	r1, r2, #8
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	06d2      	lsls	r2, r2, #27
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6852      	ldr	r2, [r2, #4]
 8002910:	3a01      	subs	r2, #1
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	430a      	orrs	r2, r1
 8002916:	492d      	ldr	r1, [pc, #180]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	614b      	str	r3, [r1, #20]
 800291c:	e02d      	b.n	800297a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d115      	bne.n	8002950 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6892      	ldr	r2, [r2, #8]
 8002930:	0211      	lsls	r1, r2, #8
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6912      	ldr	r2, [r2, #16]
 8002936:	0852      	lsrs	r2, r2, #1
 8002938:	3a01      	subs	r2, #1
 800293a:	0552      	lsls	r2, r2, #21
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6852      	ldr	r2, [r2, #4]
 8002942:	3a01      	subs	r2, #1
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	430a      	orrs	r2, r1
 8002948:	4920      	ldr	r1, [pc, #128]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 800294a:	4313      	orrs	r3, r2
 800294c:	614b      	str	r3, [r1, #20]
 800294e:	e014      	b.n	800297a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6892      	ldr	r2, [r2, #8]
 800295c:	0211      	lsls	r1, r2, #8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6952      	ldr	r2, [r2, #20]
 8002962:	0852      	lsrs	r2, r2, #1
 8002964:	3a01      	subs	r2, #1
 8002966:	0652      	lsls	r2, r2, #25
 8002968:	4311      	orrs	r1, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6852      	ldr	r2, [r2, #4]
 800296e:	3a01      	subs	r2, #1
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	430a      	orrs	r2, r1
 8002974:	4915      	ldr	r1, [pc, #84]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe f903 	bl	8000b90 <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800298c:	e009      	b.n	80029a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800298e:	f7fe f8ff 	bl	8000b90 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d902      	bls.n	80029a2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	73fb      	strb	r3, [r7, #15]
          break;
 80029a0:	e005      	b.n	80029ae <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ef      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <RCCEx_PLLSAI2_Config+0x1d0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	07ff800f 	.word	0x07ff800f
 80029d4:	ff9f800f 	.word	0xff9f800f
 80029d8:	f9ff800f 	.word	0xf9ff800f

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e049      	b.n	8002a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd ff70 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 f8ee 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_ConfigClockSource+0x18>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e0a8      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x16a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ac4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002acc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d067      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x124>
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d80b      	bhi.n	8002afa <HAL_TIM_ConfigClockSource+0x70>
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d073      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x144>
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d802      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x66>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d06f      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aee:	e078      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d06c      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x144>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d06a      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002af8:	e073      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002afa:	2b70      	cmp	r3, #112	; 0x70
 8002afc:	d00d      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x90>
 8002afe:	2b70      	cmp	r3, #112	; 0x70
 8002b00:	d804      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x82>
 8002b02:	2b50      	cmp	r3, #80	; 0x50
 8002b04:	d033      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0xe4>
 8002b06:	2b60      	cmp	r3, #96	; 0x60
 8002b08:	d041      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002b0a:	e06a      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b10:	d066      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0x156>
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d017      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002b18:	e063      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f000 f97b 	bl	8002e24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	609a      	str	r2, [r3, #8]
      break;
 8002b46:	e04c      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f000 f964 	bl	8002e24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6a:	609a      	str	r2, [r3, #8]
      break;
 8002b6c:	e039      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f000 f8d8 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2150      	movs	r1, #80	; 0x50
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f931 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002b8c:	e029      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f8f7 	bl	8002d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2160      	movs	r1, #96	; 0x60
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f921 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bac:	e019      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 f8b8 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2140      	movs	r1, #64	; 0x40
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f911 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e009      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 f908 	bl	8002dee <TIM_ITRx_SetConfig>
        break;
 8002bde:	e000      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002be0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d01b      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d017      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00f      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x9a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00f      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <TIM_Base_SetConfig+0x128>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <TIM_Base_SetConfig+0x130>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	40013400 	.word	0x40013400
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0210 	bic.w	r2, r3, #16
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	021a      	lsls	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e068      	b.n	8002f4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d108      	bne.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002eb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01d      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d018      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00e      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10c      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40014000 	.word	0x40014000

08002f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e042      	b.n	800300c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fcc3 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	; 0x24
 8002fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f82c 	bl	8003014 <UART_SetConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 faf2 	bl	80035b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb79 	bl	80036fc <UART_CheckIdleState>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003018:	b088      	sub	sp, #32
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4bb1      	ldr	r3, [pc, #708]	; (8003310 <UART_SetConfig+0x2fc>)
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	69f9      	ldr	r1, [r7, #28]
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4aa6      	ldr	r2, [pc, #664]	; (8003314 <UART_SetConfig+0x300>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003092:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	69f9      	ldr	r1, [r7, #28]
 800309c:	430b      	orrs	r3, r1
 800309e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f023 010f 	bic.w	r1, r3, #15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a97      	ldr	r2, [pc, #604]	; (8003318 <UART_SetConfig+0x304>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d121      	bne.n	8003104 <UART_SetConfig+0xf0>
 80030c0:	4b96      	ldr	r3, [pc, #600]	; (800331c <UART_SetConfig+0x308>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d816      	bhi.n	80030fc <UART_SetConfig+0xe8>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0xc0>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f1 	.word	0x080030f1
 80030dc:	080030eb 	.word	0x080030eb
 80030e0:	080030f7 	.word	0x080030f7
 80030e4:	2301      	movs	r3, #1
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e0e8      	b.n	80032bc <UART_SetConfig+0x2a8>
 80030ea:	2302      	movs	r3, #2
 80030ec:	76fb      	strb	r3, [r7, #27]
 80030ee:	e0e5      	b.n	80032bc <UART_SetConfig+0x2a8>
 80030f0:	2304      	movs	r3, #4
 80030f2:	76fb      	strb	r3, [r7, #27]
 80030f4:	e0e2      	b.n	80032bc <UART_SetConfig+0x2a8>
 80030f6:	2308      	movs	r3, #8
 80030f8:	76fb      	strb	r3, [r7, #27]
 80030fa:	e0df      	b.n	80032bc <UART_SetConfig+0x2a8>
 80030fc:	2310      	movs	r3, #16
 80030fe:	76fb      	strb	r3, [r7, #27]
 8003100:	bf00      	nop
 8003102:	e0db      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a85      	ldr	r2, [pc, #532]	; (8003320 <UART_SetConfig+0x30c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d134      	bne.n	8003178 <UART_SetConfig+0x164>
 800310e:	4b83      	ldr	r3, [pc, #524]	; (800331c <UART_SetConfig+0x308>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d829      	bhi.n	8003170 <UART_SetConfig+0x15c>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0x110>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003171 	.word	0x08003171
 800312c:	08003171 	.word	0x08003171
 8003130:	08003171 	.word	0x08003171
 8003134:	08003165 	.word	0x08003165
 8003138:	08003171 	.word	0x08003171
 800313c:	08003171 	.word	0x08003171
 8003140:	08003171 	.word	0x08003171
 8003144:	0800315f 	.word	0x0800315f
 8003148:	08003171 	.word	0x08003171
 800314c:	08003171 	.word	0x08003171
 8003150:	08003171 	.word	0x08003171
 8003154:	0800316b 	.word	0x0800316b
 8003158:	2300      	movs	r3, #0
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e0ae      	b.n	80032bc <UART_SetConfig+0x2a8>
 800315e:	2302      	movs	r3, #2
 8003160:	76fb      	strb	r3, [r7, #27]
 8003162:	e0ab      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003164:	2304      	movs	r3, #4
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	e0a8      	b.n	80032bc <UART_SetConfig+0x2a8>
 800316a:	2308      	movs	r3, #8
 800316c:	76fb      	strb	r3, [r7, #27]
 800316e:	e0a5      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003170:	2310      	movs	r3, #16
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	bf00      	nop
 8003176:	e0a1      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a69      	ldr	r2, [pc, #420]	; (8003324 <UART_SetConfig+0x310>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d120      	bne.n	80031c4 <UART_SetConfig+0x1b0>
 8003182:	4b66      	ldr	r3, [pc, #408]	; (800331c <UART_SetConfig+0x308>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800318c:	2b10      	cmp	r3, #16
 800318e:	d00f      	beq.n	80031b0 <UART_SetConfig+0x19c>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d802      	bhi.n	800319a <UART_SetConfig+0x186>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0x190>
 8003198:	e010      	b.n	80031bc <UART_SetConfig+0x1a8>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d005      	beq.n	80031aa <UART_SetConfig+0x196>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d009      	beq.n	80031b6 <UART_SetConfig+0x1a2>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x1a8>
 80031a4:	2300      	movs	r3, #0
 80031a6:	76fb      	strb	r3, [r7, #27]
 80031a8:	e088      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031aa:	2302      	movs	r3, #2
 80031ac:	76fb      	strb	r3, [r7, #27]
 80031ae:	e085      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031b0:	2304      	movs	r3, #4
 80031b2:	76fb      	strb	r3, [r7, #27]
 80031b4:	e082      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031b6:	2308      	movs	r3, #8
 80031b8:	76fb      	strb	r3, [r7, #27]
 80031ba:	e07f      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031bc:	2310      	movs	r3, #16
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	bf00      	nop
 80031c2:	e07b      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a57      	ldr	r2, [pc, #348]	; (8003328 <UART_SetConfig+0x314>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d120      	bne.n	8003210 <UART_SetConfig+0x1fc>
 80031ce:	4b53      	ldr	r3, [pc, #332]	; (800331c <UART_SetConfig+0x308>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d00f      	beq.n	80031fc <UART_SetConfig+0x1e8>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d802      	bhi.n	80031e6 <UART_SetConfig+0x1d2>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <UART_SetConfig+0x1dc>
 80031e4:	e010      	b.n	8003208 <UART_SetConfig+0x1f4>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d005      	beq.n	80031f6 <UART_SetConfig+0x1e2>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d009      	beq.n	8003202 <UART_SetConfig+0x1ee>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x1f4>
 80031f0:	2300      	movs	r3, #0
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	e062      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031f6:	2302      	movs	r3, #2
 80031f8:	76fb      	strb	r3, [r7, #27]
 80031fa:	e05f      	b.n	80032bc <UART_SetConfig+0x2a8>
 80031fc:	2304      	movs	r3, #4
 80031fe:	76fb      	strb	r3, [r7, #27]
 8003200:	e05c      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003202:	2308      	movs	r3, #8
 8003204:	76fb      	strb	r3, [r7, #27]
 8003206:	e059      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003208:	2310      	movs	r3, #16
 800320a:	76fb      	strb	r3, [r7, #27]
 800320c:	bf00      	nop
 800320e:	e055      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a45      	ldr	r2, [pc, #276]	; (800332c <UART_SetConfig+0x318>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d124      	bne.n	8003264 <UART_SetConfig+0x250>
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <UART_SetConfig+0x308>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003228:	d012      	beq.n	8003250 <UART_SetConfig+0x23c>
 800322a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322e:	d802      	bhi.n	8003236 <UART_SetConfig+0x222>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <UART_SetConfig+0x230>
 8003234:	e012      	b.n	800325c <UART_SetConfig+0x248>
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d006      	beq.n	800324a <UART_SetConfig+0x236>
 800323c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003240:	d009      	beq.n	8003256 <UART_SetConfig+0x242>
 8003242:	e00b      	b.n	800325c <UART_SetConfig+0x248>
 8003244:	2300      	movs	r3, #0
 8003246:	76fb      	strb	r3, [r7, #27]
 8003248:	e038      	b.n	80032bc <UART_SetConfig+0x2a8>
 800324a:	2302      	movs	r3, #2
 800324c:	76fb      	strb	r3, [r7, #27]
 800324e:	e035      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003250:	2304      	movs	r3, #4
 8003252:	76fb      	strb	r3, [r7, #27]
 8003254:	e032      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003256:	2308      	movs	r3, #8
 8003258:	76fb      	strb	r3, [r7, #27]
 800325a:	e02f      	b.n	80032bc <UART_SetConfig+0x2a8>
 800325c:	2310      	movs	r3, #16
 800325e:	76fb      	strb	r3, [r7, #27]
 8003260:	bf00      	nop
 8003262:	e02b      	b.n	80032bc <UART_SetConfig+0x2a8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <UART_SetConfig+0x300>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d124      	bne.n	80032b8 <UART_SetConfig+0x2a4>
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <UART_SetConfig+0x308>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d012      	beq.n	80032a4 <UART_SetConfig+0x290>
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003282:	d802      	bhi.n	800328a <UART_SetConfig+0x276>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <UART_SetConfig+0x284>
 8003288:	e012      	b.n	80032b0 <UART_SetConfig+0x29c>
 800328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328e:	d006      	beq.n	800329e <UART_SetConfig+0x28a>
 8003290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003294:	d009      	beq.n	80032aa <UART_SetConfig+0x296>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x29c>
 8003298:	2300      	movs	r3, #0
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e00e      	b.n	80032bc <UART_SetConfig+0x2a8>
 800329e:	2302      	movs	r3, #2
 80032a0:	76fb      	strb	r3, [r7, #27]
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x2a8>
 80032a4:	2304      	movs	r3, #4
 80032a6:	76fb      	strb	r3, [r7, #27]
 80032a8:	e008      	b.n	80032bc <UART_SetConfig+0x2a8>
 80032aa:	2308      	movs	r3, #8
 80032ac:	76fb      	strb	r3, [r7, #27]
 80032ae:	e005      	b.n	80032bc <UART_SetConfig+0x2a8>
 80032b0:	2310      	movs	r3, #16
 80032b2:	76fb      	strb	r3, [r7, #27]
 80032b4:	bf00      	nop
 80032b6:	e001      	b.n	80032bc <UART_SetConfig+0x2a8>
 80032b8:	2310      	movs	r3, #16
 80032ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <UART_SetConfig+0x300>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 80a1 	bne.w	800340a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d836      	bhi.n	800333c <UART_SetConfig+0x328>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x2c0>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	08003301 	.word	0x08003301
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	08003307 	.word	0x08003307
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800333d 	.word	0x0800333d
 80032f4:	08003335 	.word	0x08003335
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe fd7a 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 80032fc:	6178      	str	r0, [r7, #20]
        break;
 80032fe:	e022      	b.n	8003346 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <UART_SetConfig+0x31c>)
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e01f      	b.n	8003346 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7fe fcdd 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 800330a:	6178      	str	r0, [r7, #20]
        break;
 800330c:	e01b      	b.n	8003346 <UART_SetConfig+0x332>
 800330e:	bf00      	nop
 8003310:	cfff69f3 	.word	0xcfff69f3
 8003314:	40008000 	.word	0x40008000
 8003318:	40013800 	.word	0x40013800
 800331c:	40021000 	.word	0x40021000
 8003320:	40004400 	.word	0x40004400
 8003324:	40004800 	.word	0x40004800
 8003328:	40004c00 	.word	0x40004c00
 800332c:	40005000 	.word	0x40005000
 8003330:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003338:	617b      	str	r3, [r7, #20]
        break;
 800333a:	e004      	b.n	8003346 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	76bb      	strb	r3, [r7, #26]
        break;
 8003344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 811d 	beq.w	8003588 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	4a97      	ldr	r2, [pc, #604]	; (80035b0 <UART_SetConfig+0x59c>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	461a      	mov	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003360:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	d305      	bcc.n	800337e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d902      	bls.n	8003384 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	76bb      	strb	r3, [r7, #26]
 8003382:	e101      	b.n	8003588 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4618      	mov	r0, r3
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	4a87      	ldr	r2, [pc, #540]	; (80035b0 <UART_SetConfig+0x59c>)
 8003392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f04f 0400 	mov.w	r4, #0
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc ff5e 	bl	8000260 <__aeabi_uldivmod>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4619      	mov	r1, r3
 80033aa:	4622      	mov	r2, r4
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f04f 0400 	mov.w	r4, #0
 80033b4:	0214      	lsls	r4, r2, #8
 80033b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033ba:	020b      	lsls	r3, r1, #8
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6852      	ldr	r2, [r2, #4]
 80033c0:	0852      	lsrs	r2, r2, #1
 80033c2:	4611      	mov	r1, r2
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	eb13 0b01 	adds.w	fp, r3, r1
 80033cc:	eb44 0c02 	adc.w	ip, r4, r2
 80033d0:	4658      	mov	r0, fp
 80033d2:	4661      	mov	r1, ip
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	f7fc ff3e 	bl	8000260 <__aeabi_uldivmod>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f0:	d308      	bcc.n	8003404 <UART_SetConfig+0x3f0>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f8:	d204      	bcs.n	8003404 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e0c1      	b.n	8003588 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	76bb      	strb	r3, [r7, #26]
 8003408:	e0be      	b.n	8003588 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003412:	d164      	bne.n	80034de <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003414:	7efb      	ldrb	r3, [r7, #27]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d827      	bhi.n	800346a <UART_SetConfig+0x456>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x40c>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003445 	.word	0x08003445
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003455 	.word	0x08003455
 800342c:	0800346b 	.word	0x0800346b
 8003430:	0800345b 	.word	0x0800345b
 8003434:	0800346b 	.word	0x0800346b
 8003438:	0800346b 	.word	0x0800346b
 800343c:	0800346b 	.word	0x0800346b
 8003440:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7fe fcd4 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003448:	6178      	str	r0, [r7, #20]
        break;
 800344a:	e013      	b.n	8003474 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800344c:	f7fe fce6 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8003450:	6178      	str	r0, [r7, #20]
        break;
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <UART_SetConfig+0x5a0>)
 8003456:	617b      	str	r3, [r7, #20]
        break;
 8003458:	e00c      	b.n	8003474 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7fe fc33 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 800345e:	6178      	str	r0, [r7, #20]
        break;
 8003460:	e008      	b.n	8003474 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	617b      	str	r3, [r7, #20]
        break;
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	76bb      	strb	r3, [r7, #26]
        break;
 8003472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8086 	beq.w	8003588 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <UART_SetConfig+0x59c>)
 8003482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003486:	461a      	mov	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fbb3 f3f2 	udiv	r3, r3, r2
 800348e:	005a      	lsls	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	441a      	add	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d916      	bls.n	80034d8 <UART_SetConfig+0x4c4>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d212      	bcs.n	80034d8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e057      	b.n	8003588 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	76bb      	strb	r3, [r7, #26]
 80034dc:	e054      	b.n	8003588 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034de:	7efb      	ldrb	r3, [r7, #27]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d828      	bhi.n	8003536 <UART_SetConfig+0x522>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x4d8>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003537 	.word	0x08003537
 8003504:	08003537 	.word	0x08003537
 8003508:	08003537 	.word	0x08003537
 800350c:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fc6e 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003514:	6178      	str	r0, [r7, #20]
        break;
 8003516:	e013      	b.n	8003540 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7fe fc80 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800351c:	6178      	str	r0, [r7, #20]
        break;
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <UART_SetConfig+0x5a0>)
 8003522:	617b      	str	r3, [r7, #20]
        break;
 8003524:	e00c      	b.n	8003540 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fbcd 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 800352a:	6178      	str	r0, [r7, #20]
        break;
 800352c:	e008      	b.n	8003540 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e004      	b.n	8003540 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	76bb      	strb	r3, [r7, #26]
        break;
 800353e:	bf00      	nop
    }

    if (pclk != 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d020      	beq.n	8003588 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <UART_SetConfig+0x59c>)
 800354c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003550:	461a      	mov	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fbb3 f2f2 	udiv	r2, r3, r2
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d908      	bls.n	8003584 <UART_SetConfig+0x570>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d204      	bcs.n	8003584 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	e001      	b.n	8003588 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80035a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80035b0:	08003d24 	.word	0x08003d24
 80035b4:	00f42400 	.word	0x00f42400

080035b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d10a      	bne.n	80036ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800370c:	f7fd fa40 	bl	8000b90 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d10e      	bne.n	800373e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f82c 	bl	800378c <UART_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e022      	b.n	8003784 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d10e      	bne.n	800376a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f816 	bl	800378c <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00c      	b.n	8003784 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379c:	e062      	b.n	8003864 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d05e      	beq.n	8003864 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fd f9f3 	bl	8000b90 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <UART_WaitOnFlagUntilTimeout+0x30>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11d      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037ca:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e045      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d126      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800382e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e00f      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	429a      	cmp	r2, r3
 8003880:	d08d      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800389e:	2302      	movs	r3, #2
 80038a0:	e027      	b.n	80038f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	; 0x24
 80038ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80038d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003912:	2302      	movs	r3, #2
 8003914:	e02d      	b.n	8003972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2224      	movs	r2, #36	; 0x24
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f850 	bl	80039f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800398e:	2302      	movs	r3, #2
 8003990:	e02d      	b.n	80039ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	; 0x24
 800399e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f812 	bl	80039f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003a00:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <UARTEx_SetNbDataToProcess+0xc8>)
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a0a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <UARTEx_SetNbDataToProcess+0xcc>)
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a18:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a34:	e03d      	b.n	8003ab2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a36:	2308      	movs	r3, #8
 8003a38:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	0e5b      	lsrs	r3, r3, #25
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	0f5b      	lsrs	r3, r3, #29
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003a5e:	7fbb      	ldrb	r3, [r7, #30]
 8003a60:	7f3a      	ldrb	r2, [r7, #28]
 8003a62:	f107 0120 	add.w	r1, r7, #32
 8003a66:	440a      	add	r2, r1
 8003a68:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	7f3a      	ldrb	r2, [r7, #28]
 8003a72:	f107 0120 	add.w	r1, r7, #32
 8003a76:	440a      	add	r2, r1
 8003a78:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	7f7a      	ldrb	r2, [r7, #29]
 8003a8c:	f107 0120 	add.w	r1, r7, #32
 8003a90:	440a      	add	r2, r1
 8003a92:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	7f7a      	ldrb	r2, [r7, #29]
 8003a9c:	f107 0120 	add.w	r1, r7, #32
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	08003b38 	.word	0x08003b38
 8003ac4:	08003b40 	.word	0x08003b40

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4e0d      	ldr	r6, [pc, #52]	; (8003b00 <__libc_init_array+0x38>)
 8003acc:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ace:	1ba4      	subs	r4, r4, r6
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	2500      	movs	r5, #0
 8003ad4:	42a5      	cmp	r5, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	4e0b      	ldr	r6, [pc, #44]	; (8003b08 <__libc_init_array+0x40>)
 8003ada:	4c0c      	ldr	r4, [pc, #48]	; (8003b0c <__libc_init_array+0x44>)
 8003adc:	f000 f820 	bl	8003b20 <_init>
 8003ae0:	1ba4      	subs	r4, r4, r6
 8003ae2:	10a4      	asrs	r4, r4, #2
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	42a5      	cmp	r5, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af0:	4798      	blx	r3
 8003af2:	3501      	adds	r5, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afa:	4798      	blx	r3
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08003d44 	.word	0x08003d44
 8003b04:	08003d44 	.word	0x08003d44
 8003b08:	08003d44 	.word	0x08003d44
 8003b0c:	08003d48 	.word	0x08003d48

08003b10 <memset>:
 8003b10:	4402      	add	r2, r0
 8003b12:	4603      	mov	r3, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
