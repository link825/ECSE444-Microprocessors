
finalproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d2c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087cc  080087cc  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d4  080087d4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080087dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200000dc  080088b8  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080088b8  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5a3  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034b7  00000000  00000000  0003e6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  00041b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00043200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cfb0  00000000  00000000  00044700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001307c  00000000  00000000  000716b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001127f4  00000000  00000000  0008472c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00196f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  00197010  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  0019d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007ed4 	.word	0x08007ed4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000e0 	.word	0x200000e0
 80001fc:	08007ed4 	.word	0x08007ed4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b972 	b.w	8000dd8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	4688      	mov	r8, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14b      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	d967      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0720 	rsb	r7, r2, #32
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b32:	4095      	lsls	r5, r2
 8000b34:	ea47 0803 	orr.w	r8, r7, r3
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b44:	fa1f fc85 	uxth.w	ip, r5
 8000b48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b50:	fb07 f10c 	mul.w	r1, r7, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b5e:	f080 811b 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8118 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	442b      	add	r3, r5
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8107 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	f240 8104 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b94:	3802      	subs	r0, #2
 8000b96:	442c      	add	r4, r5
 8000b98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	b11e      	cbz	r6, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xbe>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80eb 	beq.w	8000d92 <__udivmoddi4+0x286>
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f783 	clz	r7, r3
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d147      	bne.n	8000c62 <__udivmoddi4+0x156>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd0>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80fa 	bhi.w	8000dd0 <__udivmoddi4+0x2c4>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4698      	mov	r8, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000bea:	e9c6 4800 	strd	r4, r8, [r6]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa0>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xe8>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 808f 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfe:	1b49      	subs	r1, r1, r5
 8000c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c04:	fa1f f885 	uxth.w	r8, r5
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb08 f10c 	mul.w	r1, r8, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1a59      	subs	r1, r3, r1
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x14c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x14a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80b6 	bhi.w	8000dc2 <__udivmoddi4+0x2b6>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e79f      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c62:	f1c7 0c20 	rsb	ip, r7, #32
 8000c66:	40bb      	lsls	r3, r7
 8000c68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c70:	fa01 f407 	lsl.w	r4, r1, r7
 8000c74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c80:	4325      	orrs	r5, r4
 8000c82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c86:	0c2c      	lsrs	r4, r5, #16
 8000c88:	fb08 3319 	mls	r3, r8, r9, r3
 8000c8c:	fa1f fa8e 	uxth.w	sl, lr
 8000c90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c94:	fb09 f40a 	mul.w	r4, r9, sl
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	f080 8087 	bcs.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f240 8084 	bls.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4473      	add	r3, lr
 8000cbc:	1b1b      	subs	r3, r3, r4
 8000cbe:	b2ad      	uxth	r5, r5
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ccc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d26b      	bcs.n	8000db6 <__udivmoddi4+0x2aa>
 8000cde:	45a2      	cmp	sl, r4
 8000ce0:	d969      	bls.n	8000db6 <__udivmoddi4+0x2aa>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4474      	add	r4, lr
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	454c      	cmp	r4, r9
 8000cf4:	46c2      	mov	sl, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	d354      	bcc.n	8000da4 <__udivmoddi4+0x298>
 8000cfa:	d051      	beq.n	8000da0 <__udivmoddi4+0x294>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d069      	beq.n	8000dd4 <__udivmoddi4+0x2c8>
 8000d00:	ebb1 050a 	subs.w	r5, r1, sl
 8000d04:	eb64 0403 	sbc.w	r4, r4, r3
 8000d08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	40fc      	lsrs	r4, r7
 8000d10:	ea4c 0505 	orr.w	r5, ip, r5
 8000d14:	e9c6 5400 	strd	r5, r4, [r6]
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e747      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f703 	lsr.w	r7, r0, r3
 8000d24:	4095      	lsls	r5, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d32:	4338      	orrs	r0, r7
 8000d34:	0c01      	lsrs	r1, r0, #16
 8000d36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3a:	fa1f f885 	uxth.w	r8, r5
 8000d3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb07 f308 	mul.w	r3, r7, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x256>
 8000d52:	1869      	adds	r1, r5, r1
 8000d54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d58:	d22f      	bcs.n	8000dba <__udivmoddi4+0x2ae>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d92d      	bls.n	8000dba <__udivmoddi4+0x2ae>
 8000d5e:	3f02      	subs	r7, #2
 8000d60:	4429      	add	r1, r5
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	b281      	uxth	r1, r0
 8000d66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb00 f308 	mul.w	r3, r0, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x27e>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d80:	d217      	bcs.n	8000db2 <__udivmoddi4+0x2a6>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d915      	bls.n	8000db2 <__udivmoddi4+0x2a6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d90:	e73b      	b.n	8000c0a <__udivmoddi4+0xfe>
 8000d92:	4637      	mov	r7, r6
 8000d94:	4630      	mov	r0, r6
 8000d96:	e709      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e6e7      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fb      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000da0:	4541      	cmp	r1, r8
 8000da2:	d2ab      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dac:	3801      	subs	r0, #1
 8000dae:	4613      	mov	r3, r2
 8000db0:	e7a4      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db2:	4660      	mov	r0, ip
 8000db4:	e7e9      	b.n	8000d8a <__udivmoddi4+0x27e>
 8000db6:	4618      	mov	r0, r3
 8000db8:	e795      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dba:	4667      	mov	r7, ip
 8000dbc:	e7d1      	b.n	8000d62 <__udivmoddi4+0x256>
 8000dbe:	4681      	mov	r9, r0
 8000dc0:	e77c      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	442c      	add	r4, r5
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0x14c>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	442b      	add	r3, r5
 8000dce:	e72f      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xda>
 8000dd4:	4637      	mov	r7, r6
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0xa0>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000dea:	2110      	movs	r1, #16
 8000dec:	20d4      	movs	r0, #212	; 0xd4
 8000dee:	f001 f961 	bl	80020b4 <SENSOR_IO_Read>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000e02:	7bba      	ldrb	r2, [r7, #14]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2110      	movs	r1, #16
 8000e10:	20d4      	movs	r0, #212	; 0xd4
 8000e12:	f001 f935 	bl	8002080 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000e16:	2112      	movs	r1, #18
 8000e18:	20d4      	movs	r0, #212	; 0xd4
 8000e1a:	f001 f94b 	bl	80020b4 <SENSOR_IO_Read>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000e30:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000e32:	7bba      	ldrb	r2, [r7, #14]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2112      	movs	r1, #18
 8000e40:	20d4      	movs	r0, #212	; 0xd4
 8000e42:	f001 f91d 	bl	8002080 <SENSOR_IO_Write>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000e58:	2110      	movs	r1, #16
 8000e5a:	20d4      	movs	r0, #212	; 0xd4
 8000e5c:	f001 f92a 	bl	80020b4 <SENSOR_IO_Read>
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2110      	movs	r1, #16
 8000e72:	20d4      	movs	r0, #212	; 0xd4
 8000e74:	f001 f904 	bl	8002080 <SENSOR_IO_Write>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000e84:	f001 f8f2 	bl	800206c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000e88:	210f      	movs	r1, #15
 8000e8a:	20d4      	movs	r0, #212	; 0xd4
 8000e8c:	f001 f912 	bl	80020b4 <SENSOR_IO_Read>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000ea4:	2115      	movs	r1, #21
 8000ea6:	20d4      	movs	r0, #212	; 0xd4
 8000ea8:	f001 f904 	bl	80020b4 <SENSOR_IO_Read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f023 0310 	bic.w	r3, r3, #16
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2115      	movs	r1, #21
 8000ecc:	20d4      	movs	r0, #212	; 0xd4
 8000ece:	f001 f8d7 	bl	8002080 <SENSOR_IO_Write>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	20d4      	movs	r0, #212	; 0xd4
 8000ef6:	f001 f8dd 	bl	80020b4 <SENSOR_IO_Read>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000efe:	f107 0208 	add.w	r2, r7, #8
 8000f02:	2306      	movs	r3, #6
 8000f04:	2128      	movs	r1, #40	; 0x28
 8000f06:	20d4      	movs	r0, #212	; 0xd4
 8000f08:	f001 f8f2 	bl	80020f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77fb      	strb	r3, [r7, #31]
 8000f10:	e01f      	b.n	8000f52 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3301      	adds	r3, #1
 8000f18:	f107 0220 	add.w	r2, r7, #32
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	f107 0120 	add.w	r1, r7, #32
 8000f30:	440b      	add	r3, r1
 8000f32:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	b212      	sxth	r2, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	f107 0120 	add.w	r1, r7, #32
 8000f46:	440b      	add	r3, r1
 8000f48:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000f4c:	7ffb      	ldrb	r3, [r7, #31]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	77fb      	strb	r3, [r7, #31]
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d9dc      	bls.n	8000f12 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d828      	bhi.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <LSM6DSL_AccReadXYZ+0x8c>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fb5 	.word	0x08000fb5
 8000f70:	08000fb5 	.word	0x08000fb5
 8000f74:	08000fb5 	.word	0x08000fb5
 8000f78:	08000faf 	.word	0x08000faf
 8000f7c:	08000fb5 	.word	0x08000fb5
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fb5 	.word	0x08000fb5
 8000f88:	08000fa3 	.word	0x08000fa3
 8000f8c:	08000fb5 	.word	0x08000fb5
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	08000fb5 	.word	0x08000fb5
 8000f98:	08000fa9 	.word	0x08000fa9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <LSM6DSL_AccReadXYZ+0x124>)
 8000f9e:	61bb      	str	r3, [r7, #24]
    break;
 8000fa0:	e008      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <LSM6DSL_AccReadXYZ+0x128>)
 8000fa4:	61bb      	str	r3, [r7, #24]
    break;
 8000fa6:	e005      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <LSM6DSL_AccReadXYZ+0x12c>)
 8000faa:	61bb      	str	r3, [r7, #24]
    break;
 8000fac:	e002      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <LSM6DSL_AccReadXYZ+0x130>)
 8000fb0:	61bb      	str	r3, [r7, #24]
    break;    
 8000fb2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
 8000fb8:	e01b      	b.n	8000ff2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	f107 0220 	add.w	r2, r7, #32
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 2a90 	vmov	r2, s15
 8000fe8:	b212      	sxth	r2, r2
 8000fea:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	77fb      	strb	r3, [r7, #31]
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d9e0      	bls.n	8000fba <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	3d79db23 	.word	0x3d79db23
 8001004:	3df9db23 	.word	0x3df9db23
 8001008:	3e79db23 	.word	0x3e79db23
 800100c:	3ef9db23 	.word	0x3ef9db23

08001010 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800101e:	2111      	movs	r1, #17
 8001020:	20d4      	movs	r0, #212	; 0xd4
 8001022:	f001 f847 	bl	80020b4 <SENSOR_IO_Read>
 8001026:	4603      	mov	r3, r0
 8001028:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001036:	7bba      	ldrb	r2, [r7, #14]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4313      	orrs	r3, r2
 800103c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	461a      	mov	r2, r3
 8001042:	2111      	movs	r1, #17
 8001044:	20d4      	movs	r0, #212	; 0xd4
 8001046:	f001 f81b 	bl	8002080 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800104a:	2112      	movs	r1, #18
 800104c:	20d4      	movs	r0, #212	; 0xd4
 800104e:	f001 f831 	bl	80020b4 <SENSOR_IO_Read>
 8001052:	4603      	mov	r3, r0
 8001054:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001064:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001066:	7bba      	ldrb	r2, [r7, #14]
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4313      	orrs	r3, r2
 800106c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	461a      	mov	r2, r3
 8001072:	2112      	movs	r1, #18
 8001074:	20d4      	movs	r0, #212	; 0xd4
 8001076:	f001 f803 	bl	8002080 <SENSOR_IO_Write>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800108c:	2111      	movs	r1, #17
 800108e:	20d4      	movs	r0, #212	; 0xd4
 8001090:	f001 f810 	bl	80020b4 <SENSOR_IO_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2111      	movs	r1, #17
 80010a6:	20d4      	movs	r0, #212	; 0xd4
 80010a8:	f000 ffea 	bl	8002080 <SENSOR_IO_Write>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80010b8:	f000 ffd8 	bl	800206c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80010bc:	210f      	movs	r1, #15
 80010be:	20d4      	movs	r0, #212	; 0xd4
 80010c0:	f000 fff8 	bl	80020b4 <SENSOR_IO_Read>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}

080010ca <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80010d8:	2116      	movs	r1, #22
 80010da:	20d4      	movs	r0, #212	; 0xd4
 80010dc:	f000 ffea 	bl	80020b4 <SENSOR_IO_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	461a      	mov	r2, r3
 80010fe:	2116      	movs	r1, #22
 8001100:	20d4      	movs	r0, #212	; 0xd4
 8001102:	f000 ffbd 	bl	8002080 <SENSOR_IO_Write>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001118:	2300      	movs	r3, #0
 800111a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001126:	2111      	movs	r1, #17
 8001128:	20d4      	movs	r0, #212	; 0xd4
 800112a:	f000 ffc3 	bl	80020b4 <SENSOR_IO_Read>
 800112e:	4603      	mov	r3, r0
 8001130:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001132:	f107 0208 	add.w	r2, r7, #8
 8001136:	2306      	movs	r3, #6
 8001138:	2122      	movs	r1, #34	; 0x22
 800113a:	20d4      	movs	r0, #212	; 0xd4
 800113c:	f000 ffd8 	bl	80020f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	77fb      	strb	r3, [r7, #31]
 8001144:	e01f      	b.n	8001186 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	3301      	adds	r3, #1
 800114c:	f107 0220 	add.w	r2, r7, #32
 8001150:	4413      	add	r3, r2
 8001152:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	f107 0120 	add.w	r1, r7, #32
 8001164:	440b      	add	r3, r1
 8001166:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	b212      	sxth	r2, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	f107 0120 	add.w	r1, r7, #32
 800117a:	440b      	add	r3, r1
 800117c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	3301      	adds	r3, #1
 8001184:	77fb      	strb	r3, [r7, #31]
 8001186:	7ffb      	ldrb	r3, [r7, #31]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d9dc      	bls.n	8001146 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d828      	bhi.n	80011e8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011d1 	.word	0x080011d1
 80011a0:	080011e9 	.word	0x080011e9
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	080011e9 	.word	0x080011e9
 80011ac:	080011d7 	.word	0x080011d7
 80011b0:	080011e9 	.word	0x080011e9
 80011b4:	080011e9 	.word	0x080011e9
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	080011dd 	.word	0x080011dd
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	080011e9 	.word	0x080011e9
 80011c8:	080011e9 	.word	0x080011e9
 80011cc:	080011e3 	.word	0x080011e3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80011d2:	61bb      	str	r3, [r7, #24]
    break;
 80011d4:	e008      	b.n	80011e8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80011d8:	61bb      	str	r3, [r7, #24]
    break;
 80011da:	e005      	b.n	80011e8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80011de:	61bb      	str	r3, [r7, #24]
    break;
 80011e0:	e002      	b.n	80011e8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80011e4:	61bb      	str	r3, [r7, #24]
    break;    
 80011e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
 80011ec:	e017      	b.n	800121e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	f107 0220 	add.w	r2, r7, #32
 80011f6:	4413      	add	r3, r2
 80011f8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	3301      	adds	r3, #1
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d9e4      	bls.n	80011ee <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	410c0000 	.word	0x410c0000
 8001230:	418c0000 	.word	0x418c0000
 8001234:	420c0000 	.word	0x420c0000
 8001238:	428c0000 	.word	0x428c0000
 800123c:	00000000 	.word	0x00000000

08001240 <C6_sample_populator>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// populate the sine wave sampling array for a C6 tone
void C6_sample_populator() {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
	for (int i = 0; i < 43; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e036      	b.n	80012ba <C6_sample_populator+0x7a>
		float modulus = (float) i / 43;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80012d0 <C6_sample_populator+0x90>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 8001262:	6938      	ldr	r0, [r7, #16]
 8001264:	f7ff f980 	bl	8000568 <__aeabi_f2d>
 8001268:	a317      	add	r3, pc, #92	; (adr r3, 80012c8 <C6_sample_populator+0x88>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9d3 	bl	8000618 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4618      	mov	r0, r3
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fbdf 	bl	8000a3c <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 8001282:	ed97 0a03 	vldr	s0, [r7, #12]
 8001286:	f006 f9a7 	bl	80075d8 <arm_sin_f32>
 800128a:	eeb0 7a40 	vmov.f32	s14, s0
 800128e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a03 	vstr	s15, [r7, #12]
		C6_samples[i] = (uint8_t) radians;
 800129a:	edd7 7a03 	vldr	s15, [r7, #12]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	b2d9      	uxtb	r1, r3
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <C6_sample_populator+0x94>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	460a      	mov	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 43; i++) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b2a      	cmp	r3, #42	; 0x2a
 80012be:	ddc5      	ble.n	800124c <C6_sample_populator+0xc>
	}
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	3fa6defc 	.word	0x3fa6defc
 80012cc:	401921fb 	.word	0x401921fb
 80012d0:	422c0000 	.word	0x422c0000
 80012d4:	200003c4 	.word	0x200003c4

080012d8 <D6_sample_populator>:

// populate the sine wave sampling array for a D6 tone
void D6_sample_populator() {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 36; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e036      	b.n	8001352 <D6_sample_populator+0x7a>
		float modulus = (float) i / 36;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ee:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001368 <D6_sample_populator+0x90>
 80012f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80012fa:	6938      	ldr	r0, [r7, #16]
 80012fc:	f7ff f934 	bl	8000568 <__aeabi_f2d>
 8001300:	a317      	add	r3, pc, #92	; (adr r3, 8001360 <D6_sample_populator+0x88>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f987 	bl	8000618 <__aeabi_dmul>
 800130a:	4603      	mov	r3, r0
 800130c:	460c      	mov	r4, r1
 800130e:	4618      	mov	r0, r3
 8001310:	4621      	mov	r1, r4
 8001312:	f7ff fb93 	bl	8000a3c <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 800131a:	ed97 0a03 	vldr	s0, [r7, #12]
 800131e:	f006 f95b 	bl	80075d8 <arm_sin_f32>
 8001322:	eeb0 7a40 	vmov.f32	s14, s0
 8001326:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800132a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132e:	edc7 7a03 	vstr	s15, [r7, #12]
		D6_samples[i] = (uint8_t) radians;
 8001332:	edd7 7a03 	vldr	s15, [r7, #12]
 8001336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133a:	edc7 7a01 	vstr	s15, [r7, #4]
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	b2d9      	uxtb	r1, r3
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <D6_sample_populator+0x94>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4413      	add	r3, r2
 8001348:	460a      	mov	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 36; i++) {
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b23      	cmp	r3, #35	; 0x23
 8001356:	ddc5      	ble.n	80012e4 <D6_sample_populator+0xc>
	}
}
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	3fa6defc 	.word	0x3fa6defc
 8001364:	401921fb 	.word	0x401921fb
 8001368:	42100000 	.word	0x42100000
 800136c:	20000328 	.word	0x20000328

08001370 <E6_sample_populator>:

// populate the sine wave sampling array for an E6 tone
void E6_sample_populator() {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
	for (int i = 0; i < 33; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e03a      	b.n	80013f2 <E6_sample_populator+0x82>
		float modulus = (float) i / 33;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001408 <E6_sample_populator+0x98>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 8001392:	6938      	ldr	r0, [r7, #16]
 8001394:	f7ff f8e8 	bl	8000568 <__aeabi_f2d>
 8001398:	a319      	add	r3, pc, #100	; (adr r3, 8001400 <E6_sample_populator+0x90>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff f93b 	bl	8000618 <__aeabi_dmul>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	4618      	mov	r0, r3
 80013a8:	4621      	mov	r1, r4
 80013aa:	f7ff fb47 	bl	8000a3c <__aeabi_d2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 80013b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80013b6:	f006 f90f 	bl	80075d8 <arm_sin_f32>
 80013ba:	eeb0 7a40 	vmov.f32	s14, s0
 80013be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800140c <E6_sample_populator+0x9c>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	edc7 7a03 	vstr	s15, [r7, #12]
		E6_samples[i] = (uint8_t) radians;
 80013d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013da:	edc7 7a01 	vstr	s15, [r7, #4]
 80013de:	793b      	ldrb	r3, [r7, #4]
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <E6_sample_populator+0xa0>)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	4413      	add	r3, r2
 80013e8:	460a      	mov	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 33; i++) {
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	ddc1      	ble.n	800137c <E6_sample_populator+0xc>
	}
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	3fa6defc 	.word	0x3fa6defc
 8001404:	401921fb 	.word	0x401921fb
 8001408:	42040000 	.word	0x42040000
 800140c:	42aa0000 	.word	0x42aa0000
 8001410:	20000354 	.word	0x20000354
 8001414:	00000000 	.word	0x00000000

08001418 <F6_sample_populator>:

// populate the sine wave sampling array for an F6 tone
void F6_sample_populator() {
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 30; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e03a      	b.n	800149a <F6_sample_populator+0x82>
		float modulus = (float) i / 30;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001436:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 800143a:	6938      	ldr	r0, [r7, #16]
 800143c:	f7ff f894 	bl	8000568 <__aeabi_f2d>
 8001440:	a31b      	add	r3, pc, #108	; (adr r3, 80014b0 <F6_sample_populator+0x98>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8e7 	bl	8000618 <__aeabi_dmul>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff faf3 	bl	8000a3c <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 800145a:	ed97 0a03 	vldr	s0, [r7, #12]
 800145e:	f006 f8bb 	bl	80075d8 <arm_sin_f32>
 8001462:	eeb0 7a40 	vmov.f32	s14, s0
 8001466:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014a8 <F6_sample_populator+0x90>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	edc7 7a03 	vstr	s15, [r7, #12]
		F6_samples[i] = (uint8_t) radians;
 800147a:	edd7 7a03 	vldr	s15, [r7, #12]
 800147e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001482:	edc7 7a01 	vstr	s15, [r7, #4]
 8001486:	793b      	ldrb	r3, [r7, #4]
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <F6_sample_populator+0x94>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 30; i++) {
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b1d      	cmp	r3, #29
 800149e:	ddc1      	ble.n	8001424 <F6_sample_populator+0xc>
	}
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	42aa0000 	.word	0x42aa0000
 80014ac:	2000024c 	.word	0x2000024c
 80014b0:	3fa6defc 	.word	0x3fa6defc
 80014b4:	401921fb 	.word	0x401921fb

080014b8 <G6_sample_populator>:

// populate the sine wave sampling array for a G6 tone
void G6_sample_populator() {
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 27; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e03a      	b.n	800153a <G6_sample_populator+0x82>
		float modulus = (float) i / 27;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ce:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 80014d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d6:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80014da:	6938      	ldr	r0, [r7, #16]
 80014dc:	f7ff f844 	bl	8000568 <__aeabi_f2d>
 80014e0:	a31b      	add	r3, pc, #108	; (adr r3, 8001550 <G6_sample_populator+0x98>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f897 	bl	8000618 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	f7ff faa3 	bl	8000a3c <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 80014fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80014fe:	f006 f86b 	bl	80075d8 <arm_sin_f32>
 8001502:	eeb0 7a40 	vmov.f32	s14, s0
 8001506:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001548 <G6_sample_populator+0x90>
 8001512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
		G6_samples[i] = (uint8_t) radians;
 800151a:	edd7 7a03 	vldr	s15, [r7, #12]
 800151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001522:	edc7 7a01 	vstr	s15, [r7, #4]
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	b2d9      	uxtb	r1, r3
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <G6_sample_populator+0x94>)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	4413      	add	r3, r2
 8001530:	460a      	mov	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 27; i++) {
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b1a      	cmp	r3, #26
 800153e:	ddc1      	ble.n	80014c4 <G6_sample_populator+0xc>
	}

}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	42aa0000 	.word	0x42aa0000
 800154c:	2000026c 	.word	0x2000026c
 8001550:	3fa6defc 	.word	0x3fa6defc
 8001554:	401921fb 	.word	0x401921fb

08001558 <A6_sample_populator>:

// populate the sine wave sampling array for an A6 tone
void A6_sample_populator() {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e03a      	b.n	80015da <A6_sample_populator+0x82>
		float modulus = (float) i / 24;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156e:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8001572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001576:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 800157a:	6938      	ldr	r0, [r7, #16]
 800157c:	f7fe fff4 	bl	8000568 <__aeabi_f2d>
 8001580:	a31b      	add	r3, pc, #108	; (adr r3, 80015f0 <A6_sample_populator+0x98>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f847 	bl	8000618 <__aeabi_dmul>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	4618      	mov	r0, r3
 8001590:	4621      	mov	r1, r4
 8001592:	f7ff fa53 	bl	8000a3c <__aeabi_d2f>
 8001596:	4603      	mov	r3, r0
 8001598:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 800159a:	ed97 0a03 	vldr	s0, [r7, #12]
 800159e:	f006 f81b 	bl	80075d8 <arm_sin_f32>
 80015a2:	eeb0 7a40 	vmov.f32	s14, s0
 80015a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80015e8 <A6_sample_populator+0x90>
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	edc7 7a03 	vstr	s15, [r7, #12]
		A6_samples[i] = (uint8_t) radians;
 80015ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80015be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	b2d9      	uxtb	r1, r3
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <A6_sample_populator+0x94>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	4413      	add	r3, r2
 80015d0:	460a      	mov	r2, r1
 80015d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 24; i++) {
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b17      	cmp	r3, #23
 80015de:	ddc1      	ble.n	8001564 <A6_sample_populator+0xc>
	}
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	42aa0000 	.word	0x42aa0000
 80015ec:	200001d4 	.word	0x200001d4
 80015f0:	3fa6defc 	.word	0x3fa6defc
 80015f4:	401921fb 	.word	0x401921fb

080015f8 <B6_sample_populator>:

// populate the sine wave sampling array for an B6 tone
void B6_sample_populator() {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 21; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e03a      	b.n	800167a <B6_sample_populator+0x82>
		float modulus = (float) i / 21;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 800161a:	6938      	ldr	r0, [r7, #16]
 800161c:	f7fe ffa4 	bl	8000568 <__aeabi_f2d>
 8001620:	a31b      	add	r3, pc, #108	; (adr r3, 8001690 <B6_sample_populator+0x98>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fff7 	bl	8000618 <__aeabi_dmul>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f7ff fa03 	bl	8000a3c <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 800163a:	ed97 0a03 	vldr	s0, [r7, #12]
 800163e:	f005 ffcb 	bl	80075d8 <arm_sin_f32>
 8001642:	eeb0 7a40 	vmov.f32	s14, s0
 8001646:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001688 <B6_sample_populator+0x90>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	edc7 7a03 	vstr	s15, [r7, #12]
		B6_samples[i] = (uint8_t) radians;
 800165a:	edd7 7a03 	vldr	s15, [r7, #12]
 800165e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001662:	edc7 7a01 	vstr	s15, [r7, #4]
 8001666:	793b      	ldrb	r3, [r7, #4]
 8001668:	b2d9      	uxtb	r1, r3
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <B6_sample_populator+0x94>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	460a      	mov	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 21; i++) {
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b14      	cmp	r3, #20
 800167e:	ddc1      	ble.n	8001604 <B6_sample_populator+0xc>
	}
}
 8001680:	bf00      	nop
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	42aa0000 	.word	0x42aa0000
 800168c:	200003f0 	.word	0x200003f0
 8001690:	3fa6defc 	.word	0x3fa6defc
 8001694:	401921fb 	.word	0x401921fb

08001698 <C7_sample_populator>:

// populate the sine wave sampling array for an C7 tone
void C7_sample_populator() {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e03a      	b.n	800171a <C7_sample_populator+0x82>
		float modulus = (float) i / 20;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ae:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80016b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b6:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80016ba:	6938      	ldr	r0, [r7, #16]
 80016bc:	f7fe ff54 	bl	8000568 <__aeabi_f2d>
 80016c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001730 <C7_sample_populator+0x98>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ffa7 	bl	8000618 <__aeabi_dmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	4618      	mov	r0, r3
 80016d0:	4621      	mov	r1, r4
 80016d2:	f7ff f9b3 	bl	8000a3c <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1) * 85;
 80016da:	ed97 0a03 	vldr	s0, [r7, #12]
 80016de:	f005 ff7b 	bl	80075d8 <arm_sin_f32>
 80016e2:	eeb0 7a40 	vmov.f32	s14, s0
 80016e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001728 <C7_sample_populator+0x90>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	edc7 7a03 	vstr	s15, [r7, #12]
		C7_samples[i] = (uint8_t) radians;
 80016fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	edc7 7a01 	vstr	s15, [r7, #4]
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	b2d9      	uxtb	r1, r3
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <C7_sample_populator+0x94>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	460a      	mov	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b13      	cmp	r3, #19
 800171e:	ddc1      	ble.n	80016a4 <C7_sample_populator+0xc>
	}
}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	42aa0000 	.word	0x42aa0000
 800172c:	20000288 	.word	0x20000288
 8001730:	3fa6defc 	.word	0x3fa6defc
 8001734:	401921fb 	.word	0x401921fb

08001738 <pitch_volume_changer>:

void pitch_volume_changer(int16_t old_accelero_values[3],
		int16_t new_accelero_values[3]) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	int16_t difference_values[3];
	difference_values[0] = new_accelero_values[0] - old_accelero_values[0];
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001750:	b29b      	uxth	r3, r3
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21b      	sxth	r3, r3
 8001758:	813b      	strh	r3, [r7, #8]
	difference_values[1] = new_accelero_values[1] - old_accelero_values[1];
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3302      	adds	r3, #2
 800175e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3302      	adds	r3, #2
 8001768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176c:	b29b      	uxth	r3, r3
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21b      	sxth	r3, r3
 8001774:	817b      	strh	r3, [r7, #10]
	difference_values[2] = new_accelero_values[2] - old_accelero_values[2];
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3304      	adds	r3, #4
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b29b      	uxth	r3, r3
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	b21b      	sxth	r3, r3
 8001790:	81bb      	strh	r3, [r7, #12]

	if ((difference_values[0] > 30) || (difference_values[0] < -30)) {
 8001792:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001796:	2b1e      	cmp	r3, #30
 8001798:	dc04      	bgt.n	80017a4 <pitch_volume_changer+0x6c>
 800179a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800179e:	f113 0f1e 	cmn.w	r3, #30
 80017a2:	da23      	bge.n	80017ec <pitch_volume_changer+0xb4>
		if ((difference_values[0] > 0) && (current_note > 0) && (difference_values[0] < 100)) {
 80017a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd0d      	ble.n	80017c8 <pitch_volume_changer+0x90>
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <pitch_volume_changer+0x100>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd09      	ble.n	80017c8 <pitch_volume_changer+0x90>
 80017b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017b8:	2b63      	cmp	r3, #99	; 0x63
 80017ba:	dc05      	bgt.n	80017c8 <pitch_volume_changer+0x90>
			current_note -= 1;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <pitch_volume_changer+0x100>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <pitch_volume_changer+0x100>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e011      	b.n	80017ec <pitch_volume_changer+0xb4>
		} else if ((difference_values[0] < 0) && (current_note < 7) && (difference_values[0] > -100)) {
 80017c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da0d      	bge.n	80017ec <pitch_volume_changer+0xb4>
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <pitch_volume_changer+0x100>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b06      	cmp	r3, #6
 80017d6:	dc09      	bgt.n	80017ec <pitch_volume_changer+0xb4>
 80017d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017dc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80017e0:	db04      	blt.n	80017ec <pitch_volume_changer+0xb4>
			current_note += 1;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <pitch_volume_changer+0x100>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <pitch_volume_changer+0x100>)
 80017ea:	6013      	str	r3, [r2, #0]
		}
	}
	if (abs(difference_values[1] > 12)) {
 80017ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	dd1a      	ble.n	800182a <pitch_volume_changer+0xf2>
		if ((difference_values[1] < 0) && (current_volume > 0)) {
 80017f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da09      	bge.n	8001810 <pitch_volume_changer+0xd8>
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <pitch_volume_changer+0x104>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	dd05      	ble.n	8001810 <pitch_volume_changer+0xd8>
			current_volume -= 1;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <pitch_volume_changer+0x104>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3b01      	subs	r3, #1
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <pitch_volume_changer+0x104>)
 800180c:	6013      	str	r3, [r2, #0]
		} else if ((difference_values[1] > 0) && (current_volume < 4)) {
			current_volume += 1;
		}
	}
}
 800180e:	e00c      	b.n	800182a <pitch_volume_changer+0xf2>
		} else if ((difference_values[1] > 0) && (current_volume < 4)) {
 8001810:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd08      	ble.n	800182a <pitch_volume_changer+0xf2>
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <pitch_volume_changer+0x104>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b03      	cmp	r3, #3
 800181e:	dc04      	bgt.n	800182a <pitch_volume_changer+0xf2>
			current_volume += 1;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <pitch_volume_changer+0x104>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <pitch_volume_changer+0x104>)
 8001828:	6013      	str	r3, [r2, #0]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200000f8 	.word	0x200000f8
 800183c:	20000068 	.word	0x20000068

08001840 <pitch_volume_setter>:

void pitch_volume_setter() {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
	uint8_t *pitch_pointer;
	int volume;
	int sample_size;
	switch (current_note) {
 8001846:	4b38      	ldr	r3, [pc, #224]	; (8001928 <pitch_volume_setter+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b07      	cmp	r3, #7
 800184c:	d83a      	bhi.n	80018c4 <pitch_volume_setter+0x84>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <pitch_volume_setter+0x14>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001875 	.word	0x08001875
 8001858:	0800187f 	.word	0x0800187f
 800185c:	08001889 	.word	0x08001889
 8001860:	08001893 	.word	0x08001893
 8001864:	0800189d 	.word	0x0800189d
 8001868:	080018a7 	.word	0x080018a7
 800186c:	080018b1 	.word	0x080018b1
 8001870:	080018bb 	.word	0x080018bb
	case 0:
		pitch_pointer = C6_samples;
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <pitch_volume_setter+0xec>)
 8001876:	60fb      	str	r3, [r7, #12]
		sample_size = 43;
 8001878:	232b      	movs	r3, #43	; 0x2b
 800187a:	60bb      	str	r3, [r7, #8]
		break;
 800187c:	e022      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 1:
		pitch_pointer = D6_samples;
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <pitch_volume_setter+0xf0>)
 8001880:	60fb      	str	r3, [r7, #12]
		sample_size = 36;
 8001882:	2324      	movs	r3, #36	; 0x24
 8001884:	60bb      	str	r3, [r7, #8]
		break;
 8001886:	e01d      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 2:
		pitch_pointer = E6_samples;
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <pitch_volume_setter+0xf4>)
 800188a:	60fb      	str	r3, [r7, #12]
		sample_size = 33;
 800188c:	2321      	movs	r3, #33	; 0x21
 800188e:	60bb      	str	r3, [r7, #8]
		break;
 8001890:	e018      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 3:
		pitch_pointer = F6_samples;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <pitch_volume_setter+0xf8>)
 8001894:	60fb      	str	r3, [r7, #12]
		sample_size = 30;
 8001896:	231e      	movs	r3, #30
 8001898:	60bb      	str	r3, [r7, #8]
		break;
 800189a:	e013      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 4:
		pitch_pointer = G6_samples;
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <pitch_volume_setter+0xfc>)
 800189e:	60fb      	str	r3, [r7, #12]
		sample_size = 27;
 80018a0:	231b      	movs	r3, #27
 80018a2:	60bb      	str	r3, [r7, #8]
		break;
 80018a4:	e00e      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 5:
		pitch_pointer = A6_samples;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <pitch_volume_setter+0x100>)
 80018a8:	60fb      	str	r3, [r7, #12]
		sample_size = 24;
 80018aa:	2318      	movs	r3, #24
 80018ac:	60bb      	str	r3, [r7, #8]
		break;
 80018ae:	e009      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 6:
		pitch_pointer = B6_samples;
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <pitch_volume_setter+0x104>)
 80018b2:	60fb      	str	r3, [r7, #12]
		sample_size = 21;
 80018b4:	2315      	movs	r3, #21
 80018b6:	60bb      	str	r3, [r7, #8]
		break;
 80018b8:	e004      	b.n	80018c4 <pitch_volume_setter+0x84>
	case 7:
		pitch_pointer = C7_samples;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <pitch_volume_setter+0x108>)
 80018bc:	60fb      	str	r3, [r7, #12]
		sample_size = 20;
 80018be:	2314      	movs	r3, #20
 80018c0:	60bb      	str	r3, [r7, #8]
		break;
 80018c2:	bf00      	nop

	}
	switch (current_volume) {
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <pitch_volume_setter+0x10c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d81c      	bhi.n	8001906 <pitch_volume_setter+0xc6>
 80018cc:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <pitch_volume_setter+0x94>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	080018e9 	.word	0x080018e9
 80018d8:	080018ef 	.word	0x080018ef
 80018dc:	080018f5 	.word	0x080018f5
 80018e0:	080018fb 	.word	0x080018fb
 80018e4:	08001901 	.word	0x08001901
	case 0:
		volume = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
		break;
 80018ec:	e00b      	b.n	8001906 <pitch_volume_setter+0xc6>
	case 1:
		volume = 22;
 80018ee:	2316      	movs	r3, #22
 80018f0:	607b      	str	r3, [r7, #4]
		break;
 80018f2:	e008      	b.n	8001906 <pitch_volume_setter+0xc6>
	case 2:
		volume = 43;
 80018f4:	232b      	movs	r3, #43	; 0x2b
 80018f6:	607b      	str	r3, [r7, #4]
		break;
 80018f8:	e005      	b.n	8001906 <pitch_volume_setter+0xc6>
	case 3:
		volume = 64;
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	607b      	str	r3, [r7, #4]
		break;
 80018fe:	e002      	b.n	8001906 <pitch_volume_setter+0xc6>
	case 4:
		volume = 85;
 8001900:	2355      	movs	r3, #85	; 0x55
 8001902:	607b      	str	r3, [r7, #4]
		break;
 8001904:	bf00      	nop
	}

	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001906:	2100      	movs	r1, #0
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <pitch_volume_setter+0x110>)
 800190a:	f001 f9b5 	bl	8002c78 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, pitch_pointer, sample_size,
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	2308      	movs	r3, #8
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <pitch_volume_setter+0x110>)
 800191c:	f001 f8ee 	bl	8002afc <HAL_DAC_Start_DMA>
	DAC_ALIGN_8B_R);
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000f8 	.word	0x200000f8
 800192c:	200003c4 	.word	0x200003c4
 8001930:	20000328 	.word	0x20000328
 8001934:	20000354 	.word	0x20000354
 8001938:	2000024c 	.word	0x2000024c
 800193c:	2000026c 	.word	0x2000026c
 8001940:	200001d4 	.word	0x200001d4
 8001944:	200003f0 	.word	0x200003f0
 8001948:	20000288 	.word	0x20000288
 800194c:	20000068 	.word	0x20000068
 8001950:	20000110 	.word	0x20000110

08001954 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800195a:	f000 feb2 	bl	80026c2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800195e:	f000 f8b9 	bl	8001ad4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001962:	f000 fa67 	bl	8001e34 <MX_GPIO_Init>
	MX_DMA_Init();
 8001966:	f000 fa3b 	bl	8001de0 <MX_DMA_Init>
	MX_DAC1_Init();
 800196a:	f000 f92b 	bl	8001bc4 <MX_DAC1_Init>
	MX_I2C2_Init();
 800196e:	f000 f95d 	bl	8001c2c <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8001972:	f000 f9e9 	bl	8001d48 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001976:	f000 f999 	bl	8001cac <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	BSP_ACCELERO_Init();
 800197a:	f000 fbd7 	bl	800212c <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 800197e:	f000 fc2b 	bl	80021d8 <BSP_GYRO_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8001982:	484b      	ldr	r0, [pc, #300]	; (8001ab0 <main+0x15c>)
 8001984:	f004 fb92 	bl	80060ac <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001988:	2100      	movs	r1, #0
 800198a:	484a      	ldr	r0, [pc, #296]	; (8001ab4 <main+0x160>)
 800198c:	f001 f863 	bl	8002a56 <HAL_DAC_Start>

	C6_sample_populator();
 8001990:	f7ff fc56 	bl	8001240 <C6_sample_populator>
	D6_sample_populator();
 8001994:	f7ff fca0 	bl	80012d8 <D6_sample_populator>
	E6_sample_populator();
 8001998:	f7ff fcea 	bl	8001370 <E6_sample_populator>
	F6_sample_populator();
 800199c:	f7ff fd3c 	bl	8001418 <F6_sample_populator>
	G6_sample_populator();
 80019a0:	f7ff fd8a 	bl	80014b8 <G6_sample_populator>
	A6_sample_populator();
 80019a4:	f7ff fdd8 	bl	8001558 <A6_sample_populator>
	B6_sample_populator();
 80019a8:	f7ff fe26 	bl	80015f8 <B6_sample_populator>
	C7_sample_populator();
 80019ac:	f7ff fe74 	bl	8001698 <C7_sample_populator>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	BSP_ACCELERO_AccGetXYZ(accelero_values);
 80019b0:	4841      	ldr	r0, [pc, #260]	; (8001ab8 <main+0x164>)
 80019b2:	f000 fbf9 	bl	80021a8 <BSP_ACCELERO_AccGetXYZ>
	memset(global_buffer, 0, sizeof(global_buffer));
 80019b6:	2264      	movs	r2, #100	; 0x64
 80019b8:	2100      	movs	r1, #0
 80019ba:	4840      	ldr	r0, [pc, #256]	; (8001abc <main+0x168>)
 80019bc:	f005 fe7c 	bl	80076b8 <memset>
	// first value is side to side (long side), second value is up-down, third value is front-back (short side)
	sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
			(int) accelero_values[0], (int) accelero_values[1],
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <main+0x164>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 80019c6:	4619      	mov	r1, r3
			(int) accelero_values[0], (int) accelero_values[1],
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <main+0x164>)
 80019ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 80019ce:	4618      	mov	r0, r3
			(int) accelero_values[2], current_note);
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <main+0x164>)
 80019d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <main+0x16c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	4603      	mov	r3, r0
 80019e2:	460a      	mov	r2, r1
 80019e4:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <main+0x170>)
 80019e6:	4835      	ldr	r0, [pc, #212]	; (8001abc <main+0x168>)
 80019e8:	f005 fe6e 	bl	80076c8 <siprintf>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, C6_samples, 43,
 80019ec:	2308      	movs	r3, #8
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	232b      	movs	r3, #43	; 0x2b
 80019f2:	4a35      	ldr	r2, [pc, #212]	; (8001ac8 <main+0x174>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <main+0x160>)
 80019f8:	f001 f880 	bl	8002afc <HAL_DAC_Start_DMA>
		DAC_ALIGN_8B_R);

	HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer, sizeof(global_buffer),
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	2264      	movs	r2, #100	; 0x64
 8001a02:	492e      	ldr	r1, [pc, #184]	; (8001abc <main+0x168>)
 8001a04:	4831      	ldr	r0, [pc, #196]	; (8001acc <main+0x178>)
 8001a06:	f004 fff5 	bl	80069f4 <HAL_UART_Transmit>
			1000);
	old_accelero_values[0] = accelero_values[0];
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <main+0x164>)
 8001a0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <main+0x17c>)
 8001a12:	801a      	strh	r2, [r3, #0]
	old_accelero_values[1] = accelero_values[1];
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <main+0x164>)
 8001a16:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <main+0x17c>)
 8001a1c:	805a      	strh	r2, [r3, #2]
	old_accelero_values[2] = accelero_values[2];
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <main+0x164>)
 8001a20:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <main+0x17c>)
 8001a26:	809a      	strh	r2, [r3, #4]
	HAL_Delay(1000);
 8001a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2c:	f000 febe 	bl	80027ac <HAL_Delay>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		BSP_ACCELERO_AccGetXYZ(accelero_values);
 8001a30:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <main+0x164>)
 8001a32:	f000 fbb9 	bl	80021a8 <BSP_ACCELERO_AccGetXYZ>
		memset(global_buffer, 0, sizeof(global_buffer));
 8001a36:	2264      	movs	r2, #100	; 0x64
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <main+0x168>)
 8001a3c:	f005 fe3c 	bl	80076b8 <memset>
		// first value is side to side (long side), second value is up-down, third value is front-back (short side)
		sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
				(int) accelero_values[0], (int) accelero_values[1],
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <main+0x164>)
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 8001a46:	4619      	mov	r1, r3
				(int) accelero_values[0], (int) accelero_values[1],
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <main+0x164>)
 8001a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 8001a4e:	4618      	mov	r0, r3
				(int) accelero_values[2], current_note);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <main+0x164>)
 8001a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf(global_buffer, "Accelerometer values are %d, %d, %d Current note: %d",
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <main+0x16c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	4603      	mov	r3, r0
 8001a62:	460a      	mov	r2, r1
 8001a64:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <main+0x170>)
 8001a66:	4815      	ldr	r0, [pc, #84]	; (8001abc <main+0x168>)
 8001a68:	f005 fe2e 	bl	80076c8 <siprintf>
		pitch_volume_changer(old_accelero_values, accelero_values);
 8001a6c:	4912      	ldr	r1, [pc, #72]	; (8001ab8 <main+0x164>)
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <main+0x17c>)
 8001a70:	f7ff fe62 	bl	8001738 <pitch_volume_changer>
		pitch_volume_setter();
 8001a74:	f7ff fee4 	bl	8001840 <pitch_volume_setter>

		HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer,
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	2264      	movs	r2, #100	; 0x64
 8001a7e:	490f      	ldr	r1, [pc, #60]	; (8001abc <main+0x168>)
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <main+0x178>)
 8001a82:	f004 ffb7 	bl	80069f4 <HAL_UART_Transmit>
				sizeof(global_buffer), 1000);
		old_accelero_values[0] = accelero_values[0];
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <main+0x164>)
 8001a88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <main+0x17c>)
 8001a8e:	801a      	strh	r2, [r3, #0]
		old_accelero_values[1] = accelero_values[1];
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <main+0x164>)
 8001a92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <main+0x17c>)
 8001a98:	805a      	strh	r2, [r3, #2]
		old_accelero_values[2] = accelero_values[2];
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <main+0x164>)
 8001a9c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <main+0x17c>)
 8001aa2:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1000);
 8001aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa8:	f000 fe80 	bl	80027ac <HAL_Delay>
		BSP_ACCELERO_AccGetXYZ(accelero_values);
 8001aac:	e7c0      	b.n	8001a30 <main+0xdc>
 8001aae:	bf00      	nop
 8001ab0:	20000378 	.word	0x20000378
 8001ab4:	20000110 	.word	0x20000110
 8001ab8:	20000408 	.word	0x20000408
 8001abc:	20000124 	.word	0x20000124
 8001ac0:	200000f8 	.word	0x200000f8
 8001ac4:	08007eec 	.word	0x08007eec
 8001ac8:	200003c4 	.word	0x200003c4
 8001acc:	2000029c 	.word	0x2000029c
 8001ad0:	2000034c 	.word	0x2000034c

08001ad4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0bc      	sub	sp, #240	; 0xf0
 8001ad8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ada:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ade:	2244      	movs	r2, #68	; 0x44
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 fde8 	bl	80076b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ae8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2294      	movs	r2, #148	; 0x94
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 fdda 	bl	80076b8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b04:	2000      	movs	r0, #0
 8001b06:	f002 fdf7 	bl	80046f8 <HAL_PWREx_ControlVoltageScaling>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x40>
			!= HAL_OK) {
		Error_Handler();
 8001b10:	f000 f9b4 	bl	8001e7c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b14:	2310      	movs	r3, #16
 8001b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b26:	2360      	movs	r3, #96	; 0x60
 8001b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001b3e:	233c      	movs	r3, #60	; 0x3c
 8001b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fe70 	bl	8004840 <HAL_RCC_OscConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x96>
		Error_Handler();
 8001b66:	f000 f989 	bl	8001e7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001b88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fa7c 	bl	800508c <HAL_RCC_ClockConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0xca>
		Error_Handler();
 8001b9a:	f000 f96f 	bl	8001e7c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001b9e:	2381      	movs	r3, #129	; 0x81
 8001ba0:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_I2C2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fd1d 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0xe8>
		Error_Handler();
 8001bb8:	f000 f960 	bl	8001e7c <Error_Handler>
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	37f0      	adds	r7, #240	; 0xf0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2228      	movs	r2, #40	; 0x28
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 fd71 	bl	80076b8 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_DAC1_Init+0x60>)
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <MX_DAC1_Init+0x64>)
 8001bda:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001bdc:	4811      	ldr	r0, [pc, #68]	; (8001c24 <MX_DAC1_Init+0x60>)
 8001bde:	f000 ff18 	bl	8002a12 <HAL_DAC_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_DAC1_Init+0x28>
		Error_Handler();
 8001be8:	f000 f948 	bl	8001e7c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <MX_DAC1_Init+0x60>)
 8001c0c:	f001 f898 	bl	8002d40 <HAL_DAC_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_DAC1_Init+0x56>
		Error_Handler();
 8001c16:	f000 f931 	bl	8001e7c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3728      	adds	r7, #40	; 0x28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000110 	.word	0x20000110
 8001c28:	40007400 	.word	0x40007400

08001c2c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <MX_I2C2_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <MX_I2C2_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c68:	f001 ff86 	bl	8003b78 <HAL_I2C_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001c72:	f000 f903 	bl	8001e7c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c7a:	f002 fc85 	bl	8004588 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001c84:	f000 f8fa 	bl	8001e7c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_I2C2_Init+0x74>)
 8001c8c:	f002 fcc7 	bl	800461e <HAL_I2CEx_ConfigDigitalFilter>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001c96:	f000 f8f1 	bl	8001e7c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000188 	.word	0x20000188
 8001ca4:	40005800 	.word	0x40005800
 8001ca8:	307075b1 	.word	0x307075b1

08001cac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1814;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001ce0:	f240 7216 	movw	r2, #1814	; 0x716
 8001ce4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001cf2:	4814      	ldr	r0, [pc, #80]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001cf4:	f004 f982 	bl	8005ffc <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001cfe:	f000 f8bd 	bl	8001e7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001d10:	f004 fb5b 	bl	80063ca <HAL_TIM_ConfigClockSource>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x72>
		Error_Handler();
 8001d1a:	f000 f8af 	bl	8001e7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <MX_TIM2_Init+0x98>)
 8001d2c:	f004 fd6c 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001d36:	f000 f8a1 	bl	8001e7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000378 	.word	0x20000378

08001d48 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001d52:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001d92:	f004 fddf 	bl	8006954 <HAL_UART_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001d9c:	f000 f86e 	bl	8001e7c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001da0:	2100      	movs	r1, #0
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001da4:	f005 fb33 	bl	800740e <HAL_UARTEx_SetTxFifoThreshold>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001dae:	f000 f865 	bl	8001e7c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001db2:	2100      	movs	r1, #0
 8001db4:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001db6:	f005 fb68 	bl	800748a <HAL_UARTEx_SetRxFifoThreshold>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001dc0:	f000 f85c 	bl	8001e7c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_USART1_UART_Init+0x90>)
 8001dc6:	f005 fae9 	bl	800739c <HAL_UARTEx_DisableFifoMode>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001dd0:	f000 f854 	bl	8001e7c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000029c 	.word	0x2000029c
 8001ddc:	40013800 	.word	0x40013800

08001de0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_DMA_Init+0x50>)
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <MX_DMA_Init+0x50>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6493      	str	r3, [r2, #72]	; 0x48
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_DMA_Init+0x50>)
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_DMA_Init+0x50>)
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <MX_DMA_Init+0x50>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6493      	str	r3, [r2, #72]	; 0x48
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_DMA_Init+0x50>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	200b      	movs	r0, #11
 8001e1c:	f000 fdc3 	bl	80029a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e20:	200b      	movs	r0, #11
 8001e22:	f000 fddc 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_GPIO_Init+0x44>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	/* USER CODE END Error_Handler_Debug */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eb0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001eb2:	2312      	movs	r3, #18
 8001eb4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481b      	ldr	r0, [pc, #108]	; (8001f38 <I2Cx_MspInit+0xac>)
 8001eca:	f001 fbd1 	bl	8003670 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4818      	ldr	r0, [pc, #96]	; (8001f38 <I2Cx_MspInit+0xac>)
 8001ed6:	f001 fbcb 	bl	8003670 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001efc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <I2Cx_MspInit+0xa8>)
 8001f04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f08:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	2021      	movs	r0, #33	; 0x21
 8001f10:	f000 fd49 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f14:	2021      	movs	r0, #33	; 0x21
 8001f16:	f000 fd62 	bl	80029de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	2022      	movs	r0, #34	; 0x22
 8001f20:	f000 fd41 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001f24:	2022      	movs	r0, #34	; 0x22
 8001f26:	f000 fd5a 	bl	80029de <HAL_NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	48000400 	.word	0x48000400

08001f3c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <I2Cx_Init+0x54>)
 8001f48:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <I2Cx_Init+0x58>)
 8001f4e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff89 	bl	8001e8c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 fdfc 	bl	8003b78 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f002 fb00 	bl	8004588 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40005800 	.word	0x40005800
 8001f94:	00702681 	.word	0x00702681

08001f98 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af04      	add	r7, sp, #16
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	72fb      	strb	r3, [r7, #11]
 8001faa:	460b      	mov	r3, r1
 8001fac:	813b      	strh	r3, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	88f8      	ldrh	r0, [r7, #6]
 8001fbc:	893a      	ldrh	r2, [r7, #8]
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f001 ffa4 	bl	8003f1c <HAL_I2C_Mem_Read>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f832 	bl	800204c <I2Cx_Error>
  }
  return status;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af04      	add	r7, sp, #16
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	4603      	mov	r3, r0
 8002002:	72fb      	strb	r3, [r7, #11]
 8002004:	460b      	mov	r3, r1
 8002006:	813b      	strh	r3, [r7, #8]
 8002008:	4613      	mov	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b299      	uxth	r1, r3
 8002014:	88f8      	ldrh	r0, [r7, #6]
 8002016:	893a      	ldrh	r2, [r7, #8]
 8002018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4603      	mov	r3, r0
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f001 fe63 	bl	8003cf4 <HAL_I2C_Mem_Write>
 800202e:	4603      	mov	r3, r0
 8002030:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	4619      	mov	r1, r3
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f805 	bl	800204c <I2Cx_Error>
  }
  return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f001 fe1c 	bl	8003c96 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff6c 	bl	8001f3c <I2Cx_Init>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <SENSOR_IO_Init+0x10>)
 8002072:	f7ff ff63 	bl	8001f3c <I2Cx_Init>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000049c 	.word	0x2000049c

08002080 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af02      	add	r7, sp, #8
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	460b      	mov	r3, r1
 800208c:	71bb      	strb	r3, [r7, #6]
 800208e:	4613      	mov	r3, r2
 8002090:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b29a      	uxth	r2, r3
 8002096:	79f9      	ldrb	r1, [r7, #7]
 8002098:	2301      	movs	r3, #1
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	1d7b      	adds	r3, r7, #5
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <SENSOR_IO_Write+0x30>)
 80020a4:	f7ff ffa5 	bl	8001ff2 <I2Cx_WriteMultiple>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000049c 	.word	0x2000049c

080020b4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	4603      	mov	r3, r0
 80020bc:	460a      	mov	r2, r1
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	79f9      	ldrb	r1, [r7, #7]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f107 030f 	add.w	r3, r7, #15
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2301      	movs	r3, #1
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <SENSOR_IO_Read+0x38>)
 80020dc:	f7ff ff5c 	bl	8001f98 <I2Cx_ReadMultiple>

  return read_value;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000049c 	.word	0x2000049c

080020f0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	603a      	str	r2, [r7, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	460b      	mov	r3, r1
 8002100:	71bb      	strb	r3, [r7, #6]
 8002102:	4613      	mov	r3, r2
 8002104:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	b29a      	uxth	r2, r3
 800210a:	79f9      	ldrb	r1, [r7, #7]
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2301      	movs	r3, #1
 8002116:	4804      	ldr	r0, [pc, #16]	; (8002128 <SENSOR_IO_ReadMultiple+0x38>)
 8002118:	f7ff ff3e 	bl	8001f98 <I2Cx_ReadMultiple>
 800211c:	4603      	mov	r3, r0
 800211e:	b29b      	uxth	r3, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000049c 	.word	0x2000049c

0800212c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002136:	2300      	movs	r3, #0
 8002138:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <BSP_ACCELERO_Init+0x74>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4798      	blx	r3
 8002140:	4603      	mov	r3, r0
 8002142:	2b6a      	cmp	r3, #106	; 0x6a
 8002144:	d002      	beq.n	800214c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e024      	b.n	8002196 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <BSP_ACCELERO_Init+0x78>)
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <BSP_ACCELERO_Init+0x74>)
 8002150:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002152:	2330      	movs	r3, #48	; 0x30
 8002154:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800215a:	2300      	movs	r3, #0
 800215c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800215e:	2340      	movs	r3, #64	; 0x40
 8002160:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800216a:	797a      	ldrb	r2, [r7, #5]
 800216c:	7abb      	ldrb	r3, [r7, #10]
 800216e:	4313      	orrs	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002174:	7a3b      	ldrb	r3, [r7, #8]
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	b2db      	uxtb	r3, r3
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <BSP_ACCELERO_Init+0x78>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	89ba      	ldrh	r2, [r7, #12]
 8002192:	4610      	mov	r0, r2
 8002194:	4798      	blx	r3
  }  

  return ret;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	200000fc 	.word	0x200000fc

080021a8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
    }
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200000fc 	.word	0x200000fc

080021d8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80021e2:	2300      	movs	r3, #0
 80021e4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <BSP_GYRO_Init+0x7c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4798      	blx	r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b6a      	cmp	r3, #106	; 0x6a
 80021f0:	d002      	beq.n	80021f8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e028      	b.n	800224a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <BSP_GYRO_Init+0x80>)
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <BSP_GYRO_Init+0x7c>)
 80021fc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002202:	2330      	movs	r3, #48	; 0x30
 8002204:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800220e:	2340      	movs	r3, #64	; 0x40
 8002210:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002216:	230c      	movs	r3, #12
 8002218:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800221a:	7aba      	ldrb	r2, [r7, #10]
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	4313      	orrs	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002224:	7a3b      	ldrb	r3, [r7, #8]
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	b2db      	uxtb	r3, r3
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	b21b      	sxth	r3, r3
 8002238:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <BSP_GYRO_Init+0x80>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	89ba      	ldrh	r2, [r7, #12]
 8002242:	4610      	mov	r0, r2
 8002244:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000034 	.word	0x20000034
 8002258:	20000100 	.word	0x20000100

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_MspInit+0x44>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_MspInit+0x44>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6613      	str	r3, [r2, #96]	; 0x60
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_MspInit+0x44>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x44>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x44>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x44>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_DAC_MspInit+0xc8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d14d      	bne.n	8002362 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_DAC_MspInit+0xcc>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022f6:	2310      	movs	r3, #16
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f001 f9b0 	bl	8003670 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002312:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_DAC_MspInit+0xd4>)
 8002314:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002318:	2206      	movs	r2, #6
 800231a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 800231e:	2210      	movs	r2, #16
 8002320:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 800233c:	2220      	movs	r2, #32
 800233e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 8002348:	f000 fec4 	bl	80030d4 <HAL_DMA_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002352:	f7ff fd93 	bl	8001e7c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_DAC_MspInit+0xd0>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40007400 	.word	0x40007400
 8002370:	40021000 	.word	0x40021000
 8002374:	200001ec 	.word	0x200001ec
 8002378:	40020008 	.word	0x40020008

0800237c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_I2C_MspInit+0x7c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d128      	bne.n	80023f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023c8:	2304      	movs	r3, #4
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <HAL_I2C_MspInit+0x84>)
 80023d4:	f001 f94c 	bl	8003670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_I2C_MspInit+0x80>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40005800 	.word	0x40005800
 80023fc:	40021000 	.word	0x40021000
 8002400:	48000400 	.word	0x48000400

08002404 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_I2C_MspDeInit+0x3c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10f      	bne.n	8002436 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_I2C_MspDeInit+0x40>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_I2C_MspDeInit+0x40>)
 800241c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002420:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002426:	4808      	ldr	r0, [pc, #32]	; (8002448 <HAL_I2C_MspDeInit+0x44>)
 8002428:	f001 fab4 	bl	8003994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800242c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <HAL_I2C_MspDeInit+0x44>)
 8002432:	f001 faaf 	bl	8003994 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40005800 	.word	0x40005800
 8002444:	40021000 	.word	0x40021000
 8002448:	48000400 	.word	0x48000400

0800244c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d113      	bne.n	8002486 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_TIM_Base_MspInit+0x44>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_TIM_Base_MspInit+0x44>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6593      	str	r3, [r2, #88]	; 0x58
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_TIM_Base_MspInit+0x44>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	201c      	movs	r0, #28
 800247c:	f000 fa93 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002480:	201c      	movs	r0, #28
 8002482:	f000 faac 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x7c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d127      	bne.n	8002506 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6613      	str	r3, [r2, #96]	; 0x60
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_UART_MspInit+0x80>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024e6:	23c0      	movs	r3, #192	; 0xc0
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f6:	2307      	movs	r3, #7
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_UART_MspInit+0x84>)
 8002502:	f001 f8b5 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	; 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40013800 	.word	0x40013800
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <NMI_Handler+0x4>

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f000 f900 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <DMA1_Channel1_IRQHandler+0x10>)
 8002576:	f000 ff2c 	bl	80033d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001ec 	.word	0x200001ec

08002584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM2_IRQHandler+0x10>)
 800258a:	f003 fdff 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000378 	.word	0x20000378

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f005 f84c 	bl	8007664 <__errno>
 80025cc:	4602      	mov	r2, r0
 80025ce:	230c      	movs	r3, #12
 80025d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200a0000 	.word	0x200a0000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000104 	.word	0x20000104
 8002600:	200004f0 	.word	0x200004f0

08002604 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <SystemInit+0x64>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <SystemInit+0x64>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <SystemInit+0x68>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <SystemInit+0x68>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <SystemInit+0x68>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <SystemInit+0x68>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a0f      	ldr	r2, [pc, #60]	; (800266c <SystemInit+0x68>)
 8002630:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002634:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002638:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <SystemInit+0x68>)
 800263c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002640:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <SystemInit+0x68>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <SystemInit+0x68>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <SystemInit+0x68>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SystemInit+0x64>)
 8002656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800265a:	609a      	str	r2, [r3, #8]
#endif
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	40021000 	.word	0x40021000

08002670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002674:	f7ff ffc6 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002678:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800267a:	e003      	b.n	8002684 <LoopCopyDataInit>

0800267c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800267e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002680:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002682:	3104      	adds	r1, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002684:	480a      	ldr	r0, [pc, #40]	; (80026b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002688:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800268a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800268c:	d3f6      	bcc.n	800267c <CopyDataInit>
	ldr	r2, =_sbss
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002690:	e002      	b.n	8002698 <LoopFillZerobss>

08002692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002692:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002694:	f842 3b04 	str.w	r3, [r2], #4

08002698 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <LoopForever+0x16>)
	cmp	r2, r3
 800269a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800269c:	d3f9      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f004 ffe7 	bl	8007670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026a2:	f7ff f957 	bl	8001954 <main>

080026a6 <LoopForever>:

LoopForever:
    b LoopForever
 80026a6:	e7fe      	b.n	80026a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026a8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80026ac:	080087dc 	.word	0x080087dc
	ldr	r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026b4:	200000dc 	.word	0x200000dc
	ldr	r2, =_sbss
 80026b8:	200000dc 	.word	0x200000dc
	ldr	r3, = _ebss
 80026bc:	200004f0 	.word	0x200004f0

080026c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC1_IRQHandler>

080026c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 f95f 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 f80e 	bl	80026f4 <HAL_InitTick>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	e001      	b.n	80026e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e4:	f7ff fdba 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026e8:	79fb      	ldrb	r3, [r7, #7]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_InitTick+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_InitTick+0x70>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_InitTick+0x6c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f96b 	bl	80029fa <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d809      	bhi.n	8002744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f000 f935 	bl	80029a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_InitTick+0x74>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e007      	b.n	8002754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e004      	b.n	8002754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e001      	b.n	8002754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000074 	.word	0x20000074
 8002764:	2000006c 	.word	0x2000006c
 8002768:	20000070 	.word	0x20000070

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000074 	.word	0x20000074
 8002790:	200004e8 	.word	0x200004e8

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200004e8 	.word	0x200004e8

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_Delay+0x40>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000074 	.word	0x20000074

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f7ff ff8e 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff29 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff3e 	bl	8002838 <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff8e 	bl	80028e4 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff31 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa2 	bl	800294c <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e014      	b.n	8002a4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	791b      	ldrb	r3, [r3, #4]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fc35 	bl	80022a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	795b      	ldrb	r3, [r3, #5]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_DAC_Start+0x16>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e040      	b.n	8002aee <HAL_DAC_Start+0x98>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2201      	movs	r2, #1
 8002a86:	409a      	lsls	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d11d      	bne.n	8002ae0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	e014      	b.n	8002ae0 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	795b      	ldrb	r3, [r3, #5]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_DAC_Start_DMA+0x1e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e09e      	b.n	8002c58 <HAL_DAC_Start_DMA+0x15c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2202      	movs	r2, #2
 8002b24:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12a      	bne.n	8002b82 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_DAC_Start_DMA+0x164>)
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_DAC_Start_DMA+0x168>)
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_DAC_Start_DMA+0x16c>)
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b52:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d009      	beq.n	8002b6e <HAL_DAC_Start_DMA+0x72>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d00c      	beq.n	8002b78 <HAL_DAC_Start_DMA+0x7c>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d000      	beq.n	8002b64 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002b62:	e039      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3308      	adds	r3, #8
 8002b6a:	613b      	str	r3, [r7, #16]
        break;
 8002b6c:	e034      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	613b      	str	r3, [r7, #16]
        break;
 8002b76:	e02f      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3310      	adds	r3, #16
 8002b7e:	613b      	str	r3, [r7, #16]
        break;
 8002b80:	e02a      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <HAL_DAC_Start_DMA+0x170>)
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_DAC_Start_DMA+0x174>)
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <HAL_DAC_Start_DMA+0x178>)
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d009      	beq.n	8002bc4 <HAL_DAC_Start_DMA+0xc8>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d00c      	beq.n	8002bce <HAL_DAC_Start_DMA+0xd2>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d000      	beq.n	8002bba <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002bb8:	e00e      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	613b      	str	r3, [r7, #16]
        break;
 8002bc2:	e009      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	613b      	str	r3, [r7, #16]
        break;
 8002bcc:	e004      	b.n	8002bd8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	331c      	adds	r3, #28
 8002bd4:	613b      	str	r3, [r7, #16]
        break;
 8002bd6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6898      	ldr	r0, [r3, #8]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f000 fb14 	bl	8003224 <HAL_DMA_Start_IT>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
 8002c00:	e010      	b.n	8002c24 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68d8      	ldr	r0, [r3, #12]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f000 fb02 	bl	8003224 <HAL_DMA_Start_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10c      	bne.n	8002c4a <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e005      	b.n	8002c56 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f043 0204 	orr.w	r2, r3, #4
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08002fc1 	.word	0x08002fc1
 8002c64:	08002fe3 	.word	0x08002fe3
 8002c68:	08002fff 	.word	0x08002fff
 8002c6c:	08003069 	.word	0x08003069
 8002c70:	0800308b 	.word	0x0800308b
 8002c74:	080030a7 	.word	0x080030a7

08002c78 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2201      	movs	r2, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fb27 	bl	800331a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e00c      	b.n	8002cf8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fb19 	bl	800331a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002cf6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	795b      	ldrb	r3, [r3, #5]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_DAC_ConfigChannel+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e12a      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x272>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d174      	bne.n	8002e5a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d70:	f7ff fd10 	bl	8002794 <HAL_GetTick>
 8002d74:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d134      	bne.n	8002de6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d7c:	e011      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d7e:	f7ff fd09 	bl	8002794 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d90a      	bls.n	8002da2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f043 0208 	orr.w	r2, r3, #8
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e107      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e6      	bne.n	8002d7e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f7ff fcfb 	bl	80027ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	69d2      	ldr	r2, [r2, #28]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc0:	e01e      	b.n	8002e00 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dc2:	f7ff fce7 	bl	8002794 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d90a      	bls.n	8002de6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f043 0208 	orr.w	r2, r3, #8
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2203      	movs	r2, #3
 8002de0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0e5      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dbe8      	blt.n	8002dc2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff fcdb 	bl	80027ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	69d2      	ldr	r2, [r2, #28]
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	ea02 0103 	and.w	r1, r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	409a      	lsls	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	21ff      	movs	r1, #255	; 0xff
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	ea02 0103 	and.w	r1, r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11d      	bne.n	8002e9e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	221f      	movs	r2, #31
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2207      	movs	r2, #7
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f42:	d104      	bne.n	8002f4e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e018      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e00f      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f60:	f002 fa4a 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8002f64:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_DAC_ConfigChannel+0x27c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d904      	bls.n	8002f78 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e003      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	22c0      	movs	r2, #192	; 0xc0
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	04c4b400 	.word	0x04c4b400

08002fc0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff fe97 	bl	8002d02 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	711a      	strb	r2, [r3, #4]
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff fe90 	bl	8002d16 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff fe86 	bl	8002d2a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	711a      	strb	r2, [r3, #4]
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff ffd8 	bl	800302c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	711a      	strb	r2, [r3, #4]
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ffd1 	bl	8003040 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff ffc7 	bl	8003054 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	711a      	strb	r2, [r3, #4]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e08d      	b.n	8003202 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_DMA_Init+0x138>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d80f      	bhi.n	8003112 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <HAL_DMA_Init+0x13c>)
 80030fa:	4413      	add	r3, r2
 80030fc:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_DMA_Init+0x140>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a42      	ldr	r2, [pc, #264]	; (8003218 <HAL_DMA_Init+0x144>)
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
 8003110:	e00e      	b.n	8003130 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b40      	ldr	r3, [pc, #256]	; (800321c <HAL_DMA_Init+0x148>)
 800311a:	4413      	add	r3, r2
 800311c:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <HAL_DMA_Init+0x140>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a3c      	ldr	r2, [pc, #240]	; (8003220 <HAL_DMA_Init+0x14c>)
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa12 	bl	80035ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003190:	d102      	bne.n	8003198 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_DMA_Init+0x104>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d80c      	bhi.n	80031d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa32 	bl	8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e008      	b.n	80031ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40020407 	.word	0x40020407
 8003210:	bffdfff8 	.word	0xbffdfff8
 8003214:	cccccccd 	.word	0xcccccccd
 8003218:	40020000 	.word	0x40020000
 800321c:	bffdfbf8 	.word	0xbffdfbf8
 8003220:	40020400 	.word	0x40020400

08003224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Start_IT+0x20>
 8003240:	2302      	movs	r3, #2
 8003242:	e066      	b.n	8003312 <HAL_DMA_Start_IT+0xee>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d155      	bne.n	8003304 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f957 	bl	8003530 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 020e 	orr.w	r2, r2, #14
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e00f      	b.n	80032bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 020a 	orr.w	r2, r2, #10
 80032ba:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e005      	b.n	8003310 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d008      	beq.n	8003344 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e040      	b.n	80033c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020e 	bic.w	r2, r2, #14
 8003352:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 021c 	and.w	r2, r3, #28
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003390:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f003 031c 	and.w	r3, r3, #28
 80033f2:	2204      	movs	r2, #4
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d026      	beq.n	800344c <HAL_DMA_IRQHandler+0x7a>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0204 	bic.w	r2, r2, #4
 8003424:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f003 021c 	and.w	r2, r3, #28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2104      	movs	r1, #4
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	2b00      	cmp	r3, #0
 8003440:	d071      	beq.n	8003526 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800344a:	e06c      	b.n	8003526 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f003 031c 	and.w	r3, r3, #28
 8003454:	2202      	movs	r2, #2
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02e      	beq.n	80034be <HAL_DMA_IRQHandler+0xec>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d029      	beq.n	80034be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 020a 	bic.w	r2, r2, #10
 8003486:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f003 021c 	and.w	r2, r3, #28
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2102      	movs	r1, #2
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d038      	beq.n	8003526 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034bc:	e033      	b.n	8003526 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f003 031c 	and.w	r3, r3, #28
 80034c6:	2208      	movs	r2, #8
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x156>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d025      	beq.n	8003528 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020e 	bic.w	r2, r2, #14
 80034ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	f003 021c 	and.w	r2, r3, #28
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f202 	lsl.w	r2, r1, r2
 80034fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003526:	bf00      	nop
 8003528:	bf00      	nop
}
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003546:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003558:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 021c 	and.w	r2, r3, #28
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b17      	ldr	r3, [pc, #92]	; (8003618 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d80a      	bhi.n	80035d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6493      	str	r3, [r2, #72]	; 0x48
 80035d4:	e007      	b.n	80035e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	009a      	lsls	r2, r3, #2
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80035e0:	4413      	add	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3b08      	subs	r3, #8
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80035fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40020407 	.word	0x40020407
 800361c:	4002081c 	.word	0x4002081c
 8003620:	cccccccd 	.word	0xcccccccd
 8003624:	40020880 	.word	0x40020880

08003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	461a      	mov	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800364a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b01      	subs	r3, #1
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2201      	movs	r2, #1
 8003656:	409a      	lsls	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	1000823f 	.word	0x1000823f
 800366c:	40020940 	.word	0x40020940

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367e:	e166      	b.n	800394e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8158 	beq.w	8003948 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00b      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d007      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ac:	2b11      	cmp	r3, #17
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d130      	bne.n	800371a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ee:	2201      	movs	r2, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0201 	and.w	r2, r3, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0xea>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b12      	cmp	r3, #18
 8003758:	d123      	bne.n	80037a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	08da      	lsrs	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b2 	beq.w	8003948 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e4:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_GPIO_Init+0x2fc>)
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	4a60      	ldr	r2, [pc, #384]	; (800396c <HAL_GPIO_Init+0x2fc>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6613      	str	r3, [r2, #96]	; 0x60
 80037f0:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_GPIO_Init+0x2fc>)
 80037f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037fc:	4a5c      	ldr	r2, [pc, #368]	; (8003970 <HAL_GPIO_Init+0x300>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003826:	d02b      	beq.n	8003880 <HAL_GPIO_Init+0x210>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_GPIO_Init+0x304>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d025      	beq.n	800387c <HAL_GPIO_Init+0x20c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_GPIO_Init+0x308>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01f      	beq.n	8003878 <HAL_GPIO_Init+0x208>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_GPIO_Init+0x30c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d019      	beq.n	8003874 <HAL_GPIO_Init+0x204>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a4f      	ldr	r2, [pc, #316]	; (8003980 <HAL_GPIO_Init+0x310>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_GPIO_Init+0x200>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a4e      	ldr	r2, [pc, #312]	; (8003984 <HAL_GPIO_Init+0x314>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00d      	beq.n	800386c <HAL_GPIO_Init+0x1fc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a4d      	ldr	r2, [pc, #308]	; (8003988 <HAL_GPIO_Init+0x318>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <HAL_GPIO_Init+0x1f8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a4c      	ldr	r2, [pc, #304]	; (800398c <HAL_GPIO_Init+0x31c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_GPIO_Init+0x1f4>
 8003860:	2307      	movs	r3, #7
 8003862:	e00e      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003864:	2308      	movs	r3, #8
 8003866:	e00c      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003868:	2306      	movs	r3, #6
 800386a:	e00a      	b.n	8003882 <HAL_GPIO_Init+0x212>
 800386c:	2305      	movs	r3, #5
 800386e:	e008      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003870:	2304      	movs	r3, #4
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003874:	2303      	movs	r3, #3
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x212>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x212>
 8003880:	2300      	movs	r3, #0
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_GPIO_Init+0x300>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038a0:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038c4:	4a32      	ldr	r2, [pc, #200]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ee:	4a28      	ldr	r2, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f4:	4b26      	ldr	r3, [pc, #152]	; (8003990 <HAL_GPIO_Init+0x320>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_GPIO_Init+0x320>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_GPIO_Init+0x320>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_GPIO_Init+0x320>)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f ae91 	bne.w	8003680 <HAL_GPIO_Init+0x10>
  }
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	48000400 	.word	0x48000400
 8003978:	48000800 	.word	0x48000800
 800397c:	48000c00 	.word	0x48000c00
 8003980:	48001000 	.word	0x48001000
 8003984:	48001400 	.word	0x48001400
 8003988:	48001800 	.word	0x48001800
 800398c:	48001c00 	.word	0x48001c00
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039a2:	e0c9      	b.n	8003b38 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039a4:	2201      	movs	r2, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80bc 	beq.w	8003b32 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80039ba:	4a66      	ldr	r2, [pc, #408]	; (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	220f      	movs	r2, #15
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039e2:	d02b      	beq.n	8003a3c <HAL_GPIO_DeInit+0xa8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a5c      	ldr	r2, [pc, #368]	; (8003b58 <HAL_GPIO_DeInit+0x1c4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d025      	beq.n	8003a38 <HAL_GPIO_DeInit+0xa4>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a5b      	ldr	r2, [pc, #364]	; (8003b5c <HAL_GPIO_DeInit+0x1c8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01f      	beq.n	8003a34 <HAL_GPIO_DeInit+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_GPIO_DeInit+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d019      	beq.n	8003a30 <HAL_GPIO_DeInit+0x9c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a59      	ldr	r2, [pc, #356]	; (8003b64 <HAL_GPIO_DeInit+0x1d0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_GPIO_DeInit+0x98>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <HAL_GPIO_DeInit+0x1d4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00d      	beq.n	8003a28 <HAL_GPIO_DeInit+0x94>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_GPIO_DeInit+0x1d8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <HAL_GPIO_DeInit+0x90>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_GPIO_DeInit+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_GPIO_DeInit+0x8c>
 8003a1c:	2307      	movs	r3, #7
 8003a1e:	e00e      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a20:	2308      	movs	r3, #8
 8003a22:	e00c      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a24:	2306      	movs	r3, #6
 8003a26:	e00a      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a28:	2305      	movs	r3, #5
 8003a2a:	e008      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a30:	2303      	movs	r3, #3
 8003a32:	e004      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_GPIO_DeInit+0xaa>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	f002 0203 	and.w	r2, r2, #3
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	4093      	lsls	r3, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d132      	bne.n	8003ab4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4947      	ldr	r1, [pc, #284]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	4943      	ldr	r1, [pc, #268]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003a6a:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	4940      	ldr	r1, [pc, #256]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003a78:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	493c      	ldr	r1, [pc, #240]	; (8003b74 <HAL_GPIO_DeInit+0x1e0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a96:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	482b      	ldr	r0, [pc, #172]	; (8003b54 <HAL_GPIO_DeInit+0x1c0>)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	400a      	ands	r2, r1
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2103      	movs	r1, #3
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	08d2      	lsrs	r2, r2, #3
 8003ae8:	4019      	ands	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2103      	movs	r1, #3
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2103      	movs	r1, #3
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f af2f 	bne.w	80039a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	48000400 	.word	0x48000400
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	48000c00 	.word	0x48000c00
 8003b64:	48001000 	.word	0x48001000
 8003b68:	48001400 	.word	0x48001400
 8003b6c:	48001800 	.word	0x48001800
 8003b70:	48001c00 	.word	0x48001c00
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e081      	b.n	8003c8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fbec 	bl	800237c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d104      	bne.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	ea42 0103 	orr.w	r1, r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69d9      	ldr	r1, [r3, #28]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e021      	b.n	8003cec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fe fb9f 	bl	8002404 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	460b      	mov	r3, r1
 8003d08:	813b      	strh	r3, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	f040 80f9 	bne.w	8003f0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x34>
 8003d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0ed      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Mem_Write+0x4e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0e6      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d4a:	f7fe fd23 	bl	8002794 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fac3 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d1      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2221      	movs	r2, #33	; 0x21
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d94:	88f8      	ldrh	r0, [r7, #6]
 8003d96:	893a      	ldrh	r2, [r7, #8]
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4603      	mov	r3, r0
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f9d3 	bl	8004150 <I2C_RequestMemoryWrite>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0a9      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2bff      	cmp	r3, #255	; 0xff
 8003dc4:	d90e      	bls.n	8003de4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	8979      	ldrh	r1, [r7, #10]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fba5 	bl	800452c <I2C_TransferConfig>
 8003de2:	e00f      	b.n	8003e04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb94 	bl	800452c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 faad 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e07b      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d034      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d130      	bne.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fa3f 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04d      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2bff      	cmp	r3, #255	; 0xff
 8003e7c:	d90e      	bls.n	8003e9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	22ff      	movs	r2, #255	; 0xff
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fb49 	bl	800452c <I2C_TransferConfig>
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb38 	bl	800452c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d19e      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa8c 	bl	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e01a      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_I2C_Mem_Write+0x224>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	fe00e800 	.word	0xfe00e800

08003f1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	f040 80fd 	bne.w	800413e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_I2C_Mem_Read+0x34>
 8003f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0f1      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x4e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0ea      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f72:	f7fe fc0f 	bl	8002794 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f9af 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d5      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2222      	movs	r2, #34	; 0x22
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fbc:	88f8      	ldrh	r0, [r7, #6]
 8003fbe:	893a      	ldrh	r2, [r7, #8]
 8003fc0:	8979      	ldrh	r1, [r7, #10]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f913 	bl	80041f8 <I2C_RequestMemoryRead>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ad      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2bff      	cmp	r3, #255	; 0xff
 8003fec:	d90e      	bls.n	800400c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	4b52      	ldr	r3, [pc, #328]	; (8004148 <HAL_I2C_Mem_Read+0x22c>)
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fa91 	bl	800452c <I2C_TransferConfig>
 800400a:	e00f      	b.n	800402c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	8979      	ldrh	r1, [r7, #10]
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_I2C_Mem_Read+0x22c>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa80 	bl	800452c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2200      	movs	r2, #0
 8004034:	2104      	movs	r1, #4
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f956 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07c      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d034      	beq.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d130      	bne.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f927 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04d      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bff      	cmp	r3, #255	; 0xff
 80040ac:	d90e      	bls.n	80040cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	; 0xff
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa31 	bl	800452c <I2C_TransferConfig>
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa20 	bl	800452c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d19a      	bne.n	800402c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f974 	bl	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01a      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_I2C_Mem_Read+0x230>)
 800411e:	400b      	ands	r3, r1
 8004120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	80002400 	.word	0x80002400
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4603      	mov	r3, r0
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	460b      	mov	r3, r1
 8004164:	813b      	strh	r3, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <I2C_RequestMemoryWrite+0xa4>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9d7 	bl	800452c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8f0 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02c      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
 80041a2:	e015      	b.n	80041d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8d6 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e012      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f884 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	80002000 	.word	0x80002000

080041f8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	8979      	ldrh	r1, [r7, #10]
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <I2C_RequestMemoryRead+0xa4>)
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f984 	bl	800452c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f89d 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e02c      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
 8004248:	e015      	b.n	8004276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800424a:	893b      	ldrh	r3, [r7, #8]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b29b      	uxth	r3, r3
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f883 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e012      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2200      	movs	r2, #0
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f831 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	80002000 	.word	0x80002000

080042a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d103      	bne.n	80042be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d007      	beq.n	80042dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	619a      	str	r2, [r3, #24]
  }
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	e022      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d01e      	beq.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fe fa47 	bl	8002794 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d113      	bne.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00f      	b.n	8004360 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d0cd      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004374:	e02c      	b.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f870 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e02a      	b.n	80043e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d01e      	beq.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe f9ff 	bl	8002794 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d113      	bne.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e007      	b.n	80043e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d1cb      	bne.n	8004376 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f4:	e028      	b.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f830 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e026      	b.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe f9c3 	bl	8002794 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d113      	bne.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e007      	b.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d1cf      	bne.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b10      	cmp	r3, #16
 8004478:	d151      	bne.n	800451e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800447a:	e022      	b.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d01e      	beq.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fe f986 	bl	8002794 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <I2C_IsAcknowledgeFailed+0x3a>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e02e      	b.n	8004520 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d1d5      	bne.n	800447c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2220      	movs	r2, #32
 80044de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fedd 	bl	80042a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <I2C_IsAcknowledgeFailed+0xc8>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	fe00e800 	.word	0xfe00e800

0800452c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	4613      	mov	r3, r2
 800453c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	0d5b      	lsrs	r3, r3, #21
 8004548:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <I2C_TransferConfig+0x58>)
 800454e:	430b      	orrs	r3, r1
 8004550:	43db      	mvns	r3, r3
 8004552:	ea02 0103 	and.w	r1, r2, r3
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800455c:	7a7b      	ldrb	r3, [r7, #9]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	431a      	orrs	r2, r3
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	03ff63ff 	.word	0x03ff63ff

08004588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	d138      	bne.n	8004610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e032      	b.n	8004612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	d139      	bne.n	80046a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800463e:	2302      	movs	r3, #2
 8004640:	e033      	b.n	80046aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2224      	movs	r2, #36	; 0x24
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c8:	d102      	bne.n	80046d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80046ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ce:	e00b      	b.n	80046e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d102      	bne.n	80046e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80046e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e4:	e000      	b.n	80046e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80046e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000

080046f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d141      	bne.n	800478a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004706:	4b4b      	ldr	r3, [pc, #300]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d131      	bne.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	4a46      	ldr	r2, [pc, #280]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800472c:	4a41      	ldr	r2, [pc, #260]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004734:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2232      	movs	r2, #50	; 0x32
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4a3f      	ldr	r2, [pc, #252]	; (800483c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	0c9b      	lsrs	r3, r3, #18
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474a:	e002      	b.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3b01      	subs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004752:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d102      	bne.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f2      	bne.n	800474c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004766:	4b33      	ldr	r3, [pc, #204]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004772:	d158      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e057      	b.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004778:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004788:	e04d      	b.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004790:	d141      	bne.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d131      	bne.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a6:	4a23      	ldr	r2, [pc, #140]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047b8:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2232      	movs	r2, #50	; 0x32
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0c9b      	lsrs	r3, r3, #18
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d6:	e002      	b.n	80047de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d102      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d112      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e011      	b.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004814:	e007      	b.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800481e:	4a05      	ldr	r2, [pc, #20]	; (8004834 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004824:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40007000 	.word	0x40007000
 8004838:	2000006c 	.word	0x2000006c
 800483c:	431bde83 	.word	0x431bde83

08004840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f000 bc16 	b.w	8005080 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004854:	4ba0      	ldr	r3, [pc, #640]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485e:	4b9e      	ldr	r3, [pc, #632]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80e4 	beq.w	8004a3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_RCC_OscConfig+0x4c>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	f040 808b 	bne.w	800499a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b01      	cmp	r3, #1
 8004888:	f040 8087 	bne.w	800499a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800488c:	4b92      	ldr	r3, [pc, #584]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_OscConfig+0x64>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e3ed      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	4b8b      	ldr	r3, [pc, #556]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_RCC_OscConfig+0x7e>
 80048b4:	4b88      	ldr	r3, [pc, #544]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	e005      	b.n	80048ca <HAL_RCC_OscConfig+0x8a>
 80048be:	4b86      	ldr	r3, [pc, #536]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d223      	bcs.n	8004916 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fdc8 	bl	8005468 <RCC_SetFlashLatencyFromMSIRange>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e3ce      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e2:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b7a      	ldr	r3, [pc, #488]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4977      	ldr	r1, [pc, #476]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004900:	4b75      	ldr	r3, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	4972      	ldr	r1, [pc, #456]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
 8004914:	e025      	b.n	8004962 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004916:	4b70      	ldr	r3, [pc, #448]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6f      	ldr	r2, [pc, #444]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 800491c:	f043 0308 	orr.w	r3, r3, #8
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	496a      	ldr	r1, [pc, #424]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	4965      	ldr	r1, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fd88 	bl	8005468 <RCC_SetFlashLatencyFromMSIRange>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e38e      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004962:	f000 fcbf 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8004966:	4601      	mov	r1, r0
 8004968:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	4a5a      	ldr	r2, [pc, #360]	; (8004adc <HAL_RCC_OscConfig+0x29c>)
 8004974:	5cd3      	ldrb	r3, [r2, r3]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	fa21 f303 	lsr.w	r3, r1, r3
 800497e:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x2a0>)
 8004980:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004982:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_RCC_OscConfig+0x2a4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fd feb4 	bl	80026f4 <HAL_InitTick>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d052      	beq.n	8004a3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	e372      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d032      	beq.n	8004a08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049a2:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a4c      	ldr	r2, [pc, #304]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049ae:	f7fd fef1 	bl	8002794 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b6:	f7fd feed 	bl	8002794 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e35b      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c8:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d4:	4b40      	ldr	r3, [pc, #256]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049da:	f043 0308 	orr.w	r3, r3, #8
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	493a      	ldr	r1, [pc, #232]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	4935      	ldr	r1, [pc, #212]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
 8004a06:	e01a      	b.n	8004a3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a32      	ldr	r2, [pc, #200]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a14:	f7fd febe 	bl	8002794 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a1c:	f7fd feba 	bl	8002794 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e328      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x1dc>
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d073      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_OscConfig+0x21c>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d10e      	bne.n	8004a74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d10b      	bne.n	8004a74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d063      	beq.n	8004b30 <HAL_RCC_OscConfig+0x2f0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d15f      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e305      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7c:	d106      	bne.n	8004a8c <HAL_RCC_OscConfig+0x24c>
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e01d      	b.n	8004ac8 <HAL_RCC_OscConfig+0x288>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x270>
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x288>
 8004ab0:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <HAL_RCC_OscConfig+0x298>)
 8004ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fe60 	bl	8002794 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	e010      	b.n	8004afa <HAL_RCC_OscConfig+0x2ba>
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08007f34 	.word	0x08007f34
 8004ae0:	2000006c 	.word	0x2000006c
 8004ae4:	20000070 	.word	0x20000070
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fe54 	bl	8002794 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e2c2      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afa:	4baf      	ldr	r3, [pc, #700]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x2a8>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fd fe44 	bl	8002794 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fd fe40 	bl	8002794 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e2ae      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b22:	4ba5      	ldr	r3, [pc, #660]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2d0>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d060      	beq.n	8004c00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d005      	beq.n	8004b50 <HAL_RCC_OscConfig+0x310>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d116      	bne.n	8004b7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b50:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_OscConfig+0x328>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e28b      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b68:	4b93      	ldr	r3, [pc, #588]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	4990      	ldr	r1, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b7c:	e040      	b.n	8004c00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d023      	beq.n	8004bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b86:	4b8c      	ldr	r3, [pc, #560]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a8b      	ldr	r2, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fd fdff 	bl	8002794 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fdfb 	bl	8002794 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e269      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bac:	4b82      	ldr	r3, [pc, #520]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	497c      	ldr	r1, [pc, #496]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
 8004bcc:	e018      	b.n	8004c00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a79      	ldr	r2, [pc, #484]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd fddb 	bl	8002794 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fd fdd7 	bl	8002794 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e245      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bf4:	4b70      	ldr	r3, [pc, #448]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d03c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c14:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	4a67      	ldr	r2, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fd fdb6 	bl	8002794 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2c:	f7fd fdb2 	bl	8002794 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e220      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c3e:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ef      	beq.n	8004c2c <HAL_RCC_OscConfig+0x3ec>
 8004c4c:	e01b      	b.n	8004c86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4e:	4b5a      	ldr	r3, [pc, #360]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c54:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fd fd99 	bl	8002794 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c66:	f7fd fd95 	bl	8002794 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e203      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c78:	4b4f      	ldr	r3, [pc, #316]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ef      	bne.n	8004c66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a6 	beq.w	8004de0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c98:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca4:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	4a43      	ldr	r2, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cae:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc0:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <HAL_RCC_OscConfig+0x57c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d118      	bne.n	8004cfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <HAL_RCC_OscConfig+0x57c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	; (8004dbc <HAL_RCC_OscConfig+0x57c>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fd5c 	bl	8002794 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce0:	f7fd fd58 	bl	8002794 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1c6      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf2:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x57c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d108      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4d8>
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d16:	e024      	b.n	8004d62 <HAL_RCC_OscConfig+0x522>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d110      	bne.n	8004d42 <HAL_RCC_OscConfig+0x502>
 8004d20:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d28:	f043 0304 	orr.w	r3, r3, #4
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d30:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	4a20      	ldr	r2, [pc, #128]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d40:	e00f      	b.n	8004d62 <HAL_RCC_OscConfig+0x522>
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d52:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d5a:	f023 0304 	bic.w	r3, r3, #4
 8004d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fd fd13 	bl	8002794 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fd fd0f 	bl	8002794 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e17b      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ed      	beq.n	8004d72 <HAL_RCC_OscConfig+0x532>
 8004d96:	e01a      	b.n	8004dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fd fcfc 	bl	8002794 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d9e:	e00f      	b.n	8004dc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fd fcf8 	bl	8002794 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d906      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e164      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc0:	4ba8      	ldr	r3, [pc, #672]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e8      	bne.n	8004da0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd4:	4ba3      	ldr	r3, [pc, #652]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	4aa2      	ldr	r2, [pc, #648]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d03c      	beq.n	8004e66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004df4:	4b9b      	ldr	r3, [pc, #620]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dfa:	4a9a      	ldr	r2, [pc, #616]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fd fcc6 	bl	8002794 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0c:	f7fd fcc2 	bl	8002794 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e130      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e1e:	4b91      	ldr	r3, [pc, #580]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <HAL_RCC_OscConfig+0x5cc>
 8004e2c:	e01b      	b.n	8004e66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e2e:	4b8d      	ldr	r3, [pc, #564]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e34:	4a8b      	ldr	r2, [pc, #556]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3e:	f7fd fca9 	bl	8002794 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e46:	f7fd fca5 	bl	8002794 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e113      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e58:	4b82      	ldr	r3, [pc, #520]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ef      	bne.n	8004e46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8107 	beq.w	800507e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f040 80cb 	bne.w	8005010 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d12c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d123      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d11b      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d113      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d06d      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d068      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004eee:	4b5d      	ldr	r3, [pc, #372]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004efa:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0ba      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b56      	ldr	r3, [pc, #344]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a55      	ldr	r2, [pc, #340]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f16:	f7fd fc3d 	bl	8002794 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fd fc39 	bl	8002794 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0a7      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f30:	4b4c      	ldr	r3, [pc, #304]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f0      	bne.n	8004f1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_RCC_OscConfig+0x828>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f56:	0212      	lsls	r2, r2, #8
 8004f58:	4311      	orrs	r1, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f5e:	0852      	lsrs	r2, r2, #1
 8004f60:	3a01      	subs	r2, #1
 8004f62:	0552      	lsls	r2, r2, #21
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f6a:	0852      	lsrs	r2, r2, #1
 8004f6c:	3a01      	subs	r2, #1
 8004f6e:	0652      	lsls	r2, r2, #25
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f76:	06d2      	lsls	r2, r2, #27
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	493a      	ldr	r1, [pc, #232]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a37      	ldr	r2, [pc, #220]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f98:	f7fd fbfc 	bl	8002794 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fd fbf8 	bl	8002794 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e066      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fbe:	e05e      	b.n	800507e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e05d      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d156      	bne.n	800507e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a23      	ldr	r2, [pc, #140]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8004fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fe8:	f7fd fbd4 	bl	8002794 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fd fbd0 	bl	8002794 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e03e      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005002:	4b18      	ldr	r3, [pc, #96]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x7b0>
 800500e:	e036      	b.n	800507e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	d031      	beq.n	800507a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 800501c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005020:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_OscConfig+0x824>)
 8005040:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd fba3 	bl	8002794 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005050:	e00c      	b.n	800506c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd fb9f 	bl	8002794 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d905      	bls.n	800506c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e00d      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
 8005064:	40021000 	.word	0x40021000
 8005068:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCC_OscConfig+0x848>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ec      	bne.n	8005052 <HAL_RCC_OscConfig+0x812>
 8005078:	e001      	b.n	800507e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e10f      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b89      	ldr	r3, [pc, #548]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d910      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b86      	ldr	r3, [pc, #536]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 020f 	bic.w	r2, r3, #15
 80050ba:	4984      	ldr	r1, [pc, #528]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b82      	ldr	r3, [pc, #520]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0f7      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8089 	beq.w	80051f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d133      	bne.n	8005152 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ea:	4b79      	ldr	r3, [pc, #484]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0e4      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80050fa:	f000 fa0f 	bl	800551c <RCC_GetSysClockFreqFromPLLSource>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b74      	ldr	r3, [pc, #464]	; (80052d4 <HAL_RCC_ClockConfig+0x248>)
 8005102:	429a      	cmp	r2, r3
 8005104:	d955      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005106:	4b72      	ldr	r3, [pc, #456]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005112:	4b6f      	ldr	r3, [pc, #444]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511a:	4a6d      	ldr	r2, [pc, #436]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e044      	b.n	80051b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03e      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x126>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d13a      	bne.n	80051b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800513c:	4b64      	ldr	r3, [pc, #400]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005144:	4a62      	ldr	r2, [pc, #392]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e02f      	b.n	80051b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515a:	4b5d      	ldr	r3, [pc, #372]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d115      	bne.n	8005192 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0ac      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005172:	4b57      	ldr	r3, [pc, #348]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0a0      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005182:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e098      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005192:	f000 f8a7 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <HAL_RCC_ClockConfig+0x248>)
 800519a:	429a      	cmp	r2, r3
 800519c:	d909      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800519e:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	4a4a      	ldr	r2, [pc, #296]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b2:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4944      	ldr	r1, [pc, #272]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c4:	f7fd fae6 	bl	8002794 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fd fae2 	bl	8002794 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e070      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 020c 	and.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1eb      	bne.n	80051cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005200:	4b33      	ldr	r3, [pc, #204]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4930      	ldr	r1, [pc, #192]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
 8005212:	e008      	b.n	8005226 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d105      	bne.n	8005226 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800521a:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005224:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d210      	bcs.n	8005256 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f023 020f 	bic.w	r2, r3, #15
 800523c:	4923      	ldr	r1, [pc, #140]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCC_ClockConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d001      	beq.n	8005256 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e036      	b.n	80052c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4918      	ldr	r1, [pc, #96]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4910      	ldr	r1, [pc, #64]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 8005290:	4313      	orrs	r3, r2
 8005292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005294:	f000 f826 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8005298:	4601      	mov	r1, r0
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCC_ClockConfig+0x244>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_RCC_ClockConfig+0x24c>)
 80052a6:	5cd3      	ldrb	r3, [r2, r3]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa21 f303 	lsr.w	r3, r1, r3
 80052b0:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <HAL_RCC_ClockConfig+0x250>)
 80052b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x254>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd fa1b 	bl	80026f4 <HAL_InitTick>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40022000 	.word	0x40022000
 80052d0:	40021000 	.word	0x40021000
 80052d4:	04c4b400 	.word	0x04c4b400
 80052d8:	08007f34 	.word	0x08007f34
 80052dc:	2000006c 	.word	0x2000006c
 80052e0:	20000070 	.word	0x20000070

080052e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f2:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052fc:	4b3a      	ldr	r3, [pc, #232]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x34>
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d121      	bne.n	8005356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d11e      	bne.n	8005356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005318:	4b33      	ldr	r3, [pc, #204]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005324:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	e005      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005334:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10d      	bne.n	800536c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005354:	e00a      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d102      	bne.n	8005362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e004      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d101      	bne.n	800536c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800536a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d133      	bne.n	80053da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d002      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0xa4>
 8005382:	2b03      	cmp	r3, #3
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0xaa>
 8005386:	e005      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800538a:	617b      	str	r3, [r7, #20]
      break;
 800538c:	e005      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800538e:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005390:	617b      	str	r3, [r7, #20]
      break;
 8005392:	e002      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	617b      	str	r3, [r7, #20]
      break;
 8005398:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	3301      	adds	r3, #1
 80053a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	fb02 f203 	mul.w	r2, r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	0e5b      	lsrs	r3, r3, #25
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	3301      	adds	r3, #1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053da:	69bb      	ldr	r3, [r7, #24]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08007f4c 	.word	0x08007f4c
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	007a1200 	.word	0x007a1200

080053f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_RCC_GetHCLKFreq+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000006c 	.word	0x2000006c

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005414:	f7ff fff0 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005418:	4601      	mov	r1, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	08007f44 	.word	0x08007f44

0800543c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005440:	f7ff ffda 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005444:	4601      	mov	r1, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0adb      	lsrs	r3, r3, #11
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005452:	5cd3      	ldrb	r3, [r2, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	08007f44 	.word	0x08007f44

08005468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005480:	f7ff f91a 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 8005484:	6178      	str	r0, [r7, #20]
 8005486:	e014      	b.n	80054b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054a0:	f7ff f90a 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 80054a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d10b      	bne.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d913      	bls.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2ba0      	cmp	r3, #160	; 0xa0
 80054c4:	d902      	bls.n	80054cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054c6:	2302      	movs	r3, #2
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e00d      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054cc:	2301      	movs	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e00a      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b7f      	cmp	r3, #127	; 0x7f
 80054d6:	d902      	bls.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054d8:	2302      	movs	r3, #2
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e004      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b70      	cmp	r3, #112	; 0x70
 80054e2:	d101      	bne.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054e4:	2301      	movs	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 020f 	bic.w	r2, r3, #15
 80054f0:	4909      	ldr	r1, [pc, #36]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	40022000 	.word	0x40022000

0800551c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d118      	bne.n	8005564 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e005      	b.n	800555a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d002      	beq.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005574:	2b03      	cmp	r3, #3
 8005576:	d003      	beq.n	8005580 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005578:	e005      	b.n	8005586 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800557c:	613b      	str	r3, [r7, #16]
    break;
 800557e:	e005      	b.n	800558c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005582:	613b      	str	r3, [r7, #16]
    break;
 8005584:	e002      	b.n	800558c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	613b      	str	r3, [r7, #16]
    break;
 800558a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	3301      	adds	r3, #1
 8005598:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800559a:	4b10      	ldr	r3, [pc, #64]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	fb02 f203 	mul.w	r2, r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	0e5b      	lsrs	r3, r3, #25
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	3301      	adds	r3, #1
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055cc:	683b      	ldr	r3, [r7, #0]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	08007f4c 	.word	0x08007f4c
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	007a1200 	.word	0x007a1200

080055ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055f4:	2300      	movs	r3, #0
 80055f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f8:	2300      	movs	r3, #0
 80055fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005604:	2b00      	cmp	r3, #0
 8005606:	d03d      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d00b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d804      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00e      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800561c:	e01d      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800561e:	2b60      	cmp	r3, #96	; 0x60
 8005620:	d01e      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d01c      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005626:	e018      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005628:	4b86      	ldr	r3, [pc, #536]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a85      	ldr	r2, [pc, #532]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005634:	e015      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fafd 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3320      	adds	r3, #32
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fbe4 	bl	8005e1c <RCCEx_PLLSAI2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005668:	4b76      	ldr	r3, [pc, #472]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800566a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800566e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	4973      	ldr	r1, [pc, #460]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d042      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005698:	d00f      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xce>
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d805      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80056a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a8:	d017      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80056aa:	e01f      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x100>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d01f      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b6:	d01c      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056b8:	e018      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056ba:	4b62      	ldr	r3, [pc, #392]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4a61      	ldr	r2, [pc, #388]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c6:	e015      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fab4 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d8:	e00c      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3320      	adds	r3, #32
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fb9b 	bl	8005e1c <RCCEx_PLLSAI2_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	74fb      	strb	r3, [r7, #19]
      break;
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80056f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f4:	7cfb      	ldrb	r3, [r7, #19]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056fa:	4b52      	ldr	r3, [pc, #328]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	494e      	ldr	r1, [pc, #312]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005710:	e001      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 809f 	beq.w	8005862 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005724:	2300      	movs	r3, #0
 8005726:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005728:	4b46      	ldr	r3, [pc, #280]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b41      	ldr	r3, [pc, #260]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	4a40      	ldr	r2, [pc, #256]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	; 0x58
 800574a:	4b3e      	ldr	r3, [pc, #248]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a3a      	ldr	r2, [pc, #232]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005766:	f7fd f815 	bl	8002794 <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576c:	e009      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fd f811 	bl	8002794 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d902      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	74fb      	strb	r3, [r7, #19]
        break;
 8005780:	e005      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d15b      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01f      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d019      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057be:	4b21      	ldr	r3, [pc, #132]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d016      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fc ffd0 	bl	8002794 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f6:	e00b      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f8:	f7fc ffcc 	bl	8002794 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d902      	bls.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	74fb      	strb	r3, [r7, #19]
            break;
 800580e:	e006      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ec      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10c      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005824:	4b07      	ldr	r3, [pc, #28]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800583c:	e008      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	74bb      	strb	r3, [r7, #18]
 8005842:	e005      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005844:	40021000 	.word	0x40021000
 8005848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005850:	7c7b      	ldrb	r3, [r7, #17]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005856:	4ba0      	ldr	r3, [pc, #640]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585a:	4a9f      	ldr	r2, [pc, #636]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586e:	4b9a      	ldr	r3, [pc, #616]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f023 0203 	bic.w	r2, r3, #3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	4996      	ldr	r1, [pc, #600]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005890:	4b91      	ldr	r3, [pc, #580]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f023 020c 	bic.w	r2, r3, #12
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	498e      	ldr	r1, [pc, #568]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058b2:	4b89      	ldr	r3, [pc, #548]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	4985      	ldr	r1, [pc, #532]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d4:	4b80      	ldr	r3, [pc, #512]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e2:	497d      	ldr	r1, [pc, #500]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f6:	4b78      	ldr	r3, [pc, #480]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005904:	4974      	ldr	r1, [pc, #464]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005918:	4b6f      	ldr	r3, [pc, #444]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005926:	496c      	ldr	r1, [pc, #432]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593a:	4b67      	ldr	r3, [pc, #412]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005948:	4963      	ldr	r1, [pc, #396]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800595c:	4b5e      	ldr	r3, [pc, #376]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800596a:	495b      	ldr	r1, [pc, #364]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597e:	4b56      	ldr	r3, [pc, #344]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	4952      	ldr	r1, [pc, #328]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059a0:	4b4d      	ldr	r3, [pc, #308]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	494a      	ldr	r1, [pc, #296]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c2:	4b45      	ldr	r3, [pc, #276]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d0:	4941      	ldr	r1, [pc, #260]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e4:	4b3c      	ldr	r3, [pc, #240]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	4939      	ldr	r1, [pc, #228]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d028      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a06:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a14:	4930      	ldr	r1, [pc, #192]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a24:	d106      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a26:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a30:	60d3      	str	r3, [r2, #12]
 8005a32:	e011      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	2101      	movs	r1, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 f8f9 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d04d      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a7e:	e012      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005a80:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a86:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9e:	490e      	ldr	r1, [pc, #56]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aae:	d106      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aba:	60d3      	str	r3, [r2, #12]
 8005abc:	e020      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a02      	ldr	r2, [pc, #8]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad2:	60d3      	str	r3, [r2, #12]
 8005ad4:	e014      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f8a5 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d028      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1a:	4947      	ldr	r1, [pc, #284]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d106      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b42      	ldr	r3, [pc, #264]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e011      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f876 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01e      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7a:	492f      	ldr	r1, [pc, #188]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2102      	movs	r1, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f851 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bba:	f023 0204 	bic.w	r2, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc4:	491c      	ldr	r1, [pc, #112]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bde:	f023 0218 	bic.w	r2, r3, #24
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	4913      	ldr	r1, [pc, #76]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0c:	490a      	ldr	r1, [pc, #40]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000

08005c3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c4a:	4b70      	ldr	r3, [pc, #448]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c56:	4b6d      	ldr	r3, [pc, #436]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0203 	and.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d103      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
       ||
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d13f      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	e03c      	b.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d00c      	beq.n	8005c96 <RCCEx_PLLSAI1_Config+0x5a>
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d013      	beq.n	8005ca8 <RCCEx_PLLSAI1_Config+0x6c>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d120      	bne.n	8005cc6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c84:	4b61      	ldr	r3, [pc, #388]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11d      	bne.n	8005ccc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c94:	e01a      	b.n	8005ccc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c96:	4b5d      	ldr	r3, [pc, #372]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d116      	bne.n	8005cd0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca6:	e013      	b.n	8005cd0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ca8:	4b58      	ldr	r3, [pc, #352]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10f      	bne.n	8005cd4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cb4:	4b55      	ldr	r3, [pc, #340]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cc4:	e006      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e004      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005cd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d108      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005cdc:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f023 0203 	bic.w	r2, r3, #3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4948      	ldr	r1, [pc, #288]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 8086 	bne.w	8005e02 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d02:	f7fc fd47 	bl	8002794 <HAL_GetTick>
 8005d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d08:	e009      	b.n	8005d1e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d0a:	f7fc fd43 	bl	8002794 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d1c:	e005      	b.n	8005d2a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1ef      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d168      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d113      	bne.n	8005d5e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d36:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6892      	ldr	r2, [r2, #8]
 8005d42:	0211      	lsls	r1, r2, #8
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68d2      	ldr	r2, [r2, #12]
 8005d48:	06d2      	lsls	r2, r2, #27
 8005d4a:	4311      	orrs	r1, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	3a01      	subs	r2, #1
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	430a      	orrs	r2, r1
 8005d56:	492d      	ldr	r1, [pc, #180]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	610b      	str	r3, [r1, #16]
 8005d5c:	e02d      	b.n	8005dba <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d115      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d64:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6892      	ldr	r2, [r2, #8]
 8005d70:	0211      	lsls	r1, r2, #8
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6912      	ldr	r2, [r2, #16]
 8005d76:	0852      	lsrs	r2, r2, #1
 8005d78:	3a01      	subs	r2, #1
 8005d7a:	0552      	lsls	r2, r2, #21
 8005d7c:	4311      	orrs	r1, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6852      	ldr	r2, [r2, #4]
 8005d82:	3a01      	subs	r2, #1
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	430a      	orrs	r2, r1
 8005d88:	4920      	ldr	r1, [pc, #128]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	610b      	str	r3, [r1, #16]
 8005d8e:	e014      	b.n	8005dba <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6892      	ldr	r2, [r2, #8]
 8005d9c:	0211      	lsls	r1, r2, #8
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6952      	ldr	r2, [r2, #20]
 8005da2:	0852      	lsrs	r2, r2, #1
 8005da4:	3a01      	subs	r2, #1
 8005da6:	0652      	lsls	r2, r2, #25
 8005da8:	4311      	orrs	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6852      	ldr	r2, [r2, #4]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	0112      	lsls	r2, r2, #4
 8005db2:	430a      	orrs	r2, r1
 8005db4:	4915      	ldr	r1, [pc, #84]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fc fce5 	bl	8002794 <HAL_GetTick>
 8005dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dcc:	e009      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dce:	f7fc fce1 	bl	8002794 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d902      	bls.n	8005de2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	73fb      	strb	r3, [r7, #15]
          break;
 8005de0:	e005      	b.n	8005dee <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ef      	beq.n	8005dce <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	07ff800f 	.word	0x07ff800f
 8005e14:	ff9f800f 	.word	0xff9f800f
 8005e18:	f9ff800f 	.word	0xf9ff800f

08005e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e2a:	4b70      	ldr	r3, [pc, #448]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e36:	4b6d      	ldr	r3, [pc, #436]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0203 	and.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d103      	bne.n	8005e4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
       ||
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d13f      	bne.n	8005ece <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	e03c      	b.n	8005ece <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d00c      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x5a>
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d013      	beq.n	8005e88 <RCCEx_PLLSAI2_Config+0x6c>
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d120      	bne.n	8005ea6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e64:	4b61      	ldr	r3, [pc, #388]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11d      	bne.n	8005eac <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e74:	e01a      	b.n	8005eac <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d116      	bne.n	8005eb0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e86:	e013      	b.n	8005eb0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e88:	4b58      	ldr	r3, [pc, #352]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10f      	bne.n	8005eb4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e94:	4b55      	ldr	r3, [pc, #340]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ea4:	e006      	b.n	8005eb4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eaa:	e004      	b.n	8005eb6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005eb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ebc:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f023 0203 	bic.w	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4948      	ldr	r1, [pc, #288]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 8086 	bne.w	8005fe2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ed6:	4b45      	ldr	r3, [pc, #276]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a44      	ldr	r2, [pc, #272]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee2:	f7fc fc57 	bl	8002794 <HAL_GetTick>
 8005ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ee8:	e009      	b.n	8005efe <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005eea:	f7fc fc53 	bl	8002794 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d902      	bls.n	8005efe <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	73fb      	strb	r3, [r7, #15]
        break;
 8005efc:	e005      	b.n	8005f0a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1ef      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d168      	bne.n	8005fe2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d113      	bne.n	8005f3e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f16:	4b35      	ldr	r3, [pc, #212]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6892      	ldr	r2, [r2, #8]
 8005f22:	0211      	lsls	r1, r2, #8
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68d2      	ldr	r2, [r2, #12]
 8005f28:	06d2      	lsls	r2, r2, #27
 8005f2a:	4311      	orrs	r1, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6852      	ldr	r2, [r2, #4]
 8005f30:	3a01      	subs	r2, #1
 8005f32:	0112      	lsls	r2, r2, #4
 8005f34:	430a      	orrs	r2, r1
 8005f36:	492d      	ldr	r1, [pc, #180]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	614b      	str	r3, [r1, #20]
 8005f3c:	e02d      	b.n	8005f9a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d115      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f44:	4b29      	ldr	r3, [pc, #164]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6892      	ldr	r2, [r2, #8]
 8005f50:	0211      	lsls	r1, r2, #8
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6912      	ldr	r2, [r2, #16]
 8005f56:	0852      	lsrs	r2, r2, #1
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	0552      	lsls	r2, r2, #21
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6852      	ldr	r2, [r2, #4]
 8005f62:	3a01      	subs	r2, #1
 8005f64:	0112      	lsls	r2, r2, #4
 8005f66:	430a      	orrs	r2, r1
 8005f68:	4920      	ldr	r1, [pc, #128]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	614b      	str	r3, [r1, #20]
 8005f6e:	e014      	b.n	8005f9a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6892      	ldr	r2, [r2, #8]
 8005f7c:	0211      	lsls	r1, r2, #8
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6952      	ldr	r2, [r2, #20]
 8005f82:	0852      	lsrs	r2, r2, #1
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0652      	lsls	r2, r2, #25
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6852      	ldr	r2, [r2, #4]
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	0112      	lsls	r2, r2, #4
 8005f92:	430a      	orrs	r2, r1
 8005f94:	4915      	ldr	r1, [pc, #84]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fc fbf5 	bl	8002794 <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fac:	e009      	b.n	8005fc2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fae:	f7fc fbf1 	bl	8002794 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d902      	bls.n	8005fc2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc0:	e005      	b.n	8005fce <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ef      	beq.n	8005fae <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	4903      	ldr	r1, [pc, #12]	; (8005fec <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	07ff800f 	.word	0x07ff800f
 8005ff4:	ff9f800f 	.word	0xff9f800f
 8005ff8:	f9ff800f 	.word	0xf9ff800f

08005ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e049      	b.n	80060a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fc fa12 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fab0 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e04f      	b.n	8006164 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_TIM_Base_Start_IT+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d018      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_TIM_Base_Start_IT+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_TIM_Base_Start_IT+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_TIM_Base_Start_IT+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_TIM_Base_Start_IT+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d115      	bne.n	800614e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	4b17      	ldr	r3, [pc, #92]	; (8006188 <HAL_TIM_Base_Start_IT+0xdc>)
 800612a:	4013      	ands	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d015      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613a:	d011      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	e008      	b.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e000      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40014000 	.word	0x40014000
 8006188:	00010007 	.word	0x00010007

0800618c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0202 	mvn.w	r2, #2
 80061b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9c8 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9ba 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9cb 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0204 	mvn.w	r2, #4
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f99e 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f990 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9a1 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d122      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d11b      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0208 	mvn.w	r2, #8
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2204      	movs	r2, #4
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f974 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f966 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f977 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2208      	movs	r2, #8
 80062ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f94a 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f93c 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f94d 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0201 	mvn.w	r2, #1
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f916 	bl	800653c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 faf8 	bl	800692c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634a:	d10e      	bne.n	800636a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d107      	bne.n	800636a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 faeb 	bl	8006940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d10e      	bne.n	8006396 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d107      	bne.n	8006396 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8fb 	bl	800658c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d10e      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d107      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f06f 0220 	mvn.w	r2, #32
 80063ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 faab 	bl	8006918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_ConfigClockSource+0x18>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0a8      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x16a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006400:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006404:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800640c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d067      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x124>
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d80b      	bhi.n	800643a <HAL_TIM_ConfigClockSource+0x70>
 8006422:	2b10      	cmp	r3, #16
 8006424:	d073      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x144>
 8006426:	2b10      	cmp	r3, #16
 8006428:	d802      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x66>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d06f      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800642e:	e078      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006430:	2b20      	cmp	r3, #32
 8006432:	d06c      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x144>
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d06a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006438:	e073      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800643a:	2b70      	cmp	r3, #112	; 0x70
 800643c:	d00d      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x90>
 800643e:	2b70      	cmp	r3, #112	; 0x70
 8006440:	d804      	bhi.n	800644c <HAL_TIM_ConfigClockSource+0x82>
 8006442:	2b50      	cmp	r3, #80	; 0x50
 8006444:	d033      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0xe4>
 8006446:	2b60      	cmp	r3, #96	; 0x60
 8006448:	d041      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x104>
      break;
 800644a:	e06a      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d066      	beq.n	8006520 <HAL_TIM_ConfigClockSource+0x156>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d017      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006458:	e063      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6899      	ldr	r1, [r3, #8]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f000 f9ad 	bl	80067c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800647c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
      break;
 8006486:	e04c      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6899      	ldr	r1, [r3, #8]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f000 f996 	bl	80067c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064aa:	609a      	str	r2, [r3, #8]
      break;
 80064ac:	e039      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f000 f90a 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2150      	movs	r1, #80	; 0x50
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f963 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 80064cc:	e029      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 f929 	bl	8006732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2160      	movs	r1, #96	; 0x60
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f953 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 80064ec:	e019      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 f8ea 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f943 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 800650c:	e009      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f000 f93a 	bl	8006792 <TIM_ITRx_SetConfig>
        break;
 800651e:	e000      	b.n	8006522 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006520:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a40      	ldr	r2, [pc, #256]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3d      	ldr	r2, [pc, #244]	; (80066b8 <TIM_Base_SetConfig+0x118>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3c      	ldr	r2, [pc, #240]	; (80066bc <TIM_Base_SetConfig+0x11c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3b      	ldr	r2, [pc, #236]	; (80066c0 <TIM_Base_SetConfig+0x120>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3a      	ldr	r2, [pc, #232]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01f      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d01b      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <TIM_Base_SetConfig+0x118>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d017      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2b      	ldr	r2, [pc, #172]	; (80066bc <TIM_Base_SetConfig+0x11c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <TIM_Base_SetConfig+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00f      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a29      	ldr	r2, [pc, #164]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a28      	ldr	r2, [pc, #160]	; (80066c8 <TIM_Base_SetConfig+0x128>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0x9a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d108      	bne.n	800664c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a10      	ldr	r2, [pc, #64]	; (80066b4 <TIM_Base_SetConfig+0x114>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00f      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <TIM_Base_SetConfig+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <TIM_Base_SetConfig+0x128>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f023 0201 	bic.w	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f023 030a 	bic.w	r3, r3, #10
 8006710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006732:	b480      	push	{r7}
 8006734:	b087      	sub	sp, #28
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0210 	bic.w	r2, r3, #16
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800676e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f043 0307 	orr.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	021a      	lsls	r2, r3, #8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800681c:	2302      	movs	r3, #2
 800681e:	e068      	b.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2e      	ldr	r2, [pc, #184]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800685a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d018      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1b      	ldr	r2, [pc, #108]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1a      	ldr	r2, [pc, #104]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a13      	ldr	r2, [pc, #76]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d10c      	bne.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fb fd8b 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2224      	movs	r2, #36	; 0x24
 8006982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8c4 	bl	8006b24 <UART_SetConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e022      	b.n	80069ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb8a 	bl	80070c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fc11 	bl	800720c <UART_CheckIdleState>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	f040 8084 	bne.w	8006b18 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_UART_Transmit+0x28>
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e07c      	b.n	8006b1a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Transmit+0x3a>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e075      	b.n	8006b1a <HAL_UART_Transmit+0x126>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2221      	movs	r2, #33	; 0x21
 8006a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a46:	f7fb fea5 	bl	8002794 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d108      	bne.n	8006a78 <HAL_UART_Transmit+0x84>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e003      	b.n	8006a80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006a88:	e02d      	b.n	8006ae6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fc01 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e03a      	b.n	8006b1a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3302      	adds	r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e008      	b.n	8006ad4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	b292      	uxth	r2, r2
 8006acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1cb      	bne.n	8006a8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2140      	movs	r1, #64	; 0x40
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fbcd 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e006      	b.n	8006b1a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b24:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b28:	b088      	sub	sp, #32
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4bb1      	ldr	r3, [pc, #708]	; (8006e20 <UART_SetConfig+0x2fc>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	69f9      	ldr	r1, [r7, #28]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4aa6      	ldr	r2, [pc, #664]	; (8006e24 <UART_SetConfig+0x300>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f023 010f 	bic.w	r1, r3, #15
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a97      	ldr	r2, [pc, #604]	; (8006e28 <UART_SetConfig+0x304>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d121      	bne.n	8006c14 <UART_SetConfig+0xf0>
 8006bd0:	4b96      	ldr	r3, [pc, #600]	; (8006e2c <UART_SetConfig+0x308>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d816      	bhi.n	8006c0c <UART_SetConfig+0xe8>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xc0>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c01 	.word	0x08006c01
 8006bec:	08006bfb 	.word	0x08006bfb
 8006bf0:	08006c07 	.word	0x08006c07
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	76fb      	strb	r3, [r7, #27]
 8006bf8:	e0e8      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	76fb      	strb	r3, [r7, #27]
 8006bfe:	e0e5      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c00:	2304      	movs	r3, #4
 8006c02:	76fb      	strb	r3, [r7, #27]
 8006c04:	e0e2      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c06:	2308      	movs	r3, #8
 8006c08:	76fb      	strb	r3, [r7, #27]
 8006c0a:	e0df      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	76fb      	strb	r3, [r7, #27]
 8006c10:	bf00      	nop
 8006c12:	e0db      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a85      	ldr	r2, [pc, #532]	; (8006e30 <UART_SetConfig+0x30c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d134      	bne.n	8006c88 <UART_SetConfig+0x164>
 8006c1e:	4b83      	ldr	r3, [pc, #524]	; (8006e2c <UART_SetConfig+0x308>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	f003 030c 	and.w	r3, r3, #12
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d829      	bhi.n	8006c80 <UART_SetConfig+0x15c>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x110>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c6f 	.word	0x08006c6f
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c7b 	.word	0x08006c7b
 8006c68:	2300      	movs	r3, #0
 8006c6a:	76fb      	strb	r3, [r7, #27]
 8006c6c:	e0ae      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	76fb      	strb	r3, [r7, #27]
 8006c72:	e0ab      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c74:	2304      	movs	r3, #4
 8006c76:	76fb      	strb	r3, [r7, #27]
 8006c78:	e0a8      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	76fb      	strb	r3, [r7, #27]
 8006c7e:	e0a5      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c80:	2310      	movs	r3, #16
 8006c82:	76fb      	strb	r3, [r7, #27]
 8006c84:	bf00      	nop
 8006c86:	e0a1      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a69      	ldr	r2, [pc, #420]	; (8006e34 <UART_SetConfig+0x310>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d120      	bne.n	8006cd4 <UART_SetConfig+0x1b0>
 8006c92:	4b66      	ldr	r3, [pc, #408]	; (8006e2c <UART_SetConfig+0x308>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d00f      	beq.n	8006cc0 <UART_SetConfig+0x19c>
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d802      	bhi.n	8006caa <UART_SetConfig+0x186>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <UART_SetConfig+0x190>
 8006ca8:	e010      	b.n	8006ccc <UART_SetConfig+0x1a8>
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d005      	beq.n	8006cba <UART_SetConfig+0x196>
 8006cae:	2b30      	cmp	r3, #48	; 0x30
 8006cb0:	d009      	beq.n	8006cc6 <UART_SetConfig+0x1a2>
 8006cb2:	e00b      	b.n	8006ccc <UART_SetConfig+0x1a8>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	76fb      	strb	r3, [r7, #27]
 8006cb8:	e088      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	76fb      	strb	r3, [r7, #27]
 8006cbe:	e085      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	76fb      	strb	r3, [r7, #27]
 8006cc4:	e082      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	76fb      	strb	r3, [r7, #27]
 8006cca:	e07f      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	76fb      	strb	r3, [r7, #27]
 8006cd0:	bf00      	nop
 8006cd2:	e07b      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a57      	ldr	r2, [pc, #348]	; (8006e38 <UART_SetConfig+0x314>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d120      	bne.n	8006d20 <UART_SetConfig+0x1fc>
 8006cde:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <UART_SetConfig+0x308>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d00f      	beq.n	8006d0c <UART_SetConfig+0x1e8>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d802      	bhi.n	8006cf6 <UART_SetConfig+0x1d2>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <UART_SetConfig+0x1dc>
 8006cf4:	e010      	b.n	8006d18 <UART_SetConfig+0x1f4>
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d005      	beq.n	8006d06 <UART_SetConfig+0x1e2>
 8006cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006cfc:	d009      	beq.n	8006d12 <UART_SetConfig+0x1ee>
 8006cfe:	e00b      	b.n	8006d18 <UART_SetConfig+0x1f4>
 8006d00:	2300      	movs	r3, #0
 8006d02:	76fb      	strb	r3, [r7, #27]
 8006d04:	e062      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d06:	2302      	movs	r3, #2
 8006d08:	76fb      	strb	r3, [r7, #27]
 8006d0a:	e05f      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	76fb      	strb	r3, [r7, #27]
 8006d10:	e05c      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d12:	2308      	movs	r3, #8
 8006d14:	76fb      	strb	r3, [r7, #27]
 8006d16:	e059      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	76fb      	strb	r3, [r7, #27]
 8006d1c:	bf00      	nop
 8006d1e:	e055      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a45      	ldr	r2, [pc, #276]	; (8006e3c <UART_SetConfig+0x318>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d124      	bne.n	8006d74 <UART_SetConfig+0x250>
 8006d2a:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <UART_SetConfig+0x308>)
 8006d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d012      	beq.n	8006d60 <UART_SetConfig+0x23c>
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d802      	bhi.n	8006d46 <UART_SetConfig+0x222>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <UART_SetConfig+0x230>
 8006d44:	e012      	b.n	8006d6c <UART_SetConfig+0x248>
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4a:	d006      	beq.n	8006d5a <UART_SetConfig+0x236>
 8006d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d50:	d009      	beq.n	8006d66 <UART_SetConfig+0x242>
 8006d52:	e00b      	b.n	8006d6c <UART_SetConfig+0x248>
 8006d54:	2300      	movs	r3, #0
 8006d56:	76fb      	strb	r3, [r7, #27]
 8006d58:	e038      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	76fb      	strb	r3, [r7, #27]
 8006d5e:	e035      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d60:	2304      	movs	r3, #4
 8006d62:	76fb      	strb	r3, [r7, #27]
 8006d64:	e032      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d66:	2308      	movs	r3, #8
 8006d68:	76fb      	strb	r3, [r7, #27]
 8006d6a:	e02f      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	76fb      	strb	r3, [r7, #27]
 8006d70:	bf00      	nop
 8006d72:	e02b      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <UART_SetConfig+0x300>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d124      	bne.n	8006dc8 <UART_SetConfig+0x2a4>
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <UART_SetConfig+0x308>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8c:	d012      	beq.n	8006db4 <UART_SetConfig+0x290>
 8006d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d92:	d802      	bhi.n	8006d9a <UART_SetConfig+0x276>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <UART_SetConfig+0x284>
 8006d98:	e012      	b.n	8006dc0 <UART_SetConfig+0x29c>
 8006d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9e:	d006      	beq.n	8006dae <UART_SetConfig+0x28a>
 8006da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da4:	d009      	beq.n	8006dba <UART_SetConfig+0x296>
 8006da6:	e00b      	b.n	8006dc0 <UART_SetConfig+0x29c>
 8006da8:	2300      	movs	r3, #0
 8006daa:	76fb      	strb	r3, [r7, #27]
 8006dac:	e00e      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006dae:	2302      	movs	r3, #2
 8006db0:	76fb      	strb	r3, [r7, #27]
 8006db2:	e00b      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006db4:	2304      	movs	r3, #4
 8006db6:	76fb      	strb	r3, [r7, #27]
 8006db8:	e008      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	76fb      	strb	r3, [r7, #27]
 8006dbe:	e005      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	76fb      	strb	r3, [r7, #27]
 8006dc4:	bf00      	nop
 8006dc6:	e001      	b.n	8006dcc <UART_SetConfig+0x2a8>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <UART_SetConfig+0x300>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f040 80a1 	bne.w	8006f1a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dd8:	7efb      	ldrb	r3, [r7, #27]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d836      	bhi.n	8006e4c <UART_SetConfig+0x328>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x2c0>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e4d 	.word	0x08006e4d
 8006df4:	08006e17 	.word	0x08006e17
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	08006e4d 	.word	0x08006e4d
 8006e04:	08006e45 	.word	0x08006e45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fe fb02 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	6178      	str	r0, [r7, #20]
        break;
 8006e0e:	e022      	b.n	8006e56 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <UART_SetConfig+0x31c>)
 8006e12:	617b      	str	r3, [r7, #20]
        break;
 8006e14:	e01f      	b.n	8006e56 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fe fa65 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8006e1a:	6178      	str	r0, [r7, #20]
        break;
 8006e1c:	e01b      	b.n	8006e56 <UART_SetConfig+0x332>
 8006e1e:	bf00      	nop
 8006e20:	cfff69f3 	.word	0xcfff69f3
 8006e24:	40008000 	.word	0x40008000
 8006e28:	40013800 	.word	0x40013800
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	40004400 	.word	0x40004400
 8006e34:	40004800 	.word	0x40004800
 8006e38:	40004c00 	.word	0x40004c00
 8006e3c:	40005000 	.word	0x40005000
 8006e40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e48:	617b      	str	r3, [r7, #20]
        break;
 8006e4a:	e004      	b.n	8006e56 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	76bb      	strb	r3, [r7, #26]
        break;
 8006e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 811d 	beq.w	8007098 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	4a97      	ldr	r2, [pc, #604]	; (80070c0 <UART_SetConfig+0x59c>)
 8006e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e70:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d305      	bcc.n	8006e8e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d902      	bls.n	8006e94 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	76bb      	strb	r3, [r7, #26]
 8006e92:	e101      	b.n	8007098 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f04f 0100 	mov.w	r1, #0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	4a87      	ldr	r2, [pc, #540]	; (80070c0 <UART_SetConfig+0x59c>)
 8006ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f04f 0400 	mov.w	r4, #0
 8006eac:	461a      	mov	r2, r3
 8006eae:	4623      	mov	r3, r4
 8006eb0:	f7f9 fe14 	bl	8000adc <__aeabi_uldivmod>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4622      	mov	r2, r4
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f04f 0400 	mov.w	r4, #0
 8006ec4:	0214      	lsls	r4, r2, #8
 8006ec6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006eca:	020b      	lsls	r3, r1, #8
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6852      	ldr	r2, [r2, #4]
 8006ed0:	0852      	lsrs	r2, r2, #1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	eb13 0b01 	adds.w	fp, r3, r1
 8006edc:	eb44 0c02 	adc.w	ip, r4, r2
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	4661      	mov	r1, ip
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f04f 0400 	mov.w	r4, #0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4623      	mov	r3, r4
 8006ef0:	f7f9 fdf4 	bl	8000adc <__aeabi_uldivmod>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f00:	d308      	bcc.n	8006f14 <UART_SetConfig+0x3f0>
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f08:	d204      	bcs.n	8006f14 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	e0c1      	b.n	8007098 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	76bb      	strb	r3, [r7, #26]
 8006f18:	e0be      	b.n	8007098 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d164      	bne.n	8006fee <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006f24:	7efb      	ldrb	r3, [r7, #27]
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d827      	bhi.n	8006f7a <UART_SetConfig+0x456>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x40c>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f65 	.word	0x08006f65
 8006f3c:	08006f7b 	.word	0x08006f7b
 8006f40:	08006f6b 	.word	0x08006f6b
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006f7b 	.word	0x08006f7b
 8006f50:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fe fa5c 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8006f58:	6178      	str	r0, [r7, #20]
        break;
 8006f5a:	e013      	b.n	8006f84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fe fa6e 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 8006f60:	6178      	str	r0, [r7, #20]
        break;
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <UART_SetConfig+0x5a0>)
 8006f66:	617b      	str	r3, [r7, #20]
        break;
 8006f68:	e00c      	b.n	8006f84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fe f9bb 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8006f6e:	6178      	str	r0, [r7, #20]
        break;
 8006f70:	e008      	b.n	8006f84 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	617b      	str	r3, [r7, #20]
        break;
 8006f78:	e004      	b.n	8006f84 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	76bb      	strb	r3, [r7, #26]
        break;
 8006f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8086 	beq.w	8007098 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	4a4b      	ldr	r2, [pc, #300]	; (80070c0 <UART_SetConfig+0x59c>)
 8006f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f96:	461a      	mov	r2, r3
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f9e:	005a      	lsls	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	441a      	add	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d916      	bls.n	8006fe8 <UART_SetConfig+0x4c4>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d212      	bcs.n	8006fe8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 030f 	bic.w	r3, r3, #15
 8006fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	89fa      	ldrh	r2, [r7, #14]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e057      	b.n	8007098 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	76bb      	strb	r3, [r7, #26]
 8006fec:	e054      	b.n	8007098 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fee:	7efb      	ldrb	r3, [r7, #27]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d828      	bhi.n	8007046 <UART_SetConfig+0x522>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x4d8>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe f9f6 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8007024:	6178      	str	r0, [r7, #20]
        break;
 8007026:	e013      	b.n	8007050 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fe fa08 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 800702c:	6178      	str	r0, [r7, #20]
        break;
 800702e:	e00f      	b.n	8007050 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <UART_SetConfig+0x5a0>)
 8007032:	617b      	str	r3, [r7, #20]
        break;
 8007034:	e00c      	b.n	8007050 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fe f955 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 800703a:	6178      	str	r0, [r7, #20]
        break;
 800703c:	e008      	b.n	8007050 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	617b      	str	r3, [r7, #20]
        break;
 8007044:	e004      	b.n	8007050 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	76bb      	strb	r3, [r7, #26]
        break;
 800704e:	bf00      	nop
    }

    if (pclk != 0U)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d020      	beq.n	8007098 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <UART_SetConfig+0x59c>)
 800705c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007060:	461a      	mov	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	fbb3 f2f2 	udiv	r2, r3, r2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	b29b      	uxth	r3, r3
 800707a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b0f      	cmp	r3, #15
 8007080:	d908      	bls.n	8007094 <UART_SetConfig+0x570>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007088:	d204      	bcs.n	8007094 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e001      	b.n	8007098 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80070b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80070c0:	08007f7c 	.word	0x08007f7c
 80070c4:	00f42400 	.word	0x00f42400

080070c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01a      	beq.n	80071de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c6:	d10a      	bne.n	80071de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800721c:	f7fb faba 	bl	8002794 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d10e      	bne.n	800724e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f82c 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e022      	b.n	8007294 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b04      	cmp	r3, #4
 800725a:	d10e      	bne.n	800727a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f816 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e00c      	b.n	8007294 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	e062      	b.n	8007374 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d05e      	beq.n	8007374 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fb fa6d 	bl	8002794 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11d      	bne.n	8007308 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072da:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e045      	b.n	8007394 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d02e      	beq.n	8007374 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007324:	d126      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800732e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800733e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0201 	bic.w	r2, r2, #1
 800734e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e00f      	b.n	8007394 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	429a      	cmp	r2, r3
 8007390:	d08d      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e027      	b.n	8007402 <HAL_UARTEx_DisableFifoMode+0x66>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2224      	movs	r2, #36	; 0x24
 80073be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007422:	2302      	movs	r3, #2
 8007424:	e02d      	b.n	8007482 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2224      	movs	r2, #36	; 0x24
 8007432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f850 	bl	8007508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800749e:	2302      	movs	r3, #2
 80074a0:	e02d      	b.n	80074fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2224      	movs	r2, #36	; 0x24
 80074ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f812 	bl	8007508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	; 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007510:	4a2f      	ldr	r2, [pc, #188]	; (80075d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8007512:	f107 0314 	add.w	r3, r7, #20
 8007516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800751a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800751e:	4a2d      	ldr	r2, [pc, #180]	; (80075d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8007520:	f107 030c 	add.w	r3, r7, #12
 8007524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007528:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007544:	e03d      	b.n	80075c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007546:	2308      	movs	r3, #8
 8007548:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800754a:	2308      	movs	r3, #8
 800754c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	0e5b      	lsrs	r3, r3, #25
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	0f5b      	lsrs	r3, r3, #29
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800756e:	7fbb      	ldrb	r3, [r7, #30]
 8007570:	7f3a      	ldrb	r2, [r7, #28]
 8007572:	f107 0120 	add.w	r1, r7, #32
 8007576:	440a      	add	r2, r1
 8007578:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	7f3a      	ldrb	r2, [r7, #28]
 8007582:	f107 0120 	add.w	r1, r7, #32
 8007586:	440a      	add	r2, r1
 8007588:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800758c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007598:	7ffb      	ldrb	r3, [r7, #31]
 800759a:	7f7a      	ldrb	r2, [r7, #29]
 800759c:	f107 0120 	add.w	r1, r7, #32
 80075a0:	440a      	add	r2, r1
 80075a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	7f7a      	ldrb	r2, [r7, #29]
 80075ac:	f107 0120 	add.w	r1, r7, #32
 80075b0:	440a      	add	r2, r1
 80075b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80075b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075c2:	bf00      	nop
 80075c4:	3724      	adds	r7, #36	; 0x24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	08007f24 	.word	0x08007f24
 80075d4:	08007f2c 	.word	0x08007f2c

080075d8 <arm_sin_f32>:
 80075d8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007658 <arm_sin_f32+0x80>
 80075dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80075ec:	d504      	bpl.n	80075f8 <arm_sin_f32+0x20>
 80075ee:	ee17 3a90 	vmov	r3, s15
 80075f2:	3b01      	subs	r3, #1
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075fc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800765c <arm_sin_f32+0x84>
 8007600:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007604:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007608:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800760c:	ee17 3a90 	vmov	r3, s15
 8007610:	b29b      	uxth	r3, r3
 8007612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007616:	d21a      	bcs.n	800764e <arm_sin_f32+0x76>
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007620:	1c59      	adds	r1, r3, #1
 8007622:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007626:	4a0e      	ldr	r2, [pc, #56]	; (8007660 <arm_sin_f32+0x88>)
 8007628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800762c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007630:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007634:	ed93 7a00 	vldr	s14, [r3]
 8007638:	edd2 6a00 	vldr	s13, [r2]
 800763c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007640:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007648:	ee37 0a80 	vadd.f32	s0, s15, s0
 800764c:	4770      	bx	lr
 800764e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007652:	2101      	movs	r1, #1
 8007654:	2300      	movs	r3, #0
 8007656:	e7e6      	b.n	8007626 <arm_sin_f32+0x4e>
 8007658:	3e22f983 	.word	0x3e22f983
 800765c:	44000000 	.word	0x44000000
 8007660:	08007f94 	.word	0x08007f94

08007664 <__errno>:
 8007664:	4b01      	ldr	r3, [pc, #4]	; (800766c <__errno+0x8>)
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000078 	.word	0x20000078

08007670 <__libc_init_array>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4e0d      	ldr	r6, [pc, #52]	; (80076a8 <__libc_init_array+0x38>)
 8007674:	4c0d      	ldr	r4, [pc, #52]	; (80076ac <__libc_init_array+0x3c>)
 8007676:	1ba4      	subs	r4, r4, r6
 8007678:	10a4      	asrs	r4, r4, #2
 800767a:	2500      	movs	r5, #0
 800767c:	42a5      	cmp	r5, r4
 800767e:	d109      	bne.n	8007694 <__libc_init_array+0x24>
 8007680:	4e0b      	ldr	r6, [pc, #44]	; (80076b0 <__libc_init_array+0x40>)
 8007682:	4c0c      	ldr	r4, [pc, #48]	; (80076b4 <__libc_init_array+0x44>)
 8007684:	f000 fc26 	bl	8007ed4 <_init>
 8007688:	1ba4      	subs	r4, r4, r6
 800768a:	10a4      	asrs	r4, r4, #2
 800768c:	2500      	movs	r5, #0
 800768e:	42a5      	cmp	r5, r4
 8007690:	d105      	bne.n	800769e <__libc_init_array+0x2e>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007698:	4798      	blx	r3
 800769a:	3501      	adds	r5, #1
 800769c:	e7ee      	b.n	800767c <__libc_init_array+0xc>
 800769e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076a2:	4798      	blx	r3
 80076a4:	3501      	adds	r5, #1
 80076a6:	e7f2      	b.n	800768e <__libc_init_array+0x1e>
 80076a8:	080087d4 	.word	0x080087d4
 80076ac:	080087d4 	.word	0x080087d4
 80076b0:	080087d4 	.word	0x080087d4
 80076b4:	080087d8 	.word	0x080087d8

080076b8 <memset>:
 80076b8:	4402      	add	r2, r0
 80076ba:	4603      	mov	r3, r0
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	f803 1b01 	strb.w	r1, [r3], #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <siprintf>:
 80076c8:	b40e      	push	{r1, r2, r3}
 80076ca:	b500      	push	{lr}
 80076cc:	b09c      	sub	sp, #112	; 0x70
 80076ce:	ab1d      	add	r3, sp, #116	; 0x74
 80076d0:	9002      	str	r0, [sp, #8]
 80076d2:	9006      	str	r0, [sp, #24]
 80076d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076d8:	4809      	ldr	r0, [pc, #36]	; (8007700 <siprintf+0x38>)
 80076da:	9107      	str	r1, [sp, #28]
 80076dc:	9104      	str	r1, [sp, #16]
 80076de:	4909      	ldr	r1, [pc, #36]	; (8007704 <siprintf+0x3c>)
 80076e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e4:	9105      	str	r1, [sp, #20]
 80076e6:	6800      	ldr	r0, [r0, #0]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	a902      	add	r1, sp, #8
 80076ec:	f000 f866 	bl	80077bc <_svfiprintf_r>
 80076f0:	9b02      	ldr	r3, [sp, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	b01c      	add	sp, #112	; 0x70
 80076f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076fc:	b003      	add	sp, #12
 80076fe:	4770      	bx	lr
 8007700:	20000078 	.word	0x20000078
 8007704:	ffff0208 	.word	0xffff0208

08007708 <__ssputs_r>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	688e      	ldr	r6, [r1, #8]
 800770e:	429e      	cmp	r6, r3
 8007710:	4682      	mov	sl, r0
 8007712:	460c      	mov	r4, r1
 8007714:	4690      	mov	r8, r2
 8007716:	4699      	mov	r9, r3
 8007718:	d837      	bhi.n	800778a <__ssputs_r+0x82>
 800771a:	898a      	ldrh	r2, [r1, #12]
 800771c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007720:	d031      	beq.n	8007786 <__ssputs_r+0x7e>
 8007722:	6825      	ldr	r5, [r4, #0]
 8007724:	6909      	ldr	r1, [r1, #16]
 8007726:	1a6f      	subs	r7, r5, r1
 8007728:	6965      	ldr	r5, [r4, #20]
 800772a:	2302      	movs	r3, #2
 800772c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007730:	fb95 f5f3 	sdiv	r5, r5, r3
 8007734:	f109 0301 	add.w	r3, r9, #1
 8007738:	443b      	add	r3, r7
 800773a:	429d      	cmp	r5, r3
 800773c:	bf38      	it	cc
 800773e:	461d      	movcc	r5, r3
 8007740:	0553      	lsls	r3, r2, #21
 8007742:	d530      	bpl.n	80077a6 <__ssputs_r+0x9e>
 8007744:	4629      	mov	r1, r5
 8007746:	f000 fb2b 	bl	8007da0 <_malloc_r>
 800774a:	4606      	mov	r6, r0
 800774c:	b950      	cbnz	r0, 8007764 <__ssputs_r+0x5c>
 800774e:	230c      	movs	r3, #12
 8007750:	f8ca 3000 	str.w	r3, [sl]
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007764:	463a      	mov	r2, r7
 8007766:	6921      	ldr	r1, [r4, #16]
 8007768:	f000 faa8 	bl	8007cbc <memcpy>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	6126      	str	r6, [r4, #16]
 800777a:	6165      	str	r5, [r4, #20]
 800777c:	443e      	add	r6, r7
 800777e:	1bed      	subs	r5, r5, r7
 8007780:	6026      	str	r6, [r4, #0]
 8007782:	60a5      	str	r5, [r4, #8]
 8007784:	464e      	mov	r6, r9
 8007786:	454e      	cmp	r6, r9
 8007788:	d900      	bls.n	800778c <__ssputs_r+0x84>
 800778a:	464e      	mov	r6, r9
 800778c:	4632      	mov	r2, r6
 800778e:	4641      	mov	r1, r8
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	f000 fa9e 	bl	8007cd2 <memmove>
 8007796:	68a3      	ldr	r3, [r4, #8]
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	60a3      	str	r3, [r4, #8]
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	441e      	add	r6, r3
 80077a0:	6026      	str	r6, [r4, #0]
 80077a2:	2000      	movs	r0, #0
 80077a4:	e7dc      	b.n	8007760 <__ssputs_r+0x58>
 80077a6:	462a      	mov	r2, r5
 80077a8:	f000 fb54 	bl	8007e54 <_realloc_r>
 80077ac:	4606      	mov	r6, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d1e2      	bne.n	8007778 <__ssputs_r+0x70>
 80077b2:	6921      	ldr	r1, [r4, #16]
 80077b4:	4650      	mov	r0, sl
 80077b6:	f000 faa5 	bl	8007d04 <_free_r>
 80077ba:	e7c8      	b.n	800774e <__ssputs_r+0x46>

080077bc <_svfiprintf_r>:
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	461d      	mov	r5, r3
 80077c2:	898b      	ldrh	r3, [r1, #12]
 80077c4:	061f      	lsls	r7, r3, #24
 80077c6:	b09d      	sub	sp, #116	; 0x74
 80077c8:	4680      	mov	r8, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	4616      	mov	r6, r2
 80077ce:	d50f      	bpl.n	80077f0 <_svfiprintf_r+0x34>
 80077d0:	690b      	ldr	r3, [r1, #16]
 80077d2:	b96b      	cbnz	r3, 80077f0 <_svfiprintf_r+0x34>
 80077d4:	2140      	movs	r1, #64	; 0x40
 80077d6:	f000 fae3 	bl	8007da0 <_malloc_r>
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	6120      	str	r0, [r4, #16]
 80077de:	b928      	cbnz	r0, 80077ec <_svfiprintf_r+0x30>
 80077e0:	230c      	movs	r3, #12
 80077e2:	f8c8 3000 	str.w	r3, [r8]
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ea:	e0c8      	b.n	800797e <_svfiprintf_r+0x1c2>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	6163      	str	r3, [r4, #20]
 80077f0:	2300      	movs	r3, #0
 80077f2:	9309      	str	r3, [sp, #36]	; 0x24
 80077f4:	2320      	movs	r3, #32
 80077f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077fa:	2330      	movs	r3, #48	; 0x30
 80077fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007800:	9503      	str	r5, [sp, #12]
 8007802:	f04f 0b01 	mov.w	fp, #1
 8007806:	4637      	mov	r7, r6
 8007808:	463d      	mov	r5, r7
 800780a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800780e:	b10b      	cbz	r3, 8007814 <_svfiprintf_r+0x58>
 8007810:	2b25      	cmp	r3, #37	; 0x25
 8007812:	d13e      	bne.n	8007892 <_svfiprintf_r+0xd6>
 8007814:	ebb7 0a06 	subs.w	sl, r7, r6
 8007818:	d00b      	beq.n	8007832 <_svfiprintf_r+0x76>
 800781a:	4653      	mov	r3, sl
 800781c:	4632      	mov	r2, r6
 800781e:	4621      	mov	r1, r4
 8007820:	4640      	mov	r0, r8
 8007822:	f7ff ff71 	bl	8007708 <__ssputs_r>
 8007826:	3001      	adds	r0, #1
 8007828:	f000 80a4 	beq.w	8007974 <_svfiprintf_r+0x1b8>
 800782c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782e:	4453      	add	r3, sl
 8007830:	9309      	str	r3, [sp, #36]	; 0x24
 8007832:	783b      	ldrb	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 809d 	beq.w	8007974 <_svfiprintf_r+0x1b8>
 800783a:	2300      	movs	r3, #0
 800783c:	f04f 32ff 	mov.w	r2, #4294967295
 8007840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	9307      	str	r3, [sp, #28]
 8007848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800784c:	931a      	str	r3, [sp, #104]	; 0x68
 800784e:	462f      	mov	r7, r5
 8007850:	2205      	movs	r2, #5
 8007852:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007856:	4850      	ldr	r0, [pc, #320]	; (8007998 <_svfiprintf_r+0x1dc>)
 8007858:	f7f8 fcd2 	bl	8000200 <memchr>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	b9d0      	cbnz	r0, 8007896 <_svfiprintf_r+0xda>
 8007860:	06d9      	lsls	r1, r3, #27
 8007862:	bf44      	itt	mi
 8007864:	2220      	movmi	r2, #32
 8007866:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800786a:	071a      	lsls	r2, r3, #28
 800786c:	bf44      	itt	mi
 800786e:	222b      	movmi	r2, #43	; 0x2b
 8007870:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007874:	782a      	ldrb	r2, [r5, #0]
 8007876:	2a2a      	cmp	r2, #42	; 0x2a
 8007878:	d015      	beq.n	80078a6 <_svfiprintf_r+0xea>
 800787a:	9a07      	ldr	r2, [sp, #28]
 800787c:	462f      	mov	r7, r5
 800787e:	2000      	movs	r0, #0
 8007880:	250a      	movs	r5, #10
 8007882:	4639      	mov	r1, r7
 8007884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007888:	3b30      	subs	r3, #48	; 0x30
 800788a:	2b09      	cmp	r3, #9
 800788c:	d94d      	bls.n	800792a <_svfiprintf_r+0x16e>
 800788e:	b1b8      	cbz	r0, 80078c0 <_svfiprintf_r+0x104>
 8007890:	e00f      	b.n	80078b2 <_svfiprintf_r+0xf6>
 8007892:	462f      	mov	r7, r5
 8007894:	e7b8      	b.n	8007808 <_svfiprintf_r+0x4c>
 8007896:	4a40      	ldr	r2, [pc, #256]	; (8007998 <_svfiprintf_r+0x1dc>)
 8007898:	1a80      	subs	r0, r0, r2
 800789a:	fa0b f000 	lsl.w	r0, fp, r0
 800789e:	4318      	orrs	r0, r3
 80078a0:	9004      	str	r0, [sp, #16]
 80078a2:	463d      	mov	r5, r7
 80078a4:	e7d3      	b.n	800784e <_svfiprintf_r+0x92>
 80078a6:	9a03      	ldr	r2, [sp, #12]
 80078a8:	1d11      	adds	r1, r2, #4
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	9103      	str	r1, [sp, #12]
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	db01      	blt.n	80078b6 <_svfiprintf_r+0xfa>
 80078b2:	9207      	str	r2, [sp, #28]
 80078b4:	e004      	b.n	80078c0 <_svfiprintf_r+0x104>
 80078b6:	4252      	negs	r2, r2
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	9207      	str	r2, [sp, #28]
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	783b      	ldrb	r3, [r7, #0]
 80078c2:	2b2e      	cmp	r3, #46	; 0x2e
 80078c4:	d10c      	bne.n	80078e0 <_svfiprintf_r+0x124>
 80078c6:	787b      	ldrb	r3, [r7, #1]
 80078c8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ca:	d133      	bne.n	8007934 <_svfiprintf_r+0x178>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	9203      	str	r2, [sp, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfb8      	it	lt
 80078d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078dc:	3702      	adds	r7, #2
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	4d2e      	ldr	r5, [pc, #184]	; (800799c <_svfiprintf_r+0x1e0>)
 80078e2:	7839      	ldrb	r1, [r7, #0]
 80078e4:	2203      	movs	r2, #3
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7f8 fc8a 	bl	8000200 <memchr>
 80078ec:	b138      	cbz	r0, 80078fe <_svfiprintf_r+0x142>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	1b40      	subs	r0, r0, r5
 80078f2:	fa03 f000 	lsl.w	r0, r3, r0
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	4303      	orrs	r3, r0
 80078fa:	3701      	adds	r7, #1
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	7839      	ldrb	r1, [r7, #0]
 8007900:	4827      	ldr	r0, [pc, #156]	; (80079a0 <_svfiprintf_r+0x1e4>)
 8007902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007906:	2206      	movs	r2, #6
 8007908:	1c7e      	adds	r6, r7, #1
 800790a:	f7f8 fc79 	bl	8000200 <memchr>
 800790e:	2800      	cmp	r0, #0
 8007910:	d038      	beq.n	8007984 <_svfiprintf_r+0x1c8>
 8007912:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <_svfiprintf_r+0x1e8>)
 8007914:	bb13      	cbnz	r3, 800795c <_svfiprintf_r+0x1a0>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	3307      	adds	r3, #7
 800791a:	f023 0307 	bic.w	r3, r3, #7
 800791e:	3308      	adds	r3, #8
 8007920:	9303      	str	r3, [sp, #12]
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	444b      	add	r3, r9
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	e76d      	b.n	8007806 <_svfiprintf_r+0x4a>
 800792a:	fb05 3202 	mla	r2, r5, r2, r3
 800792e:	2001      	movs	r0, #1
 8007930:	460f      	mov	r7, r1
 8007932:	e7a6      	b.n	8007882 <_svfiprintf_r+0xc6>
 8007934:	2300      	movs	r3, #0
 8007936:	3701      	adds	r7, #1
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	4619      	mov	r1, r3
 800793c:	250a      	movs	r5, #10
 800793e:	4638      	mov	r0, r7
 8007940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007944:	3a30      	subs	r2, #48	; 0x30
 8007946:	2a09      	cmp	r2, #9
 8007948:	d903      	bls.n	8007952 <_svfiprintf_r+0x196>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0c8      	beq.n	80078e0 <_svfiprintf_r+0x124>
 800794e:	9105      	str	r1, [sp, #20]
 8007950:	e7c6      	b.n	80078e0 <_svfiprintf_r+0x124>
 8007952:	fb05 2101 	mla	r1, r5, r1, r2
 8007956:	2301      	movs	r3, #1
 8007958:	4607      	mov	r7, r0
 800795a:	e7f0      	b.n	800793e <_svfiprintf_r+0x182>
 800795c:	ab03      	add	r3, sp, #12
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4622      	mov	r2, r4
 8007962:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <_svfiprintf_r+0x1ec>)
 8007964:	a904      	add	r1, sp, #16
 8007966:	4640      	mov	r0, r8
 8007968:	f3af 8000 	nop.w
 800796c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007970:	4681      	mov	r9, r0
 8007972:	d1d6      	bne.n	8007922 <_svfiprintf_r+0x166>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	065b      	lsls	r3, r3, #25
 8007978:	f53f af35 	bmi.w	80077e6 <_svfiprintf_r+0x2a>
 800797c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797e:	b01d      	add	sp, #116	; 0x74
 8007980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007984:	ab03      	add	r3, sp, #12
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4622      	mov	r2, r4
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <_svfiprintf_r+0x1ec>)
 800798c:	a904      	add	r1, sp, #16
 800798e:	4640      	mov	r0, r8
 8007990:	f000 f882 	bl	8007a98 <_printf_i>
 8007994:	e7ea      	b.n	800796c <_svfiprintf_r+0x1b0>
 8007996:	bf00      	nop
 8007998:	08008798 	.word	0x08008798
 800799c:	0800879e 	.word	0x0800879e
 80079a0:	080087a2 	.word	0x080087a2
 80079a4:	00000000 	.word	0x00000000
 80079a8:	08007709 	.word	0x08007709

080079ac <_printf_common>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	4691      	mov	r9, r2
 80079b2:	461f      	mov	r7, r3
 80079b4:	688a      	ldr	r2, [r1, #8]
 80079b6:	690b      	ldr	r3, [r1, #16]
 80079b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079bc:	4293      	cmp	r3, r2
 80079be:	bfb8      	it	lt
 80079c0:	4613      	movlt	r3, r2
 80079c2:	f8c9 3000 	str.w	r3, [r9]
 80079c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ca:	4606      	mov	r6, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	b112      	cbz	r2, 80079d6 <_printf_common+0x2a>
 80079d0:	3301      	adds	r3, #1
 80079d2:	f8c9 3000 	str.w	r3, [r9]
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	0699      	lsls	r1, r3, #26
 80079da:	bf42      	ittt	mi
 80079dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079e0:	3302      	addmi	r3, #2
 80079e2:	f8c9 3000 	strmi.w	r3, [r9]
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	f015 0506 	ands.w	r5, r5, #6
 80079ec:	d107      	bne.n	80079fe <_printf_common+0x52>
 80079ee:	f104 0a19 	add.w	sl, r4, #25
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	f8d9 2000 	ldr.w	r2, [r9]
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	42ab      	cmp	r3, r5
 80079fc:	dc28      	bgt.n	8007a50 <_printf_common+0xa4>
 80079fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	3300      	adds	r3, #0
 8007a06:	bf18      	it	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	0692      	lsls	r2, r2, #26
 8007a0c:	d42d      	bmi.n	8007a6a <_printf_common+0xbe>
 8007a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a12:	4639      	mov	r1, r7
 8007a14:	4630      	mov	r0, r6
 8007a16:	47c0      	blx	r8
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d020      	beq.n	8007a5e <_printf_common+0xb2>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	68e5      	ldr	r5, [r4, #12]
 8007a20:	f8d9 2000 	ldr.w	r2, [r9]
 8007a24:	f003 0306 	and.w	r3, r3, #6
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	bf08      	it	eq
 8007a2c:	1aad      	subeq	r5, r5, r2
 8007a2e:	68a3      	ldr	r3, [r4, #8]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	bf0c      	ite	eq
 8007a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a38:	2500      	movne	r5, #0
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bfc4      	itt	gt
 8007a3e:	1a9b      	subgt	r3, r3, r2
 8007a40:	18ed      	addgt	r5, r5, r3
 8007a42:	f04f 0900 	mov.w	r9, #0
 8007a46:	341a      	adds	r4, #26
 8007a48:	454d      	cmp	r5, r9
 8007a4a:	d11a      	bne.n	8007a82 <_printf_common+0xd6>
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e008      	b.n	8007a62 <_printf_common+0xb6>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4652      	mov	r2, sl
 8007a54:	4639      	mov	r1, r7
 8007a56:	4630      	mov	r0, r6
 8007a58:	47c0      	blx	r8
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d103      	bne.n	8007a66 <_printf_common+0xba>
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a66:	3501      	adds	r5, #1
 8007a68:	e7c3      	b.n	80079f2 <_printf_common+0x46>
 8007a6a:	18e1      	adds	r1, r4, r3
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	2030      	movs	r0, #48	; 0x30
 8007a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a74:	4422      	add	r2, r4
 8007a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a7e:	3302      	adds	r3, #2
 8007a80:	e7c5      	b.n	8007a0e <_printf_common+0x62>
 8007a82:	2301      	movs	r3, #1
 8007a84:	4622      	mov	r2, r4
 8007a86:	4639      	mov	r1, r7
 8007a88:	4630      	mov	r0, r6
 8007a8a:	47c0      	blx	r8
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d0e6      	beq.n	8007a5e <_printf_common+0xb2>
 8007a90:	f109 0901 	add.w	r9, r9, #1
 8007a94:	e7d8      	b.n	8007a48 <_printf_common+0x9c>
	...

08007a98 <_printf_i>:
 8007a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	7e09      	ldrb	r1, [r1, #24]
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	296e      	cmp	r1, #110	; 0x6e
 8007aa8:	4617      	mov	r7, r2
 8007aaa:	4606      	mov	r6, r0
 8007aac:	4698      	mov	r8, r3
 8007aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ab0:	f000 80b3 	beq.w	8007c1a <_printf_i+0x182>
 8007ab4:	d822      	bhi.n	8007afc <_printf_i+0x64>
 8007ab6:	2963      	cmp	r1, #99	; 0x63
 8007ab8:	d036      	beq.n	8007b28 <_printf_i+0x90>
 8007aba:	d80a      	bhi.n	8007ad2 <_printf_i+0x3a>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	f000 80b9 	beq.w	8007c34 <_printf_i+0x19c>
 8007ac2:	2958      	cmp	r1, #88	; 0x58
 8007ac4:	f000 8083 	beq.w	8007bce <_printf_i+0x136>
 8007ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007acc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ad0:	e032      	b.n	8007b38 <_printf_i+0xa0>
 8007ad2:	2964      	cmp	r1, #100	; 0x64
 8007ad4:	d001      	beq.n	8007ada <_printf_i+0x42>
 8007ad6:	2969      	cmp	r1, #105	; 0x69
 8007ad8:	d1f6      	bne.n	8007ac8 <_printf_i+0x30>
 8007ada:	6820      	ldr	r0, [r4, #0]
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	0605      	lsls	r5, r0, #24
 8007ae0:	f103 0104 	add.w	r1, r3, #4
 8007ae4:	d52a      	bpl.n	8007b3c <_printf_i+0xa4>
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6011      	str	r1, [r2, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da03      	bge.n	8007af6 <_printf_i+0x5e>
 8007aee:	222d      	movs	r2, #45	; 0x2d
 8007af0:	425b      	negs	r3, r3
 8007af2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007af6:	486f      	ldr	r0, [pc, #444]	; (8007cb4 <_printf_i+0x21c>)
 8007af8:	220a      	movs	r2, #10
 8007afa:	e039      	b.n	8007b70 <_printf_i+0xd8>
 8007afc:	2973      	cmp	r1, #115	; 0x73
 8007afe:	f000 809d 	beq.w	8007c3c <_printf_i+0x1a4>
 8007b02:	d808      	bhi.n	8007b16 <_printf_i+0x7e>
 8007b04:	296f      	cmp	r1, #111	; 0x6f
 8007b06:	d020      	beq.n	8007b4a <_printf_i+0xb2>
 8007b08:	2970      	cmp	r1, #112	; 0x70
 8007b0a:	d1dd      	bne.n	8007ac8 <_printf_i+0x30>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	f043 0320 	orr.w	r3, r3, #32
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e003      	b.n	8007b1e <_printf_i+0x86>
 8007b16:	2975      	cmp	r1, #117	; 0x75
 8007b18:	d017      	beq.n	8007b4a <_printf_i+0xb2>
 8007b1a:	2978      	cmp	r1, #120	; 0x78
 8007b1c:	d1d4      	bne.n	8007ac8 <_printf_i+0x30>
 8007b1e:	2378      	movs	r3, #120	; 0x78
 8007b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b24:	4864      	ldr	r0, [pc, #400]	; (8007cb8 <_printf_i+0x220>)
 8007b26:	e055      	b.n	8007bd4 <_printf_i+0x13c>
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	1d19      	adds	r1, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6011      	str	r1, [r2, #0]
 8007b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e08c      	b.n	8007c56 <_printf_i+0x1be>
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6011      	str	r1, [r2, #0]
 8007b40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b44:	bf18      	it	ne
 8007b46:	b21b      	sxthne	r3, r3
 8007b48:	e7cf      	b.n	8007aea <_printf_i+0x52>
 8007b4a:	6813      	ldr	r3, [r2, #0]
 8007b4c:	6825      	ldr	r5, [r4, #0]
 8007b4e:	1d18      	adds	r0, r3, #4
 8007b50:	6010      	str	r0, [r2, #0]
 8007b52:	0628      	lsls	r0, r5, #24
 8007b54:	d501      	bpl.n	8007b5a <_printf_i+0xc2>
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	e002      	b.n	8007b60 <_printf_i+0xc8>
 8007b5a:	0668      	lsls	r0, r5, #25
 8007b5c:	d5fb      	bpl.n	8007b56 <_printf_i+0xbe>
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	4854      	ldr	r0, [pc, #336]	; (8007cb4 <_printf_i+0x21c>)
 8007b62:	296f      	cmp	r1, #111	; 0x6f
 8007b64:	bf14      	ite	ne
 8007b66:	220a      	movne	r2, #10
 8007b68:	2208      	moveq	r2, #8
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b70:	6865      	ldr	r5, [r4, #4]
 8007b72:	60a5      	str	r5, [r4, #8]
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	f2c0 8095 	blt.w	8007ca4 <_printf_i+0x20c>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	f021 0104 	bic.w	r1, r1, #4
 8007b80:	6021      	str	r1, [r4, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d13d      	bne.n	8007c02 <_printf_i+0x16a>
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	f040 808e 	bne.w	8007ca8 <_printf_i+0x210>
 8007b8c:	4665      	mov	r5, ip
 8007b8e:	2a08      	cmp	r2, #8
 8007b90:	d10b      	bne.n	8007baa <_printf_i+0x112>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	07db      	lsls	r3, r3, #31
 8007b96:	d508      	bpl.n	8007baa <_printf_i+0x112>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	bfde      	ittt	le
 8007ba0:	2330      	movle	r3, #48	; 0x30
 8007ba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007baa:	ebac 0305 	sub.w	r3, ip, r5
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	f8cd 8000 	str.w	r8, [sp]
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	aa03      	add	r2, sp, #12
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff fef6 	bl	80079ac <_printf_common>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d14d      	bne.n	8007c60 <_printf_i+0x1c8>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	b005      	add	sp, #20
 8007bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bce:	4839      	ldr	r0, [pc, #228]	; (8007cb4 <_printf_i+0x21c>)
 8007bd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	6821      	ldr	r1, [r4, #0]
 8007bd8:	1d1d      	adds	r5, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6015      	str	r5, [r2, #0]
 8007bde:	060a      	lsls	r2, r1, #24
 8007be0:	d50b      	bpl.n	8007bfa <_printf_i+0x162>
 8007be2:	07ca      	lsls	r2, r1, #31
 8007be4:	bf44      	itt	mi
 8007be6:	f041 0120 	orrmi.w	r1, r1, #32
 8007bea:	6021      	strmi	r1, [r4, #0]
 8007bec:	b91b      	cbnz	r3, 8007bf6 <_printf_i+0x15e>
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	f022 0220 	bic.w	r2, r2, #32
 8007bf4:	6022      	str	r2, [r4, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	e7b7      	b.n	8007b6a <_printf_i+0xd2>
 8007bfa:	064d      	lsls	r5, r1, #25
 8007bfc:	bf48      	it	mi
 8007bfe:	b29b      	uxthmi	r3, r3
 8007c00:	e7ef      	b.n	8007be2 <_printf_i+0x14a>
 8007c02:	4665      	mov	r5, ip
 8007c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c08:	fb02 3311 	mls	r3, r2, r1, r3
 8007c0c:	5cc3      	ldrb	r3, [r0, r3]
 8007c0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c12:	460b      	mov	r3, r1
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d1f5      	bne.n	8007c04 <_printf_i+0x16c>
 8007c18:	e7b9      	b.n	8007b8e <_printf_i+0xf6>
 8007c1a:	6813      	ldr	r3, [r2, #0]
 8007c1c:	6825      	ldr	r5, [r4, #0]
 8007c1e:	6961      	ldr	r1, [r4, #20]
 8007c20:	1d18      	adds	r0, r3, #4
 8007c22:	6010      	str	r0, [r2, #0]
 8007c24:	0628      	lsls	r0, r5, #24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	d501      	bpl.n	8007c2e <_printf_i+0x196>
 8007c2a:	6019      	str	r1, [r3, #0]
 8007c2c:	e002      	b.n	8007c34 <_printf_i+0x19c>
 8007c2e:	066a      	lsls	r2, r5, #25
 8007c30:	d5fb      	bpl.n	8007c2a <_printf_i+0x192>
 8007c32:	8019      	strh	r1, [r3, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	4665      	mov	r5, ip
 8007c3a:	e7b9      	b.n	8007bb0 <_printf_i+0x118>
 8007c3c:	6813      	ldr	r3, [r2, #0]
 8007c3e:	1d19      	adds	r1, r3, #4
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	681d      	ldr	r5, [r3, #0]
 8007c44:	6862      	ldr	r2, [r4, #4]
 8007c46:	2100      	movs	r1, #0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f7f8 fad9 	bl	8000200 <memchr>
 8007c4e:	b108      	cbz	r0, 8007c54 <_printf_i+0x1bc>
 8007c50:	1b40      	subs	r0, r0, r5
 8007c52:	6060      	str	r0, [r4, #4]
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5e:	e7a7      	b.n	8007bb0 <_printf_i+0x118>
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	462a      	mov	r2, r5
 8007c64:	4639      	mov	r1, r7
 8007c66:	4630      	mov	r0, r6
 8007c68:	47c0      	blx	r8
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d0aa      	beq.n	8007bc4 <_printf_i+0x12c>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	079b      	lsls	r3, r3, #30
 8007c72:	d413      	bmi.n	8007c9c <_printf_i+0x204>
 8007c74:	68e0      	ldr	r0, [r4, #12]
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	4298      	cmp	r0, r3
 8007c7a:	bfb8      	it	lt
 8007c7c:	4618      	movlt	r0, r3
 8007c7e:	e7a3      	b.n	8007bc8 <_printf_i+0x130>
 8007c80:	2301      	movs	r3, #1
 8007c82:	464a      	mov	r2, r9
 8007c84:	4639      	mov	r1, r7
 8007c86:	4630      	mov	r0, r6
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d09a      	beq.n	8007bc4 <_printf_i+0x12c>
 8007c8e:	3501      	adds	r5, #1
 8007c90:	68e3      	ldr	r3, [r4, #12]
 8007c92:	9a03      	ldr	r2, [sp, #12]
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	42ab      	cmp	r3, r5
 8007c98:	dcf2      	bgt.n	8007c80 <_printf_i+0x1e8>
 8007c9a:	e7eb      	b.n	8007c74 <_printf_i+0x1dc>
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	f104 0919 	add.w	r9, r4, #25
 8007ca2:	e7f5      	b.n	8007c90 <_printf_i+0x1f8>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1ac      	bne.n	8007c02 <_printf_i+0x16a>
 8007ca8:	7803      	ldrb	r3, [r0, #0]
 8007caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb2:	e76c      	b.n	8007b8e <_printf_i+0xf6>
 8007cb4:	080087a9 	.word	0x080087a9
 8007cb8:	080087ba 	.word	0x080087ba

08007cbc <memcpy>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	1e43      	subs	r3, r0, #1
 8007cc0:	440a      	add	r2, r1
 8007cc2:	4291      	cmp	r1, r2
 8007cc4:	d100      	bne.n	8007cc8 <memcpy+0xc>
 8007cc6:	bd10      	pop	{r4, pc}
 8007cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd0:	e7f7      	b.n	8007cc2 <memcpy+0x6>

08007cd2 <memmove>:
 8007cd2:	4288      	cmp	r0, r1
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	eb01 0302 	add.w	r3, r1, r2
 8007cda:	d807      	bhi.n	8007cec <memmove+0x1a>
 8007cdc:	1e42      	subs	r2, r0, #1
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d00a      	beq.n	8007cf8 <memmove+0x26>
 8007ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007cea:	e7f8      	b.n	8007cde <memmove+0xc>
 8007cec:	4283      	cmp	r3, r0
 8007cee:	d9f5      	bls.n	8007cdc <memmove+0xa>
 8007cf0:	1881      	adds	r1, r0, r2
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	42d3      	cmn	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memmove+0x28>
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d02:	e7f7      	b.n	8007cf4 <memmove+0x22>

08007d04 <_free_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4605      	mov	r5, r0
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d045      	beq.n	8007d98 <_free_r+0x94>
 8007d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d10:	1f0c      	subs	r4, r1, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	18e4      	addlt	r4, r4, r3
 8007d18:	f000 f8d2 	bl	8007ec0 <__malloc_lock>
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <_free_r+0x98>)
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	4610      	mov	r0, r2
 8007d22:	b933      	cbnz	r3, 8007d32 <_free_r+0x2e>
 8007d24:	6063      	str	r3, [r4, #4]
 8007d26:	6014      	str	r4, [r2, #0]
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2e:	f000 b8c8 	b.w	8007ec2 <__malloc_unlock>
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d90c      	bls.n	8007d50 <_free_r+0x4c>
 8007d36:	6821      	ldr	r1, [r4, #0]
 8007d38:	1862      	adds	r2, r4, r1
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf04      	itt	eq
 8007d3e:	681a      	ldreq	r2, [r3, #0]
 8007d40:	685b      	ldreq	r3, [r3, #4]
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	bf04      	itt	eq
 8007d46:	1852      	addeq	r2, r2, r1
 8007d48:	6022      	streq	r2, [r4, #0]
 8007d4a:	6004      	str	r4, [r0, #0]
 8007d4c:	e7ec      	b.n	8007d28 <_free_r+0x24>
 8007d4e:	4613      	mov	r3, r2
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	b10a      	cbz	r2, 8007d58 <_free_r+0x54>
 8007d54:	42a2      	cmp	r2, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x4a>
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	1858      	adds	r0, r3, r1
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x74>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4401      	add	r1, r0
 8007d64:	1858      	adds	r0, r3, r1
 8007d66:	4282      	cmp	r2, r0
 8007d68:	6019      	str	r1, [r3, #0]
 8007d6a:	d1dd      	bne.n	8007d28 <_free_r+0x24>
 8007d6c:	6810      	ldr	r0, [r2, #0]
 8007d6e:	6852      	ldr	r2, [r2, #4]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	4401      	add	r1, r0
 8007d74:	6019      	str	r1, [r3, #0]
 8007d76:	e7d7      	b.n	8007d28 <_free_r+0x24>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x7c>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	e7d3      	b.n	8007d28 <_free_r+0x24>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428a      	cmp	r2, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6811      	ldreq	r1, [r2, #0]
 8007d8a:	6852      	ldreq	r2, [r2, #4]
 8007d8c:	6062      	str	r2, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	605c      	str	r4, [r3, #4]
 8007d96:	e7c7      	b.n	8007d28 <_free_r+0x24>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000108 	.word	0x20000108

08007da0 <_malloc_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	1ccd      	adds	r5, r1, #3
 8007da4:	f025 0503 	bic.w	r5, r5, #3
 8007da8:	3508      	adds	r5, #8
 8007daa:	2d0c      	cmp	r5, #12
 8007dac:	bf38      	it	cc
 8007dae:	250c      	movcc	r5, #12
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	4606      	mov	r6, r0
 8007db4:	db01      	blt.n	8007dba <_malloc_r+0x1a>
 8007db6:	42a9      	cmp	r1, r5
 8007db8:	d903      	bls.n	8007dc2 <_malloc_r+0x22>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	bd70      	pop	{r4, r5, r6, pc}
 8007dc2:	f000 f87d 	bl	8007ec0 <__malloc_lock>
 8007dc6:	4a21      	ldr	r2, [pc, #132]	; (8007e4c <_malloc_r+0xac>)
 8007dc8:	6814      	ldr	r4, [r2, #0]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	b991      	cbnz	r1, 8007df4 <_malloc_r+0x54>
 8007dce:	4c20      	ldr	r4, [pc, #128]	; (8007e50 <_malloc_r+0xb0>)
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	b91b      	cbnz	r3, 8007ddc <_malloc_r+0x3c>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f000 f863 	bl	8007ea0 <_sbrk_r>
 8007dda:	6020      	str	r0, [r4, #0]
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f85e 	bl	8007ea0 <_sbrk_r>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d124      	bne.n	8007e32 <_malloc_r+0x92>
 8007de8:	230c      	movs	r3, #12
 8007dea:	6033      	str	r3, [r6, #0]
 8007dec:	4630      	mov	r0, r6
 8007dee:	f000 f868 	bl	8007ec2 <__malloc_unlock>
 8007df2:	e7e4      	b.n	8007dbe <_malloc_r+0x1e>
 8007df4:	680b      	ldr	r3, [r1, #0]
 8007df6:	1b5b      	subs	r3, r3, r5
 8007df8:	d418      	bmi.n	8007e2c <_malloc_r+0x8c>
 8007dfa:	2b0b      	cmp	r3, #11
 8007dfc:	d90f      	bls.n	8007e1e <_malloc_r+0x7e>
 8007dfe:	600b      	str	r3, [r1, #0]
 8007e00:	50cd      	str	r5, [r1, r3]
 8007e02:	18cc      	adds	r4, r1, r3
 8007e04:	4630      	mov	r0, r6
 8007e06:	f000 f85c 	bl	8007ec2 <__malloc_unlock>
 8007e0a:	f104 000b 	add.w	r0, r4, #11
 8007e0e:	1d23      	adds	r3, r4, #4
 8007e10:	f020 0007 	bic.w	r0, r0, #7
 8007e14:	1ac3      	subs	r3, r0, r3
 8007e16:	d0d3      	beq.n	8007dc0 <_malloc_r+0x20>
 8007e18:	425a      	negs	r2, r3
 8007e1a:	50e2      	str	r2, [r4, r3]
 8007e1c:	e7d0      	b.n	8007dc0 <_malloc_r+0x20>
 8007e1e:	428c      	cmp	r4, r1
 8007e20:	684b      	ldr	r3, [r1, #4]
 8007e22:	bf16      	itet	ne
 8007e24:	6063      	strne	r3, [r4, #4]
 8007e26:	6013      	streq	r3, [r2, #0]
 8007e28:	460c      	movne	r4, r1
 8007e2a:	e7eb      	b.n	8007e04 <_malloc_r+0x64>
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	6849      	ldr	r1, [r1, #4]
 8007e30:	e7cc      	b.n	8007dcc <_malloc_r+0x2c>
 8007e32:	1cc4      	adds	r4, r0, #3
 8007e34:	f024 0403 	bic.w	r4, r4, #3
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d005      	beq.n	8007e48 <_malloc_r+0xa8>
 8007e3c:	1a21      	subs	r1, r4, r0
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f82e 	bl	8007ea0 <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d0cf      	beq.n	8007de8 <_malloc_r+0x48>
 8007e48:	6025      	str	r5, [r4, #0]
 8007e4a:	e7db      	b.n	8007e04 <_malloc_r+0x64>
 8007e4c:	20000108 	.word	0x20000108
 8007e50:	2000010c 	.word	0x2000010c

08007e54 <_realloc_r>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4607      	mov	r7, r0
 8007e58:	4614      	mov	r4, r2
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	b921      	cbnz	r1, 8007e68 <_realloc_r+0x14>
 8007e5e:	4611      	mov	r1, r2
 8007e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e64:	f7ff bf9c 	b.w	8007da0 <_malloc_r>
 8007e68:	b922      	cbnz	r2, 8007e74 <_realloc_r+0x20>
 8007e6a:	f7ff ff4b 	bl	8007d04 <_free_r>
 8007e6e:	4625      	mov	r5, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e74:	f000 f826 	bl	8007ec4 <_malloc_usable_size_r>
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d20f      	bcs.n	8007e9c <_realloc_r+0x48>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f7ff ff8e 	bl	8007da0 <_malloc_r>
 8007e84:	4605      	mov	r5, r0
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d0f2      	beq.n	8007e70 <_realloc_r+0x1c>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	f7ff ff15 	bl	8007cbc <memcpy>
 8007e92:	4631      	mov	r1, r6
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ff35 	bl	8007d04 <_free_r>
 8007e9a:	e7e9      	b.n	8007e70 <_realloc_r+0x1c>
 8007e9c:	4635      	mov	r5, r6
 8007e9e:	e7e7      	b.n	8007e70 <_realloc_r+0x1c>

08007ea0 <_sbrk_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4c06      	ldr	r4, [pc, #24]	; (8007ebc <_sbrk_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	f7fa fb74 	bl	8002598 <_sbrk>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_sbrk_r+0x1a>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_sbrk_r+0x1a>
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200004ec 	.word	0x200004ec

08007ec0 <__malloc_lock>:
 8007ec0:	4770      	bx	lr

08007ec2 <__malloc_unlock>:
 8007ec2:	4770      	bx	lr

08007ec4 <_malloc_usable_size_r>:
 8007ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec8:	1f18      	subs	r0, r3, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bfbc      	itt	lt
 8007ece:	580b      	ldrlt	r3, [r1, r0]
 8007ed0:	18c0      	addlt	r0, r0, r3
 8007ed2:	4770      	bx	lr

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
