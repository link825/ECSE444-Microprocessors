
finalproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f74  08008f74  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f7c  08008f7c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f7c  08008f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f80  08008f80  00018f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200000a8  0800902c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800902c  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e39f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003438  00000000  00000000  0003e477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  000418b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00042f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cd8a  00000000  00000000  00044420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a20  00000000  00000000  000711aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001129c4  00000000  00000000  00083bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0019658e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  00196680  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  0019c928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008668 	.word	0x08008668

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	08008668 	.word	0x08008668

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b972 	b.w	8000dd8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	4688      	mov	r8, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14b      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	d967      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0720 	rsb	r7, r2, #32
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b32:	4095      	lsls	r5, r2
 8000b34:	ea47 0803 	orr.w	r8, r7, r3
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b44:	fa1f fc85 	uxth.w	ip, r5
 8000b48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b50:	fb07 f10c 	mul.w	r1, r7, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b5e:	f080 811b 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8118 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	442b      	add	r3, r5
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8107 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	f240 8104 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b94:	3802      	subs	r0, #2
 8000b96:	442c      	add	r4, r5
 8000b98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	b11e      	cbz	r6, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xbe>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80eb 	beq.w	8000d92 <__udivmoddi4+0x286>
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f783 	clz	r7, r3
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d147      	bne.n	8000c62 <__udivmoddi4+0x156>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd0>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80fa 	bhi.w	8000dd0 <__udivmoddi4+0x2c4>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4698      	mov	r8, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000bea:	e9c6 4800 	strd	r4, r8, [r6]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa0>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xe8>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 808f 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfe:	1b49      	subs	r1, r1, r5
 8000c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c04:	fa1f f885 	uxth.w	r8, r5
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb08 f10c 	mul.w	r1, r8, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1a59      	subs	r1, r3, r1
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x14c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x14a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80b6 	bhi.w	8000dc2 <__udivmoddi4+0x2b6>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e79f      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c62:	f1c7 0c20 	rsb	ip, r7, #32
 8000c66:	40bb      	lsls	r3, r7
 8000c68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c70:	fa01 f407 	lsl.w	r4, r1, r7
 8000c74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c80:	4325      	orrs	r5, r4
 8000c82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c86:	0c2c      	lsrs	r4, r5, #16
 8000c88:	fb08 3319 	mls	r3, r8, r9, r3
 8000c8c:	fa1f fa8e 	uxth.w	sl, lr
 8000c90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c94:	fb09 f40a 	mul.w	r4, r9, sl
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	f080 8087 	bcs.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f240 8084 	bls.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4473      	add	r3, lr
 8000cbc:	1b1b      	subs	r3, r3, r4
 8000cbe:	b2ad      	uxth	r5, r5
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ccc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d26b      	bcs.n	8000db6 <__udivmoddi4+0x2aa>
 8000cde:	45a2      	cmp	sl, r4
 8000ce0:	d969      	bls.n	8000db6 <__udivmoddi4+0x2aa>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4474      	add	r4, lr
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	454c      	cmp	r4, r9
 8000cf4:	46c2      	mov	sl, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	d354      	bcc.n	8000da4 <__udivmoddi4+0x298>
 8000cfa:	d051      	beq.n	8000da0 <__udivmoddi4+0x294>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d069      	beq.n	8000dd4 <__udivmoddi4+0x2c8>
 8000d00:	ebb1 050a 	subs.w	r5, r1, sl
 8000d04:	eb64 0403 	sbc.w	r4, r4, r3
 8000d08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	40fc      	lsrs	r4, r7
 8000d10:	ea4c 0505 	orr.w	r5, ip, r5
 8000d14:	e9c6 5400 	strd	r5, r4, [r6]
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e747      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f703 	lsr.w	r7, r0, r3
 8000d24:	4095      	lsls	r5, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d32:	4338      	orrs	r0, r7
 8000d34:	0c01      	lsrs	r1, r0, #16
 8000d36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3a:	fa1f f885 	uxth.w	r8, r5
 8000d3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb07 f308 	mul.w	r3, r7, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x256>
 8000d52:	1869      	adds	r1, r5, r1
 8000d54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d58:	d22f      	bcs.n	8000dba <__udivmoddi4+0x2ae>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d92d      	bls.n	8000dba <__udivmoddi4+0x2ae>
 8000d5e:	3f02      	subs	r7, #2
 8000d60:	4429      	add	r1, r5
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	b281      	uxth	r1, r0
 8000d66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb00 f308 	mul.w	r3, r0, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x27e>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d80:	d217      	bcs.n	8000db2 <__udivmoddi4+0x2a6>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d915      	bls.n	8000db2 <__udivmoddi4+0x2a6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d90:	e73b      	b.n	8000c0a <__udivmoddi4+0xfe>
 8000d92:	4637      	mov	r7, r6
 8000d94:	4630      	mov	r0, r6
 8000d96:	e709      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e6e7      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fb      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000da0:	4541      	cmp	r1, r8
 8000da2:	d2ab      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dac:	3801      	subs	r0, #1
 8000dae:	4613      	mov	r3, r2
 8000db0:	e7a4      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db2:	4660      	mov	r0, ip
 8000db4:	e7e9      	b.n	8000d8a <__udivmoddi4+0x27e>
 8000db6:	4618      	mov	r0, r3
 8000db8:	e795      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dba:	4667      	mov	r7, ip
 8000dbc:	e7d1      	b.n	8000d62 <__udivmoddi4+0x256>
 8000dbe:	4681      	mov	r9, r0
 8000dc0:	e77c      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	442c      	add	r4, r5
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0x14c>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	442b      	add	r3, r5
 8000dce:	e72f      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xda>
 8000dd4:	4637      	mov	r7, r6
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0xa0>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000dea:	2110      	movs	r1, #16
 8000dec:	20d4      	movs	r0, #212	; 0xd4
 8000dee:	f001 fd6d 	bl	80028cc <SENSOR_IO_Read>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000e02:	7bba      	ldrb	r2, [r7, #14]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2110      	movs	r1, #16
 8000e10:	20d4      	movs	r0, #212	; 0xd4
 8000e12:	f001 fd41 	bl	8002898 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000e16:	2112      	movs	r1, #18
 8000e18:	20d4      	movs	r0, #212	; 0xd4
 8000e1a:	f001 fd57 	bl	80028cc <SENSOR_IO_Read>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000e30:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000e32:	7bba      	ldrb	r2, [r7, #14]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2112      	movs	r1, #18
 8000e40:	20d4      	movs	r0, #212	; 0xd4
 8000e42:	f001 fd29 	bl	8002898 <SENSOR_IO_Write>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000e58:	2110      	movs	r1, #16
 8000e5a:	20d4      	movs	r0, #212	; 0xd4
 8000e5c:	f001 fd36 	bl	80028cc <SENSOR_IO_Read>
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2110      	movs	r1, #16
 8000e72:	20d4      	movs	r0, #212	; 0xd4
 8000e74:	f001 fd10 	bl	8002898 <SENSOR_IO_Write>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000e84:	f001 fcfe 	bl	8002884 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000e88:	210f      	movs	r1, #15
 8000e8a:	20d4      	movs	r0, #212	; 0xd4
 8000e8c:	f001 fd1e 	bl	80028cc <SENSOR_IO_Read>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000ea4:	2115      	movs	r1, #21
 8000ea6:	20d4      	movs	r0, #212	; 0xd4
 8000ea8:	f001 fd10 	bl	80028cc <SENSOR_IO_Read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f023 0310 	bic.w	r3, r3, #16
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2115      	movs	r1, #21
 8000ecc:	20d4      	movs	r0, #212	; 0xd4
 8000ece:	f001 fce3 	bl	8002898 <SENSOR_IO_Write>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	20d4      	movs	r0, #212	; 0xd4
 8000ef6:	f001 fce9 	bl	80028cc <SENSOR_IO_Read>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000efe:	f107 0208 	add.w	r2, r7, #8
 8000f02:	2306      	movs	r3, #6
 8000f04:	2128      	movs	r1, #40	; 0x28
 8000f06:	20d4      	movs	r0, #212	; 0xd4
 8000f08:	f001 fcfe 	bl	8002908 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77fb      	strb	r3, [r7, #31]
 8000f10:	e01f      	b.n	8000f52 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3301      	adds	r3, #1
 8000f18:	f107 0220 	add.w	r2, r7, #32
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	f107 0120 	add.w	r1, r7, #32
 8000f30:	440b      	add	r3, r1
 8000f32:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	b212      	sxth	r2, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	f107 0120 	add.w	r1, r7, #32
 8000f46:	440b      	add	r3, r1
 8000f48:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000f4c:	7ffb      	ldrb	r3, [r7, #31]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	77fb      	strb	r3, [r7, #31]
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d9dc      	bls.n	8000f12 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d828      	bhi.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <LSM6DSL_AccReadXYZ+0x8c>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fb5 	.word	0x08000fb5
 8000f70:	08000fb5 	.word	0x08000fb5
 8000f74:	08000fb5 	.word	0x08000fb5
 8000f78:	08000faf 	.word	0x08000faf
 8000f7c:	08000fb5 	.word	0x08000fb5
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fb5 	.word	0x08000fb5
 8000f88:	08000fa3 	.word	0x08000fa3
 8000f8c:	08000fb5 	.word	0x08000fb5
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	08000fb5 	.word	0x08000fb5
 8000f98:	08000fa9 	.word	0x08000fa9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <LSM6DSL_AccReadXYZ+0x124>)
 8000f9e:	61bb      	str	r3, [r7, #24]
    break;
 8000fa0:	e008      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <LSM6DSL_AccReadXYZ+0x128>)
 8000fa4:	61bb      	str	r3, [r7, #24]
    break;
 8000fa6:	e005      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <LSM6DSL_AccReadXYZ+0x12c>)
 8000faa:	61bb      	str	r3, [r7, #24]
    break;
 8000fac:	e002      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <LSM6DSL_AccReadXYZ+0x130>)
 8000fb0:	61bb      	str	r3, [r7, #24]
    break;    
 8000fb2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
 8000fb8:	e01b      	b.n	8000ff2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	f107 0220 	add.w	r2, r7, #32
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 2a90 	vmov	r2, s15
 8000fe8:	b212      	sxth	r2, r2
 8000fea:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	77fb      	strb	r3, [r7, #31]
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d9e0      	bls.n	8000fba <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	3d79db23 	.word	0x3d79db23
 8001004:	3df9db23 	.word	0x3df9db23
 8001008:	3e79db23 	.word	0x3e79db23
 800100c:	3ef9db23 	.word	0x3ef9db23

08001010 <create_filtre>:
 *  @params:
 *    q,r,x,p,k : the five floats of the kalman struct
 *  @return:
 *    my_filtre : an initialized kalman struct
 */
struct kalman_filtre create_filtre (float q, float r, float x, float p, float k){
 8001010:	b4b0      	push	{r4, r5, r7}
 8001012:	b08d      	sub	sp, #52	; 0x34
 8001014:	af00      	add	r7, sp, #0
 8001016:	6178      	str	r0, [r7, #20]
 8001018:	ed87 0a04 	vstr	s0, [r7, #16]
 800101c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001020:	ed87 1a02 	vstr	s2, [r7, #8]
 8001024:	edc7 1a01 	vstr	s3, [r7, #4]
 8001028:	ed87 2a00 	vstr	s4, [r7]
	struct kalman_filtre my_filtre;
	my_filtre.q = q;
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	61fb      	str	r3, [r7, #28]
	my_filtre.r = r;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	623b      	str	r3, [r7, #32]
	my_filtre.x = x;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
	my_filtre.p = p;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
	my_filtre.k = k;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c

	return my_filtre;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	461d      	mov	r5, r3
 8001044:	f107 041c 	add.w	r4, r7, #28
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	602b      	str	r3, [r5, #0]
}
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	3734      	adds	r7, #52	; 0x34
 8001054:	46bd      	mov	sp, r7
 8001056:	bcb0      	pop	{r4, r5, r7}
 8001058:	4770      	bx	lr

0800105a <c_kalman_update>:
 *    kalman_filtre : pointer to the kalman filtre struct to update
 *    measurement : a float value that needs to be filtred, used in uppdating the x parameter
 *  @return:
 *    kalman_filtre->x : the updated/filtred x vlaue
 */
float c_kalman_update(struct kalman_filtre* kalman_filtre, float measurement){
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	ed87 0a00 	vstr	s0, [r7]
    kalman_filtre->p += kalman_filtre->q;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	ed93 7a03 	vldr	s14, [r3, #12]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman_filtre->k = kalman_filtre->p / (kalman_filtre->p + kalman_filtre->r);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a03 	vldr	s14, [r3, #12]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
 800108e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman_filtre->x = kalman_filtre->x + kalman_filtre->k * (measurement - kalman_filtre->x);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	ed93 7a02 	vldr	s14, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	edd3 6a04 	vldr	s13, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ae:	ed97 6a00 	vldr	s12, [r7]
 80010b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman_filtre->p = (1 - kalman_filtre->k) * kalman_filtre->p;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80010ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	edc3 7a03 	vstr	s15, [r3, #12]

    return kalman_filtre->x;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	ee07 3a90 	vmov	s15, r3
}
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <C6_sample_populator>:
 *  @return:
 *    none
 */

// populate the sine wave sampling array for a C6 tone
void C6_sample_populator() {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 43; i++) {					//iterate a specified amount of times depending on the notes frequency
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e085      	b.n	8001210 <C6_sample_populator+0x118>
		float modulus = (float) i / 43;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001228 <C6_sample_populator+0x130>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 800111a:	6938      	ldr	r0, [r7, #16]
 800111c:	f7ff fa24 	bl	8000568 <__aeabi_f2d>
 8001120:	a33f      	add	r3, pc, #252	; (adr r3, 8001220 <C6_sample_populator+0x128>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa77 	bl	8000618 <__aeabi_dmul>
 800112a:	4603      	mov	r3, r0
 800112c:	460c      	mov	r4, r1
 800112e:	4618      	mov	r0, r3
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc83 	bl	8000a3c <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);		//sample using the cmsis sine function
 800113a:	ed97 0a03 	vldr	s0, [r7, #12]
 800113e:	f006 fe15 	bl	8007d6c <arm_sin_f32>
 8001142:	eeb0 7a40 	vmov.f32	s14, s0
 8001146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114e:	edc7 7a03 	vstr	s15, [r7, #12]
		C6_samples_v0[i] = (uint8_t) radians * 1;	//populate the arrays for all volume levels
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	edc7 7a01 	vstr	s15, [r7, #4]
 800115e:	793b      	ldrb	r3, [r7, #4]
 8001160:	b2d9      	uxtb	r1, r3
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <C6_sample_populator+0x134>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4413      	add	r3, r2
 8001168:	460a      	mov	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
		C6_samples_v1[i] = (uint8_t) radians * 22;
 800116c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001174:	edc7 7a01 	vstr	s15, [r7, #4]
 8001178:	793b      	ldrb	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	441a      	add	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2d9      	uxtb	r1, r3
 800118a:	4a29      	ldr	r2, [pc, #164]	; (8001230 <C6_sample_populator+0x138>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4413      	add	r3, r2
 8001190:	460a      	mov	r2, r1
 8001192:	701a      	strb	r2, [r3, #0]
		C6_samples_v2[i] = (uint8_t) radians * 43;
 8001194:	edd7 7a03 	vldr	s15, [r7, #12]
 8001198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119c:	edc7 7a01 	vstr	s15, [r7, #4]
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	441a      	add	r2, r3
 80011aa:	4611      	mov	r1, r2
 80011ac:	00c9      	lsls	r1, r1, #3
 80011ae:	1a8a      	subs	r2, r1, r2
 80011b0:	0052      	lsls	r2, r2, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	b2d9      	uxtb	r1, r3
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <C6_sample_populator+0x13c>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4413      	add	r3, r2
 80011bc:	460a      	mov	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
		C6_samples_v3[i] = (uint8_t) radians * 64;
 80011c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011cc:	793b      	ldrb	r3, [r7, #4]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	b2d9      	uxtb	r1, r3
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <C6_sample_populator+0x140>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
		C6_samples_v4[i] = (uint8_t) radians * 85;
 80011de:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80011ea:	793b      	ldrb	r3, [r7, #4]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	0111      	lsls	r1, r2, #4
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	4413      	add	r3, r2
 80011fe:	b2d9      	uxtb	r1, r3
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <C6_sample_populator+0x144>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	4413      	add	r3, r2
 8001206:	460a      	mov	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 43; i++) {					//iterate a specified amount of times depending on the notes frequency
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b2a      	cmp	r3, #42	; 0x2a
 8001214:	f77f af76 	ble.w	8001104 <C6_sample_populator+0xc>
	}
}
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	3fa6defc 	.word	0x3fa6defc
 8001224:	401921fb 	.word	0x401921fb
 8001228:	422c0000 	.word	0x422c0000
 800122c:	200003ec 	.word	0x200003ec
 8001230:	20000374 	.word	0x20000374
 8001234:	20000554 	.word	0x20000554
 8001238:	2000063c 	.word	0x2000063c
 800123c:	200005dc 	.word	0x200005dc

08001240 <D6_sample_populator>:

// populate the sine wave sampling array for a D6 tone
void D6_sample_populator() {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
	for (int i = 0; i < 36; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e085      	b.n	8001358 <D6_sample_populator+0x118>
		float modulus = (float) i / 36;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001370 <D6_sample_populator+0x130>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 8001262:	6938      	ldr	r0, [r7, #16]
 8001264:	f7ff f980 	bl	8000568 <__aeabi_f2d>
 8001268:	a33f      	add	r3, pc, #252	; (adr r3, 8001368 <D6_sample_populator+0x128>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9d3 	bl	8000618 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4618      	mov	r0, r3
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fbdf 	bl	8000a3c <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 8001282:	ed97 0a03 	vldr	s0, [r7, #12]
 8001286:	f006 fd71 	bl	8007d6c <arm_sin_f32>
 800128a:	eeb0 7a40 	vmov.f32	s14, s0
 800128e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a03 	vstr	s15, [r7, #12]
		D6_samples_v0[i] = (uint8_t) radians * 1;
 800129a:	edd7 7a03 	vldr	s15, [r7, #12]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	b2d9      	uxtb	r1, r3
 80012aa:	4a32      	ldr	r2, [pc, #200]	; (8001374 <D6_sample_populator+0x134>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	460a      	mov	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
		D6_samples_v1[i] = (uint8_t) radians * 22;
 80012b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	441a      	add	r2, r3
 80012ca:	0052      	lsls	r2, r2, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	4a29      	ldr	r2, [pc, #164]	; (8001378 <D6_sample_populator+0x138>)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
		D6_samples_v2[i] = (uint8_t) radians * 43;
 80012dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012e8:	793b      	ldrb	r3, [r7, #4]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	0052      	lsls	r2, r2, #1
 80012f0:	441a      	add	r2, r3
 80012f2:	4611      	mov	r1, r2
 80012f4:	00c9      	lsls	r1, r1, #3
 80012f6:	1a8a      	subs	r2, r1, r2
 80012f8:	0052      	lsls	r2, r2, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	b2d9      	uxtb	r1, r3
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <D6_sample_populator+0x13c>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
		D6_samples_v3[i] = (uint8_t) radians * 64;
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001310:	edc7 7a01 	vstr	s15, [r7, #4]
 8001314:	793b      	ldrb	r3, [r7, #4]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	b2d9      	uxtb	r1, r3
 800131c:	4a18      	ldr	r2, [pc, #96]	; (8001380 <D6_sample_populator+0x140>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
		D6_samples_v4[i] = (uint8_t) radians * 85;
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001332:	793b      	ldrb	r3, [r7, #4]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4413      	add	r3, r2
 800133c:	461a      	mov	r2, r3
 800133e:	0111      	lsls	r1, r2, #4
 8001340:	461a      	mov	r2, r3
 8001342:	460b      	mov	r3, r1
 8001344:	4413      	add	r3, r2
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <D6_sample_populator+0x144>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 36; i++) {
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b23      	cmp	r3, #35	; 0x23
 800135c:	f77f af76 	ble.w	800124c <D6_sample_populator+0xc>
	}
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	3fa6defc 	.word	0x3fa6defc
 800136c:	401921fb 	.word	0x401921fb
 8001370:	42100000 	.word	0x42100000
 8001374:	200002b4 	.word	0x200002b4
 8001378:	200001b0 	.word	0x200001b0
 800137c:	20000580 	.word	0x20000580
 8001380:	20000718 	.word	0x20000718
 8001384:	20000338 	.word	0x20000338

08001388 <E6_sample_populator>:

// populate the sine wave sampling array for an E6 tone
void E6_sample_populator() {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 33; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e085      	b.n	80014a0 <E6_sample_populator+0x118>
		float modulus = (float) i / 33;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	eddf 6a46 	vldr	s13, [pc, #280]	; 80014b8 <E6_sample_populator+0x130>
 80013a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a6:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80013aa:	6938      	ldr	r0, [r7, #16]
 80013ac:	f7ff f8dc 	bl	8000568 <__aeabi_f2d>
 80013b0:	a33f      	add	r3, pc, #252	; (adr r3, 80014b0 <E6_sample_populator+0x128>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f92f 	bl	8000618 <__aeabi_dmul>
 80013ba:	4603      	mov	r3, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	4618      	mov	r0, r3
 80013c0:	4621      	mov	r1, r4
 80013c2:	f7ff fb3b 	bl	8000a3c <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 80013ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80013ce:	f006 fccd 	bl	8007d6c <arm_sin_f32>
 80013d2:	eeb0 7a40 	vmov.f32	s14, s0
 80013d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	edc7 7a03 	vstr	s15, [r7, #12]
		E6_samples_v0[i] = (uint8_t) radians * 1;
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	b2d9      	uxtb	r1, r3
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <E6_sample_populator+0x134>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4413      	add	r3, r2
 80013f8:	460a      	mov	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
		E6_samples_v1[i] = (uint8_t) radians * 22;
 80013fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001404:	edc7 7a01 	vstr	s15, [r7, #4]
 8001408:	793b      	ldrb	r3, [r7, #4]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	441a      	add	r2, r3
 8001412:	0052      	lsls	r2, r2, #1
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	b2d9      	uxtb	r1, r3
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <E6_sample_populator+0x138>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
		E6_samples_v2[i] = (uint8_t) radians * 43;
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	441a      	add	r2, r3
 800143a:	4611      	mov	r1, r2
 800143c:	00c9      	lsls	r1, r1, #3
 800143e:	1a8a      	subs	r2, r1, r2
 8001440:	0052      	lsls	r2, r2, #1
 8001442:	4413      	add	r3, r2
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <E6_sample_populator+0x13c>)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
		E6_samples_v3[i] = (uint8_t) radians * 64;
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001458:	edc7 7a01 	vstr	s15, [r7, #4]
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <E6_sample_populator+0x140>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	4413      	add	r3, r2
 800146a:	460a      	mov	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
		E6_samples_v4[i] = (uint8_t) radians * 85;
 800146e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	edc7 7a01 	vstr	s15, [r7, #4]
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	0111      	lsls	r1, r2, #4
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	4413      	add	r3, r2
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <E6_sample_populator+0x144>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	460a      	mov	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 33; i++) {
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	f77f af76 	ble.w	8001394 <E6_sample_populator+0xc>
	}
}
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	3fa6defc 	.word	0x3fa6defc
 80014b4:	401921fb 	.word	0x401921fb
 80014b8:	42040000 	.word	0x42040000
 80014bc:	20000438 	.word	0x20000438
 80014c0:	20000148 	.word	0x20000148
 80014c4:	20000788 	.word	0x20000788
 80014c8:	200006f4 	.word	0x200006f4
 80014cc:	200004f4 	.word	0x200004f4

080014d0 <F6_sample_populator>:

// populate the sine wave sampling array for an F6 tone
void F6_sample_populator() {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 30; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e085      	b.n	80015e8 <F6_sample_populator+0x118>
		float modulus = (float) i / 30;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80014ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ee:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f7ff f838 	bl	8000568 <__aeabi_f2d>
 80014f8:	a344      	add	r3, pc, #272	; (adr r3, 800160c <F6_sample_populator+0x13c>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f88b 	bl	8000618 <__aeabi_dmul>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fa97 	bl	8000a3c <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 8001512:	ed97 0a03 	vldr	s0, [r7, #12]
 8001516:	f006 fc29 	bl	8007d6c <arm_sin_f32>
 800151a:	eeb0 7a40 	vmov.f32	s14, s0
 800151e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc7 7a03 	vstr	s15, [r7, #12]
		F6_samples_v0[i] = (uint8_t) radians * 1;
 800152a:	edd7 7a03 	vldr	s15, [r7, #12]
 800152e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001532:	edc7 7a01 	vstr	s15, [r7, #4]
 8001536:	793b      	ldrb	r3, [r7, #4]
 8001538:	b2d9      	uxtb	r1, r3
 800153a:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <F6_sample_populator+0x128>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
		F6_samples_v1[i] = (uint8_t) radians * 22;
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001550:	793b      	ldrb	r3, [r7, #4]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	441a      	add	r2, r3
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	b2d9      	uxtb	r1, r3
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <F6_sample_populator+0x12c>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	460a      	mov	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
		F6_samples_v2[i] = (uint8_t) radians * 43;
 800156c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001574:	edc7 7a01 	vstr	s15, [r7, #4]
 8001578:	793b      	ldrb	r3, [r7, #4]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	0052      	lsls	r2, r2, #1
 8001580:	441a      	add	r2, r3
 8001582:	4611      	mov	r1, r2
 8001584:	00c9      	lsls	r1, r1, #3
 8001586:	1a8a      	subs	r2, r1, r2
 8001588:	0052      	lsls	r2, r2, #1
 800158a:	4413      	add	r3, r2
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <F6_sample_populator+0x130>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	701a      	strb	r2, [r3, #0]
		F6_samples_v3[i] = (uint8_t) radians * 64;
 8001598:	edd7 7a03 	vldr	s15, [r7, #12]
 800159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80015a4:	793b      	ldrb	r3, [r7, #4]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	b2d9      	uxtb	r1, r3
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <F6_sample_populator+0x134>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
		F6_samples_v4[i] = (uint8_t) radians * 85;
 80015b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015be:	edc7 7a01 	vstr	s15, [r7, #4]
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	0111      	lsls	r1, r2, #4
 80015d0:	461a      	mov	r2, r3
 80015d2:	460b      	mov	r3, r1
 80015d4:	4413      	add	r3, r2
 80015d6:	b2d9      	uxtb	r1, r3
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <F6_sample_populator+0x138>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4413      	add	r3, r2
 80015de:	460a      	mov	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 30; i++) {
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b1d      	cmp	r3, #29
 80015ec:	f77f af76 	ble.w	80014dc <F6_sample_populator+0xc>
	}
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	200006d4 	.word	0x200006d4
 80015fc:	20000418 	.word	0x20000418
 8001600:	200007c4 	.word	0x200007c4
 8001604:	200003cc 	.word	0x200003cc
 8001608:	200006b4 	.word	0x200006b4
 800160c:	3fa6defc 	.word	0x3fa6defc
 8001610:	401921fb 	.word	0x401921fb
 8001614:	00000000 	.word	0x00000000

08001618 <G6_sample_populator>:

// populate the sine wave sampling array for a G6 tone
void G6_sample_populator() {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 27; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e085      	b.n	8001730 <G6_sample_populator+0x118>
		float modulus = (float) i / 27;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162e:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8001632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001636:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 800163a:	6938      	ldr	r0, [r7, #16]
 800163c:	f7fe ff94 	bl	8000568 <__aeabi_f2d>
 8001640:	a344      	add	r3, pc, #272	; (adr r3, 8001754 <G6_sample_populator+0x13c>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffe7 	bl	8000618 <__aeabi_dmul>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	4618      	mov	r0, r3
 8001650:	4621      	mov	r1, r4
 8001652:	f7ff f9f3 	bl	8000a3c <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 800165a:	ed97 0a03 	vldr	s0, [r7, #12]
 800165e:	f006 fb85 	bl	8007d6c <arm_sin_f32>
 8001662:	eeb0 7a40 	vmov.f32	s14, s0
 8001666:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc7 7a03 	vstr	s15, [r7, #12]
		G6_samples_v0[i] = (uint8_t) radians * 1;
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
 800167e:	793b      	ldrb	r3, [r7, #4]
 8001680:	b2d9      	uxtb	r1, r3
 8001682:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <G6_sample_populator+0x128>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	460a      	mov	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
		G6_samples_v1[i] = (uint8_t) radians * 22;
 800168c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	edc7 7a01 	vstr	s15, [r7, #4]
 8001698:	793b      	ldrb	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	441a      	add	r2, r3
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	4a26      	ldr	r2, [pc, #152]	; (8001744 <G6_sample_populator+0x12c>)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4413      	add	r3, r2
 80016b0:	460a      	mov	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
		G6_samples_v2[i] = (uint8_t) radians * 43;
 80016b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80016c0:	793b      	ldrb	r3, [r7, #4]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	0052      	lsls	r2, r2, #1
 80016c8:	441a      	add	r2, r3
 80016ca:	4611      	mov	r1, r2
 80016cc:	00c9      	lsls	r1, r1, #3
 80016ce:	1a8a      	subs	r2, r1, r2
 80016d0:	0052      	lsls	r2, r2, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	b2d9      	uxtb	r1, r3
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <G6_sample_populator+0x130>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	460a      	mov	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
		G6_samples_v3[i] = (uint8_t) radians * 64;
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	b2d9      	uxtb	r1, r3
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <G6_sample_populator+0x134>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
		G6_samples_v4[i] = (uint8_t) radians * 85;
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001706:	edc7 7a01 	vstr	s15, [r7, #4]
 800170a:	793b      	ldrb	r3, [r7, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	0111      	lsls	r1, r2, #4
 8001718:	461a      	mov	r2, r3
 800171a:	460b      	mov	r3, r1
 800171c:	4413      	add	r3, r2
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <G6_sample_populator+0x138>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 27; i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b1a      	cmp	r3, #26
 8001734:	f77f af76 	ble.w	8001624 <G6_sample_populator+0xc>
	}

}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	20000104 	.word	0x20000104
 8001744:	20000530 	.word	0x20000530
 8001748:	20000620 	.word	0x20000620
 800174c:	200001e8 	.word	0x200001e8
 8001750:	20000698 	.word	0x20000698
 8001754:	3fa6defc 	.word	0x3fa6defc
 8001758:	401921fb 	.word	0x401921fb
 800175c:	00000000 	.word	0x00000000

08001760 <A6_sample_populator>:

// populate the sine wave sampling array for an A6 tone
void A6_sample_populator() {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e085      	b.n	8001878 <A6_sample_populator+0x118>
		float modulus = (float) i / 24;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 800177a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 8001782:	6938      	ldr	r0, [r7, #16]
 8001784:	f7fe fef0 	bl	8000568 <__aeabi_f2d>
 8001788:	a344      	add	r3, pc, #272	; (adr r3, 800189c <A6_sample_populator+0x13c>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff43 	bl	8000618 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4618      	mov	r0, r3
 8001798:	4621      	mov	r1, r4
 800179a:	f7ff f94f 	bl	8000a3c <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 80017a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80017a6:	f006 fae1 	bl	8007d6c <arm_sin_f32>
 80017aa:	eeb0 7a40 	vmov.f32	s14, s0
 80017ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	edc7 7a03 	vstr	s15, [r7, #12]
		A6_samples_v0[i] = (uint8_t) radians * 1;
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	b2d9      	uxtb	r1, r3
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <A6_sample_populator+0x128>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	460a      	mov	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
		A6_samples_v1[i] = (uint8_t) radians * 22;
 80017d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80017e0:	793b      	ldrb	r3, [r7, #4]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	441a      	add	r2, r3
 80017ea:	0052      	lsls	r2, r2, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	b2d9      	uxtb	r1, r3
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <A6_sample_populator+0x12c>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
		A6_samples_v2[i] = (uint8_t) radians * 43;
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001804:	edc7 7a01 	vstr	s15, [r7, #4]
 8001808:	793b      	ldrb	r3, [r7, #4]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	0052      	lsls	r2, r2, #1
 8001810:	441a      	add	r2, r3
 8001812:	4611      	mov	r1, r2
 8001814:	00c9      	lsls	r1, r1, #3
 8001816:	1a8a      	subs	r2, r1, r2
 8001818:	0052      	lsls	r2, r2, #1
 800181a:	4413      	add	r3, r2
 800181c:	b2d9      	uxtb	r1, r3
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <A6_sample_populator+0x130>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	460a      	mov	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
		A6_samples_v3[i] = (uint8_t) radians * 64;
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	edc7 7a01 	vstr	s15, [r7, #4]
 8001834:	793b      	ldrb	r3, [r7, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	b2d9      	uxtb	r1, r3
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <A6_sample_populator+0x134>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	4413      	add	r3, r2
 8001842:	460a      	mov	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
		A6_samples_v4[i] = (uint8_t) radians * 85;
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001852:	793b      	ldrb	r3, [r7, #4]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4413      	add	r3, r2
 800185c:	461a      	mov	r2, r3
 800185e:	0111      	lsls	r1, r2, #4
 8001860:	461a      	mov	r2, r3
 8001862:	460b      	mov	r3, r1
 8001864:	4413      	add	r3, r2
 8001866:	b2d9      	uxtb	r1, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <A6_sample_populator+0x138>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4413      	add	r3, r2
 800186e:	460a      	mov	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 24; i++) {
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b17      	cmp	r3, #23
 800187c:	f77f af76 	ble.w	800176c <A6_sample_populator+0xc>
	}
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	200003b4 	.word	0x200003b4
 800188c:	2000035c 	.word	0x2000035c
 8001890:	200000ec 	.word	0x200000ec
 8001894:	200005a4 	.word	0x200005a4
 8001898:	20000680 	.word	0x20000680
 800189c:	3fa6defc 	.word	0x3fa6defc
 80018a0:	401921fb 	.word	0x401921fb
 80018a4:	00000000 	.word	0x00000000

080018a8 <B6_sample_populator>:

// populate the sine wave sampling array for an B6 tone
void B6_sample_populator() {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 21; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e085      	b.n	80019c0 <B6_sample_populator+0x118>
		float modulus = (float) i / 21;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 80018c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c6:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 80018ca:	6938      	ldr	r0, [r7, #16]
 80018cc:	f7fe fe4c 	bl	8000568 <__aeabi_f2d>
 80018d0:	a344      	add	r3, pc, #272	; (adr r3, 80019e4 <B6_sample_populator+0x13c>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe9f 	bl	8000618 <__aeabi_dmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	f7ff f8ab 	bl	8000a3c <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 80018ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ee:	f006 fa3d 	bl	8007d6c <arm_sin_f32>
 80018f2:	eeb0 7a40 	vmov.f32	s14, s0
 80018f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	edc7 7a03 	vstr	s15, [r7, #12]
		B6_samples_v0[i] = (uint8_t) radians * 1;
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190a:	edc7 7a01 	vstr	s15, [r7, #4]
 800190e:	793b      	ldrb	r3, [r7, #4]
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <B6_sample_populator+0x128>)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	460a      	mov	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
		B6_samples_v1[i] = (uint8_t) radians * 22;
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001924:	edc7 7a01 	vstr	s15, [r7, #4]
 8001928:	793b      	ldrb	r3, [r7, #4]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	441a      	add	r2, r3
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <B6_sample_populator+0x12c>)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	460a      	mov	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
		B6_samples_v2[i] = (uint8_t) radians * 43;
 8001944:	edd7 7a03 	vldr	s15, [r7, #12]
 8001948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001950:	793b      	ldrb	r3, [r7, #4]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	0052      	lsls	r2, r2, #1
 8001958:	441a      	add	r2, r3
 800195a:	4611      	mov	r1, r2
 800195c:	00c9      	lsls	r1, r1, #3
 800195e:	1a8a      	subs	r2, r1, r2
 8001960:	0052      	lsls	r2, r2, #1
 8001962:	4413      	add	r3, r2
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <B6_sample_populator+0x130>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	460a      	mov	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
		B6_samples_v3[i] = (uint8_t) radians * 64;
 8001970:	edd7 7a03 	vldr	s15, [r7, #12]
 8001974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001978:	edc7 7a01 	vstr	s15, [r7, #4]
 800197c:	793b      	ldrb	r3, [r7, #4]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	b2d9      	uxtb	r1, r3
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <B6_sample_populator+0x134>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4413      	add	r3, r2
 800198a:	460a      	mov	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
		B6_samples_v4[i] = (uint8_t) radians * 85;
 800198e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001996:	edc7 7a01 	vstr	s15, [r7, #4]
 800199a:	793b      	ldrb	r3, [r7, #4]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	0111      	lsls	r1, r2, #4
 80019a8:	461a      	mov	r2, r3
 80019aa:	460b      	mov	r3, r1
 80019ac:	4413      	add	r3, r2
 80019ae:	b2d9      	uxtb	r1, r3
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <B6_sample_populator+0x138>)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4413      	add	r3, r2
 80019b6:	460a      	mov	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 21; i++) {
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b14      	cmp	r3, #20
 80019c4:	f77f af76 	ble.w	80018b4 <B6_sample_populator+0xc>
	}
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	20000198 	.word	0x20000198
 80019d4:	20000180 	.word	0x20000180
 80019d8:	20000668 	.word	0x20000668
 80019dc:	20000518 	.word	0x20000518
 80019e0:	20000608 	.word	0x20000608
 80019e4:	3fa6defc 	.word	0x3fa6defc
 80019e8:	401921fb 	.word	0x401921fb
 80019ec:	00000000 	.word	0x00000000

080019f0 <C7_sample_populator>:

// populate the sine wave sampling array for an C7 tone
void C7_sample_populator() {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e085      	b.n	8001b08 <C7_sample_populator+0x118>
		float modulus = (float) i / 20;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185 * modulus;
 8001a12:	6938      	ldr	r0, [r7, #16]
 8001a14:	f7fe fda8 	bl	8000568 <__aeabi_f2d>
 8001a18:	a344      	add	r3, pc, #272	; (adr r3, 8001b2c <C7_sample_populator+0x13c>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fdfb 	bl	8000618 <__aeabi_dmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	460c      	mov	r4, r1
 8001a26:	4618      	mov	r0, r3
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f7ff f807 	bl	8000a3c <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians) + 1);
 8001a32:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a36:	f006 f999 	bl	8007d6c <arm_sin_f32>
 8001a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	edc7 7a03 	vstr	s15, [r7, #12]
		C7_samples_v0[i] = (uint8_t) radians * 1;
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a52:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a56:	793b      	ldrb	r3, [r7, #4]
 8001a58:	b2d9      	uxtb	r1, r3
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <C7_sample_populator+0x128>)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	4413      	add	r3, r2
 8001a60:	460a      	mov	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
		C7_samples_v1[i] = (uint8_t) radians * 22;
 8001a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a70:	793b      	ldrb	r3, [r7, #4]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	441a      	add	r2, r3
 8001a7a:	0052      	lsls	r2, r2, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <C7_sample_populator+0x12c>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4413      	add	r3, r2
 8001a88:	460a      	mov	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
		C7_samples_v2[i] = (uint8_t) radians * 43;
 8001a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a94:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a98:	793b      	ldrb	r3, [r7, #4]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	441a      	add	r2, r3
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	00c9      	lsls	r1, r1, #3
 8001aa6:	1a8a      	subs	r2, r1, r2
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <C7_sample_populator+0x130>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
		C7_samples_v3[i] = (uint8_t) radians * 64;
 8001ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ac4:	793b      	ldrb	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	019b      	lsls	r3, r3, #6
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <C7_sample_populator+0x134>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
		C7_samples_v4[i] = (uint8_t) radians * 85;
 8001ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ade:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ae2:	793b      	ldrb	r3, [r7, #4]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	0111      	lsls	r1, r2, #4
 8001af0:	461a      	mov	r2, r3
 8001af2:	460b      	mov	r3, r1
 8001af4:	4413      	add	r3, r2
 8001af6:	b2d9      	uxtb	r1, r3
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <C7_sample_populator+0x138>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4413      	add	r3, r2
 8001afe:	460a      	mov	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b13      	cmp	r3, #19
 8001b0c:	f77f af76 	ble.w	80019fc <C7_sample_populator+0xc>
	}
}
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	200000d8 	.word	0x200000d8
 8001b1c:	20000134 	.word	0x20000134
 8001b20:	200003a0 	.word	0x200003a0
 8001b24:	200005bc 	.word	0x200005bc
 8001b28:	2000016c 	.word	0x2000016c
 8001b2c:	3fa6defc 	.word	0x3fa6defc
 8001b30:	401921fb 	.word	0x401921fb

08001b34 <pitch_volume_changer>:
 *    old_accelero_values[3]:	accelerometer values from the previous iteration
 *    new_accelero_values[3]:	accelerometer values from the current iteration
 *  @return:
 *    none
 */
void pitch_volume_changer(int16_t old_accelero_values[3], int16_t new_accelero_values[3]) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]

	//calculate the difference between the old and new values
	difference_values[0] = new_accelero_values[0] - old_accelero_values[0];
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	461a      	mov	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <pitch_volume_changer+0x1ec>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
	difference_values[1] = new_accelero_values[1] - old_accelero_values[1];
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <pitch_volume_changer+0x1ec>)
 8001b7a:	edc3 7a01 	vstr	s15, [r3, #4]
	difference_values[2] = new_accelero_values[2] - old_accelero_values[2];
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3304      	adds	r3, #4
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9a:	4b61      	ldr	r3, [pc, #388]	; (8001d20 <pitch_volume_changer+0x1ec>)
 8001b9c:	edc3 7a02 	vstr	s15, [r3, #8]

	//filtre the differences using a kalman filtre, one for each aix
	filtred_difference_values[1] = 100 * c_kalman_update(&y_pitch_filtre, difference_values[1]);
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <pitch_volume_changer+0x1ec>)
 8001ba2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	485e      	ldr	r0, [pc, #376]	; (8001d24 <pitch_volume_changer+0x1f0>)
 8001bac:	f7ff fa55 	bl	800105a <c_kalman_update>
 8001bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb4:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8001d28 <pitch_volume_changer+0x1f4>
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001bbe:	edc3 7a01 	vstr	s15, [r3, #4]
	filtred_difference_values[2] = 100 * c_kalman_update(&z_volume_filtre, difference_values[2]);
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <pitch_volume_changer+0x1ec>)
 8001bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	4858      	ldr	r0, [pc, #352]	; (8001d30 <pitch_volume_changer+0x1fc>)
 8001bce:	f7ff fa44 	bl	800105a <c_kalman_update>
 8001bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd6:	eddf 7a54 	vldr	s15, [pc, #336]	; 8001d28 <pitch_volume_changer+0x1f4>
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001be0:	edc3 7a02 	vstr	s15, [r3, #8]

	//bounds for changes in acceleration to change note, uses y coordinate
	if ((filtred_difference_values[1] > 25) || (filtred_difference_values[1] < -25)) {
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	dc09      	bgt.n	8001c0c <pitch_volume_changer+0xd8>
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfe:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d536      	bpl.n	8001c7a <pitch_volume_changer+0x146>
		if ((filtred_difference_values[1] > 0) && (current_note > 0) && (filtred_difference_values[1] < 100)) {
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd13      	ble.n	8001c44 <pitch_volume_changer+0x110>
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dd0f      	ble.n	8001c44 <pitch_volume_changer+0x110>
 8001c24:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d28 <pitch_volume_changer+0x1f4>
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d505      	bpl.n	8001c44 <pitch_volume_changer+0x110>
			current_note -= 1;
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01a      	b.n	8001c7a <pitch_volume_changer+0x146>
		} else if ((filtred_difference_values[1] < 0) && (current_note < 7) && (filtred_difference_values[1] > -100)) {
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d512      	bpl.n	8001c7a <pitch_volume_changer+0x146>
 8001c54:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	dc0e      	bgt.n	8001c7a <pitch_volume_changer+0x146>
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c62:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001d38 <pitch_volume_changer+0x204>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd04      	ble.n	8001c7a <pitch_volume_changer+0x146>
			current_note += 1;
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a2f      	ldr	r2, [pc, #188]	; (8001d34 <pitch_volume_changer+0x200>)
 8001c78:	6013      	str	r3, [r2, #0]
		}
	}
	//bounds for changes in acceleration to change volume, uses z coordinate
	if ((filtred_difference_values[2] > 35) || (filtred_difference_values[2] < -35)) {
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c80:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001d3c <pitch_volume_changer+0x208>
 8001c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dc0a      	bgt.n	8001ca4 <pitch_volume_changer+0x170>
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001c90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c94:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001d40 <pitch_volume_changer+0x20c>
 8001c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	d400      	bmi.n	8001ca4 <pitch_volume_changer+0x170>
			current_volume -= 1;
		} else if ((filtred_difference_values[2] > 0) && (current_volume < 4) && (filtred_difference_values[2] > -100)) {
			current_volume += 1;
		}
	}
}
 8001ca2:	e038      	b.n	8001d16 <pitch_volume_changer+0x1e2>
		if ((filtred_difference_values[2] < 0) && (current_volume > 0) && (filtred_difference_values[2] < 100)) {
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001ca6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d513      	bpl.n	8001cdc <pitch_volume_changer+0x1a8>
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <pitch_volume_changer+0x210>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dd0f      	ble.n	8001cdc <pitch_volume_changer+0x1a8>
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001cbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001d28 <pitch_volume_changer+0x1f4>
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d505      	bpl.n	8001cdc <pitch_volume_changer+0x1a8>
			current_volume -= 1;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <pitch_volume_changer+0x210>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <pitch_volume_changer+0x210>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	e01c      	b.n	8001d16 <pitch_volume_changer+0x1e2>
		} else if ((filtred_difference_values[2] > 0) && (current_volume < 4) && (filtred_difference_values[2] > -100)) {
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001cde:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dc00      	bgt.n	8001cee <pitch_volume_changer+0x1ba>
}
 8001cec:	e013      	b.n	8001d16 <pitch_volume_changer+0x1e2>
		} else if ((filtred_difference_values[2] > 0) && (current_volume < 4) && (filtred_difference_values[2] > -100)) {
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <pitch_volume_changer+0x210>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	dc0f      	bgt.n	8001d16 <pitch_volume_changer+0x1e2>
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <pitch_volume_changer+0x1f8>)
 8001cf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cfc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d38 <pitch_volume_changer+0x204>
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	dc00      	bgt.n	8001d0c <pitch_volume_changer+0x1d8>
}
 8001d0a:	e004      	b.n	8001d16 <pitch_volume_changer+0x1e2>
			current_volume += 1;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <pitch_volume_changer+0x210>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <pitch_volume_changer+0x210>)
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200005d0 	.word	0x200005d0
 8001d24:	20000120 	.word	0x20000120
 8001d28:	42c80000 	.word	0x42c80000
 8001d2c:	2000045c 	.word	0x2000045c
 8001d30:	200007b0 	.word	0x200007b0
 8001d34:	200000c4 	.word	0x200000c4
 8001d38:	c2c80000 	.word	0xc2c80000
 8001d3c:	420c0000 	.word	0x420c0000
 8001d40:	c20c0000 	.word	0xc20c0000
 8001d44:	20000034 	.word	0x20000034

08001d48 <pitch_volume_setter>:
 *  @params:
 *    none
 *  @return:
 *    none
 */
void pitch_volume_setter() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af02      	add	r7, sp, #8
	uint8_t *pitch_pointer; 			//pointer for the desired global note/volume array, needed to pass data to DAC
	int sample_size; 					//number of samples for a given note, needed to pass data to DAC

	switch (current_note) {
 8001d4e:	4ba6      	ldr	r3, [pc, #664]	; (8001fe8 <pitch_volume_setter+0x2a0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	f200 81c2 	bhi.w	80020dc <pitch_volume_setter+0x394>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <pitch_volume_setter+0x18>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d81 	.word	0x08001d81
 8001d64:	08001dd1 	.word	0x08001dd1
 8001d68:	08001e21 	.word	0x08001e21
 8001d6c:	08001e71 	.word	0x08001e71
 8001d70:	08001ec1 	.word	0x08001ec1
 8001d74:	08001f11 	.word	0x08001f11
 8001d78:	08001f61 	.word	0x08001f61
 8001d7c:	08001fb1 	.word	0x08001fb1

	//note C6
	case 0:
		strncpy(note_name, "C6", 2); 	//copy note name to global array for UART output
 8001d80:	4a9a      	ldr	r2, [pc, #616]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001d82:	4b9b      	ldr	r3, [pc, #620]	; (8001ff0 <pitch_volume_setter+0x2a8>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	8013      	strh	r3, [r2, #0]
		sample_size = 43; 				//set the number of samples for the given note
 8001d88:	232b      	movs	r3, #43	; 0x2b
 8001d8a:	603b      	str	r3, [r7, #0]
		switch (current_volume) { 		//nested switch statements for the volume arrays
 8001d8c:	4b99      	ldr	r3, [pc, #612]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	f200 8194 	bhi.w	80020be <pitch_volume_setter+0x376>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <pitch_volume_setter+0x54>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001db7 	.word	0x08001db7
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dc3 	.word	0x08001dc3
 8001dac:	08001dc9 	.word	0x08001dc9
		case 0:
			pitch_pointer = C6_samples_v0;
 8001db0:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <pitch_volume_setter+0x2b0>)
 8001db2:	607b      	str	r3, [r7, #4]
			break;
 8001db4:	e00b      	b.n	8001dce <pitch_volume_setter+0x86>
		case 1:
			pitch_pointer = C6_samples_v1;
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <pitch_volume_setter+0x2b4>)
 8001db8:	607b      	str	r3, [r7, #4]
			break;
 8001dba:	e008      	b.n	8001dce <pitch_volume_setter+0x86>
		case 2:
			pitch_pointer = C6_samples_v2;
 8001dbc:	4b90      	ldr	r3, [pc, #576]	; (8002000 <pitch_volume_setter+0x2b8>)
 8001dbe:	607b      	str	r3, [r7, #4]
			break;
 8001dc0:	e005      	b.n	8001dce <pitch_volume_setter+0x86>
		case 3:
			pitch_pointer = C6_samples_v3;
 8001dc2:	4b90      	ldr	r3, [pc, #576]	; (8002004 <pitch_volume_setter+0x2bc>)
 8001dc4:	607b      	str	r3, [r7, #4]
			break;
 8001dc6:	e002      	b.n	8001dce <pitch_volume_setter+0x86>
		case 4:
			pitch_pointer = C6_samples_v4;
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <pitch_volume_setter+0x2c0>)
 8001dca:	607b      	str	r3, [r7, #4]
			break;
 8001dcc:	bf00      	nop
		}
		break;
 8001dce:	e176      	b.n	80020be <pitch_volume_setter+0x376>

	//note D6
	case 1:
		strncpy(note_name, "D6", 2);
 8001dd0:	4a86      	ldr	r2, [pc, #536]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001dd2:	4b8e      	ldr	r3, [pc, #568]	; (800200c <pitch_volume_setter+0x2c4>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	8013      	strh	r3, [r2, #0]
		sample_size = 36;
 8001dd8:	2324      	movs	r3, #36	; 0x24
 8001dda:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001ddc:	4b85      	ldr	r3, [pc, #532]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	f200 816e 	bhi.w	80020c2 <pitch_volume_setter+0x37a>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <pitch_volume_setter+0xa4>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e01 	.word	0x08001e01
 8001df0:	08001e07 	.word	0x08001e07
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e13 	.word	0x08001e13
 8001dfc:	08001e19 	.word	0x08001e19
		case 0:
			pitch_pointer = D6_samples_v0;
 8001e00:	4b83      	ldr	r3, [pc, #524]	; (8002010 <pitch_volume_setter+0x2c8>)
 8001e02:	607b      	str	r3, [r7, #4]
			break;
 8001e04:	e00b      	b.n	8001e1e <pitch_volume_setter+0xd6>
		case 1:
			pitch_pointer = D6_samples_v1;
 8001e06:	4b83      	ldr	r3, [pc, #524]	; (8002014 <pitch_volume_setter+0x2cc>)
 8001e08:	607b      	str	r3, [r7, #4]
			break;
 8001e0a:	e008      	b.n	8001e1e <pitch_volume_setter+0xd6>
		case 2:
			pitch_pointer = D6_samples_v2;
 8001e0c:	4b82      	ldr	r3, [pc, #520]	; (8002018 <pitch_volume_setter+0x2d0>)
 8001e0e:	607b      	str	r3, [r7, #4]
			break;
 8001e10:	e005      	b.n	8001e1e <pitch_volume_setter+0xd6>
		case 3:
			pitch_pointer = D6_samples_v3;
 8001e12:	4b82      	ldr	r3, [pc, #520]	; (800201c <pitch_volume_setter+0x2d4>)
 8001e14:	607b      	str	r3, [r7, #4]
			break;
 8001e16:	e002      	b.n	8001e1e <pitch_volume_setter+0xd6>
		case 4:
			pitch_pointer = D6_samples_v4;
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <pitch_volume_setter+0x2d8>)
 8001e1a:	607b      	str	r3, [r7, #4]
			break;
 8001e1c:	bf00      	nop
		}
		break;
 8001e1e:	e150      	b.n	80020c2 <pitch_volume_setter+0x37a>

	//note E6
	case 2:
		strncpy(note_name, "E6", 2);
 8001e20:	4a72      	ldr	r2, [pc, #456]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001e22:	4b80      	ldr	r3, [pc, #512]	; (8002024 <pitch_volume_setter+0x2dc>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	8013      	strh	r3, [r2, #0]
		sample_size = 33;
 8001e28:	2321      	movs	r3, #33	; 0x21
 8001e2a:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001e2c:	4b71      	ldr	r3, [pc, #452]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	f200 8148 	bhi.w	80020c6 <pitch_volume_setter+0x37e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <pitch_volume_setter+0xf4>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e57 	.word	0x08001e57
 8001e44:	08001e5d 	.word	0x08001e5d
 8001e48:	08001e63 	.word	0x08001e63
 8001e4c:	08001e69 	.word	0x08001e69
		case 0:
			pitch_pointer = E6_samples_v0;
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <pitch_volume_setter+0x2e0>)
 8001e52:	607b      	str	r3, [r7, #4]
			break;
 8001e54:	e00b      	b.n	8001e6e <pitch_volume_setter+0x126>
		case 1:
			pitch_pointer = E6_samples_v1;
 8001e56:	4b75      	ldr	r3, [pc, #468]	; (800202c <pitch_volume_setter+0x2e4>)
 8001e58:	607b      	str	r3, [r7, #4]
			break;
 8001e5a:	e008      	b.n	8001e6e <pitch_volume_setter+0x126>
		case 2:
			pitch_pointer = E6_samples_v2;
 8001e5c:	4b74      	ldr	r3, [pc, #464]	; (8002030 <pitch_volume_setter+0x2e8>)
 8001e5e:	607b      	str	r3, [r7, #4]
			break;
 8001e60:	e005      	b.n	8001e6e <pitch_volume_setter+0x126>
		case 3:
			pitch_pointer = E6_samples_v3;
 8001e62:	4b74      	ldr	r3, [pc, #464]	; (8002034 <pitch_volume_setter+0x2ec>)
 8001e64:	607b      	str	r3, [r7, #4]
			break;
 8001e66:	e002      	b.n	8001e6e <pitch_volume_setter+0x126>
		case 4:
			pitch_pointer = E6_samples_v4;
 8001e68:	4b73      	ldr	r3, [pc, #460]	; (8002038 <pitch_volume_setter+0x2f0>)
 8001e6a:	607b      	str	r3, [r7, #4]
			break;
 8001e6c:	bf00      	nop
		}

		break;
 8001e6e:	e12a      	b.n	80020c6 <pitch_volume_setter+0x37e>

	//note F6
	case 3:
		strncpy(note_name, "F6", 2);
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001e72:	4b72      	ldr	r3, [pc, #456]	; (800203c <pitch_volume_setter+0x2f4>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	8013      	strh	r3, [r2, #0]
		sample_size = 30;
 8001e78:	231e      	movs	r3, #30
 8001e7a:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	f200 8122 	bhi.w	80020ca <pitch_volume_setter+0x382>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <pitch_volume_setter+0x144>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001ea7 	.word	0x08001ea7
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001eb3 	.word	0x08001eb3
 8001e9c:	08001eb9 	.word	0x08001eb9
		case 0:
			pitch_pointer = F6_samples_v0;
 8001ea0:	4b67      	ldr	r3, [pc, #412]	; (8002040 <pitch_volume_setter+0x2f8>)
 8001ea2:	607b      	str	r3, [r7, #4]
			break;
 8001ea4:	e00b      	b.n	8001ebe <pitch_volume_setter+0x176>
		case 1:
			pitch_pointer = F6_samples_v1;
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <pitch_volume_setter+0x2fc>)
 8001ea8:	607b      	str	r3, [r7, #4]
			break;
 8001eaa:	e008      	b.n	8001ebe <pitch_volume_setter+0x176>
		case 2:
			pitch_pointer = F6_samples_v2;
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <pitch_volume_setter+0x300>)
 8001eae:	607b      	str	r3, [r7, #4]
			break;
 8001eb0:	e005      	b.n	8001ebe <pitch_volume_setter+0x176>
		case 3:
			pitch_pointer = F6_samples_v3;
 8001eb2:	4b66      	ldr	r3, [pc, #408]	; (800204c <pitch_volume_setter+0x304>)
 8001eb4:	607b      	str	r3, [r7, #4]
			break;
 8001eb6:	e002      	b.n	8001ebe <pitch_volume_setter+0x176>
		case 4:
			pitch_pointer = F6_samples_v4;
 8001eb8:	4b65      	ldr	r3, [pc, #404]	; (8002050 <pitch_volume_setter+0x308>)
 8001eba:	607b      	str	r3, [r7, #4]
			break;
 8001ebc:	bf00      	nop
		}
		break;
 8001ebe:	e104      	b.n	80020ca <pitch_volume_setter+0x382>

	//note G6
	case 4:
		strncpy(note_name, "G6", 2);
 8001ec0:	4a4a      	ldr	r2, [pc, #296]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001ec2:	4b64      	ldr	r3, [pc, #400]	; (8002054 <pitch_volume_setter+0x30c>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	8013      	strh	r3, [r2, #0]
		sample_size = 27;
 8001ec8:	231b      	movs	r3, #27
 8001eca:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001ecc:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	f200 80fc 	bhi.w	80020ce <pitch_volume_setter+0x386>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <pitch_volume_setter+0x194>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001ef1 	.word	0x08001ef1
 8001ee0:	08001ef7 	.word	0x08001ef7
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f03 	.word	0x08001f03
 8001eec:	08001f09 	.word	0x08001f09
		case 0:
			pitch_pointer = G6_samples_v0;
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <pitch_volume_setter+0x310>)
 8001ef2:	607b      	str	r3, [r7, #4]
			break;
 8001ef4:	e00b      	b.n	8001f0e <pitch_volume_setter+0x1c6>
		case 1:
			pitch_pointer = G6_samples_v1;
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <pitch_volume_setter+0x314>)
 8001ef8:	607b      	str	r3, [r7, #4]
			break;
 8001efa:	e008      	b.n	8001f0e <pitch_volume_setter+0x1c6>
		case 2:
			pitch_pointer = G6_samples_v2;
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <pitch_volume_setter+0x318>)
 8001efe:	607b      	str	r3, [r7, #4]
			break;
 8001f00:	e005      	b.n	8001f0e <pitch_volume_setter+0x1c6>
		case 3:
			pitch_pointer = G6_samples_v3;
 8001f02:	4b58      	ldr	r3, [pc, #352]	; (8002064 <pitch_volume_setter+0x31c>)
 8001f04:	607b      	str	r3, [r7, #4]
			break;
 8001f06:	e002      	b.n	8001f0e <pitch_volume_setter+0x1c6>
		case 4:
			pitch_pointer = G6_samples_v4;
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <pitch_volume_setter+0x320>)
 8001f0a:	607b      	str	r3, [r7, #4]
			break;
 8001f0c:	bf00      	nop
		}
		break;
 8001f0e:	e0de      	b.n	80020ce <pitch_volume_setter+0x386>

	//note A6
	case 5:
		strncpy(note_name, "A6", 2);
 8001f10:	4a36      	ldr	r2, [pc, #216]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <pitch_volume_setter+0x324>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	8013      	strh	r3, [r2, #0]
		sample_size = 24;
 8001f18:	2318      	movs	r3, #24
 8001f1a:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	f200 80d6 	bhi.w	80020d2 <pitch_volume_setter+0x38a>
 8001f26:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <pitch_volume_setter+0x1e4>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f41 	.word	0x08001f41
 8001f30:	08001f47 	.word	0x08001f47
 8001f34:	08001f4d 	.word	0x08001f4d
 8001f38:	08001f53 	.word	0x08001f53
 8001f3c:	08001f59 	.word	0x08001f59
		case 0:
			pitch_pointer = A6_samples_v0;
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <pitch_volume_setter+0x328>)
 8001f42:	607b      	str	r3, [r7, #4]
			break;
 8001f44:	e00b      	b.n	8001f5e <pitch_volume_setter+0x216>
		case 1:
			pitch_pointer = A6_samples_v1;
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <pitch_volume_setter+0x32c>)
 8001f48:	607b      	str	r3, [r7, #4]
			break;
 8001f4a:	e008      	b.n	8001f5e <pitch_volume_setter+0x216>
		case 2:
			pitch_pointer = A6_samples_v2;
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <pitch_volume_setter+0x330>)
 8001f4e:	607b      	str	r3, [r7, #4]
			break;
 8001f50:	e005      	b.n	8001f5e <pitch_volume_setter+0x216>
		case 3:
			pitch_pointer = A6_samples_v3;
 8001f52:	4b4a      	ldr	r3, [pc, #296]	; (800207c <pitch_volume_setter+0x334>)
 8001f54:	607b      	str	r3, [r7, #4]
			break;
 8001f56:	e002      	b.n	8001f5e <pitch_volume_setter+0x216>
		case 4:
			pitch_pointer = A6_samples_v4;
 8001f58:	4b49      	ldr	r3, [pc, #292]	; (8002080 <pitch_volume_setter+0x338>)
 8001f5a:	607b      	str	r3, [r7, #4]
			break;
 8001f5c:	bf00      	nop
		}
		break;
 8001f5e:	e0b8      	b.n	80020d2 <pitch_volume_setter+0x38a>

	//note B2
	case 6:
		strncpy(note_name, "B6", 2);
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001f62:	4b48      	ldr	r3, [pc, #288]	; (8002084 <pitch_volume_setter+0x33c>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	8013      	strh	r3, [r2, #0]
		sample_size = 21;
 8001f68:	2315      	movs	r3, #21
 8001f6a:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	f200 80b0 	bhi.w	80020d6 <pitch_volume_setter+0x38e>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <pitch_volume_setter+0x234>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f91 	.word	0x08001f91
 8001f80:	08001f97 	.word	0x08001f97
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fa3 	.word	0x08001fa3
 8001f8c:	08001fa9 	.word	0x08001fa9
		case 0:
			pitch_pointer = B6_samples_v0;
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <pitch_volume_setter+0x340>)
 8001f92:	607b      	str	r3, [r7, #4]
			break;
 8001f94:	e00b      	b.n	8001fae <pitch_volume_setter+0x266>
		case 1:
			pitch_pointer = B6_samples_v1;
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <pitch_volume_setter+0x344>)
 8001f98:	607b      	str	r3, [r7, #4]
			break;
 8001f9a:	e008      	b.n	8001fae <pitch_volume_setter+0x266>
		case 2:
			pitch_pointer = B6_samples_v2;
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <pitch_volume_setter+0x348>)
 8001f9e:	607b      	str	r3, [r7, #4]
			break;
 8001fa0:	e005      	b.n	8001fae <pitch_volume_setter+0x266>
		case 3:
			pitch_pointer = B6_samples_v3;
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <pitch_volume_setter+0x34c>)
 8001fa4:	607b      	str	r3, [r7, #4]
			break;
 8001fa6:	e002      	b.n	8001fae <pitch_volume_setter+0x266>
		case 4:
			pitch_pointer = B6_samples_v4;
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <pitch_volume_setter+0x350>)
 8001faa:	607b      	str	r3, [r7, #4]
			break;
 8001fac:	bf00      	nop
		}
		break;
 8001fae:	e092      	b.n	80020d6 <pitch_volume_setter+0x38e>

	// note C7
	case 7:
		strncpy(note_name, "C7", 2);
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <pitch_volume_setter+0x2a4>)
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <pitch_volume_setter+0x354>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	8013      	strh	r3, [r2, #0]
		sample_size = 20;
 8001fb8:	2314      	movs	r3, #20
 8001fba:	603b      	str	r3, [r7, #0]
		switch (current_volume) {
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <pitch_volume_setter+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	f200 808a 	bhi.w	80020da <pitch_volume_setter+0x392>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <pitch_volume_setter+0x284>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	080020a5 	.word	0x080020a5
 8001fd4:	080020ab 	.word	0x080020ab
 8001fd8:	080020b1 	.word	0x080020b1
 8001fdc:	080020b7 	.word	0x080020b7
		case 0:
			pitch_pointer = C7_samples_v0;
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <pitch_volume_setter+0x358>)
 8001fe2:	607b      	str	r3, [r7, #4]
			break;
 8001fe4:	e06a      	b.n	80020bc <pitch_volume_setter+0x374>
 8001fe6:	bf00      	nop
 8001fe8:	200000c4 	.word	0x200000c4
 8001fec:	200007ac 	.word	0x200007ac
 8001ff0:	08008680 	.word	0x08008680
 8001ff4:	20000034 	.word	0x20000034
 8001ff8:	200003ec 	.word	0x200003ec
 8001ffc:	20000374 	.word	0x20000374
 8002000:	20000554 	.word	0x20000554
 8002004:	2000063c 	.word	0x2000063c
 8002008:	200005dc 	.word	0x200005dc
 800200c:	08008684 	.word	0x08008684
 8002010:	200002b4 	.word	0x200002b4
 8002014:	200001b0 	.word	0x200001b0
 8002018:	20000580 	.word	0x20000580
 800201c:	20000718 	.word	0x20000718
 8002020:	20000338 	.word	0x20000338
 8002024:	08008688 	.word	0x08008688
 8002028:	20000438 	.word	0x20000438
 800202c:	20000148 	.word	0x20000148
 8002030:	20000788 	.word	0x20000788
 8002034:	200006f4 	.word	0x200006f4
 8002038:	200004f4 	.word	0x200004f4
 800203c:	0800868c 	.word	0x0800868c
 8002040:	200006d4 	.word	0x200006d4
 8002044:	20000418 	.word	0x20000418
 8002048:	200007c4 	.word	0x200007c4
 800204c:	200003cc 	.word	0x200003cc
 8002050:	200006b4 	.word	0x200006b4
 8002054:	08008690 	.word	0x08008690
 8002058:	20000104 	.word	0x20000104
 800205c:	20000530 	.word	0x20000530
 8002060:	20000620 	.word	0x20000620
 8002064:	200001e8 	.word	0x200001e8
 8002068:	20000698 	.word	0x20000698
 800206c:	08008694 	.word	0x08008694
 8002070:	200003b4 	.word	0x200003b4
 8002074:	2000035c 	.word	0x2000035c
 8002078:	200000ec 	.word	0x200000ec
 800207c:	200005a4 	.word	0x200005a4
 8002080:	20000680 	.word	0x20000680
 8002084:	08008698 	.word	0x08008698
 8002088:	20000198 	.word	0x20000198
 800208c:	20000180 	.word	0x20000180
 8002090:	20000668 	.word	0x20000668
 8002094:	20000518 	.word	0x20000518
 8002098:	20000608 	.word	0x20000608
 800209c:	0800869c 	.word	0x0800869c
 80020a0:	200000d8 	.word	0x200000d8
		case 1:
			pitch_pointer = C7_samples_v1;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <pitch_volume_setter+0x3b8>)
 80020a6:	607b      	str	r3, [r7, #4]
			break;
 80020a8:	e008      	b.n	80020bc <pitch_volume_setter+0x374>
		case 2:
			pitch_pointer = C7_samples_v2;
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <pitch_volume_setter+0x3bc>)
 80020ac:	607b      	str	r3, [r7, #4]
			break;
 80020ae:	e005      	b.n	80020bc <pitch_volume_setter+0x374>
		case 3:
			pitch_pointer = C7_samples_v3;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <pitch_volume_setter+0x3c0>)
 80020b2:	607b      	str	r3, [r7, #4]
			break;
 80020b4:	e002      	b.n	80020bc <pitch_volume_setter+0x374>
		case 4:
			pitch_pointer = C7_samples_v4;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <pitch_volume_setter+0x3c4>)
 80020b8:	607b      	str	r3, [r7, #4]
			break;
 80020ba:	bf00      	nop
		}
		break;
 80020bc:	e00d      	b.n	80020da <pitch_volume_setter+0x392>
		break;
 80020be:	bf00      	nop
 80020c0:	e00c      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020c2:	bf00      	nop
 80020c4:	e00a      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020c6:	bf00      	nop
 80020c8:	e008      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020ca:	bf00      	nop
 80020cc:	e006      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020ce:	bf00      	nop
 80020d0:	e004      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020d2:	bf00      	nop
 80020d4:	e002      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <pitch_volume_setter+0x394>
		break;
 80020da:	bf00      	nop

	}

	//using DMA, drive the desired note/volume array to the DAC to be played on the speaker
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80020dc:	2100      	movs	r1, #0
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <pitch_volume_setter+0x3c8>)
 80020e0:	f001 f994 	bl	800340c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, pitch_pointer, sample_size, DAC_ALIGN_8B_R);
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	2308      	movs	r3, #8
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4613      	mov	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	2100      	movs	r1, #0
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <pitch_volume_setter+0x3c8>)
 80020f2:	f001 f8cd 	bl	8003290 <HAL_DAC_Start_DMA>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000134 	.word	0x20000134
 8002104:	200003a0 	.word	0x200003a0
 8002108:	200005bc 	.word	0x200005bc
 800210c:	2000016c 	.word	0x2000016c
 8002110:	200001d4 	.word	0x200001d4

08002114 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800211a:	f000 fe9c 	bl	8002e56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800211e:	f000 f8e5 	bl	80022ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002122:	f000 fa93 	bl	800264c <MX_GPIO_Init>
	MX_DMA_Init();
 8002126:	f000 fa67 	bl	80025f8 <MX_DMA_Init>
	MX_DAC1_Init();
 800212a:	f000 f957 	bl	80023dc <MX_DAC1_Init>
	MX_I2C2_Init();
 800212e:	f000 f989 	bl	8002444 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8002132:	f000 fa15 	bl	8002560 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8002136:	f000 f9c5 	bl	80024c4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	BSP_ACCELERO_Init();					//initialize the I2C accelerometer
 800213a:	f000 fc03 	bl	8002944 <BSP_ACCELERO_Init>

	HAL_TIM_Base_Start_IT(&htim2);			//initialize the DAC
 800213e:	485e      	ldr	r0, [pc, #376]	; (80022b8 <main+0x1a4>)
 8002140:	f004 fb7e 	bl	8006840 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002144:	2100      	movs	r1, #0
 8002146:	485d      	ldr	r0, [pc, #372]	; (80022bc <main+0x1a8>)
 8002148:	f001 f84f 	bl	80031ea <HAL_DAC_Start>

	C6_sample_populator();					//populate all arrays
 800214c:	f7fe ffd4 	bl	80010f8 <C6_sample_populator>
	D6_sample_populator();
 8002150:	f7ff f876 	bl	8001240 <D6_sample_populator>
	E6_sample_populator();
 8002154:	f7ff f918 	bl	8001388 <E6_sample_populator>
	F6_sample_populator();
 8002158:	f7ff f9ba 	bl	80014d0 <F6_sample_populator>
	G6_sample_populator();
 800215c:	f7ff fa5c 	bl	8001618 <G6_sample_populator>
	A6_sample_populator();
 8002160:	f7ff fafe 	bl	8001760 <A6_sample_populator>
	B6_sample_populator();
 8002164:	f7ff fba0 	bl	80018a8 <B6_sample_populator>
	C7_sample_populator();
 8002168:	f7ff fc42 	bl	80019f0 <C7_sample_populator>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	float q = 0;							//initialize kalman filtres
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
	float r = 0.1;
 8002172:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <main+0x1ac>)
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
	float x = 0;
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
	float p = 0.1;
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <main+0x1ac>)
 800217e:	623b      	str	r3, [r7, #32]
	float k = 0.1;
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <main+0x1ac>)
 8002182:	61fb      	str	r3, [r7, #28]

	y_pitch_filtre = create_filtre(q, r, x, p, k);
 8002184:	4c4f      	ldr	r4, [pc, #316]	; (80022c4 <main+0x1b0>)
 8002186:	463b      	mov	r3, r7
 8002188:	ed97 2a07 	vldr	s4, [r7, #28]
 800218c:	edd7 1a08 	vldr	s3, [r7, #32]
 8002190:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8002194:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8002198:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe ff37 	bl	8001010 <create_filtre>
 80021a2:	4625      	mov	r5, r4
 80021a4:	463c      	mov	r4, r7
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	602b      	str	r3, [r5, #0]
	z_volume_filtre = create_filtre(q, r, x, p, k);
 80021ae:	4c46      	ldr	r4, [pc, #280]	; (80022c8 <main+0x1b4>)
 80021b0:	463b      	mov	r3, r7
 80021b2:	ed97 2a07 	vldr	s4, [r7, #28]
 80021b6:	edd7 1a08 	vldr	s3, [r7, #32]
 80021ba:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80021be:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80021c2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe ff22 	bl	8001010 <create_filtre>
 80021cc:	4625      	mov	r5, r4
 80021ce:	463c      	mov	r4, r7
 80021d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	602b      	str	r3, [r5, #0]

	//this copy of the while loop logic below is done in order to ensure the speaker plays immediately on startup
	BSP_ACCELERO_AccGetXYZ(accelero_values);											//get accelermeter values
 80021d8:	483c      	ldr	r0, [pc, #240]	; (80022cc <main+0x1b8>)
 80021da:	f000 fbf1 	bl	80029c0 <BSP_ACCELERO_AccGetXYZ>


	memset(global_buffer, 0, sizeof(global_buffer));									//message to print to UART
 80021de:	2264      	movs	r2, #100	; 0x64
 80021e0:	2100      	movs	r1, #0
 80021e2:	483b      	ldr	r0, [pc, #236]	; (80022d0 <main+0x1bc>)
 80021e4:	f005 fe32 	bl	8007e4c <memset>
	sprintf(global_buffer, "\rCurrent note: %c%c Current volume: %d \n", note_name[0], note_name[1], current_volume);
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <main+0x1c0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <main+0x1c0>)
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <main+0x1c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	4937      	ldr	r1, [pc, #220]	; (80022dc <main+0x1c8>)
 80021fe:	4834      	ldr	r0, [pc, #208]	; (80022d0 <main+0x1bc>)
 8002200:	f005 fe2c 	bl	8007e5c <siprintf>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, C6_samples_v4, 43, DAC_ALIGN_8B_R);		//initialize DAC DMA to read from max volume C6
 8002204:	2308      	movs	r3, #8
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	232b      	movs	r3, #43	; 0x2b
 800220a:	4a35      	ldr	r2, [pc, #212]	; (80022e0 <main+0x1cc>)
 800220c:	2100      	movs	r1, #0
 800220e:	482b      	ldr	r0, [pc, #172]	; (80022bc <main+0x1a8>)
 8002210:	f001 f83e 	bl	8003290 <HAL_DAC_Start_DMA>

	HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer, sizeof(global_buffer), 500);	//drive output to UART
 8002214:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	492d      	ldr	r1, [pc, #180]	; (80022d0 <main+0x1bc>)
 800221c:	4831      	ldr	r0, [pc, #196]	; (80022e4 <main+0x1d0>)
 800221e:	f004 ffb3 	bl	8007188 <HAL_UART_Transmit>
	old_accelero_values[0] = accelero_values[0];										//cycle between the old and new acceleometer values
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <main+0x1b8>)
 8002224:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <main+0x1d4>)
 800222a:	801a      	strh	r2, [r3, #0]
	old_accelero_values[1] = accelero_values[1];
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <main+0x1b8>)
 800222e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <main+0x1d4>)
 8002234:	805a      	strh	r2, [r3, #2]
	old_accelero_values[2] = accelero_values[2];
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <main+0x1b8>)
 8002238:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <main+0x1d4>)
 800223e:	809a      	strh	r2, [r3, #4]
	HAL_Delay(500);
 8002240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002244:	f000 fe7c 	bl	8002f40 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//largely the same logic from the block before the while loop
		BSP_ACCELERO_AccGetXYZ(accelero_values);
 8002248:	4820      	ldr	r0, [pc, #128]	; (80022cc <main+0x1b8>)
 800224a:	f000 fbb9 	bl	80029c0 <BSP_ACCELERO_AccGetXYZ>
		memset(global_buffer, 0, sizeof(global_buffer));
 800224e:	2264      	movs	r2, #100	; 0x64
 8002250:	2100      	movs	r1, #0
 8002252:	481f      	ldr	r0, [pc, #124]	; (80022d0 <main+0x1bc>)
 8002254:	f005 fdfa 	bl	8007e4c <memset>
		sprintf(global_buffer, "\rCurrent note: %c%c Current volume: %d \n", note_name[0], note_name[1], current_volume);
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <main+0x1c0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <main+0x1c0>)
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	4619      	mov	r1, r3
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <main+0x1c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	460b      	mov	r3, r1
 800226c:	491b      	ldr	r1, [pc, #108]	; (80022dc <main+0x1c8>)
 800226e:	4818      	ldr	r0, [pc, #96]	; (80022d0 <main+0x1bc>)
 8002270:	f005 fdf4 	bl	8007e5c <siprintf>

		//Continuously call the changer and setter functions to detect changes in acceleration and play a new note or volume if needed
		//DAC is driven from the setter function
		pitch_volume_changer(old_accelero_values, accelero_values);
 8002274:	4915      	ldr	r1, [pc, #84]	; (80022cc <main+0x1b8>)
 8002276:	481c      	ldr	r0, [pc, #112]	; (80022e8 <main+0x1d4>)
 8002278:	f7ff fc5c 	bl	8001b34 <pitch_volume_changer>
		pitch_volume_setter();
 800227c:	f7ff fd64 	bl	8001d48 <pitch_volume_setter>

		HAL_UART_Transmit(&huart1, (uint8_t*) global_buffer, sizeof(global_buffer), 500);
 8002280:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002284:	2264      	movs	r2, #100	; 0x64
 8002286:	4912      	ldr	r1, [pc, #72]	; (80022d0 <main+0x1bc>)
 8002288:	4816      	ldr	r0, [pc, #88]	; (80022e4 <main+0x1d0>)
 800228a:	f004 ff7d 	bl	8007188 <HAL_UART_Transmit>
		old_accelero_values[0] = accelero_values[0];
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <main+0x1b8>)
 8002290:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <main+0x1d4>)
 8002296:	801a      	strh	r2, [r3, #0]
		old_accelero_values[1] = accelero_values[1];
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <main+0x1b8>)
 800229a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <main+0x1d4>)
 80022a0:	805a      	strh	r2, [r3, #2]
		old_accelero_values[2] = accelero_values[2];
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <main+0x1b8>)
 80022a4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <main+0x1d4>)
 80022aa:	809a      	strh	r2, [r3, #4]
		HAL_Delay(500);
 80022ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022b0:	f000 fe46 	bl	8002f40 <HAL_Delay>
		BSP_ACCELERO_AccGetXYZ(accelero_values);
 80022b4:	e7c8      	b.n	8002248 <main+0x134>
 80022b6:	bf00      	nop
 80022b8:	2000073c 	.word	0x2000073c
 80022bc:	200001d4 	.word	0x200001d4
 80022c0:	3dcccccd 	.word	0x3dcccccd
 80022c4:	20000120 	.word	0x20000120
 80022c8:	200007b0 	.word	0x200007b0
 80022cc:	200007e4 	.word	0x200007e4
 80022d0:	20000204 	.word	0x20000204
 80022d4:	200007ac 	.word	0x200007ac
 80022d8:	20000034 	.word	0x20000034
 80022dc:	080086a0 	.word	0x080086a0
 80022e0:	200005dc 	.word	0x200005dc
 80022e4:	20000468 	.word	0x20000468
 80022e8:	2000054c 	.word	0x2000054c

080022ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0bc      	sub	sp, #240	; 0xf0
 80022f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022f6:	2244      	movs	r2, #68	; 0x44
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f005 fda6 	bl	8007e4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002300:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2294      	movs	r2, #148	; 0x94
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fd98 	bl	8007e4c <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800231c:	2000      	movs	r0, #0
 800231e:	f002 fdb5 	bl	8004e8c <HAL_PWREx_ControlVoltageScaling>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0x40>
			!= HAL_OK) {
		Error_Handler();
 8002328:	f000 f9b4 	bl	8002694 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800232c:	2310      	movs	r3, #16
 800232e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002332:	2301      	movs	r3, #1
 8002334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800234a:	2301      	movs	r3, #1
 800234c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002350:	2301      	movs	r3, #1
 8002352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 8002356:	233c      	movs	r3, #60	; 0x3c
 8002358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800236e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fe2e 	bl	8004fd4 <HAL_RCC_OscConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0x96>
		Error_Handler();
 800237e:	f000 f989 	bl	8002694 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002382:	230f      	movs	r3, #15
 8002384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002388:	2303      	movs	r3, #3
 800238a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80023a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023a4:	2105      	movs	r1, #5
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fa3a 	bl	8005820 <HAL_RCC_ClockConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0xca>
		Error_Handler();
 80023b2:	f000 f96f 	bl	8002694 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80023b6:	2381      	movs	r3, #129	; 0x81
 80023b8:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_I2C2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023ba:	2300      	movs	r3, #0
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023be:	2300      	movs	r3, #0
 80023c0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fcdb 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0xe8>
		Error_Handler();
 80023d0:	f000 f960 	bl	8002694 <Error_Handler>
	}
}
 80023d4:	bf00      	nop
 80023d6:	37f0      	adds	r7, #240	; 0xf0
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80023e2:	463b      	mov	r3, r7
 80023e4:	2228      	movs	r2, #40	; 0x28
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 fd2f 	bl	8007e4c <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <MX_DAC1_Init+0x60>)
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <MX_DAC1_Init+0x64>)
 80023f2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <MX_DAC1_Init+0x60>)
 80023f6:	f000 fed6 	bl	80031a6 <HAL_DAC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_DAC1_Init+0x28>
		Error_Handler();
 8002400:	f000 f948 	bl	8002694 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002408:	230a      	movs	r3, #10
 800240a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800241c:	463b      	mov	r3, r7
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_DAC1_Init+0x60>)
 8002424:	f001 f856 	bl	80034d4 <HAL_DAC_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_DAC1_Init+0x56>
		Error_Handler();
 800242e:	f000 f931 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200001d4 	.word	0x200001d4
 8002440:	40007400 	.word	0x40007400

08002444 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_I2C2_Init+0x74>)
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <MX_I2C2_Init+0x78>)
 800244c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <MX_I2C2_Init+0x7c>)
 8002452:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_I2C2_Init+0x74>)
 800245c:	2201      	movs	r2, #1
 800245e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_I2C2_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_I2C2_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800247e:	480e      	ldr	r0, [pc, #56]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002480:	f001 ff44 	bl	800430c <HAL_I2C_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_I2C2_Init+0x4a>
		Error_Handler();
 800248a:	f000 f903 	bl	8002694 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800248e:	2100      	movs	r1, #0
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002492:	f002 fc43 	bl	8004d1c <HAL_I2CEx_ConfigAnalogFilter>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800249c:	f000 f8fa 	bl	8002694 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80024a0:	2100      	movs	r1, #0
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_I2C2_Init+0x74>)
 80024a4:	f002 fc85 	bl	8004db2 <HAL_I2CEx_ConfigDigitalFilter>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_I2C2_Init+0x6e>
		Error_Handler();
 80024ae:	f000 f8f1 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000268 	.word	0x20000268
 80024bc:	40005800 	.word	0x40005800
 80024c0:	307075b1 	.word	0x307075b1

080024c4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <MX_TIM2_Init+0x98>)
 80024e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024e8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <MX_TIM2_Init+0x98>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_TIM2_Init+0x98>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1814;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <MX_TIM2_Init+0x98>)
 80024f8:	f240 7216 	movw	r2, #1814	; 0x716
 80024fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <MX_TIM2_Init+0x98>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_TIM2_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800250a:	4814      	ldr	r0, [pc, #80]	; (800255c <MX_TIM2_Init+0x98>)
 800250c:	f004 f940 	bl	8006790 <HAL_TIM_Base_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM2_Init+0x56>
		Error_Handler();
 8002516:	f000 f8bd 	bl	8002694 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4619      	mov	r1, r3
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MX_TIM2_Init+0x98>)
 8002528:	f004 fb19 	bl	8006b5e <HAL_TIM_ConfigClockSource>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x72>
		Error_Handler();
 8002532:	f000 f8af 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002536:	2320      	movs	r3, #32
 8002538:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <MX_TIM2_Init+0x98>)
 8002544:	f004 fd2a 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800254e:	f000 f8a1 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000073c 	.word	0x2000073c

08002560 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002566:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <MX_USART1_UART_Init+0x94>)
 8002568:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80025a8:	4811      	ldr	r0, [pc, #68]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 80025aa:	f004 fd9d 	bl	80070e8 <HAL_UART_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80025b4:	f000 f86e 	bl	8002694 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80025b8:	2100      	movs	r1, #0
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 80025bc:	f005 faf1 	bl	8007ba2 <HAL_UARTEx_SetTxFifoThreshold>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80025c6:	f000 f865 	bl	8002694 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80025ca:	2100      	movs	r1, #0
 80025cc:	4808      	ldr	r0, [pc, #32]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 80025ce:	f005 fb26 	bl	8007c1e <HAL_UARTEx_SetRxFifoThreshold>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80025d8:	f000 f85c 	bl	8002694 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MX_USART1_UART_Init+0x90>)
 80025de:	f005 faa7 	bl	8007b30 <HAL_UARTEx_DisableFifoMode>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80025e8:	f000 f854 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000468 	.word	0x20000468
 80025f4:	40013800 	.word	0x40013800

080025f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <MX_DMA_Init+0x50>)
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <MX_DMA_Init+0x50>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6493      	str	r3, [r2, #72]	; 0x48
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_DMA_Init+0x50>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_DMA_Init+0x50>)
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <MX_DMA_Init+0x50>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6493      	str	r3, [r2, #72]	; 0x48
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_DMA_Init+0x50>)
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	200b      	movs	r0, #11
 8002634:	f000 fd81 	bl	800313a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002638:	200b      	movs	r0, #11
 800263a:	f000 fd9a 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_GPIO_Init+0x44>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <MX_GPIO_Init+0x44>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_GPIO_Init+0x44>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_GPIO_Init+0x44>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <MX_GPIO_Init+0x44>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_GPIO_Init+0x44>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]

}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000

08002694 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002698:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	/* USER CODE END Error_Handler_Debug */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <I2Cx_MspInit+0xa8>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <I2Cx_MspInit+0xa8>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <I2Cx_MspInit+0xa8>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80026c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026ca:	2312      	movs	r3, #18
 80026cc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80026d6:	2304      	movs	r3, #4
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	481b      	ldr	r0, [pc, #108]	; (8002750 <I2Cx_MspInit+0xac>)
 80026e2:	f001 fb8f 	bl	8003e04 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4818      	ldr	r0, [pc, #96]	; (8002750 <I2Cx_MspInit+0xac>)
 80026ee:	f001 fb89 	bl	8003e04 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <I2Cx_MspInit+0xa8>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <I2Cx_MspInit+0xa8>)
 80026f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <I2Cx_MspInit+0xa8>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <I2Cx_MspInit+0xa8>)
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	4a0f      	ldr	r2, [pc, #60]	; (800274c <I2Cx_MspInit+0xa8>)
 8002710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002714:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <I2Cx_MspInit+0xa8>)
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <I2Cx_MspInit+0xa8>)
 800271c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002720:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	210f      	movs	r1, #15
 8002726:	2021      	movs	r0, #33	; 0x21
 8002728:	f000 fd07 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800272c:	2021      	movs	r0, #33	; 0x21
 800272e:	f000 fd20 	bl	8003172 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	210f      	movs	r1, #15
 8002736:	2022      	movs	r0, #34	; 0x22
 8002738:	f000 fcff 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800273c:	2022      	movs	r0, #34	; 0x22
 800273e:	f000 fd18 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	48000400 	.word	0x48000400

08002754 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <I2Cx_Init+0x54>)
 8002760:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <I2Cx_Init+0x58>)
 8002766:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff89 	bl	80026a4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 fdba 	bl	800430c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002798:	2100      	movs	r1, #0
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f002 fabe 	bl	8004d1c <HAL_I2CEx_ConfigAnalogFilter>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40005800 	.word	0x40005800
 80027ac:	00702681 	.word	0x00702681

080027b0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	72fb      	strb	r3, [r7, #11]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	b299      	uxth	r1, r3
 80027d2:	88f8      	ldrh	r0, [r7, #6]
 80027d4:	893a      	ldrh	r2, [r7, #8]
 80027d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4603      	mov	r3, r0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f001 ff62 	bl	80046b0 <HAL_I2C_Mem_Read>
 80027ec:	4603      	mov	r3, r0
 80027ee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	4619      	mov	r1, r3
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f832 	bl	8002864 <I2Cx_Error>
  }
  return status;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b08a      	sub	sp, #40	; 0x28
 800280e:	af04      	add	r7, sp, #16
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	4608      	mov	r0, r1
 8002814:	4611      	mov	r1, r2
 8002816:	461a      	mov	r2, r3
 8002818:	4603      	mov	r3, r0
 800281a:	72fb      	strb	r3, [r7, #11]
 800281c:	460b      	mov	r3, r1
 800281e:	813b      	strh	r3, [r7, #8]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	b299      	uxth	r1, r3
 800282c:	88f8      	ldrh	r0, [r7, #6]
 800282e:	893a      	ldrh	r2, [r7, #8]
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4603      	mov	r3, r0
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f001 fe21 	bl	8004488 <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	4619      	mov	r1, r3
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f805 	bl	8002864 <I2Cx_Error>
  }
  return status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 fdda 	bl	800442a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff6c 	bl	8002754 <I2Cx_Init>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <SENSOR_IO_Init+0x10>)
 800288a:	f7ff ff63 	bl	8002754 <I2Cx_Init>
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000878 	.word	0x20000878

08002898 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af02      	add	r7, sp, #8
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
 80028a2:	460b      	mov	r3, r1
 80028a4:	71bb      	strb	r3, [r7, #6]
 80028a6:	4613      	mov	r3, r2
 80028a8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	79f9      	ldrb	r1, [r7, #7]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	1d7b      	adds	r3, r7, #5
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	4803      	ldr	r0, [pc, #12]	; (80028c8 <SENSOR_IO_Write+0x30>)
 80028bc:	f7ff ffa5 	bl	800280a <I2Cx_WriteMultiple>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000878 	.word	0x20000878

080028cc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	4603      	mov	r3, r0
 80028d4:	460a      	mov	r2, r1
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	4613      	mov	r3, r2
 80028da:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	79f9      	ldrb	r1, [r7, #7]
 80028e6:	2301      	movs	r3, #1
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	f107 030f 	add.w	r3, r7, #15
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2301      	movs	r3, #1
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <SENSOR_IO_Read+0x38>)
 80028f4:	f7ff ff5c 	bl	80027b0 <I2Cx_ReadMultiple>

  return read_value;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000878 	.word	0x20000878

08002908 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af02      	add	r7, sp, #8
 800290e:	603a      	str	r2, [r7, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
 8002916:	460b      	mov	r3, r1
 8002918:	71bb      	strb	r3, [r7, #6]
 800291a:	4613      	mov	r3, r2
 800291c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	b29a      	uxth	r2, r3
 8002922:	79f9      	ldrb	r1, [r7, #7]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	4804      	ldr	r0, [pc, #16]	; (8002940 <SENSOR_IO_ReadMultiple+0x38>)
 8002930:	f7ff ff3e 	bl	80027b0 <I2Cx_ReadMultiple>
 8002934:	4603      	mov	r3, r0
 8002936:	b29b      	uxth	r3, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000878 	.word	0x20000878

08002944 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800294e:	2300      	movs	r3, #0
 8002950:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <BSP_ACCELERO_Init+0x74>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4798      	blx	r3
 8002958:	4603      	mov	r3, r0
 800295a:	2b6a      	cmp	r3, #106	; 0x6a
 800295c:	d002      	beq.n	8002964 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e024      	b.n	80029ae <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <BSP_ACCELERO_Init+0x78>)
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <BSP_ACCELERO_Init+0x74>)
 8002968:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800296a:	2330      	movs	r3, #48	; 0x30
 800296c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002972:	2300      	movs	r3, #0
 8002974:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002982:	797a      	ldrb	r2, [r7, #5]
 8002984:	7abb      	ldrb	r3, [r7, #10]
 8002986:	4313      	orrs	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800298c:	7a3b      	ldrb	r3, [r7, #8]
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	b2db      	uxtb	r3, r3
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	b21b      	sxth	r3, r3
 80029a0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <BSP_ACCELERO_Init+0x78>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	89ba      	ldrh	r2, [r7, #12]
 80029aa:	4610      	mov	r0, r2
 80029ac:	4798      	blx	r3
  }  

  return ret;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000000 	.word	0x20000000
 80029bc:	200000c8 	.word	0x200000c8

080029c0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200000c8 	.word	0x200000c8

080029f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_MspInit+0x44>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <HAL_MspInit+0x44>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6613      	str	r3, [r2, #96]	; 0x60
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_MspInit+0x44>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_MspInit+0x44>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_MspInit+0x44>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_MspInit+0x44>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <HAL_DAC_MspInit+0xc8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d14d      	bne.n	8002af6 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a64:	6593      	str	r3, [r2, #88]	; 0x58
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_DAC_MspInit+0xcc>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa0:	f001 f9b0 	bl	8003e04 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_DAC_MspInit+0xd4>)
 8002aa8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002aac:	2206      	movs	r2, #6
 8002aae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002ada:	480b      	ldr	r0, [pc, #44]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002adc:	f000 fec4 	bl	8003868 <HAL_DMA_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002ae6:	f7ff fdd5 	bl	8002694 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <HAL_DAC_MspInit+0xd0>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002af6:	bf00      	nop
 8002af8:	3728      	adds	r7, #40	; 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40007400 	.word	0x40007400
 8002b04:	40021000 	.word	0x40021000
 8002b08:	200002d8 	.word	0x200002d8
 8002b0c:	40020008 	.word	0x40020008

08002b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_I2C_MspInit+0x7c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d128      	bne.n	8002b84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b50:	2312      	movs	r3, #18
 8002b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4619      	mov	r1, r3
 8002b66:	480b      	ldr	r0, [pc, #44]	; (8002b94 <HAL_I2C_MspInit+0x84>)
 8002b68:	f001 f94c 	bl	8003e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_I2C_MspInit+0x80>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40005800 	.word	0x40005800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	48000400 	.word	0x48000400

08002b98 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_I2C_MspDeInit+0x3c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10f      	bne.n	8002bca <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_I2C_MspDeInit+0x40>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_I2C_MspDeInit+0x40>)
 8002bb0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bba:	4808      	ldr	r0, [pc, #32]	; (8002bdc <HAL_I2C_MspDeInit+0x44>)
 8002bbc:	f001 fab4 	bl	8004128 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_I2C_MspDeInit+0x44>)
 8002bc6:	f001 faaf 	bl	8004128 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40005800 	.word	0x40005800
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000400 	.word	0x48000400

08002be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d113      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_TIM_Base_MspInit+0x44>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_TIM_Base_MspInit+0x44>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_TIM_Base_MspInit+0x44>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	201c      	movs	r0, #28
 8002c10:	f000 fa93 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c14:	201c      	movs	r0, #28
 8002c16:	f000 faac 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_UART_MspInit+0x7c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d127      	bne.n	8002c9a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6613      	str	r3, [r2, #96]	; 0x60
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_UART_MspInit+0x80>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c7a:	23c0      	movs	r3, #192	; 0xc0
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_UART_MspInit+0x84>)
 8002c96:	f001 f8b5 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f900 	bl	8002f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <DMA1_Channel1_IRQHandler+0x10>)
 8002d0a:	f000 ff2c 	bl	8003b66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200002d8 	.word	0x200002d8

08002d18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM2_IRQHandler+0x10>)
 8002d1e:	f003 fdff 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000073c 	.word	0x2000073c

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f005 f84c 	bl	8007df8 <__errno>
 8002d60:	4602      	mov	r2, r0
 8002d62:	230c      	movs	r3, #12
 8002d64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <_sbrk+0x64>)
 8002d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200a0000 	.word	0x200a0000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	200000cc 	.word	0x200000cc
 8002d94:	200008d0 	.word	0x200008d0

08002d98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <SystemInit+0x64>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <SystemInit+0x64>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <SystemInit+0x68>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <SystemInit+0x68>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <SystemInit+0x68>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <SystemInit+0x68>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <SystemInit+0x68>)
 8002dc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002dc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <SystemInit+0x68>)
 8002dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <SystemInit+0x68>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <SystemInit+0x68>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <SystemInit+0x68>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SystemInit+0x64>)
 8002dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dee:	609a      	str	r2, [r3, #8]
#endif
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00
 8002e00:	40021000 	.word	0x40021000

08002e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e08:	f7ff ffc6 	bl	8002d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e0e:	e003      	b.n	8002e18 <LoopCopyDataInit>

08002e10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e16:	3104      	adds	r1, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e20:	d3f6      	bcc.n	8002e10 <CopyDataInit>
	ldr	r2, =_sbss
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e24:	e002      	b.n	8002e2c <LoopFillZerobss>

08002e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e28:	f842 3b04 	str.w	r3, [r2], #4

08002e2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <LoopForever+0x16>)
	cmp	r2, r3
 8002e2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e30:	d3f9      	bcc.n	8002e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e32:	f004 ffe7 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e36:	f7ff f96d 	bl	8002114 <main>

08002e3a <LoopForever>:

LoopForever:
    b LoopForever
 8002e3a:	e7fe      	b.n	8002e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e3c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002e40:	08008f84 	.word	0x08008f84
	ldr	r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e48:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8002e4c:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8002e50:	200008cc 	.word	0x200008cc

08002e54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC1_IRQHandler>

08002e56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e60:	2003      	movs	r0, #3
 8002e62:	f000 f95f 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e66:	2000      	movs	r0, #0
 8002e68:	f000 f80e 	bl	8002e88 <HAL_InitTick>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	71fb      	strb	r3, [r7, #7]
 8002e76:	e001      	b.n	8002e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e78:	f7ff fdba 	bl	80029f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_InitTick+0x6c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_InitTick+0x70>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_InitTick+0x6c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f96b 	bl	800318e <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d809      	bhi.n	8002ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f000 f935 	bl	800313a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_InitTick+0x74>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e007      	b.n	8002ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e004      	b.n	8002ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e001      	b.n	8002ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000040 	.word	0x20000040
 8002ef8:	20000038 	.word	0x20000038
 8002efc:	2000003c 	.word	0x2000003c

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000040 	.word	0x20000040
 8002f24:	200008c4 	.word	0x200008c4

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	200008c4 	.word	0x200008c4

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_Delay+0x40>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000040 	.word	0x20000040

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60d3      	str	r3, [r2, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff29 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff3e 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff31 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e014      	b.n	80031e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fc35 	bl	8002a38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	795b      	ldrb	r3, [r3, #5]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_DAC_Start+0x16>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e040      	b.n	8003282 <HAL_DAC_Start+0x98>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11d      	bne.n	8003274 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e014      	b.n	8003274 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2102      	movs	r1, #2
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0202 	orr.w	r2, r2, #2
 8003272:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	795b      	ldrb	r3, [r3, #5]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_DAC_Start_DMA+0x1e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e09e      	b.n	80033ec <HAL_DAC_Start_DMA+0x15c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2202      	movs	r2, #2
 80032b8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d12a      	bne.n	8003316 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <HAL_DAC_Start_DMA+0x164>)
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a4a      	ldr	r2, [pc, #296]	; (80033f8 <HAL_DAC_Start_DMA+0x168>)
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a49      	ldr	r2, [pc, #292]	; (80033fc <HAL_DAC_Start_DMA+0x16c>)
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d009      	beq.n	8003302 <HAL_DAC_Start_DMA+0x72>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d00c      	beq.n	800330c <HAL_DAC_Start_DMA+0x7c>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d000      	beq.n	80032f8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80032f6:	e039      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	613b      	str	r3, [r7, #16]
        break;
 8003300:	e034      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	613b      	str	r3, [r7, #16]
        break;
 800330a:	e02f      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3310      	adds	r3, #16
 8003312:	613b      	str	r3, [r7, #16]
        break;
 8003314:	e02a      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a39      	ldr	r2, [pc, #228]	; (8003400 <HAL_DAC_Start_DMA+0x170>)
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_DAC_Start_DMA+0x174>)
 8003324:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a37      	ldr	r2, [pc, #220]	; (8003408 <HAL_DAC_Start_DMA+0x178>)
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800333c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d009      	beq.n	8003358 <HAL_DAC_Start_DMA+0xc8>
 8003344:	2b08      	cmp	r3, #8
 8003346:	d00c      	beq.n	8003362 <HAL_DAC_Start_DMA+0xd2>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d000      	beq.n	800334e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800334c:	e00e      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	613b      	str	r3, [r7, #16]
        break;
 8003356:	e009      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3318      	adds	r3, #24
 800335e:	613b      	str	r3, [r7, #16]
        break;
 8003360:	e004      	b.n	800336c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	331c      	adds	r3, #28
 8003368:	613b      	str	r3, [r7, #16]
        break;
 800336a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d111      	bne.n	8003396 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6898      	ldr	r0, [r3, #8]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	f000 fb14 	bl	80039b8 <HAL_DMA_Start_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]
 8003394:	e010      	b.n	80033b8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68d8      	ldr	r0, [r3, #12]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	f000 fb02 	bl	80039b8 <HAL_DMA_Start_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e005      	b.n	80033ea <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	08003755 	.word	0x08003755
 80033f8:	08003777 	.word	0x08003777
 80033fc:	08003793 	.word	0x08003793
 8003400:	080037fd 	.word	0x080037fd
 8003404:	0800381f 	.word	0x0800381f
 8003408:	0800383b 	.word	0x0800383b

0800340c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2201      	movs	r2, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb27 	bl	8003aae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e00c      	b.n	800348c <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fb19 	bl	8003aae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800348a:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	795b      	ldrb	r3, [r3, #5]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_DAC_ConfigChannel+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e12a      	b.n	8003746 <HAL_DAC_ConfigChannel+0x272>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2202      	movs	r2, #2
 80034fa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d174      	bne.n	80035ee <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003504:	f7ff fd10 	bl	8002f28 <HAL_GetTick>
 8003508:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d134      	bne.n	800357a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003510:	e011      	b.n	8003536 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003512:	f7ff fd09 	bl	8002f28 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d90a      	bls.n	8003536 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f043 0208 	orr.w	r2, r3, #8
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2203      	movs	r2, #3
 8003530:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e107      	b.n	8003746 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e6      	bne.n	8003512 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff fcfb 	bl	8002f40 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	69d2      	ldr	r2, [r2, #28]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
 8003554:	e01e      	b.n	8003594 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003556:	f7ff fce7 	bl	8002f28 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d90a      	bls.n	800357a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f043 0208 	orr.w	r2, r3, #8
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2203      	movs	r2, #3
 8003574:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0e5      	b.n	8003746 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	dbe8      	blt.n	8003556 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003584:	2001      	movs	r0, #1
 8003586:	f7ff fcdb 	bl	8002f40 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	69d2      	ldr	r2, [r2, #28]
 8003592:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	ea02 0103 	and.w	r1, r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	409a      	lsls	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	21ff      	movs	r1, #255	; 0xff
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	ea02 0103 	and.w	r1, r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	409a      	lsls	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11d      	bne.n	8003632 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	221f      	movs	r2, #31
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	4013      	ands	r3, r2
 8003610:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2207      	movs	r2, #7
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	4013      	ands	r3, r2
 800364c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4313      	orrs	r3, r2
 8003670:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d6:	d104      	bne.n	80036e2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e018      	b.n	8003714 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d104      	bne.n	80036f4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e00f      	b.n	8003714 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80036f4:	f002 fa4a 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 80036f8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_DAC_ConfigChannel+0x27c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d904      	bls.n	800370c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e003      	b.n	8003714 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003712:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	22c0      	movs	r2, #192	; 0xc0
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	400a      	ands	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	04c4b400 	.word	0x04c4b400

08003754 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fe97 	bl	8003496 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	711a      	strb	r2, [r3, #4]
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fe90 	bl	80034aa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff fe86 	bl	80034be <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	711a      	strb	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff ffd8 	bl	80037c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	711a      	strb	r2, [r3, #4]
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ffd1 	bl	80037d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff ffc7 	bl	80037e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	711a      	strb	r2, [r3, #4]
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e08d      	b.n	8003996 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_DMA_Init+0x138>)
 8003882:	429a      	cmp	r2, r3
 8003884:	d80f      	bhi.n	80038a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <HAL_DMA_Init+0x13c>)
 800388e:	4413      	add	r3, r2
 8003890:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <HAL_DMA_Init+0x140>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a42      	ldr	r2, [pc, #264]	; (80039ac <HAL_DMA_Init+0x144>)
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
 80038a4:	e00e      	b.n	80038c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_DMA_Init+0x148>)
 80038ae:	4413      	add	r3, r2
 80038b0:	4a3d      	ldr	r2, [pc, #244]	; (80039a8 <HAL_DMA_Init+0x140>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a3c      	ldr	r2, [pc, #240]	; (80039b4 <HAL_DMA_Init+0x14c>)
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa12 	bl	8003d40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d102      	bne.n	800392c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003940:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_DMA_Init+0x104>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d80c      	bhi.n	800396c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa32 	bl	8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	e008      	b.n	800397e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40020407 	.word	0x40020407
 80039a4:	bffdfff8 	.word	0xbffdfff8
 80039a8:	cccccccd 	.word	0xcccccccd
 80039ac:	40020000 	.word	0x40020000
 80039b0:	bffdfbf8 	.word	0xbffdfbf8
 80039b4:	40020400 	.word	0x40020400

080039b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_DMA_Start_IT+0x20>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e066      	b.n	8003aa6 <HAL_DMA_Start_IT+0xee>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d155      	bne.n	8003a98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f957 	bl	8003cc4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 020e 	orr.w	r2, r2, #14
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00f      	b.n	8003a50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 020a 	orr.w	r2, r2, #10
 8003a4e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a84:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e005      	b.n	8003aa4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d008      	beq.n	8003ad8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e040      	b.n	8003b5a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 020e 	bic.w	r2, r2, #14
 8003ae6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 021c 	and.w	r2, r3, #28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 031c 	and.w	r3, r3, #28
 8003b86:	2204      	movs	r2, #4
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d026      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x7a>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d021      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f003 021c 	and.w	r2, r3, #28
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d071      	beq.n	8003cba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003bde:	e06c      	b.n	8003cba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f003 031c 	and.w	r3, r3, #28
 8003be8:	2202      	movs	r2, #2
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xec>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d029      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 020a 	bic.w	r2, r2, #10
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f003 021c 	and.w	r2, r3, #28
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2102      	movs	r1, #2
 8003c32:	fa01 f202 	lsl.w	r2, r1, r2
 8003c36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d038      	beq.n	8003cba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c50:	e033      	b.n	8003cba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f003 031c 	and.w	r3, r3, #28
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d02a      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d025      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 020e 	bic.w	r2, r2, #14
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f003 021c 	and.w	r2, r3, #28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
}
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cda:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cec:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 021c 	and.w	r2, r3, #28
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d108      	bne.n	8003d24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d22:	e007      	b.n	8003d34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d80a      	bhi.n	8003d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6493      	str	r3, [r2, #72]	; 0x48
 8003d68:	e007      	b.n	8003d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d74:	4413      	add	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3b08      	subs	r3, #8
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40020407 	.word	0x40020407
 8003db0:	4002081c 	.word	0x4002081c
 8003db4:	cccccccd 	.word	0xcccccccd
 8003db8:	40020880 	.word	0x40020880

08003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	1000823f 	.word	0x1000823f
 8003e00:	40020940 	.word	0x40020940

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e12:	e166      	b.n	80040e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8158 	beq.w	80040dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d00b      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d007      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e40:	2b11      	cmp	r3, #17
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b12      	cmp	r3, #18
 8003e4a:	d130      	bne.n	8003eae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e82:	2201      	movs	r2, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0201 	and.w	r2, r3, #1
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0xea>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b12      	cmp	r3, #18
 8003eec:	d123      	bne.n	8003f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	08da      	lsrs	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3208      	adds	r2, #8
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80b2 	beq.w	80040dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	4a60      	ldr	r2, [pc, #384]	; (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6613      	str	r3, [r2, #96]	; 0x60
 8003f84:	4b5e      	ldr	r3, [pc, #376]	; (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f90:	4a5c      	ldr	r2, [pc, #368]	; (8004104 <HAL_GPIO_Init+0x300>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fba:	d02b      	beq.n	8004014 <HAL_GPIO_Init+0x210>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_GPIO_Init+0x304>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d025      	beq.n	8004010 <HAL_GPIO_Init+0x20c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_GPIO_Init+0x308>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01f      	beq.n	800400c <HAL_GPIO_Init+0x208>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a50      	ldr	r2, [pc, #320]	; (8004110 <HAL_GPIO_Init+0x30c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d019      	beq.n	8004008 <HAL_GPIO_Init+0x204>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_GPIO_Init+0x310>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_GPIO_Init+0x200>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a4e      	ldr	r2, [pc, #312]	; (8004118 <HAL_GPIO_Init+0x314>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00d      	beq.n	8004000 <HAL_GPIO_Init+0x1fc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a4d      	ldr	r2, [pc, #308]	; (800411c <HAL_GPIO_Init+0x318>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <HAL_GPIO_Init+0x1f8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <HAL_GPIO_Init+0x31c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_GPIO_Init+0x1f4>
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	e00e      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	e00c      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8003ffc:	2306      	movs	r3, #6
 8003ffe:	e00a      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004000:	2305      	movs	r3, #5
 8004002:	e008      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004004:	2304      	movs	r3, #4
 8004006:	e006      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004008:	2303      	movs	r3, #3
 800400a:	e004      	b.n	8004016 <HAL_GPIO_Init+0x212>
 800400c:	2302      	movs	r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004014:	2300      	movs	r3, #0
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	4093      	lsls	r3, r2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004026:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_GPIO_Init+0x300>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_GPIO_Init+0x320>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004058:	4a32      	ldr	r2, [pc, #200]	; (8004124 <HAL_GPIO_Init+0x320>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800405e:	4b31      	ldr	r3, [pc, #196]	; (8004124 <HAL_GPIO_Init+0x320>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_GPIO_Init+0x320>)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <HAL_GPIO_Init+0x320>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_GPIO_Init+0x320>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_GPIO_Init+0x320>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <HAL_GPIO_Init+0x320>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f ae91 	bne.w	8003e14 <HAL_GPIO_Init+0x10>
  }
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	40010000 	.word	0x40010000
 8004108:	48000400 	.word	0x48000400
 800410c:	48000800 	.word	0x48000800
 8004110:	48000c00 	.word	0x48000c00
 8004114:	48001000 	.word	0x48001000
 8004118:	48001400 	.word	0x48001400
 800411c:	48001800 	.word	0x48001800
 8004120:	48001c00 	.word	0x48001c00
 8004124:	40010400 	.word	0x40010400

08004128 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004136:	e0c9      	b.n	80042cc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004138:	2201      	movs	r2, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80bc 	beq.w	80042c6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800414e:	4a66      	ldr	r2, [pc, #408]	; (80042e8 <HAL_GPIO_DeInit+0x1c0>)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004176:	d02b      	beq.n	80041d0 <HAL_GPIO_DeInit+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a5c      	ldr	r2, [pc, #368]	; (80042ec <HAL_GPIO_DeInit+0x1c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d025      	beq.n	80041cc <HAL_GPIO_DeInit+0xa4>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a5b      	ldr	r2, [pc, #364]	; (80042f0 <HAL_GPIO_DeInit+0x1c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01f      	beq.n	80041c8 <HAL_GPIO_DeInit+0xa0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_GPIO_DeInit+0x1cc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d019      	beq.n	80041c4 <HAL_GPIO_DeInit+0x9c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <HAL_GPIO_DeInit+0x1d0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <HAL_GPIO_DeInit+0x98>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_GPIO_DeInit+0x1d4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00d      	beq.n	80041bc <HAL_GPIO_DeInit+0x94>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_GPIO_DeInit+0x1d8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <HAL_GPIO_DeInit+0x90>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a56      	ldr	r2, [pc, #344]	; (8004304 <HAL_GPIO_DeInit+0x1dc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_GPIO_DeInit+0x8c>
 80041b0:	2307      	movs	r3, #7
 80041b2:	e00e      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041b4:	2308      	movs	r3, #8
 80041b6:	e00c      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041b8:	2306      	movs	r3, #6
 80041ba:	e00a      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041bc:	2305      	movs	r3, #5
 80041be:	e008      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041c0:	2304      	movs	r3, #4
 80041c2:	e006      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041c4:	2303      	movs	r3, #3
 80041c6:	e004      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e002      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_GPIO_DeInit+0xaa>
 80041d0:	2300      	movs	r3, #0
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	f002 0203 	and.w	r2, r2, #3
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	4093      	lsls	r3, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d132      	bne.n	8004248 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041e2:	4b49      	ldr	r3, [pc, #292]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	4947      	ldr	r1, [pc, #284]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041f0:	4b45      	ldr	r3, [pc, #276]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	4943      	ldr	r1, [pc, #268]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	4940      	ldr	r1, [pc, #256]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 8004208:	4013      	ands	r3, r2
 800420a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	493c      	ldr	r1, [pc, #240]	; (8004308 <HAL_GPIO_DeInit+0x1e0>)
 8004216:	4013      	ands	r3, r2
 8004218:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <HAL_GPIO_DeInit+0x1c0>)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3302      	adds	r3, #2
 8004232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43da      	mvns	r2, r3
 800423a:	482b      	ldr	r0, [pc, #172]	; (80042e8 <HAL_GPIO_DeInit+0x1c0>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	400a      	ands	r2, r1
 8004242:	3302      	adds	r3, #2
 8004244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2103      	movs	r1, #3
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	08d2      	lsrs	r2, r2, #3
 800427c:	4019      	ands	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2103      	movs	r1, #3
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2101      	movs	r1, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2103      	movs	r1, #3
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f af2f 	bne.w	8004138 <HAL_GPIO_DeInit+0x10>
  }
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40010000 	.word	0x40010000
 80042ec:	48000400 	.word	0x48000400
 80042f0:	48000800 	.word	0x48000800
 80042f4:	48000c00 	.word	0x48000c00
 80042f8:	48001000 	.word	0x48001000
 80042fc:	48001400 	.word	0x48001400
 8004300:	48001800 	.word	0x48001800
 8004304:	48001c00 	.word	0x48001c00
 8004308:	40010400 	.word	0x40010400

0800430c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e081      	b.n	8004422 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fbec 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800436c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	e006      	b.n	8004394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d104      	bne.n	80043a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	ea42 0103 	orr.w	r1, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e021      	b.n	8004480 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe fb9f 	bl	8002b98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	460b      	mov	r3, r1
 800449c:	813b      	strh	r3, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f040 80f9 	bne.w	80046a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_I2C_Mem_Write+0x34>
 80044b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0ed      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_Mem_Write+0x4e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0e6      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044de:	f7fe fd23 	bl	8002f28 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2319      	movs	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fac3 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0d1      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2221      	movs	r2, #33	; 0x21
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004528:	88f8      	ldrh	r0, [r7, #6]
 800452a:	893a      	ldrh	r2, [r7, #8]
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4603      	mov	r3, r0
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f9d3 	bl	80048e4 <I2C_RequestMemoryWrite>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0a9      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2bff      	cmp	r3, #255	; 0xff
 8004558:	d90e      	bls.n	8004578 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	b2da      	uxtb	r2, r3
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	2300      	movs	r3, #0
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fba5 	bl	8004cc0 <I2C_TransferConfig>
 8004576:	e00f      	b.n	8004598 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	b2da      	uxtb	r2, r3
 8004588:	8979      	ldrh	r1, [r7, #10]
 800458a:	2300      	movs	r3, #0
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fb94 	bl	8004cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 faad 	bl	8004afc <I2C_WaitOnTXISFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e07b      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d034      	beq.n	8004650 <HAL_I2C_Mem_Write+0x1c8>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d130      	bne.n	8004650 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	2200      	movs	r2, #0
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fa3f 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e04d      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2bff      	cmp	r3, #255	; 0xff
 8004610:	d90e      	bls.n	8004630 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	b2da      	uxtb	r2, r3
 800461e:	8979      	ldrh	r1, [r7, #10]
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fb49 	bl	8004cc0 <I2C_TransferConfig>
 800462e:	e00f      	b.n	8004650 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	b2da      	uxtb	r2, r3
 8004640:	8979      	ldrh	r1, [r7, #10]
 8004642:	2300      	movs	r3, #0
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fb38 	bl	8004cc0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d19e      	bne.n	8004598 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa8c 	bl	8004b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e01a      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2220      	movs	r2, #32
 8004674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_I2C_Mem_Write+0x224>)
 8004682:	400b      	ands	r3, r1
 8004684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	fe00e800 	.word	0xfe00e800

080046b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	817b      	strh	r3, [r7, #10]
 80046c2:	460b      	mov	r3, r1
 80046c4:	813b      	strh	r3, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	f040 80fd 	bne.w	80048d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x34>
 80046de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0f1      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Mem_Read+0x4e>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e0ea      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004706:	f7fe fc0f 	bl	8002f28 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2319      	movs	r3, #25
 8004712:	2201      	movs	r2, #1
 8004714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f9af 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0d5      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2222      	movs	r2, #34	; 0x22
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2240      	movs	r2, #64	; 0x40
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004750:	88f8      	ldrh	r0, [r7, #6]
 8004752:	893a      	ldrh	r2, [r7, #8]
 8004754:	8979      	ldrh	r1, [r7, #10]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4603      	mov	r3, r0
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f913 	bl	800498c <I2C_RequestMemoryRead>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0ad      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2bff      	cmp	r3, #255	; 0xff
 8004780:	d90e      	bls.n	80047a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	22ff      	movs	r2, #255	; 0xff
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	b2da      	uxtb	r2, r3
 800478e:	8979      	ldrh	r1, [r7, #10]
 8004790:	4b52      	ldr	r3, [pc, #328]	; (80048dc <HAL_I2C_Mem_Read+0x22c>)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa91 	bl	8004cc0 <I2C_TransferConfig>
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	8979      	ldrh	r1, [r7, #10]
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_I2C_Mem_Read+0x22c>)
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa80 	bl	8004cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2200      	movs	r2, #0
 80047c8:	2104      	movs	r1, #4
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f956 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07c      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d034      	beq.n	8004880 <HAL_I2C_Mem_Read+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d130      	bne.n	8004880 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f927 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e04d      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2bff      	cmp	r3, #255	; 0xff
 8004840:	d90e      	bls.n	8004860 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	b2da      	uxtb	r2, r3
 800484e:	8979      	ldrh	r1, [r7, #10]
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fa31 	bl	8004cc0 <I2C_TransferConfig>
 800485e:	e00f      	b.n	8004880 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fa20 	bl	8004cc0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d19a      	bne.n	80047c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f974 	bl	8004b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e01a      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2220      	movs	r2, #32
 80048a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_I2C_Mem_Read+0x230>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	80002400 	.word	0x80002400
 80048e0:	fe00e800 	.word	0xfe00e800

080048e4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	8979      	ldrh	r1, [r7, #10]
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <I2C_RequestMemoryWrite+0xa4>)
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f9d7 	bl	8004cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f8f0 	bl	8004afc <I2C_WaitOnTXISFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e02c      	b.n	8004980 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
 8004936:	e015      	b.n	8004964 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b29b      	uxth	r3, r3
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f8d6 	bl	8004afc <I2C_WaitOnTXISFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e012      	b.n	8004980 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800495a:	893b      	ldrh	r3, [r7, #8]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f884 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	80002000 	.word	0x80002000

0800498c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <I2C_RequestMemoryRead+0xa4>)
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2300      	movs	r3, #0
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f984 	bl	8004cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f89d 	bl	8004afc <I2C_WaitOnTXISFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e02c      	b.n	8004a26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
 80049dc:	e015      	b.n	8004a0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049de:	893b      	ldrh	r3, [r7, #8]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f883 	bl	8004afc <I2C_WaitOnTXISFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e012      	b.n	8004a26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f831 	bl	8004a7c <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	80002000 	.word	0x80002000

08004a34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d007      	beq.n	8004a70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	619a      	str	r2, [r3, #24]
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a8c:	e022      	b.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d01e      	beq.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fe fa47 	bl	8002f28 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d113      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e00f      	b.n	8004af4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d0cd      	beq.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b08:	e02c      	b.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f870 	bl	8004bf4 <I2C_IsAcknowledgeFailed>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e02a      	b.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d01e      	beq.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fe f9ff 	bl	8002f28 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d113      	bne.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e007      	b.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d1cb      	bne.n	8004b0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b88:	e028      	b.n	8004bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f830 	bl	8004bf4 <I2C_IsAcknowledgeFailed>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e026      	b.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fe f9c3 	bl	8002f28 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d113      	bne.n	8004bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e007      	b.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d1cf      	bne.n	8004b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d151      	bne.n	8004cb2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0e:	e022      	b.n	8004c56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d01e      	beq.n	8004c56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe f986 	bl	8002f28 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_IsAcknowledgeFailed+0x3a>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d113      	bne.n	8004c56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e02e      	b.n	8004cb4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d1d5      	bne.n	8004c10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2220      	movs	r2, #32
 8004c72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff fedd 	bl	8004a34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <I2C_IsAcknowledgeFailed+0xc8>)
 8004c86:	400b      	ands	r3, r1
 8004c88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	fe00e800 	.word	0xfe00e800

08004cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	0d5b      	lsrs	r3, r3, #21
 8004cdc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <I2C_TransferConfig+0x58>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	ea02 0103 	and.w	r1, r2, r3
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cf0:	7a7b      	ldrb	r3, [r7, #9]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	03ff63ff 	.word	0x03ff63ff

08004d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d138      	bne.n	8004da4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e032      	b.n	8004da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d139      	bne.n	8004e3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e033      	b.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2224      	movs	r2, #36	; 0x24
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	d102      	bne.n	8004e64 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e62:	e00b      	b.n	8004e7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d102      	bne.n	8004e7a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e78:	e000      	b.n	8004e7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e7a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40007000 	.word	0x40007000

08004e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d141      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d131      	bne.n	8004f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea8:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eae:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ec0:	4a41      	ldr	r2, [pc, #260]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2232      	movs	r2, #50	; 0x32
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ede:	e002      	b.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d102      	bne.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004efa:	4b33      	ldr	r3, [pc, #204]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d158      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e057      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	4a2d      	ldr	r2, [pc, #180]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f1c:	e04d      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d141      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d131      	bne.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3a:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2232      	movs	r2, #50	; 0x32
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0c9b      	lsrs	r3, r3, #18
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6a:	e002      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d102      	bne.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f2      	bne.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d112      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e011      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fa8:	e007      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb2:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	20000038 	.word	0x20000038
 8004fd0:	431bde83 	.word	0x431bde83

08004fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f000 bc16 	b.w	8005814 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe8:	4ba0      	ldr	r3, [pc, #640]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff2:	4b9e      	ldr	r3, [pc, #632]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80e4 	beq.w	80051d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_RCC_OscConfig+0x4c>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	f040 808b 	bne.w	800512e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b01      	cmp	r3, #1
 800501c:	f040 8087 	bne.w	800512e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005020:	4b92      	ldr	r3, [pc, #584]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_OscConfig+0x64>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e3ed      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	4b8b      	ldr	r3, [pc, #556]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <HAL_RCC_OscConfig+0x7e>
 8005048:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005050:	e005      	b.n	800505e <HAL_RCC_OscConfig+0x8a>
 8005052:	4b86      	ldr	r3, [pc, #536]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505e:	4293      	cmp	r3, r2
 8005060:	d223      	bcs.n	80050aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fdc8 	bl	8005bfc <RCC_SetFlashLatencyFromMSIRange>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e3ce      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005076:	4b7d      	ldr	r3, [pc, #500]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7c      	ldr	r2, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800507c:	f043 0308 	orr.w	r3, r3, #8
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b7a      	ldr	r3, [pc, #488]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4977      	ldr	r1, [pc, #476]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005094:	4b75      	ldr	r3, [pc, #468]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	4972      	ldr	r1, [pc, #456]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	604b      	str	r3, [r1, #4]
 80050a8:	e025      	b.n	80050f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050aa:	4b70      	ldr	r3, [pc, #448]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6f      	ldr	r2, [pc, #444]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050b0:	f043 0308 	orr.w	r3, r3, #8
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b6d      	ldr	r3, [pc, #436]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	496a      	ldr	r1, [pc, #424]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c8:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4965      	ldr	r1, [pc, #404]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd88 	bl	8005bfc <RCC_SetFlashLatencyFromMSIRange>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e38e      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f6:	f000 fcbf 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80050fa:	4601      	mov	r1, r0
 80050fc:	4b5b      	ldr	r3, [pc, #364]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a5a      	ldr	r2, [pc, #360]	; (8005270 <HAL_RCC_OscConfig+0x29c>)
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	fa21 f303 	lsr.w	r3, r1, r3
 8005112:	4a58      	ldr	r2, [pc, #352]	; (8005274 <HAL_RCC_OscConfig+0x2a0>)
 8005114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005116:	4b58      	ldr	r3, [pc, #352]	; (8005278 <HAL_RCC_OscConfig+0x2a4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd feb4 	bl	8002e88 <HAL_InitTick>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d052      	beq.n	80051d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	e372      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d032      	beq.n	800519c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005136:	4b4d      	ldr	r3, [pc, #308]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a4c      	ldr	r2, [pc, #304]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005142:	f7fd fef1 	bl	8002f28 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800514a:	f7fd feed 	bl	8002f28 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e35b      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800515c:	4b43      	ldr	r3, [pc, #268]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005168:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a3f      	ldr	r2, [pc, #252]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800516e:	f043 0308 	orr.w	r3, r3, #8
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	493a      	ldr	r1, [pc, #232]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	4935      	ldr	r1, [pc, #212]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
 800519a:	e01a      	b.n	80051d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800519c:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a32      	ldr	r2, [pc, #200]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051a8:	f7fd febe 	bl	8002f28 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b0:	f7fd feba 	bl	8002f28 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e328      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051c2:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1dc>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d073      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_OscConfig+0x21c>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d10e      	bne.n	8005208 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10b      	bne.n	8005208 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	4b1e      	ldr	r3, [pc, #120]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d063      	beq.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15f      	bne.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e305      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d106      	bne.n	8005220 <HAL_RCC_OscConfig+0x24c>
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e01d      	b.n	800525c <HAL_RCC_OscConfig+0x288>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x270>
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a0f      	ldr	r2, [pc, #60]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a0c      	ldr	r2, [pc, #48]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0x288>
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a05      	ldr	r2, [pc, #20]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01b      	beq.n	800529c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd fe60 	bl	8002f28 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526a:	e010      	b.n	800528e <HAL_RCC_OscConfig+0x2ba>
 800526c:	40021000 	.word	0x40021000
 8005270:	080086dc 	.word	0x080086dc
 8005274:	20000038 	.word	0x20000038
 8005278:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fd fe54 	bl	8002f28 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e2c2      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800528e:	4baf      	ldr	r3, [pc, #700]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x2a8>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fd fe44 	bl	8002f28 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fd fe40 	bl	8002f28 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e2ae      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052b6:	4ba5      	ldr	r3, [pc, #660]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x2d0>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d060      	beq.n	8005394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_OscConfig+0x310>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d119      	bne.n	8005312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d116      	bne.n	8005312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e4:	4b99      	ldr	r3, [pc, #612]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_OscConfig+0x328>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e28b      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b93      	ldr	r3, [pc, #588]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	4990      	ldr	r1, [pc, #576]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005310:	e040      	b.n	8005394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d023      	beq.n	8005362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531a:	4b8c      	ldr	r3, [pc, #560]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a8b      	ldr	r2, [pc, #556]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd fdff 	bl	8002f28 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532e:	f7fd fdfb 	bl	8002f28 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e269      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005340:	4b82      	ldr	r3, [pc, #520]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b7f      	ldr	r3, [pc, #508]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	497c      	ldr	r1, [pc, #496]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
 8005360:	e018      	b.n	8005394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005362:	4b7a      	ldr	r3, [pc, #488]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a79      	ldr	r2, [pc, #484]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd fddb 	bl	8002f28 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd fdd7 	bl	8002f28 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e245      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005388:	4b70      	ldr	r3, [pc, #448]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03c      	beq.n	800541a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01c      	beq.n	80053e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a8:	4b68      	ldr	r3, [pc, #416]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ae:	4a67      	ldr	r2, [pc, #412]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fd fdb6 	bl	8002f28 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fd fdb2 	bl	8002f28 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e220      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d2:	4b5e      	ldr	r3, [pc, #376]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ef      	beq.n	80053c0 <HAL_RCC_OscConfig+0x3ec>
 80053e0:	e01b      	b.n	800541a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e2:	4b5a      	ldr	r3, [pc, #360]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e8:	4a58      	ldr	r2, [pc, #352]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fd fd99 	bl	8002f28 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fa:	f7fd fd95 	bl	8002f28 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e203      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800540c:	4b4f      	ldr	r3, [pc, #316]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ef      	bne.n	80053fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a6 	beq.w	8005574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800542c:	4b47      	ldr	r3, [pc, #284]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10d      	bne.n	8005454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005438:	4b44      	ldr	r3, [pc, #272]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	4a43      	ldr	r2, [pc, #268]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	6593      	str	r3, [r2, #88]	; 0x58
 8005444:	4b41      	ldr	r3, [pc, #260]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005454:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d118      	bne.n	8005492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546c:	f7fd fd5c 	bl	8002f28 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fd fd58 	bl	8002f28 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1c6      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005486:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d108      	bne.n	80054ac <HAL_RCC_OscConfig+0x4d8>
 800549a:	4b2c      	ldr	r3, [pc, #176]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054aa:	e024      	b.n	80054f6 <HAL_RCC_OscConfig+0x522>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d110      	bne.n	80054d6 <HAL_RCC_OscConfig+0x502>
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054d4:	e00f      	b.n	80054f6 <HAL_RCC_OscConfig+0x522>
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	4a17      	ldr	r2, [pc, #92]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054ee:	f023 0304 	bic.w	r3, r3, #4
 80054f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fd fd13 	bl	8002f28 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fd fd0f 	bl	8002f28 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e17b      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ed      	beq.n	8005506 <HAL_RCC_OscConfig+0x532>
 800552a:	e01a      	b.n	8005562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fd fcfc 	bl	8002f28 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005532:	e00f      	b.n	8005554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fd fcf8 	bl	8002f28 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d906      	bls.n	8005554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e164      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005554:	4ba8      	ldr	r3, [pc, #672]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e8      	bne.n	8005534 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005568:	4ba3      	ldr	r3, [pc, #652]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	4aa2      	ldr	r2, [pc, #648]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d03c      	beq.n	80055fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005588:	4b9b      	ldr	r3, [pc, #620]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800558a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800558e:	4a9a      	ldr	r2, [pc, #616]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd fcc6 	bl	8002f28 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a0:	f7fd fcc2 	bl	8002f28 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e130      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055b2:	4b91      	ldr	r3, [pc, #580]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80055b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ef      	beq.n	80055a0 <HAL_RCC_OscConfig+0x5cc>
 80055c0:	e01b      	b.n	80055fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055c2:	4b8d      	ldr	r3, [pc, #564]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80055c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c8:	4a8b      	ldr	r2, [pc, #556]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fd fca9 	bl	8002f28 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055da:	f7fd fca5 	bl	8002f28 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e113      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ec:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ef      	bne.n	80055da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8107 	beq.w	8005812 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	2b02      	cmp	r3, #2
 800560a:	f040 80cb 	bne.w	80057a4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800560e:	4b7a      	ldr	r3, [pc, #488]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0203 	and.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	429a      	cmp	r2, r3
 8005620:	d12c      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	3b01      	subs	r3, #1
 800562e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d123      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d11b      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d113      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	3b01      	subs	r3, #1
 8005662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d109      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	3b01      	subs	r3, #1
 8005676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d06d      	beq.n	8005758 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d068      	beq.n	8005754 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005682:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800568e:	4b5a      	ldr	r3, [pc, #360]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0ba      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800569e:	4b56      	ldr	r3, [pc, #344]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a55      	ldr	r2, [pc, #340]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80056a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056aa:	f7fd fc3d 	bl	8002f28 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fd fc39 	bl	8002f28 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0a7      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c4:	4b4c      	ldr	r3, [pc, #304]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d0:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	4b49      	ldr	r3, [pc, #292]	; (80057fc <HAL_RCC_OscConfig+0x828>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056e0:	3a01      	subs	r2, #1
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	4311      	orrs	r1, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056ea:	0212      	lsls	r2, r2, #8
 80056ec:	4311      	orrs	r1, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056f2:	0852      	lsrs	r2, r2, #1
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0552      	lsls	r2, r2, #21
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056fe:	0852      	lsrs	r2, r2, #1
 8005700:	3a01      	subs	r2, #1
 8005702:	0652      	lsls	r2, r2, #25
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800570a:	06d2      	lsls	r2, r2, #27
 800570c:	430a      	orrs	r2, r1
 800570e:	493a      	ldr	r1, [pc, #232]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005710:	4313      	orrs	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005714:	4b38      	ldr	r3, [pc, #224]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005720:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800572c:	f7fd fbfc 	bl	8002f28 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005734:	f7fd fbf8 	bl	8002f28 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e066      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005746:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005752:	e05e      	b.n	8005812 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e05d      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d156      	bne.n	8005812 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005764:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800577c:	f7fd fbd4 	bl	8002f28 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fd fbd0 	bl	8002f28 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e03e      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x7b0>
 80057a2:	e036      	b.n	8005812 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b0c      	cmp	r3, #12
 80057a8:	d031      	beq.n	800580e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d105      	bne.n	80057ce <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057c8:	f023 0303 	bic.w	r3, r3, #3
 80057cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <HAL_RCC_OscConfig+0x824>)
 80057d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80057d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fd fba3 	bl	8002f28 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	e00c      	b.n	8005800 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fb9f 	bl	8002f28 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d905      	bls.n	8005800 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e00d      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_OscConfig+0x848>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ec      	bne.n	80057e6 <HAL_RCC_OscConfig+0x812>
 800580c:	e001      	b.n	8005812 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e10f      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005838:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d910      	bls.n	8005868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b86      	ldr	r3, [pc, #536]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 020f 	bic.w	r2, r3, #15
 800584e:	4984      	ldr	r1, [pc, #528]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b82      	ldr	r3, [pc, #520]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0f7      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8089 	beq.w	8005988 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d133      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	4b79      	ldr	r3, [pc, #484]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0e4      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800588e:	f000 fa0f 	bl	8005cb0 <RCC_GetSysClockFreqFromPLLSource>
 8005892:	4602      	mov	r2, r0
 8005894:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <HAL_RCC_ClockConfig+0x248>)
 8005896:	429a      	cmp	r2, r3
 8005898:	d955      	bls.n	8005946 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800589a:	4b72      	ldr	r3, [pc, #456]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058a6:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80058b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e044      	b.n	8005946 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d03e      	beq.n	8005946 <HAL_RCC_ClockConfig+0x126>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d13a      	bne.n	8005946 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058d0:	4b64      	ldr	r3, [pc, #400]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d8:	4a62      	ldr	r2, [pc, #392]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e02f      	b.n	8005946 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ee:	4b5d      	ldr	r3, [pc, #372]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d115      	bne.n	8005926 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0ac      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005906:	4b57      	ldr	r3, [pc, #348]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0a0      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005916:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e098      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005926:	f000 f8a7 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 800592a:	4602      	mov	r2, r0
 800592c:	4b4e      	ldr	r3, [pc, #312]	; (8005a68 <HAL_RCC_ClockConfig+0x248>)
 800592e:	429a      	cmp	r2, r3
 8005930:	d909      	bls.n	8005946 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005932:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593a:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005946:	4b47      	ldr	r3, [pc, #284]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f023 0203 	bic.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4944      	ldr	r1, [pc, #272]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005954:	4313      	orrs	r3, r2
 8005956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005958:	f7fd fae6 	bl	8002f28 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595e:	e00a      	b.n	8005976 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005960:	f7fd fae2 	bl	8002f28 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e070      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 020c 	and.w	r2, r3, #12
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	429a      	cmp	r2, r3
 8005986:	d1eb      	bne.n	8005960 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4930      	ldr	r1, [pc, #192]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
 80059a6:	e008      	b.n	80059ba <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d105      	bne.n	80059ba <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059ae:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80059b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ba:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d210      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 020f 	bic.w	r2, r3, #15
 80059d0:	4923      	ldr	r1, [pc, #140]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_RCC_ClockConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d001      	beq.n	80059ea <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e036      	b.n	8005a58 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f6:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4918      	ldr	r1, [pc, #96]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a14:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4910      	ldr	r1, [pc, #64]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a28:	f000 f826 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <HAL_RCC_ClockConfig+0x244>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	4a0c      	ldr	r2, [pc, #48]	; (8005a6c <HAL_RCC_ClockConfig+0x24c>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	fa21 f303 	lsr.w	r3, r1, r3
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_RCC_ClockConfig+0x250>)
 8005a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCC_ClockConfig+0x254>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd fa1b 	bl	8002e88 <HAL_InitTick>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40022000 	.word	0x40022000
 8005a64:	40021000 	.word	0x40021000
 8005a68:	04c4b400 	.word	0x04c4b400
 8005a6c:	080086dc 	.word	0x080086dc
 8005a70:	20000038 	.word	0x20000038
 8005a74:	2000003c 	.word	0x2000003c

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a86:	4b3d      	ldr	r3, [pc, #244]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a90:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d121      	bne.n	8005aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d11e      	bne.n	8005aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005aac:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ab8:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ac8:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d102      	bne.n	8005af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005af0:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e004      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005afc:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8005afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d133      	bne.n	8005b6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b06:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d002      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa4>
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d003      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0xaa>
 8005b1a:	e005      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b1e:	617b      	str	r3, [r7, #20]
      break;
 8005b20:	e005      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b24:	617b      	str	r3, [r7, #20]
      break;
 8005b26:	e002      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	617b      	str	r3, [r7, #20]
      break;
 8005b2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	3301      	adds	r3, #1
 8005b3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	fb02 f203 	mul.w	r2, r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x104>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	0e5b      	lsrs	r3, r3, #25
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3724      	adds	r7, #36	; 0x24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	080086f4 	.word	0x080086f4
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	007a1200 	.word	0x007a1200

08005b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000038 	.word	0x20000038

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ba8:	f7ff fff0 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bac:	4601      	mov	r1, r0
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	080086ec 	.word	0x080086ec

08005bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bd4:	f7ff ffda 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	0adb      	lsrs	r3, r3, #11
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005be6:	5cd3      	ldrb	r3, [r2, r3]
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	080086ec 	.word	0x080086ec

08005bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c14:	f7ff f91a 	bl	8004e4c <HAL_PWREx_GetVoltageRange>
 8005c18:	6178      	str	r0, [r7, #20]
 8005c1a:	e014      	b.n	8005c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6593      	str	r3, [r2, #88]	; 0x58
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c34:	f7ff f90a 	bl	8004e4c <HAL_PWREx_GetVoltageRange>
 8005c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4c:	d10b      	bne.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d913      	bls.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2ba0      	cmp	r3, #160	; 0xa0
 8005c58:	d902      	bls.n	8005c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	e00d      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c60:	2301      	movs	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e00a      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6a:	d902      	bls.n	8005c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e004      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d101      	bne.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c78:	2301      	movs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 020f 	bic.w	r2, r3, #15
 8005c84:	4909      	ldr	r1, [pc, #36]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d001      	beq.n	8005c9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40022000 	.word	0x40022000

08005cb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005cba:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d118      	bne.n	8005cf8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cd2:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e005      	b.n	8005cee <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cee:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d002      	beq.n	8005d0e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d003      	beq.n	8005d14 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005d0c:	e005      	b.n	8005d1a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d10:	613b      	str	r3, [r7, #16]
    break;
 8005d12:	e005      	b.n	8005d20 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005d16:	613b      	str	r3, [r7, #16]
    break;
 8005d18:	e002      	b.n	8005d20 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	613b      	str	r3, [r7, #16]
    break;
 8005d1e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	fb02 f203 	mul.w	r2, r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	0e5b      	lsrs	r3, r3, #25
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	3301      	adds	r3, #1
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d60:	683b      	ldr	r3, [r7, #0]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	080086f4 	.word	0x080086f4
 8005d78:	00f42400 	.word	0x00f42400
 8005d7c:	007a1200 	.word	0x007a1200

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03d      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d00b      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d804      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d015      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005db0:	e01d      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005db2:	2b60      	cmp	r3, #96	; 0x60
 8005db4:	d01e      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d01c      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dba:	e018      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dbc:	4b86      	ldr	r3, [pc, #536]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4a85      	ldr	r2, [pc, #532]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dc8:	e015      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fafd 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dda:	e00c      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3320      	adds	r3, #32
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fbe4 	bl	80065b0 <RCCEx_PLLSAI2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dec:	e003      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	74fb      	strb	r3, [r7, #19]
      break;
 8005df2:	e000      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10b      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dfc:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e02:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	4973      	ldr	r1, [pc, #460]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
 8005e16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d042      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2c:	d00f      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e32:	d805      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d011      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3c:	d017      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005e3e:	e01f      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e44:	d01f      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d01c      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e4c:	e018      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e4e:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4a61      	ldr	r2, [pc, #388]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e5a:	e015      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fab4 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e6c:	e00c      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3320      	adds	r3, #32
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fb9b 	bl	80065b0 <RCCEx_PLLSAI2_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e7e:	e003      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	74fb      	strb	r3, [r7, #19]
      break;
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8005e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e88:	7cfb      	ldrb	r3, [r7, #19]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e8e:	4b52      	ldr	r3, [pc, #328]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9c:	494e      	ldr	r1, [pc, #312]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ea4:	e001      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	7cfb      	ldrb	r3, [r7, #19]
 8005ea8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 809f 	beq.w	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ebc:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	4a40      	ldr	r2, [pc, #256]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005edc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ede:	4b3e      	ldr	r3, [pc, #248]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eea:	2301      	movs	r3, #1
 8005eec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eee:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3a      	ldr	r2, [pc, #232]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005efa:	f7fd f815 	bl	8002f28 <HAL_GetTick>
 8005efe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f00:	e009      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fd f811 	bl	8002f28 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d902      	bls.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	74fb      	strb	r3, [r7, #19]
        break;
 8005f14:	e005      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f16:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ef      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005f22:	7cfb      	ldrb	r3, [r7, #19]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d15b      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01f      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d019      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f52:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f72:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d016      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fc ffd0 	bl	8002f28 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f8a:	e00b      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8c:	f7fc ffcc 	bl	8002f28 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d902      	bls.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	74fb      	strb	r3, [r7, #19]
            break;
 8005fa2:	e006      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0ec      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	74bb      	strb	r3, [r7, #18]
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe4:	7c7b      	ldrb	r3, [r7, #17]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d105      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fea:	4ba0      	ldr	r3, [pc, #640]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	4a9f      	ldr	r2, [pc, #636]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006002:	4b9a      	ldr	r3, [pc, #616]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	f023 0203 	bic.w	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	4996      	ldr	r1, [pc, #600]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006024:	4b91      	ldr	r3, [pc, #580]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f023 020c 	bic.w	r2, r3, #12
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	498e      	ldr	r1, [pc, #568]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006046:	4b89      	ldr	r3, [pc, #548]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006054:	4985      	ldr	r1, [pc, #532]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006068:	4b80      	ldr	r3, [pc, #512]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006076:	497d      	ldr	r1, [pc, #500]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800608a:	4b78      	ldr	r3, [pc, #480]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	4974      	ldr	r1, [pc, #464]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ac:	4b6f      	ldr	r3, [pc, #444]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	496c      	ldr	r1, [pc, #432]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060ce:	4b67      	ldr	r3, [pc, #412]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	4963      	ldr	r1, [pc, #396]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060f0:	4b5e      	ldr	r3, [pc, #376]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fe:	495b      	ldr	r1, [pc, #364]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006112:	4b56      	ldr	r3, [pc, #344]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	4952      	ldr	r1, [pc, #328]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006134:	4b4d      	ldr	r3, [pc, #308]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	494a      	ldr	r1, [pc, #296]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	4941      	ldr	r1, [pc, #260]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006178:	4b3c      	ldr	r3, [pc, #240]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800617e:	f023 0203 	bic.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006186:	4939      	ldr	r1, [pc, #228]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d028      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a8:	4930      	ldr	r1, [pc, #192]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b8:	d106      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4a2b      	ldr	r2, [pc, #172]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c4:	60d3      	str	r3, [r2, #12]
 80061c6:	e011      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061d0:	d10c      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	2101      	movs	r1, #1
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f8f9 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04d      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006200:	d108      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006202:	4b1a      	ldr	r3, [pc, #104]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800620e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006212:	e012      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006214:	4b15      	ldr	r3, [pc, #84]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006220:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006232:	490e      	ldr	r1, [pc, #56]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006242:	d106      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006244:	4b09      	ldr	r3, [pc, #36]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a08      	ldr	r2, [pc, #32]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800624e:	60d3      	str	r3, [r2, #12]
 8006250:	e020      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800625a:	d109      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a02      	ldr	r2, [pc, #8]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006266:	60d3      	str	r3, [r2, #12]
 8006268:	e014      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006278:	d10c      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3304      	adds	r3, #4
 800627e:	2101      	movs	r1, #1
 8006280:	4618      	mov	r0, r3
 8006282:	f000 f8a5 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800628a:	7cfb      	ldrb	r3, [r7, #19]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d028      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a0:	4b4a      	ldr	r3, [pc, #296]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ae:	4947      	ldr	r1, [pc, #284]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062be:	d106      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c0:	4b42      	ldr	r3, [pc, #264]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a41      	ldr	r2, [pc, #260]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ca:	60d3      	str	r3, [r2, #12]
 80062cc:	e011      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d6:	d10c      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2101      	movs	r1, #1
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f876 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80062ee:	7cfb      	ldrb	r3, [r7, #19]
 80062f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01e      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062fe:	4b33      	ldr	r3, [pc, #204]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630e:	492f      	ldr	r1, [pc, #188]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006320:	d10c      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3304      	adds	r3, #4
 8006326:	2102      	movs	r1, #2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f851 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006332:	7cfb      	ldrb	r3, [r7, #19]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800634a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800634e:	f023 0204 	bic.w	r2, r3, #4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006358:	491c      	ldr	r1, [pc, #112]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800636e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006372:	f023 0218 	bic.w	r2, r3, #24
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637c:	4913      	ldr	r1, [pc, #76]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d017      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006390:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a0:	490a      	ldr	r1, [pc, #40]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063b2:	d105      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a04      	ldr	r2, [pc, #16]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40021000 	.word	0x40021000

080063d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063de:	4b70      	ldr	r3, [pc, #448]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063ea:	4b6d      	ldr	r3, [pc, #436]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0203 	and.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d103      	bne.n	8006402 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
       ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d13f      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e03c      	b.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d00c      	beq.n	800642a <RCCEx_PLLSAI1_Config+0x5a>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d013      	beq.n	800643c <RCCEx_PLLSAI1_Config+0x6c>
 8006414:	2b01      	cmp	r3, #1
 8006416:	d120      	bne.n	800645a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006418:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006428:	e01a      	b.n	8006460 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800642a:	4b5d      	ldr	r3, [pc, #372]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006432:	2b00      	cmp	r3, #0
 8006434:	d116      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643a:	e013      	b.n	8006464 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800643c:	4b58      	ldr	r3, [pc, #352]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10f      	bne.n	8006468 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006448:	4b55      	ldr	r3, [pc, #340]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006458:	e006      	b.n	8006468 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
      break;
 800645e:	e004      	b.n	800646a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006468:	bf00      	nop
    }

    if(status == HAL_OK)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f023 0203 	bic.w	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4948      	ldr	r1, [pc, #288]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800647e:	4313      	orrs	r3, r2
 8006480:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 8086 	bne.w	8006596 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800648a:	4b45      	ldr	r3, [pc, #276]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a44      	ldr	r2, [pc, #272]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006496:	f7fc fd47 	bl	8002f28 <HAL_GetTick>
 800649a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800649c:	e009      	b.n	80064b2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800649e:	f7fc fd43 	bl	8002f28 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d902      	bls.n	80064b2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	73fb      	strb	r3, [r7, #15]
        break;
 80064b0:	e005      	b.n	80064be <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064b2:	4b3b      	ldr	r3, [pc, #236]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1ef      	bne.n	800649e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d168      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d113      	bne.n	80064f2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ca:	4b35      	ldr	r3, [pc, #212]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6892      	ldr	r2, [r2, #8]
 80064d6:	0211      	lsls	r1, r2, #8
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68d2      	ldr	r2, [r2, #12]
 80064dc:	06d2      	lsls	r2, r2, #27
 80064de:	4311      	orrs	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	3a01      	subs	r2, #1
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	430a      	orrs	r2, r1
 80064ea:	492d      	ldr	r1, [pc, #180]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]
 80064f0:	e02d      	b.n	800654e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d115      	bne.n	8006524 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f8:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064fe:	4013      	ands	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6892      	ldr	r2, [r2, #8]
 8006504:	0211      	lsls	r1, r2, #8
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6912      	ldr	r2, [r2, #16]
 800650a:	0852      	lsrs	r2, r2, #1
 800650c:	3a01      	subs	r2, #1
 800650e:	0552      	lsls	r2, r2, #21
 8006510:	4311      	orrs	r1, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6852      	ldr	r2, [r2, #4]
 8006516:	3a01      	subs	r2, #1
 8006518:	0112      	lsls	r2, r2, #4
 800651a:	430a      	orrs	r2, r1
 800651c:	4920      	ldr	r1, [pc, #128]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
 8006522:	e014      	b.n	800654e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800652a:	4013      	ands	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6892      	ldr	r2, [r2, #8]
 8006530:	0211      	lsls	r1, r2, #8
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6952      	ldr	r2, [r2, #20]
 8006536:	0852      	lsrs	r2, r2, #1
 8006538:	3a01      	subs	r2, #1
 800653a:	0652      	lsls	r2, r2, #25
 800653c:	4311      	orrs	r1, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6852      	ldr	r2, [r2, #4]
 8006542:	3a01      	subs	r2, #1
 8006544:	0112      	lsls	r2, r2, #4
 8006546:	430a      	orrs	r2, r1
 8006548:	4915      	ldr	r1, [pc, #84]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800654a:	4313      	orrs	r3, r2
 800654c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006558:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655a:	f7fc fce5 	bl	8002f28 <HAL_GetTick>
 800655e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006560:	e009      	b.n	8006576 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006562:	f7fc fce1 	bl	8002f28 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d902      	bls.n	8006576 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	73fb      	strb	r3, [r7, #15]
          break;
 8006574:	e005      	b.n	8006582 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006576:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ef      	beq.n	8006562 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4903      	ldr	r1, [pc, #12]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006592:	4313      	orrs	r3, r2
 8006594:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40021000 	.word	0x40021000
 80065a4:	07ff800f 	.word	0x07ff800f
 80065a8:	ff9f800f 	.word	0xff9f800f
 80065ac:	f9ff800f 	.word	0xf9ff800f

080065b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065be:	4b70      	ldr	r3, [pc, #448]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065ca:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0203 	and.w	r2, r3, #3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d103      	bne.n	80065e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
       ||
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d13f      	bne.n	8006662 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	e03c      	b.n	8006662 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d00c      	beq.n	800660a <RCCEx_PLLSAI2_Config+0x5a>
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d013      	beq.n	800661c <RCCEx_PLLSAI2_Config+0x6c>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d120      	bne.n	800663a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11d      	bne.n	8006640 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006608:	e01a      	b.n	8006640 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800660a:	4b5d      	ldr	r3, [pc, #372]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006612:	2b00      	cmp	r3, #0
 8006614:	d116      	bne.n	8006644 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800661a:	e013      	b.n	8006644 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800661c:	4b58      	ldr	r3, [pc, #352]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10f      	bne.n	8006648 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006628:	4b55      	ldr	r3, [pc, #340]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006638:	e006      	b.n	8006648 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
      break;
 800663e:	e004      	b.n	800664a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006648:	bf00      	nop
    }

    if(status == HAL_OK)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006650:	4b4b      	ldr	r3, [pc, #300]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f023 0203 	bic.w	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4948      	ldr	r1, [pc, #288]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 8086 	bne.w	8006776 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800666a:	4b45      	ldr	r3, [pc, #276]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a44      	ldr	r2, [pc, #272]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006676:	f7fc fc57 	bl	8002f28 <HAL_GetTick>
 800667a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800667c:	e009      	b.n	8006692 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800667e:	f7fc fc53 	bl	8002f28 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d902      	bls.n	8006692 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	73fb      	strb	r3, [r7, #15]
        break;
 8006690:	e005      	b.n	800669e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006692:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ef      	bne.n	800667e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d168      	bne.n	8006776 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d113      	bne.n	80066d2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066aa:	4b35      	ldr	r3, [pc, #212]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	4b35      	ldr	r3, [pc, #212]	; (8006784 <RCCEx_PLLSAI2_Config+0x1d4>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6892      	ldr	r2, [r2, #8]
 80066b6:	0211      	lsls	r1, r2, #8
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68d2      	ldr	r2, [r2, #12]
 80066bc:	06d2      	lsls	r2, r2, #27
 80066be:	4311      	orrs	r1, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6852      	ldr	r2, [r2, #4]
 80066c4:	3a01      	subs	r2, #1
 80066c6:	0112      	lsls	r2, r2, #4
 80066c8:	430a      	orrs	r2, r1
 80066ca:	492d      	ldr	r1, [pc, #180]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	614b      	str	r3, [r1, #20]
 80066d0:	e02d      	b.n	800672e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d115      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066d8:	4b29      	ldr	r3, [pc, #164]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066de:	4013      	ands	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6892      	ldr	r2, [r2, #8]
 80066e4:	0211      	lsls	r1, r2, #8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6912      	ldr	r2, [r2, #16]
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6852      	ldr	r2, [r2, #4]
 80066f6:	3a01      	subs	r2, #1
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	430a      	orrs	r2, r1
 80066fc:	4920      	ldr	r1, [pc, #128]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	614b      	str	r3, [r1, #20]
 8006702:	e014      	b.n	800672e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006706:	695a      	ldr	r2, [r3, #20]
 8006708:	4b20      	ldr	r3, [pc, #128]	; (800678c <RCCEx_PLLSAI2_Config+0x1dc>)
 800670a:	4013      	ands	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6892      	ldr	r2, [r2, #8]
 8006710:	0211      	lsls	r1, r2, #8
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6952      	ldr	r2, [r2, #20]
 8006716:	0852      	lsrs	r2, r2, #1
 8006718:	3a01      	subs	r2, #1
 800671a:	0652      	lsls	r2, r2, #25
 800671c:	4311      	orrs	r1, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6852      	ldr	r2, [r2, #4]
 8006722:	3a01      	subs	r2, #1
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	430a      	orrs	r2, r1
 8006728:	4915      	ldr	r1, [pc, #84]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673a:	f7fc fbf5 	bl	8002f28 <HAL_GetTick>
 800673e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006740:	e009      	b.n	8006756 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006742:	f7fc fbf1 	bl	8002f28 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d902      	bls.n	8006756 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	73fb      	strb	r3, [r7, #15]
          break;
 8006754:	e005      	b.n	8006762 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0ef      	beq.n	8006742 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800676a:	695a      	ldr	r2, [r3, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	4903      	ldr	r1, [pc, #12]	; (8006780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006772:	4313      	orrs	r3, r2
 8006774:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40021000 	.word	0x40021000
 8006784:	07ff800f 	.word	0x07ff800f
 8006788:	ff9f800f 	.word	0xff9f800f
 800678c:	f9ff800f 	.word	0xf9ff800f

08006790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e049      	b.n	8006836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fc fa12 	bl	8002be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f000 fab0 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e04f      	b.n	80068f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <HAL_TIM_Base_Start_IT+0xc4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01d      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006882:	d018      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_TIM_Base_Start_IT+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_TIM_Base_Start_IT+0xcc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <HAL_TIM_Base_Start_IT+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIM_Base_Start_IT+0xd4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_TIM_Base_Start_IT+0xd8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d115      	bne.n	80068e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	4b17      	ldr	r3, [pc, #92]	; (800691c <HAL_TIM_Base_Start_IT+0xdc>)
 80068be:	4013      	ands	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d015      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ce:	d011      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e0:	e008      	b.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e000      	b.n	80068f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40013400 	.word	0x40013400
 8006918:	40014000 	.word	0x40014000
 800691c:	00010007 	.word	0x00010007

08006920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0202 	mvn.w	r2, #2
 800694c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9c8 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9ba 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9cb 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0204 	mvn.w	r2, #4
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f99e 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f990 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9a1 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0208 	mvn.w	r2, #8
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f974 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f966 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f977 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d122      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0210 	mvn.w	r2, #16
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f94a 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f93c 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f94d 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0201 	mvn.w	r2, #1
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f916 	bl	8006cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 faf8 	bl	80070c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 faeb 	bl	80070d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f8fb 	bl	8006d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f06f 0220 	mvn.w	r2, #32
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 faab 	bl	80070ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_ConfigClockSource+0x18>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e0a8      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x16a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d067      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x124>
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d80b      	bhi.n	8006bce <HAL_TIM_ConfigClockSource+0x70>
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d073      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x144>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d802      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x66>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d06f      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bc2:	e078      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d06c      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x144>
 8006bc8:	2b30      	cmp	r3, #48	; 0x30
 8006bca:	d06a      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006bcc:	e073      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006bce:	2b70      	cmp	r3, #112	; 0x70
 8006bd0:	d00d      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x90>
 8006bd2:	2b70      	cmp	r3, #112	; 0x70
 8006bd4:	d804      	bhi.n	8006be0 <HAL_TIM_ConfigClockSource+0x82>
 8006bd6:	2b50      	cmp	r3, #80	; 0x50
 8006bd8:	d033      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0xe4>
 8006bda:	2b60      	cmp	r3, #96	; 0x60
 8006bdc:	d041      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006bde:	e06a      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be4:	d066      	beq.n	8006cb4 <HAL_TIM_ConfigClockSource+0x156>
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bea:	d017      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006bec:	e063      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6899      	ldr	r1, [r3, #8]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f000 f9ad 	bl	8006f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	609a      	str	r2, [r3, #8]
      break;
 8006c1a:	e04c      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6899      	ldr	r1, [r3, #8]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f000 f996 	bl	8006f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3e:	609a      	str	r2, [r3, #8]
      break;
 8006c40:	e039      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 f90a 	bl	8006e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2150      	movs	r1, #80	; 0x50
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f963 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 8006c60:	e029      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 f929 	bl	8006ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2160      	movs	r1, #96	; 0x60
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f953 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 8006c80:	e019      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f000 f8ea 	bl	8006e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2140      	movs	r1, #64	; 0x40
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f943 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 8006ca0:	e009      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f000 f93a 	bl	8006f26 <TIM_ITRx_SetConfig>
        break;
 8006cb2:	e000      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006cb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a40      	ldr	r2, [pc, #256]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a3d      	ldr	r2, [pc, #244]	; (8006e4c <TIM_Base_SetConfig+0x118>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a3c      	ldr	r2, [pc, #240]	; (8006e50 <TIM_Base_SetConfig+0x11c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a3b      	ldr	r2, [pc, #236]	; (8006e54 <TIM_Base_SetConfig+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a3a      	ldr	r2, [pc, #232]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01f      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d01b      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <TIM_Base_SetConfig+0x118>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d017      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <TIM_Base_SetConfig+0x11c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <TIM_Base_SetConfig+0x120>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <TIM_Base_SetConfig+0x128>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_Base_SetConfig+0x9a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <TIM_Base_SetConfig+0x130>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d108      	bne.n	8006de0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00f      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00b      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <TIM_Base_SetConfig+0x128>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d007      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a10      	ldr	r2, [pc, #64]	; (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a0f      	ldr	r2, [pc, #60]	; (8006e64 <TIM_Base_SetConfig+0x130>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	615a      	str	r2, [r3, #20]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800

08006e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f023 0201 	bic.w	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 030a 	bic.w	r3, r3, #10
 8006ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b087      	sub	sp, #28
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0210 	bic.w	r2, r3, #16
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	031b      	lsls	r3, r3, #12
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f043 0307 	orr.w	r3, r3, #7
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	021a      	lsls	r2, r3, #8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e068      	b.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2e      	ldr	r2, [pc, #184]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2d      	ldr	r2, [pc, #180]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d108      	bne.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007026:	d018      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1b      	ldr	r2, [pc, #108]	; (800709c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1a      	ldr	r2, [pc, #104]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10c      	bne.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4313      	orrs	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40014000 	.word	0x40014000

080070ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e042      	b.n	8007180 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7fb fd8b 	bl	8002c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2224      	movs	r2, #36	; 0x24
 8007116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8c4 	bl	80072b8 <UART_SetConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e022      	b.n	8007180 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fb8a 	bl	800785c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc11 	bl	80079a0 <UART_CheckIdleState>
 800717e:	4603      	mov	r3, r0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719e:	2b20      	cmp	r3, #32
 80071a0:	f040 8084 	bne.w	80072ac <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_UART_Transmit+0x28>
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e07c      	b.n	80072ae <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_UART_Transmit+0x3a>
 80071be:	2302      	movs	r3, #2
 80071c0:	e075      	b.n	80072ae <HAL_UART_Transmit+0x126>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2221      	movs	r2, #33	; 0x21
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80071da:	f7fb fea5 	bl	8002f28 <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	88fa      	ldrh	r2, [r7, #6]
 80071e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	88fa      	ldrh	r2, [r7, #6]
 80071ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d108      	bne.n	800720c <HAL_UART_Transmit+0x84>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	e003      	b.n	8007214 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800721c:	e02d      	b.n	800727a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2200      	movs	r2, #0
 8007226:	2180      	movs	r1, #128	; 0x80
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fc01 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e03a      	b.n	80072ae <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	881a      	ldrh	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724a:	b292      	uxth	r2, r2
 800724c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3302      	adds	r3, #2
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e008      	b.n	8007268 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	b292      	uxth	r2, r2
 8007260:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1cb      	bne.n	800721e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2200      	movs	r2, #0
 800728e:	2140      	movs	r1, #64	; 0x40
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fbcd 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e006      	b.n	80072ae <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80072bc:	b088      	sub	sp, #32
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	4313      	orrs	r3, r2
 80072dc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4bb1      	ldr	r3, [pc, #708]	; (80075b4 <UART_SetConfig+0x2fc>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	69f9      	ldr	r1, [r7, #28]
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4aa6      	ldr	r2, [pc, #664]	; (80075b8 <UART_SetConfig+0x300>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	4313      	orrs	r3, r2
 800732a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007336:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	430b      	orrs	r3, r1
 8007342:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	f023 010f 	bic.w	r1, r3, #15
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a97      	ldr	r2, [pc, #604]	; (80075bc <UART_SetConfig+0x304>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d121      	bne.n	80073a8 <UART_SetConfig+0xf0>
 8007364:	4b96      	ldr	r3, [pc, #600]	; (80075c0 <UART_SetConfig+0x308>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b03      	cmp	r3, #3
 8007370:	d816      	bhi.n	80073a0 <UART_SetConfig+0xe8>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0xc0>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	08007389 	.word	0x08007389
 800737c:	08007395 	.word	0x08007395
 8007380:	0800738f 	.word	0x0800738f
 8007384:	0800739b 	.word	0x0800739b
 8007388:	2301      	movs	r3, #1
 800738a:	76fb      	strb	r3, [r7, #27]
 800738c:	e0e8      	b.n	8007560 <UART_SetConfig+0x2a8>
 800738e:	2302      	movs	r3, #2
 8007390:	76fb      	strb	r3, [r7, #27]
 8007392:	e0e5      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007394:	2304      	movs	r3, #4
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e0e2      	b.n	8007560 <UART_SetConfig+0x2a8>
 800739a:	2308      	movs	r3, #8
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e0df      	b.n	8007560 <UART_SetConfig+0x2a8>
 80073a0:	2310      	movs	r3, #16
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	bf00      	nop
 80073a6:	e0db      	b.n	8007560 <UART_SetConfig+0x2a8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a85      	ldr	r2, [pc, #532]	; (80075c4 <UART_SetConfig+0x30c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d134      	bne.n	800741c <UART_SetConfig+0x164>
 80073b2:	4b83      	ldr	r3, [pc, #524]	; (80075c0 <UART_SetConfig+0x308>)
 80073b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	d829      	bhi.n	8007414 <UART_SetConfig+0x15c>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <UART_SetConfig+0x110>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073fd 	.word	0x080073fd
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007415 	.word	0x08007415
 80073d4:	08007415 	.word	0x08007415
 80073d8:	08007409 	.word	0x08007409
 80073dc:	08007415 	.word	0x08007415
 80073e0:	08007415 	.word	0x08007415
 80073e4:	08007415 	.word	0x08007415
 80073e8:	08007403 	.word	0x08007403
 80073ec:	08007415 	.word	0x08007415
 80073f0:	08007415 	.word	0x08007415
 80073f4:	08007415 	.word	0x08007415
 80073f8:	0800740f 	.word	0x0800740f
 80073fc:	2300      	movs	r3, #0
 80073fe:	76fb      	strb	r3, [r7, #27]
 8007400:	e0ae      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007402:	2302      	movs	r3, #2
 8007404:	76fb      	strb	r3, [r7, #27]
 8007406:	e0ab      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007408:	2304      	movs	r3, #4
 800740a:	76fb      	strb	r3, [r7, #27]
 800740c:	e0a8      	b.n	8007560 <UART_SetConfig+0x2a8>
 800740e:	2308      	movs	r3, #8
 8007410:	76fb      	strb	r3, [r7, #27]
 8007412:	e0a5      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007414:	2310      	movs	r3, #16
 8007416:	76fb      	strb	r3, [r7, #27]
 8007418:	bf00      	nop
 800741a:	e0a1      	b.n	8007560 <UART_SetConfig+0x2a8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a69      	ldr	r2, [pc, #420]	; (80075c8 <UART_SetConfig+0x310>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d120      	bne.n	8007468 <UART_SetConfig+0x1b0>
 8007426:	4b66      	ldr	r3, [pc, #408]	; (80075c0 <UART_SetConfig+0x308>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007430:	2b10      	cmp	r3, #16
 8007432:	d00f      	beq.n	8007454 <UART_SetConfig+0x19c>
 8007434:	2b10      	cmp	r3, #16
 8007436:	d802      	bhi.n	800743e <UART_SetConfig+0x186>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <UART_SetConfig+0x190>
 800743c:	e010      	b.n	8007460 <UART_SetConfig+0x1a8>
 800743e:	2b20      	cmp	r3, #32
 8007440:	d005      	beq.n	800744e <UART_SetConfig+0x196>
 8007442:	2b30      	cmp	r3, #48	; 0x30
 8007444:	d009      	beq.n	800745a <UART_SetConfig+0x1a2>
 8007446:	e00b      	b.n	8007460 <UART_SetConfig+0x1a8>
 8007448:	2300      	movs	r3, #0
 800744a:	76fb      	strb	r3, [r7, #27]
 800744c:	e088      	b.n	8007560 <UART_SetConfig+0x2a8>
 800744e:	2302      	movs	r3, #2
 8007450:	76fb      	strb	r3, [r7, #27]
 8007452:	e085      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007454:	2304      	movs	r3, #4
 8007456:	76fb      	strb	r3, [r7, #27]
 8007458:	e082      	b.n	8007560 <UART_SetConfig+0x2a8>
 800745a:	2308      	movs	r3, #8
 800745c:	76fb      	strb	r3, [r7, #27]
 800745e:	e07f      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007460:	2310      	movs	r3, #16
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	bf00      	nop
 8007466:	e07b      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a57      	ldr	r2, [pc, #348]	; (80075cc <UART_SetConfig+0x314>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d120      	bne.n	80074b4 <UART_SetConfig+0x1fc>
 8007472:	4b53      	ldr	r3, [pc, #332]	; (80075c0 <UART_SetConfig+0x308>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d00f      	beq.n	80074a0 <UART_SetConfig+0x1e8>
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d802      	bhi.n	800748a <UART_SetConfig+0x1d2>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <UART_SetConfig+0x1dc>
 8007488:	e010      	b.n	80074ac <UART_SetConfig+0x1f4>
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d005      	beq.n	800749a <UART_SetConfig+0x1e2>
 800748e:	2bc0      	cmp	r3, #192	; 0xc0
 8007490:	d009      	beq.n	80074a6 <UART_SetConfig+0x1ee>
 8007492:	e00b      	b.n	80074ac <UART_SetConfig+0x1f4>
 8007494:	2300      	movs	r3, #0
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e062      	b.n	8007560 <UART_SetConfig+0x2a8>
 800749a:	2302      	movs	r3, #2
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e05f      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074a0:	2304      	movs	r3, #4
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e05c      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074a6:	2308      	movs	r3, #8
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e059      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074ac:	2310      	movs	r3, #16
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	bf00      	nop
 80074b2:	e055      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a45      	ldr	r2, [pc, #276]	; (80075d0 <UART_SetConfig+0x318>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d124      	bne.n	8007508 <UART_SetConfig+0x250>
 80074be:	4b40      	ldr	r3, [pc, #256]	; (80075c0 <UART_SetConfig+0x308>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074cc:	d012      	beq.n	80074f4 <UART_SetConfig+0x23c>
 80074ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d2:	d802      	bhi.n	80074da <UART_SetConfig+0x222>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <UART_SetConfig+0x230>
 80074d8:	e012      	b.n	8007500 <UART_SetConfig+0x248>
 80074da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074de:	d006      	beq.n	80074ee <UART_SetConfig+0x236>
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d009      	beq.n	80074fa <UART_SetConfig+0x242>
 80074e6:	e00b      	b.n	8007500 <UART_SetConfig+0x248>
 80074e8:	2300      	movs	r3, #0
 80074ea:	76fb      	strb	r3, [r7, #27]
 80074ec:	e038      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074ee:	2302      	movs	r3, #2
 80074f0:	76fb      	strb	r3, [r7, #27]
 80074f2:	e035      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074f4:	2304      	movs	r3, #4
 80074f6:	76fb      	strb	r3, [r7, #27]
 80074f8:	e032      	b.n	8007560 <UART_SetConfig+0x2a8>
 80074fa:	2308      	movs	r3, #8
 80074fc:	76fb      	strb	r3, [r7, #27]
 80074fe:	e02f      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007500:	2310      	movs	r3, #16
 8007502:	76fb      	strb	r3, [r7, #27]
 8007504:	bf00      	nop
 8007506:	e02b      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2a      	ldr	r2, [pc, #168]	; (80075b8 <UART_SetConfig+0x300>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d124      	bne.n	800755c <UART_SetConfig+0x2a4>
 8007512:	4b2b      	ldr	r3, [pc, #172]	; (80075c0 <UART_SetConfig+0x308>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800751c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007520:	d012      	beq.n	8007548 <UART_SetConfig+0x290>
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007526:	d802      	bhi.n	800752e <UART_SetConfig+0x276>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <UART_SetConfig+0x284>
 800752c:	e012      	b.n	8007554 <UART_SetConfig+0x29c>
 800752e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007532:	d006      	beq.n	8007542 <UART_SetConfig+0x28a>
 8007534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007538:	d009      	beq.n	800754e <UART_SetConfig+0x296>
 800753a:	e00b      	b.n	8007554 <UART_SetConfig+0x29c>
 800753c:	2300      	movs	r3, #0
 800753e:	76fb      	strb	r3, [r7, #27]
 8007540:	e00e      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007542:	2302      	movs	r3, #2
 8007544:	76fb      	strb	r3, [r7, #27]
 8007546:	e00b      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007548:	2304      	movs	r3, #4
 800754a:	76fb      	strb	r3, [r7, #27]
 800754c:	e008      	b.n	8007560 <UART_SetConfig+0x2a8>
 800754e:	2308      	movs	r3, #8
 8007550:	76fb      	strb	r3, [r7, #27]
 8007552:	e005      	b.n	8007560 <UART_SetConfig+0x2a8>
 8007554:	2310      	movs	r3, #16
 8007556:	76fb      	strb	r3, [r7, #27]
 8007558:	bf00      	nop
 800755a:	e001      	b.n	8007560 <UART_SetConfig+0x2a8>
 800755c:	2310      	movs	r3, #16
 800755e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <UART_SetConfig+0x300>)
 8007566:	4293      	cmp	r3, r2
 8007568:	f040 80a1 	bne.w	80076ae <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800756c:	7efb      	ldrb	r3, [r7, #27]
 800756e:	2b08      	cmp	r3, #8
 8007570:	d836      	bhi.n	80075e0 <UART_SetConfig+0x328>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x2c0>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075e1 	.word	0x080075e1
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075e1 	.word	0x080075e1
 8007588:	080075ab 	.word	0x080075ab
 800758c:	080075e1 	.word	0x080075e1
 8007590:	080075e1 	.word	0x080075e1
 8007594:	080075e1 	.word	0x080075e1
 8007598:	080075d9 	.word	0x080075d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759c:	f7fe fb02 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 80075a0:	6178      	str	r0, [r7, #20]
        break;
 80075a2:	e022      	b.n	80075ea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <UART_SetConfig+0x31c>)
 80075a6:	617b      	str	r3, [r7, #20]
        break;
 80075a8:	e01f      	b.n	80075ea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075aa:	f7fe fa65 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80075ae:	6178      	str	r0, [r7, #20]
        break;
 80075b0:	e01b      	b.n	80075ea <UART_SetConfig+0x332>
 80075b2:	bf00      	nop
 80075b4:	cfff69f3 	.word	0xcfff69f3
 80075b8:	40008000 	.word	0x40008000
 80075bc:	40013800 	.word	0x40013800
 80075c0:	40021000 	.word	0x40021000
 80075c4:	40004400 	.word	0x40004400
 80075c8:	40004800 	.word	0x40004800
 80075cc:	40004c00 	.word	0x40004c00
 80075d0:	40005000 	.word	0x40005000
 80075d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075dc:	617b      	str	r3, [r7, #20]
        break;
 80075de:	e004      	b.n	80075ea <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	76bb      	strb	r3, [r7, #26]
        break;
 80075e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 811d 	beq.w	800782c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	4a97      	ldr	r2, [pc, #604]	; (8007854 <UART_SetConfig+0x59c>)
 80075f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fc:	461a      	mov	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fbb3 f3f2 	udiv	r3, r3, r2
 8007604:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	4413      	add	r3, r2
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d305      	bcc.n	8007622 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	d902      	bls.n	8007628 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	76bb      	strb	r3, [r7, #26]
 8007626:	e101      	b.n	800782c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4618      	mov	r0, r3
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	4a87      	ldr	r2, [pc, #540]	; (8007854 <UART_SetConfig+0x59c>)
 8007636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	461a      	mov	r2, r3
 8007642:	4623      	mov	r3, r4
 8007644:	f7f9 fa4a 	bl	8000adc <__aeabi_uldivmod>
 8007648:	4603      	mov	r3, r0
 800764a:	460c      	mov	r4, r1
 800764c:	4619      	mov	r1, r3
 800764e:	4622      	mov	r2, r4
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	f04f 0400 	mov.w	r4, #0
 8007658:	0214      	lsls	r4, r2, #8
 800765a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800765e:	020b      	lsls	r3, r1, #8
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6852      	ldr	r2, [r2, #4]
 8007664:	0852      	lsrs	r2, r2, #1
 8007666:	4611      	mov	r1, r2
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	eb13 0b01 	adds.w	fp, r3, r1
 8007670:	eb44 0c02 	adc.w	ip, r4, r2
 8007674:	4658      	mov	r0, fp
 8007676:	4661      	mov	r1, ip
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f04f 0400 	mov.w	r4, #0
 8007680:	461a      	mov	r2, r3
 8007682:	4623      	mov	r3, r4
 8007684:	f7f9 fa2a 	bl	8000adc <__aeabi_uldivmod>
 8007688:	4603      	mov	r3, r0
 800768a:	460c      	mov	r4, r1
 800768c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007694:	d308      	bcc.n	80076a8 <UART_SetConfig+0x3f0>
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769c:	d204      	bcs.n	80076a8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	e0c1      	b.n	800782c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	76bb      	strb	r3, [r7, #26]
 80076ac:	e0be      	b.n	800782c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d164      	bne.n	8007782 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80076b8:	7efb      	ldrb	r3, [r7, #27]
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d827      	bhi.n	800770e <UART_SetConfig+0x456>
 80076be:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <UART_SetConfig+0x40c>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076f1 	.word	0x080076f1
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	0800770f 	.word	0x0800770f
 80076d4:	080076ff 	.word	0x080076ff
 80076d8:	0800770f 	.word	0x0800770f
 80076dc:	0800770f 	.word	0x0800770f
 80076e0:	0800770f 	.word	0x0800770f
 80076e4:	08007707 	.word	0x08007707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e8:	f7fe fa5c 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 80076ec:	6178      	str	r0, [r7, #20]
        break;
 80076ee:	e013      	b.n	8007718 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f0:	f7fe fa6e 	bl	8005bd0 <HAL_RCC_GetPCLK2Freq>
 80076f4:	6178      	str	r0, [r7, #20]
        break;
 80076f6:	e00f      	b.n	8007718 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f8:	4b57      	ldr	r3, [pc, #348]	; (8007858 <UART_SetConfig+0x5a0>)
 80076fa:	617b      	str	r3, [r7, #20]
        break;
 80076fc:	e00c      	b.n	8007718 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fe:	f7fe f9bb 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8007702:	6178      	str	r0, [r7, #20]
        break;
 8007704:	e008      	b.n	8007718 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770a:	617b      	str	r3, [r7, #20]
        break;
 800770c:	e004      	b.n	8007718 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	76bb      	strb	r3, [r7, #26]
        break;
 8007716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8086 	beq.w	800782c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4a4b      	ldr	r2, [pc, #300]	; (8007854 <UART_SetConfig+0x59c>)
 8007726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800772a:	461a      	mov	r2, r3
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007732:	005a      	lsls	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	441a      	add	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	b29b      	uxth	r3, r3
 8007746:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b0f      	cmp	r3, #15
 800774c:	d916      	bls.n	800777c <UART_SetConfig+0x4c4>
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007754:	d212      	bcs.n	800777c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f023 030f 	bic.w	r3, r3, #15
 800775e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	b29b      	uxth	r3, r3
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	b29a      	uxth	r2, r3
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	4313      	orrs	r3, r2
 8007770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	89fa      	ldrh	r2, [r7, #14]
 8007778:	60da      	str	r2, [r3, #12]
 800777a:	e057      	b.n	800782c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	76bb      	strb	r3, [r7, #26]
 8007780:	e054      	b.n	800782c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007782:	7efb      	ldrb	r3, [r7, #27]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d828      	bhi.n	80077da <UART_SetConfig+0x522>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <UART_SetConfig+0x4d8>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077c5 	.word	0x080077c5
 800779c:	080077db 	.word	0x080077db
 80077a0:	080077cb 	.word	0x080077cb
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077db 	.word	0x080077db
 80077ac:	080077db 	.word	0x080077db
 80077b0:	080077d3 	.word	0x080077d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b4:	f7fe f9f6 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 80077b8:	6178      	str	r0, [r7, #20]
        break;
 80077ba:	e013      	b.n	80077e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7fe fa08 	bl	8005bd0 <HAL_RCC_GetPCLK2Freq>
 80077c0:	6178      	str	r0, [r7, #20]
        break;
 80077c2:	e00f      	b.n	80077e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <UART_SetConfig+0x5a0>)
 80077c6:	617b      	str	r3, [r7, #20]
        break;
 80077c8:	e00c      	b.n	80077e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ca:	f7fe f955 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80077ce:	6178      	str	r0, [r7, #20]
        break;
 80077d0:	e008      	b.n	80077e4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d6:	617b      	str	r3, [r7, #20]
        break;
 80077d8:	e004      	b.n	80077e4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	76bb      	strb	r3, [r7, #26]
        break;
 80077e2:	bf00      	nop
    }

    if (pclk != 0U)
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d020      	beq.n	800782c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	4a19      	ldr	r2, [pc, #100]	; (8007854 <UART_SetConfig+0x59c>)
 80077f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f4:	461a      	mov	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	b29b      	uxth	r3, r3
 800780e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d908      	bls.n	8007828 <UART_SetConfig+0x570>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781c:	d204      	bcs.n	8007828 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	e001      	b.n	800782c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007848:	7ebb      	ldrb	r3, [r7, #26]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3720      	adds	r7, #32
 800784e:	46bd      	mov	sp, r7
 8007850:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007854:	08008724 	.word	0x08008724
 8007858:	00f42400 	.word	0x00f42400

0800785c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01a      	beq.n	8007972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795a:	d10a      	bne.n	8007972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	605a      	str	r2, [r3, #4]
  }
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80079b0:	f7fb faba 	bl	8002f28 <HAL_GetTick>
 80079b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d10e      	bne.n	80079e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f82c 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e022      	b.n	8007a28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d10e      	bne.n	8007a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f816 	bl	8007a30 <UART_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e00c      	b.n	8007a28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a40:	e062      	b.n	8007b08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d05e      	beq.n	8007b08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a4a:	f7fb fa6d 	bl	8002f28 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d11d      	bne.n	8007a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a6e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e045      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d02e      	beq.n	8007b08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab8:	d126      	bne.n	8007b08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ac2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ad2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0201 	bic.w	r2, r2, #1
 8007ae2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e00f      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69da      	ldr	r2, [r3, #28]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d08d      	beq.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e027      	b.n	8007b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2224      	movs	r2, #36	; 0x24
 8007b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e02d      	b.n	8007c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2224      	movs	r2, #36	; 0x24
 8007bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f850 	bl	8007c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d101      	bne.n	8007c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c32:	2302      	movs	r3, #2
 8007c34:	e02d      	b.n	8007c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2224      	movs	r2, #36	; 0x24
 8007c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f812 	bl	8007c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	; 0x24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007ca4:	4a2f      	ldr	r2, [pc, #188]	; (8007d64 <UARTEx_SetNbDataToProcess+0xc8>)
 8007ca6:	f107 0314 	add.w	r3, r7, #20
 8007caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007cb2:	4a2d      	ldr	r2, [pc, #180]	; (8007d68 <UARTEx_SetNbDataToProcess+0xcc>)
 8007cb4:	f107 030c 	add.w	r3, r7, #12
 8007cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cbc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d108      	bne.n	8007cda <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cd8:	e03d      	b.n	8007d56 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cda:	2308      	movs	r3, #8
 8007cdc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cde:	2308      	movs	r3, #8
 8007ce0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	0e5b      	lsrs	r3, r3, #25
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	0f5b      	lsrs	r3, r3, #29
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007d02:	7fbb      	ldrb	r3, [r7, #30]
 8007d04:	7f3a      	ldrb	r2, [r7, #28]
 8007d06:	f107 0120 	add.w	r1, r7, #32
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d10:	fb02 f303 	mul.w	r3, r2, r3
 8007d14:	7f3a      	ldrb	r2, [r7, #28]
 8007d16:	f107 0120 	add.w	r1, r7, #32
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007d2c:	7ffb      	ldrb	r3, [r7, #31]
 8007d2e:	7f7a      	ldrb	r2, [r7, #29]
 8007d30:	f107 0120 	add.w	r1, r7, #32
 8007d34:	440a      	add	r2, r1
 8007d36:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	7f7a      	ldrb	r2, [r7, #29]
 8007d40:	f107 0120 	add.w	r1, r7, #32
 8007d44:	440a      	add	r2, r1
 8007d46:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d56:	bf00      	nop
 8007d58:	3724      	adds	r7, #36	; 0x24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	080086cc 	.word	0x080086cc
 8007d68:	080086d4 	.word	0x080086d4

08007d6c <arm_sin_f32>:
 8007d6c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007dec <arm_sin_f32+0x80>
 8007d70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007d80:	d504      	bpl.n	8007d8c <arm_sin_f32+0x20>
 8007d82:	ee17 3a90 	vmov	r3, s15
 8007d86:	3b01      	subs	r3, #1
 8007d88:	ee07 3a90 	vmov	s15, r3
 8007d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007df0 <arm_sin_f32+0x84>
 8007d94:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d98:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007d9c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007da0:	ee17 3a90 	vmov	r3, s15
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007daa:	d21a      	bcs.n	8007de2 <arm_sin_f32+0x76>
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	1c59      	adds	r1, r3, #1
 8007db6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007dba:	4a0e      	ldr	r2, [pc, #56]	; (8007df4 <arm_sin_f32+0x88>)
 8007dbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007dc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007dc8:	ed93 7a00 	vldr	s14, [r3]
 8007dcc:	edd2 6a00 	vldr	s13, [r2]
 8007dd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007dd4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ddc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007de0:	4770      	bx	lr
 8007de2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007de6:	2101      	movs	r1, #1
 8007de8:	2300      	movs	r3, #0
 8007dea:	e7e6      	b.n	8007dba <arm_sin_f32+0x4e>
 8007dec:	3e22f983 	.word	0x3e22f983
 8007df0:	44000000 	.word	0x44000000
 8007df4:	0800873c 	.word	0x0800873c

08007df8 <__errno>:
 8007df8:	4b01      	ldr	r3, [pc, #4]	; (8007e00 <__errno+0x8>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000044 	.word	0x20000044

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4e0d      	ldr	r6, [pc, #52]	; (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	; (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1ba4      	subs	r4, r4, r6
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2500      	movs	r5, #0
 8007e10:	42a5      	cmp	r5, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4e0b      	ldr	r6, [pc, #44]	; (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	; (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 fc26 	bl	8008668 <_init>
 8007e1c:	1ba4      	subs	r4, r4, r6
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2500      	movs	r5, #0
 8007e22:	42a5      	cmp	r5, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e2c:	4798      	blx	r3
 8007e2e:	3501      	adds	r5, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e36:	4798      	blx	r3
 8007e38:	3501      	adds	r5, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08008f7c 	.word	0x08008f7c
 8007e40:	08008f7c 	.word	0x08008f7c
 8007e44:	08008f7c 	.word	0x08008f7c
 8007e48:	08008f80 	.word	0x08008f80

08007e4c <memset>:
 8007e4c:	4402      	add	r2, r0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d100      	bne.n	8007e56 <memset+0xa>
 8007e54:	4770      	bx	lr
 8007e56:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5a:	e7f9      	b.n	8007e50 <memset+0x4>

08007e5c <siprintf>:
 8007e5c:	b40e      	push	{r1, r2, r3}
 8007e5e:	b500      	push	{lr}
 8007e60:	b09c      	sub	sp, #112	; 0x70
 8007e62:	ab1d      	add	r3, sp, #116	; 0x74
 8007e64:	9002      	str	r0, [sp, #8]
 8007e66:	9006      	str	r0, [sp, #24]
 8007e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e6c:	4809      	ldr	r0, [pc, #36]	; (8007e94 <siprintf+0x38>)
 8007e6e:	9107      	str	r1, [sp, #28]
 8007e70:	9104      	str	r1, [sp, #16]
 8007e72:	4909      	ldr	r1, [pc, #36]	; (8007e98 <siprintf+0x3c>)
 8007e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e78:	9105      	str	r1, [sp, #20]
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	a902      	add	r1, sp, #8
 8007e80:	f000 f866 	bl	8007f50 <_svfiprintf_r>
 8007e84:	9b02      	ldr	r3, [sp, #8]
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	b01c      	add	sp, #112	; 0x70
 8007e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e90:	b003      	add	sp, #12
 8007e92:	4770      	bx	lr
 8007e94:	20000044 	.word	0x20000044
 8007e98:	ffff0208 	.word	0xffff0208

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	429e      	cmp	r6, r3
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	4699      	mov	r9, r3
 8007eac:	d837      	bhi.n	8007f1e <__ssputs_r+0x82>
 8007eae:	898a      	ldrh	r2, [r1, #12]
 8007eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb4:	d031      	beq.n	8007f1a <__ssputs_r+0x7e>
 8007eb6:	6825      	ldr	r5, [r4, #0]
 8007eb8:	6909      	ldr	r1, [r1, #16]
 8007eba:	1a6f      	subs	r7, r5, r1
 8007ebc:	6965      	ldr	r5, [r4, #20]
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ec8:	f109 0301 	add.w	r3, r9, #1
 8007ecc:	443b      	add	r3, r7
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	bf38      	it	cc
 8007ed2:	461d      	movcc	r5, r3
 8007ed4:	0553      	lsls	r3, r2, #21
 8007ed6:	d530      	bpl.n	8007f3a <__ssputs_r+0x9e>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f000 fb2b 	bl	8008534 <_malloc_r>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b950      	cbnz	r0, 8007ef8 <__ssputs_r+0x5c>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	f8ca 3000 	str.w	r3, [sl]
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	463a      	mov	r2, r7
 8007efa:	6921      	ldr	r1, [r4, #16]
 8007efc:	f000 faa8 	bl	8008450 <memcpy>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	6126      	str	r6, [r4, #16]
 8007f0e:	6165      	str	r5, [r4, #20]
 8007f10:	443e      	add	r6, r7
 8007f12:	1bed      	subs	r5, r5, r7
 8007f14:	6026      	str	r6, [r4, #0]
 8007f16:	60a5      	str	r5, [r4, #8]
 8007f18:	464e      	mov	r6, r9
 8007f1a:	454e      	cmp	r6, r9
 8007f1c:	d900      	bls.n	8007f20 <__ssputs_r+0x84>
 8007f1e:	464e      	mov	r6, r9
 8007f20:	4632      	mov	r2, r6
 8007f22:	4641      	mov	r1, r8
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	f000 fa9e 	bl	8008466 <memmove>
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	1b9b      	subs	r3, r3, r6
 8007f2e:	60a3      	str	r3, [r4, #8]
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	441e      	add	r6, r3
 8007f34:	6026      	str	r6, [r4, #0]
 8007f36:	2000      	movs	r0, #0
 8007f38:	e7dc      	b.n	8007ef4 <__ssputs_r+0x58>
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	f000 fb54 	bl	80085e8 <_realloc_r>
 8007f40:	4606      	mov	r6, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1e2      	bne.n	8007f0c <__ssputs_r+0x70>
 8007f46:	6921      	ldr	r1, [r4, #16]
 8007f48:	4650      	mov	r0, sl
 8007f4a:	f000 faa5 	bl	8008498 <_free_r>
 8007f4e:	e7c8      	b.n	8007ee2 <__ssputs_r+0x46>

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	461d      	mov	r5, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	061f      	lsls	r7, r3, #24
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	d50f      	bpl.n	8007f84 <_svfiprintf_r+0x34>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b96b      	cbnz	r3, 8007f84 <_svfiprintf_r+0x34>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f000 fae3 	bl	8008534 <_malloc_r>
 8007f6e:	6020      	str	r0, [r4, #0]
 8007f70:	6120      	str	r0, [r4, #16]
 8007f72:	b928      	cbnz	r0, 8007f80 <_svfiprintf_r+0x30>
 8007f74:	230c      	movs	r3, #12
 8007f76:	f8c8 3000 	str.w	r3, [r8]
 8007f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7e:	e0c8      	b.n	8008112 <_svfiprintf_r+0x1c2>
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	6163      	str	r3, [r4, #20]
 8007f84:	2300      	movs	r3, #0
 8007f86:	9309      	str	r3, [sp, #36]	; 0x24
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8e:	2330      	movs	r3, #48	; 0x30
 8007f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f94:	9503      	str	r5, [sp, #12]
 8007f96:	f04f 0b01 	mov.w	fp, #1
 8007f9a:	4637      	mov	r7, r6
 8007f9c:	463d      	mov	r5, r7
 8007f9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fa2:	b10b      	cbz	r3, 8007fa8 <_svfiprintf_r+0x58>
 8007fa4:	2b25      	cmp	r3, #37	; 0x25
 8007fa6:	d13e      	bne.n	8008026 <_svfiprintf_r+0xd6>
 8007fa8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007fac:	d00b      	beq.n	8007fc6 <_svfiprintf_r+0x76>
 8007fae:	4653      	mov	r3, sl
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	f7ff ff71 	bl	8007e9c <__ssputs_r>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f000 80a4 	beq.w	8008108 <_svfiprintf_r+0x1b8>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	4453      	add	r3, sl
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	783b      	ldrb	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 809d 	beq.w	8008108 <_svfiprintf_r+0x1b8>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	9307      	str	r3, [sp, #28]
 8007fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe2:	462f      	mov	r7, r5
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007fea:	4850      	ldr	r0, [pc, #320]	; (800812c <_svfiprintf_r+0x1dc>)
 8007fec:	f7f8 f908 	bl	8000200 <memchr>
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	b9d0      	cbnz	r0, 800802a <_svfiprintf_r+0xda>
 8007ff4:	06d9      	lsls	r1, r3, #27
 8007ff6:	bf44      	itt	mi
 8007ff8:	2220      	movmi	r2, #32
 8007ffa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ffe:	071a      	lsls	r2, r3, #28
 8008000:	bf44      	itt	mi
 8008002:	222b      	movmi	r2, #43	; 0x2b
 8008004:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008008:	782a      	ldrb	r2, [r5, #0]
 800800a:	2a2a      	cmp	r2, #42	; 0x2a
 800800c:	d015      	beq.n	800803a <_svfiprintf_r+0xea>
 800800e:	9a07      	ldr	r2, [sp, #28]
 8008010:	462f      	mov	r7, r5
 8008012:	2000      	movs	r0, #0
 8008014:	250a      	movs	r5, #10
 8008016:	4639      	mov	r1, r7
 8008018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800801c:	3b30      	subs	r3, #48	; 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d94d      	bls.n	80080be <_svfiprintf_r+0x16e>
 8008022:	b1b8      	cbz	r0, 8008054 <_svfiprintf_r+0x104>
 8008024:	e00f      	b.n	8008046 <_svfiprintf_r+0xf6>
 8008026:	462f      	mov	r7, r5
 8008028:	e7b8      	b.n	8007f9c <_svfiprintf_r+0x4c>
 800802a:	4a40      	ldr	r2, [pc, #256]	; (800812c <_svfiprintf_r+0x1dc>)
 800802c:	1a80      	subs	r0, r0, r2
 800802e:	fa0b f000 	lsl.w	r0, fp, r0
 8008032:	4318      	orrs	r0, r3
 8008034:	9004      	str	r0, [sp, #16]
 8008036:	463d      	mov	r5, r7
 8008038:	e7d3      	b.n	8007fe2 <_svfiprintf_r+0x92>
 800803a:	9a03      	ldr	r2, [sp, #12]
 800803c:	1d11      	adds	r1, r2, #4
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	9103      	str	r1, [sp, #12]
 8008042:	2a00      	cmp	r2, #0
 8008044:	db01      	blt.n	800804a <_svfiprintf_r+0xfa>
 8008046:	9207      	str	r2, [sp, #28]
 8008048:	e004      	b.n	8008054 <_svfiprintf_r+0x104>
 800804a:	4252      	negs	r2, r2
 800804c:	f043 0302 	orr.w	r3, r3, #2
 8008050:	9207      	str	r2, [sp, #28]
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	783b      	ldrb	r3, [r7, #0]
 8008056:	2b2e      	cmp	r3, #46	; 0x2e
 8008058:	d10c      	bne.n	8008074 <_svfiprintf_r+0x124>
 800805a:	787b      	ldrb	r3, [r7, #1]
 800805c:	2b2a      	cmp	r3, #42	; 0x2a
 800805e:	d133      	bne.n	80080c8 <_svfiprintf_r+0x178>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9203      	str	r2, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfb8      	it	lt
 800806c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008070:	3702      	adds	r7, #2
 8008072:	9305      	str	r3, [sp, #20]
 8008074:	4d2e      	ldr	r5, [pc, #184]	; (8008130 <_svfiprintf_r+0x1e0>)
 8008076:	7839      	ldrb	r1, [r7, #0]
 8008078:	2203      	movs	r2, #3
 800807a:	4628      	mov	r0, r5
 800807c:	f7f8 f8c0 	bl	8000200 <memchr>
 8008080:	b138      	cbz	r0, 8008092 <_svfiprintf_r+0x142>
 8008082:	2340      	movs	r3, #64	; 0x40
 8008084:	1b40      	subs	r0, r0, r5
 8008086:	fa03 f000 	lsl.w	r0, r3, r0
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	4303      	orrs	r3, r0
 800808e:	3701      	adds	r7, #1
 8008090:	9304      	str	r3, [sp, #16]
 8008092:	7839      	ldrb	r1, [r7, #0]
 8008094:	4827      	ldr	r0, [pc, #156]	; (8008134 <_svfiprintf_r+0x1e4>)
 8008096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800809a:	2206      	movs	r2, #6
 800809c:	1c7e      	adds	r6, r7, #1
 800809e:	f7f8 f8af 	bl	8000200 <memchr>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d038      	beq.n	8008118 <_svfiprintf_r+0x1c8>
 80080a6:	4b24      	ldr	r3, [pc, #144]	; (8008138 <_svfiprintf_r+0x1e8>)
 80080a8:	bb13      	cbnz	r3, 80080f0 <_svfiprintf_r+0x1a0>
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	3307      	adds	r3, #7
 80080ae:	f023 0307 	bic.w	r3, r3, #7
 80080b2:	3308      	adds	r3, #8
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	444b      	add	r3, r9
 80080ba:	9309      	str	r3, [sp, #36]	; 0x24
 80080bc:	e76d      	b.n	8007f9a <_svfiprintf_r+0x4a>
 80080be:	fb05 3202 	mla	r2, r5, r2, r3
 80080c2:	2001      	movs	r0, #1
 80080c4:	460f      	mov	r7, r1
 80080c6:	e7a6      	b.n	8008016 <_svfiprintf_r+0xc6>
 80080c8:	2300      	movs	r3, #0
 80080ca:	3701      	adds	r7, #1
 80080cc:	9305      	str	r3, [sp, #20]
 80080ce:	4619      	mov	r1, r3
 80080d0:	250a      	movs	r5, #10
 80080d2:	4638      	mov	r0, r7
 80080d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d8:	3a30      	subs	r2, #48	; 0x30
 80080da:	2a09      	cmp	r2, #9
 80080dc:	d903      	bls.n	80080e6 <_svfiprintf_r+0x196>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0c8      	beq.n	8008074 <_svfiprintf_r+0x124>
 80080e2:	9105      	str	r1, [sp, #20]
 80080e4:	e7c6      	b.n	8008074 <_svfiprintf_r+0x124>
 80080e6:	fb05 2101 	mla	r1, r5, r1, r2
 80080ea:	2301      	movs	r3, #1
 80080ec:	4607      	mov	r7, r0
 80080ee:	e7f0      	b.n	80080d2 <_svfiprintf_r+0x182>
 80080f0:	ab03      	add	r3, sp, #12
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	4622      	mov	r2, r4
 80080f6:	4b11      	ldr	r3, [pc, #68]	; (800813c <_svfiprintf_r+0x1ec>)
 80080f8:	a904      	add	r1, sp, #16
 80080fa:	4640      	mov	r0, r8
 80080fc:	f3af 8000 	nop.w
 8008100:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008104:	4681      	mov	r9, r0
 8008106:	d1d6      	bne.n	80080b6 <_svfiprintf_r+0x166>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	065b      	lsls	r3, r3, #25
 800810c:	f53f af35 	bmi.w	8007f7a <_svfiprintf_r+0x2a>
 8008110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008112:	b01d      	add	sp, #116	; 0x74
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4622      	mov	r2, r4
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <_svfiprintf_r+0x1ec>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4640      	mov	r0, r8
 8008124:	f000 f882 	bl	800822c <_printf_i>
 8008128:	e7ea      	b.n	8008100 <_svfiprintf_r+0x1b0>
 800812a:	bf00      	nop
 800812c:	08008f40 	.word	0x08008f40
 8008130:	08008f46 	.word	0x08008f46
 8008134:	08008f4a 	.word	0x08008f4a
 8008138:	00000000 	.word	0x00000000
 800813c:	08007e9d 	.word	0x08007e9d

08008140 <_printf_common>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	4691      	mov	r9, r2
 8008146:	461f      	mov	r7, r3
 8008148:	688a      	ldr	r2, [r1, #8]
 800814a:	690b      	ldr	r3, [r1, #16]
 800814c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008150:	4293      	cmp	r3, r2
 8008152:	bfb8      	it	lt
 8008154:	4613      	movlt	r3, r2
 8008156:	f8c9 3000 	str.w	r3, [r9]
 800815a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800815e:	4606      	mov	r6, r0
 8008160:	460c      	mov	r4, r1
 8008162:	b112      	cbz	r2, 800816a <_printf_common+0x2a>
 8008164:	3301      	adds	r3, #1
 8008166:	f8c9 3000 	str.w	r3, [r9]
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	0699      	lsls	r1, r3, #26
 800816e:	bf42      	ittt	mi
 8008170:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008174:	3302      	addmi	r3, #2
 8008176:	f8c9 3000 	strmi.w	r3, [r9]
 800817a:	6825      	ldr	r5, [r4, #0]
 800817c:	f015 0506 	ands.w	r5, r5, #6
 8008180:	d107      	bne.n	8008192 <_printf_common+0x52>
 8008182:	f104 0a19 	add.w	sl, r4, #25
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	f8d9 2000 	ldr.w	r2, [r9]
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	42ab      	cmp	r3, r5
 8008190:	dc28      	bgt.n	80081e4 <_printf_common+0xa4>
 8008192:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	3300      	adds	r3, #0
 800819a:	bf18      	it	ne
 800819c:	2301      	movne	r3, #1
 800819e:	0692      	lsls	r2, r2, #26
 80081a0:	d42d      	bmi.n	80081fe <_printf_common+0xbe>
 80081a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a6:	4639      	mov	r1, r7
 80081a8:	4630      	mov	r0, r6
 80081aa:	47c0      	blx	r8
 80081ac:	3001      	adds	r0, #1
 80081ae:	d020      	beq.n	80081f2 <_printf_common+0xb2>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	68e5      	ldr	r5, [r4, #12]
 80081b4:	f8d9 2000 	ldr.w	r2, [r9]
 80081b8:	f003 0306 	and.w	r3, r3, #6
 80081bc:	2b04      	cmp	r3, #4
 80081be:	bf08      	it	eq
 80081c0:	1aad      	subeq	r5, r5, r2
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	6922      	ldr	r2, [r4, #16]
 80081c6:	bf0c      	ite	eq
 80081c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081cc:	2500      	movne	r5, #0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfc4      	itt	gt
 80081d2:	1a9b      	subgt	r3, r3, r2
 80081d4:	18ed      	addgt	r5, r5, r3
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	341a      	adds	r4, #26
 80081dc:	454d      	cmp	r5, r9
 80081de:	d11a      	bne.n	8008216 <_printf_common+0xd6>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e008      	b.n	80081f6 <_printf_common+0xb6>
 80081e4:	2301      	movs	r3, #1
 80081e6:	4652      	mov	r2, sl
 80081e8:	4639      	mov	r1, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	47c0      	blx	r8
 80081ee:	3001      	adds	r0, #1
 80081f0:	d103      	bne.n	80081fa <_printf_common+0xba>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fa:	3501      	adds	r5, #1
 80081fc:	e7c3      	b.n	8008186 <_printf_common+0x46>
 80081fe:	18e1      	adds	r1, r4, r3
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	2030      	movs	r0, #48	; 0x30
 8008204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008208:	4422      	add	r2, r4
 800820a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800820e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008212:	3302      	adds	r3, #2
 8008214:	e7c5      	b.n	80081a2 <_printf_common+0x62>
 8008216:	2301      	movs	r3, #1
 8008218:	4622      	mov	r2, r4
 800821a:	4639      	mov	r1, r7
 800821c:	4630      	mov	r0, r6
 800821e:	47c0      	blx	r8
 8008220:	3001      	adds	r0, #1
 8008222:	d0e6      	beq.n	80081f2 <_printf_common+0xb2>
 8008224:	f109 0901 	add.w	r9, r9, #1
 8008228:	e7d8      	b.n	80081dc <_printf_common+0x9c>
	...

0800822c <_printf_i>:
 800822c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008230:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008234:	460c      	mov	r4, r1
 8008236:	7e09      	ldrb	r1, [r1, #24]
 8008238:	b085      	sub	sp, #20
 800823a:	296e      	cmp	r1, #110	; 0x6e
 800823c:	4617      	mov	r7, r2
 800823e:	4606      	mov	r6, r0
 8008240:	4698      	mov	r8, r3
 8008242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008244:	f000 80b3 	beq.w	80083ae <_printf_i+0x182>
 8008248:	d822      	bhi.n	8008290 <_printf_i+0x64>
 800824a:	2963      	cmp	r1, #99	; 0x63
 800824c:	d036      	beq.n	80082bc <_printf_i+0x90>
 800824e:	d80a      	bhi.n	8008266 <_printf_i+0x3a>
 8008250:	2900      	cmp	r1, #0
 8008252:	f000 80b9 	beq.w	80083c8 <_printf_i+0x19c>
 8008256:	2958      	cmp	r1, #88	; 0x58
 8008258:	f000 8083 	beq.w	8008362 <_printf_i+0x136>
 800825c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008260:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008264:	e032      	b.n	80082cc <_printf_i+0xa0>
 8008266:	2964      	cmp	r1, #100	; 0x64
 8008268:	d001      	beq.n	800826e <_printf_i+0x42>
 800826a:	2969      	cmp	r1, #105	; 0x69
 800826c:	d1f6      	bne.n	800825c <_printf_i+0x30>
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	6813      	ldr	r3, [r2, #0]
 8008272:	0605      	lsls	r5, r0, #24
 8008274:	f103 0104 	add.w	r1, r3, #4
 8008278:	d52a      	bpl.n	80082d0 <_printf_i+0xa4>
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6011      	str	r1, [r2, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	da03      	bge.n	800828a <_printf_i+0x5e>
 8008282:	222d      	movs	r2, #45	; 0x2d
 8008284:	425b      	negs	r3, r3
 8008286:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800828a:	486f      	ldr	r0, [pc, #444]	; (8008448 <_printf_i+0x21c>)
 800828c:	220a      	movs	r2, #10
 800828e:	e039      	b.n	8008304 <_printf_i+0xd8>
 8008290:	2973      	cmp	r1, #115	; 0x73
 8008292:	f000 809d 	beq.w	80083d0 <_printf_i+0x1a4>
 8008296:	d808      	bhi.n	80082aa <_printf_i+0x7e>
 8008298:	296f      	cmp	r1, #111	; 0x6f
 800829a:	d020      	beq.n	80082de <_printf_i+0xb2>
 800829c:	2970      	cmp	r1, #112	; 0x70
 800829e:	d1dd      	bne.n	800825c <_printf_i+0x30>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	f043 0320 	orr.w	r3, r3, #32
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	e003      	b.n	80082b2 <_printf_i+0x86>
 80082aa:	2975      	cmp	r1, #117	; 0x75
 80082ac:	d017      	beq.n	80082de <_printf_i+0xb2>
 80082ae:	2978      	cmp	r1, #120	; 0x78
 80082b0:	d1d4      	bne.n	800825c <_printf_i+0x30>
 80082b2:	2378      	movs	r3, #120	; 0x78
 80082b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082b8:	4864      	ldr	r0, [pc, #400]	; (800844c <_printf_i+0x220>)
 80082ba:	e055      	b.n	8008368 <_printf_i+0x13c>
 80082bc:	6813      	ldr	r3, [r2, #0]
 80082be:	1d19      	adds	r1, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6011      	str	r1, [r2, #0]
 80082c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082cc:	2301      	movs	r3, #1
 80082ce:	e08c      	b.n	80083ea <_printf_i+0x1be>
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6011      	str	r1, [r2, #0]
 80082d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082d8:	bf18      	it	ne
 80082da:	b21b      	sxthne	r3, r3
 80082dc:	e7cf      	b.n	800827e <_printf_i+0x52>
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	6825      	ldr	r5, [r4, #0]
 80082e2:	1d18      	adds	r0, r3, #4
 80082e4:	6010      	str	r0, [r2, #0]
 80082e6:	0628      	lsls	r0, r5, #24
 80082e8:	d501      	bpl.n	80082ee <_printf_i+0xc2>
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	e002      	b.n	80082f4 <_printf_i+0xc8>
 80082ee:	0668      	lsls	r0, r5, #25
 80082f0:	d5fb      	bpl.n	80082ea <_printf_i+0xbe>
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	4854      	ldr	r0, [pc, #336]	; (8008448 <_printf_i+0x21c>)
 80082f6:	296f      	cmp	r1, #111	; 0x6f
 80082f8:	bf14      	ite	ne
 80082fa:	220a      	movne	r2, #10
 80082fc:	2208      	moveq	r2, #8
 80082fe:	2100      	movs	r1, #0
 8008300:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008304:	6865      	ldr	r5, [r4, #4]
 8008306:	60a5      	str	r5, [r4, #8]
 8008308:	2d00      	cmp	r5, #0
 800830a:	f2c0 8095 	blt.w	8008438 <_printf_i+0x20c>
 800830e:	6821      	ldr	r1, [r4, #0]
 8008310:	f021 0104 	bic.w	r1, r1, #4
 8008314:	6021      	str	r1, [r4, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d13d      	bne.n	8008396 <_printf_i+0x16a>
 800831a:	2d00      	cmp	r5, #0
 800831c:	f040 808e 	bne.w	800843c <_printf_i+0x210>
 8008320:	4665      	mov	r5, ip
 8008322:	2a08      	cmp	r2, #8
 8008324:	d10b      	bne.n	800833e <_printf_i+0x112>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d508      	bpl.n	800833e <_printf_i+0x112>
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	6862      	ldr	r2, [r4, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	bfde      	ittt	le
 8008334:	2330      	movle	r3, #48	; 0x30
 8008336:	f805 3c01 	strble.w	r3, [r5, #-1]
 800833a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800833e:	ebac 0305 	sub.w	r3, ip, r5
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	f8cd 8000 	str.w	r8, [sp]
 8008348:	463b      	mov	r3, r7
 800834a:	aa03      	add	r2, sp, #12
 800834c:	4621      	mov	r1, r4
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff fef6 	bl	8008140 <_printf_common>
 8008354:	3001      	adds	r0, #1
 8008356:	d14d      	bne.n	80083f4 <_printf_i+0x1c8>
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	b005      	add	sp, #20
 800835e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008362:	4839      	ldr	r0, [pc, #228]	; (8008448 <_printf_i+0x21c>)
 8008364:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008368:	6813      	ldr	r3, [r2, #0]
 800836a:	6821      	ldr	r1, [r4, #0]
 800836c:	1d1d      	adds	r5, r3, #4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6015      	str	r5, [r2, #0]
 8008372:	060a      	lsls	r2, r1, #24
 8008374:	d50b      	bpl.n	800838e <_printf_i+0x162>
 8008376:	07ca      	lsls	r2, r1, #31
 8008378:	bf44      	itt	mi
 800837a:	f041 0120 	orrmi.w	r1, r1, #32
 800837e:	6021      	strmi	r1, [r4, #0]
 8008380:	b91b      	cbnz	r3, 800838a <_printf_i+0x15e>
 8008382:	6822      	ldr	r2, [r4, #0]
 8008384:	f022 0220 	bic.w	r2, r2, #32
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	2210      	movs	r2, #16
 800838c:	e7b7      	b.n	80082fe <_printf_i+0xd2>
 800838e:	064d      	lsls	r5, r1, #25
 8008390:	bf48      	it	mi
 8008392:	b29b      	uxthmi	r3, r3
 8008394:	e7ef      	b.n	8008376 <_printf_i+0x14a>
 8008396:	4665      	mov	r5, ip
 8008398:	fbb3 f1f2 	udiv	r1, r3, r2
 800839c:	fb02 3311 	mls	r3, r2, r1, r3
 80083a0:	5cc3      	ldrb	r3, [r0, r3]
 80083a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80083a6:	460b      	mov	r3, r1
 80083a8:	2900      	cmp	r1, #0
 80083aa:	d1f5      	bne.n	8008398 <_printf_i+0x16c>
 80083ac:	e7b9      	b.n	8008322 <_printf_i+0xf6>
 80083ae:	6813      	ldr	r3, [r2, #0]
 80083b0:	6825      	ldr	r5, [r4, #0]
 80083b2:	6961      	ldr	r1, [r4, #20]
 80083b4:	1d18      	adds	r0, r3, #4
 80083b6:	6010      	str	r0, [r2, #0]
 80083b8:	0628      	lsls	r0, r5, #24
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	d501      	bpl.n	80083c2 <_printf_i+0x196>
 80083be:	6019      	str	r1, [r3, #0]
 80083c0:	e002      	b.n	80083c8 <_printf_i+0x19c>
 80083c2:	066a      	lsls	r2, r5, #25
 80083c4:	d5fb      	bpl.n	80083be <_printf_i+0x192>
 80083c6:	8019      	strh	r1, [r3, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	6123      	str	r3, [r4, #16]
 80083cc:	4665      	mov	r5, ip
 80083ce:	e7b9      	b.n	8008344 <_printf_i+0x118>
 80083d0:	6813      	ldr	r3, [r2, #0]
 80083d2:	1d19      	adds	r1, r3, #4
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	681d      	ldr	r5, [r3, #0]
 80083d8:	6862      	ldr	r2, [r4, #4]
 80083da:	2100      	movs	r1, #0
 80083dc:	4628      	mov	r0, r5
 80083de:	f7f7 ff0f 	bl	8000200 <memchr>
 80083e2:	b108      	cbz	r0, 80083e8 <_printf_i+0x1bc>
 80083e4:	1b40      	subs	r0, r0, r5
 80083e6:	6060      	str	r0, [r4, #4]
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	6123      	str	r3, [r4, #16]
 80083ec:	2300      	movs	r3, #0
 80083ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083f2:	e7a7      	b.n	8008344 <_printf_i+0x118>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	462a      	mov	r2, r5
 80083f8:	4639      	mov	r1, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	47c0      	blx	r8
 80083fe:	3001      	adds	r0, #1
 8008400:	d0aa      	beq.n	8008358 <_printf_i+0x12c>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	079b      	lsls	r3, r3, #30
 8008406:	d413      	bmi.n	8008430 <_printf_i+0x204>
 8008408:	68e0      	ldr	r0, [r4, #12]
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	4298      	cmp	r0, r3
 800840e:	bfb8      	it	lt
 8008410:	4618      	movlt	r0, r3
 8008412:	e7a3      	b.n	800835c <_printf_i+0x130>
 8008414:	2301      	movs	r3, #1
 8008416:	464a      	mov	r2, r9
 8008418:	4639      	mov	r1, r7
 800841a:	4630      	mov	r0, r6
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d09a      	beq.n	8008358 <_printf_i+0x12c>
 8008422:	3501      	adds	r5, #1
 8008424:	68e3      	ldr	r3, [r4, #12]
 8008426:	9a03      	ldr	r2, [sp, #12]
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	42ab      	cmp	r3, r5
 800842c:	dcf2      	bgt.n	8008414 <_printf_i+0x1e8>
 800842e:	e7eb      	b.n	8008408 <_printf_i+0x1dc>
 8008430:	2500      	movs	r5, #0
 8008432:	f104 0919 	add.w	r9, r4, #25
 8008436:	e7f5      	b.n	8008424 <_printf_i+0x1f8>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ac      	bne.n	8008396 <_printf_i+0x16a>
 800843c:	7803      	ldrb	r3, [r0, #0]
 800843e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008442:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008446:	e76c      	b.n	8008322 <_printf_i+0xf6>
 8008448:	08008f51 	.word	0x08008f51
 800844c:	08008f62 	.word	0x08008f62

08008450 <memcpy>:
 8008450:	b510      	push	{r4, lr}
 8008452:	1e43      	subs	r3, r0, #1
 8008454:	440a      	add	r2, r1
 8008456:	4291      	cmp	r1, r2
 8008458:	d100      	bne.n	800845c <memcpy+0xc>
 800845a:	bd10      	pop	{r4, pc}
 800845c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008464:	e7f7      	b.n	8008456 <memcpy+0x6>

08008466 <memmove>:
 8008466:	4288      	cmp	r0, r1
 8008468:	b510      	push	{r4, lr}
 800846a:	eb01 0302 	add.w	r3, r1, r2
 800846e:	d807      	bhi.n	8008480 <memmove+0x1a>
 8008470:	1e42      	subs	r2, r0, #1
 8008472:	4299      	cmp	r1, r3
 8008474:	d00a      	beq.n	800848c <memmove+0x26>
 8008476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800847e:	e7f8      	b.n	8008472 <memmove+0xc>
 8008480:	4283      	cmp	r3, r0
 8008482:	d9f5      	bls.n	8008470 <memmove+0xa>
 8008484:	1881      	adds	r1, r0, r2
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	42d3      	cmn	r3, r2
 800848a:	d100      	bne.n	800848e <memmove+0x28>
 800848c:	bd10      	pop	{r4, pc}
 800848e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008492:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008496:	e7f7      	b.n	8008488 <memmove+0x22>

08008498 <_free_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4605      	mov	r5, r0
 800849c:	2900      	cmp	r1, #0
 800849e:	d045      	beq.n	800852c <_free_r+0x94>
 80084a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a4:	1f0c      	subs	r4, r1, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfb8      	it	lt
 80084aa:	18e4      	addlt	r4, r4, r3
 80084ac:	f000 f8d2 	bl	8008654 <__malloc_lock>
 80084b0:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <_free_r+0x98>)
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	4610      	mov	r0, r2
 80084b6:	b933      	cbnz	r3, 80084c6 <_free_r+0x2e>
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	6014      	str	r4, [r2, #0]
 80084bc:	4628      	mov	r0, r5
 80084be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c2:	f000 b8c8 	b.w	8008656 <__malloc_unlock>
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	d90c      	bls.n	80084e4 <_free_r+0x4c>
 80084ca:	6821      	ldr	r1, [r4, #0]
 80084cc:	1862      	adds	r2, r4, r1
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bf04      	itt	eq
 80084d2:	681a      	ldreq	r2, [r3, #0]
 80084d4:	685b      	ldreq	r3, [r3, #4]
 80084d6:	6063      	str	r3, [r4, #4]
 80084d8:	bf04      	itt	eq
 80084da:	1852      	addeq	r2, r2, r1
 80084dc:	6022      	streq	r2, [r4, #0]
 80084de:	6004      	str	r4, [r0, #0]
 80084e0:	e7ec      	b.n	80084bc <_free_r+0x24>
 80084e2:	4613      	mov	r3, r2
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	b10a      	cbz	r2, 80084ec <_free_r+0x54>
 80084e8:	42a2      	cmp	r2, r4
 80084ea:	d9fa      	bls.n	80084e2 <_free_r+0x4a>
 80084ec:	6819      	ldr	r1, [r3, #0]
 80084ee:	1858      	adds	r0, r3, r1
 80084f0:	42a0      	cmp	r0, r4
 80084f2:	d10b      	bne.n	800850c <_free_r+0x74>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	4401      	add	r1, r0
 80084f8:	1858      	adds	r0, r3, r1
 80084fa:	4282      	cmp	r2, r0
 80084fc:	6019      	str	r1, [r3, #0]
 80084fe:	d1dd      	bne.n	80084bc <_free_r+0x24>
 8008500:	6810      	ldr	r0, [r2, #0]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	4401      	add	r1, r0
 8008508:	6019      	str	r1, [r3, #0]
 800850a:	e7d7      	b.n	80084bc <_free_r+0x24>
 800850c:	d902      	bls.n	8008514 <_free_r+0x7c>
 800850e:	230c      	movs	r3, #12
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	e7d3      	b.n	80084bc <_free_r+0x24>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428a      	cmp	r2, r1
 800851a:	bf04      	itt	eq
 800851c:	6811      	ldreq	r1, [r2, #0]
 800851e:	6852      	ldreq	r2, [r2, #4]
 8008520:	6062      	str	r2, [r4, #4]
 8008522:	bf04      	itt	eq
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	605c      	str	r4, [r3, #4]
 800852a:	e7c7      	b.n	80084bc <_free_r+0x24>
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	200000d0 	.word	0x200000d0

08008534 <_malloc_r>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	1ccd      	adds	r5, r1, #3
 8008538:	f025 0503 	bic.w	r5, r5, #3
 800853c:	3508      	adds	r5, #8
 800853e:	2d0c      	cmp	r5, #12
 8008540:	bf38      	it	cc
 8008542:	250c      	movcc	r5, #12
 8008544:	2d00      	cmp	r5, #0
 8008546:	4606      	mov	r6, r0
 8008548:	db01      	blt.n	800854e <_malloc_r+0x1a>
 800854a:	42a9      	cmp	r1, r5
 800854c:	d903      	bls.n	8008556 <_malloc_r+0x22>
 800854e:	230c      	movs	r3, #12
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	2000      	movs	r0, #0
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	f000 f87d 	bl	8008654 <__malloc_lock>
 800855a:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <_malloc_r+0xac>)
 800855c:	6814      	ldr	r4, [r2, #0]
 800855e:	4621      	mov	r1, r4
 8008560:	b991      	cbnz	r1, 8008588 <_malloc_r+0x54>
 8008562:	4c20      	ldr	r4, [pc, #128]	; (80085e4 <_malloc_r+0xb0>)
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	b91b      	cbnz	r3, 8008570 <_malloc_r+0x3c>
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f863 	bl	8008634 <_sbrk_r>
 800856e:	6020      	str	r0, [r4, #0]
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f85e 	bl	8008634 <_sbrk_r>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d124      	bne.n	80085c6 <_malloc_r+0x92>
 800857c:	230c      	movs	r3, #12
 800857e:	6033      	str	r3, [r6, #0]
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f868 	bl	8008656 <__malloc_unlock>
 8008586:	e7e4      	b.n	8008552 <_malloc_r+0x1e>
 8008588:	680b      	ldr	r3, [r1, #0]
 800858a:	1b5b      	subs	r3, r3, r5
 800858c:	d418      	bmi.n	80085c0 <_malloc_r+0x8c>
 800858e:	2b0b      	cmp	r3, #11
 8008590:	d90f      	bls.n	80085b2 <_malloc_r+0x7e>
 8008592:	600b      	str	r3, [r1, #0]
 8008594:	50cd      	str	r5, [r1, r3]
 8008596:	18cc      	adds	r4, r1, r3
 8008598:	4630      	mov	r0, r6
 800859a:	f000 f85c 	bl	8008656 <__malloc_unlock>
 800859e:	f104 000b 	add.w	r0, r4, #11
 80085a2:	1d23      	adds	r3, r4, #4
 80085a4:	f020 0007 	bic.w	r0, r0, #7
 80085a8:	1ac3      	subs	r3, r0, r3
 80085aa:	d0d3      	beq.n	8008554 <_malloc_r+0x20>
 80085ac:	425a      	negs	r2, r3
 80085ae:	50e2      	str	r2, [r4, r3]
 80085b0:	e7d0      	b.n	8008554 <_malloc_r+0x20>
 80085b2:	428c      	cmp	r4, r1
 80085b4:	684b      	ldr	r3, [r1, #4]
 80085b6:	bf16      	itet	ne
 80085b8:	6063      	strne	r3, [r4, #4]
 80085ba:	6013      	streq	r3, [r2, #0]
 80085bc:	460c      	movne	r4, r1
 80085be:	e7eb      	b.n	8008598 <_malloc_r+0x64>
 80085c0:	460c      	mov	r4, r1
 80085c2:	6849      	ldr	r1, [r1, #4]
 80085c4:	e7cc      	b.n	8008560 <_malloc_r+0x2c>
 80085c6:	1cc4      	adds	r4, r0, #3
 80085c8:	f024 0403 	bic.w	r4, r4, #3
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d005      	beq.n	80085dc <_malloc_r+0xa8>
 80085d0:	1a21      	subs	r1, r4, r0
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 f82e 	bl	8008634 <_sbrk_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d0cf      	beq.n	800857c <_malloc_r+0x48>
 80085dc:	6025      	str	r5, [r4, #0]
 80085de:	e7db      	b.n	8008598 <_malloc_r+0x64>
 80085e0:	200000d0 	.word	0x200000d0
 80085e4:	200000d4 	.word	0x200000d4

080085e8 <_realloc_r>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	4607      	mov	r7, r0
 80085ec:	4614      	mov	r4, r2
 80085ee:	460e      	mov	r6, r1
 80085f0:	b921      	cbnz	r1, 80085fc <_realloc_r+0x14>
 80085f2:	4611      	mov	r1, r2
 80085f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085f8:	f7ff bf9c 	b.w	8008534 <_malloc_r>
 80085fc:	b922      	cbnz	r2, 8008608 <_realloc_r+0x20>
 80085fe:	f7ff ff4b 	bl	8008498 <_free_r>
 8008602:	4625      	mov	r5, r4
 8008604:	4628      	mov	r0, r5
 8008606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008608:	f000 f826 	bl	8008658 <_malloc_usable_size_r>
 800860c:	42a0      	cmp	r0, r4
 800860e:	d20f      	bcs.n	8008630 <_realloc_r+0x48>
 8008610:	4621      	mov	r1, r4
 8008612:	4638      	mov	r0, r7
 8008614:	f7ff ff8e 	bl	8008534 <_malloc_r>
 8008618:	4605      	mov	r5, r0
 800861a:	2800      	cmp	r0, #0
 800861c:	d0f2      	beq.n	8008604 <_realloc_r+0x1c>
 800861e:	4631      	mov	r1, r6
 8008620:	4622      	mov	r2, r4
 8008622:	f7ff ff15 	bl	8008450 <memcpy>
 8008626:	4631      	mov	r1, r6
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ff35 	bl	8008498 <_free_r>
 800862e:	e7e9      	b.n	8008604 <_realloc_r+0x1c>
 8008630:	4635      	mov	r5, r6
 8008632:	e7e7      	b.n	8008604 <_realloc_r+0x1c>

08008634 <_sbrk_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4c06      	ldr	r4, [pc, #24]	; (8008650 <_sbrk_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4605      	mov	r5, r0
 800863c:	4608      	mov	r0, r1
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	f7fa fb74 	bl	8002d2c <_sbrk>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_sbrk_r+0x1a>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	b103      	cbz	r3, 800864e <_sbrk_r+0x1a>
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200008c8 	.word	0x200008c8

08008654 <__malloc_lock>:
 8008654:	4770      	bx	lr

08008656 <__malloc_unlock>:
 8008656:	4770      	bx	lr

08008658 <_malloc_usable_size_r>:
 8008658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865c:	1f18      	subs	r0, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfbc      	itt	lt
 8008662:	580b      	ldrlt	r3, [r1, r0]
 8008664:	18c0      	addlt	r0, r0, r3
 8008666:	4770      	bx	lr

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
