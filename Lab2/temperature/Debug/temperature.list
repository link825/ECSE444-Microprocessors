
temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08004cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004cf4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001177f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e19  00000000  00000000  000317bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002badc  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d24f  00000000  00000000  0006121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117ee6  00000000  00000000  0006e46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  001863cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004c50 	.word	0x08004c50

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004c50 	.word	0x08004c50

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fb04 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f82f 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9b5 	bl	8000878 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050e:	f000 f8b5 	bl	800067c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000512:	f000 f917 	bl	8000744 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000516:	f000 f963 	bl	80007e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800051a:	4810      	ldr	r0, [pc, #64]	; (800055c <main+0x60>)
 800051c:	f000 fe90 	bl	8001240 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x60>)
 8000526:	f000 feee 	bl	8001306 <HAL_ADC_PollForConversion>
  uint16_t raw = HAL_ADC_GetValue(&hadc1); //ADC is a 12bit value, uint12_t, though 16 bit int shouldnt be problem
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x60>)
 800052c:	f000 ff73 	bl	8001416 <HAL_ADC_GetValue>
 8000530:	4603      	mov	r3, r0
 8000532:	81fb      	strh	r3, [r7, #14]

  uint16_t cal1 = *(uint16_t*)TS_CAL1_Addr;
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <main+0x64>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	81bb      	strh	r3, [r7, #12]
  uint16_t cal2 = *(uint16_t*)TS_CAL2_Addr;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x68>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	817b      	strh	r3, [r7, #10]

  uint32_t temperature = (raw - cal1) * ((130 - 30) / (cal2 - cal1)) + 30; // should be adc/reference, multiplication by 3000 not needed, check this
 8000540:	89fa      	ldrh	r2, [r7, #14]
 8000542:	89bb      	ldrh	r3, [r7, #12]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	8979      	ldrh	r1, [r7, #10]
 8000548:	89ba      	ldrh	r2, [r7, #12]
 800054a:	1a8a      	subs	r2, r1, r2
 800054c:	2164      	movs	r1, #100	; 0x64
 800054e:	fb91 f2f2 	sdiv	r2, r1, r2
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	331e      	adds	r3, #30
 8000558:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055a:	e7fe      	b.n	800055a <main+0x5e>
 800055c:	20000028 	.word	0x20000028
 8000560:	1fff75a8 	.word	0x1fff75a8
 8000564:	1fff75ca 	.word	0x1fff75ca

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0bc      	sub	sp, #240	; 0xf0
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000572:	2244      	movs	r2, #68	; 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fb62 	bl	8004c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2294      	movs	r2, #148	; 0x94
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fb54 	bl	8004c40 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000598:	2000      	movs	r0, #0
 800059a:	f001 fe35 	bl	8002208 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005a4:	f000 f980 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a8:	2310      	movs	r3, #16
 80005aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ba:	2360      	movs	r3, #96	; 0x60
 80005bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c6:	2301      	movs	r3, #1
 80005c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005d2:	233c      	movs	r3, #60	; 0x3c
 80005d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 feae 	bl	8002350 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f955 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000620:	2105      	movs	r1, #5
 8000622:	4618      	mov	r0, r3
 8000624:	f002 faba 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800062e:	f000 f93b 	bl	80008a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8000632:	f244 0301 	movw	r3, #16385	; 0x4001
 8000636:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000638:	2300      	movs	r3, #0
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800063c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800064c:	2318      	movs	r3, #24
 800064e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800065c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000660:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fd49 	bl	80030fc <HAL_RCCEx_PeriphCLKConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000670:	f000 f91a 	bl	80008a8 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	37f0      	adds	r7, #240	; 0xf0
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_ADC1_Init+0xbc>)
 8000694:	4a29      	ldr	r2, [pc, #164]	; (800073c <MX_ADC1_Init+0xc0>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_ADC1_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_ADC1_Init+0xbc>)
 80006f4:	f000 fc5a 	bl	8000fac <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006fe:	f000 f8d3 	bl	80008a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ADC1_Init+0xc4>)
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070e:	237f      	movs	r3, #127	; 0x7f
 8000710:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000712:	2304      	movs	r3, #4
 8000714:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_ADC1_Init+0xbc>)
 8000720:	f000 fe86 	bl	8001430 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800072a:	f000 f8bd 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	50040000 	.word	0x50040000
 8000740:	c7520000 	.word	0xc7520000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_TIM2_Init+0x98>)
 8000764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000768:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_TIM2_Init+0x98>)
 800076c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM2_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_TIM2_Init+0x98>)
 800077a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800077e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_TIM2_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM2_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <MX_TIM2_Init+0x98>)
 800078e:	f003 f9bd 	bl	8003b0c <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f886 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM2_Init+0x98>)
 80007aa:	f003 fa06 	bl	8003bba <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007b4:	f000 f878 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_TIM2_Init+0x98>)
 80007c6:	f003 fbe5 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007d0:	f000 f86a 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000011c 	.word	0x2000011c

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_USART1_UART_Init+0x90>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <MX_USART1_UART_Init+0x94>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_USART1_UART_Init+0x90>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_USART1_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_USART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_USART1_UART_Init+0x90>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_USART1_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_USART1_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART1_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800082a:	f003 fc3b 	bl	80040a4 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 f838 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800083c:	f004 f8f7 	bl	8004a2e <HAL_UARTEx_SetTxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000846:	f000 f82f 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800084e:	f004 f92c 	bl	8004aaa <HAL_UARTEx_SetRxFifoThreshold>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f826 	bl	80008a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_USART1_UART_Init+0x90>)
 800085e:	f004 f8ad 	bl	80049bc <HAL_UARTEx_DisableFifoMode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f81e 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000090 	.word	0x20000090
 8000874:	40013800 	.word	0x40013800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_GPIO_Init+0x2c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <MX_GPIO_Init+0x2c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x2c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x6>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	; 0x60
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	; 0x58
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_ADC_MspInit+0x38>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d10b      	bne.n	8000922 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_ADC_MspInit+0x3c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_ADC_MspInit+0x3c>)
 8000910:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_ADC_MspInit+0x3c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	50040000 	.word	0x50040000
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000948:	d10b      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_TIM_Base_MspInit+0x38>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_TIM_Base_MspInit+0x38>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6593      	str	r3, [r2, #88]	; 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_TIM_Base_MspInit+0x38>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d129      	bne.n	80009ea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x84>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x84>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_MspInit+0x84>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_UART_MspInit+0x84>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x84>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_UART_MspInit+0x84>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 fa5d 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8b6 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <SystemInit+0x64>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <SystemInit+0x64>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <SystemInit+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <SystemInit+0x68>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <SystemInit+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SystemInit+0x68>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <SystemInit+0x68>)
 8000a7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <SystemInit+0x68>)
 8000a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <SystemInit+0x68>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <SystemInit+0x68>)
 8000a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <SystemInit+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x64>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	40021000 	.word	0x40021000

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff ffc6 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ac4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ac6:	e003      	b.n	8000ad0 <LoopCopyDataInit>

08000ac8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000acc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ace:	3104      	adds	r1, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ad4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ad6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ad8:	d3f6      	bcc.n	8000ac8 <CopyDataInit>
	ldr	r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000adc:	e002      	b.n	8000ae4 <LoopFillZerobss>

08000ade <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ade:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ae0:	f842 3b04 	str.w	r3, [r2], #4

08000ae4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LoopForever+0x16>)
	cmp	r2, r3
 8000ae6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ae8:	d3f9      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f004 f885 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fd05 	bl	80004fc <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000af8:	08004ce8 	.word	0x08004ce8
	ldr	r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b00:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b08:	2000016c 	.word	0x2000016c

08000b0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_IRQHandler>

08000b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f001 f98f 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f80e 	bl	8000b40 <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e001      	b.n	8000b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b30:	f7ff febe 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d023      	beq.n	8000b9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f98d 	bl	8001e8a <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10f      	bne.n	8000b96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d809      	bhi.n	8000b90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f001 f965 	bl	8001e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0x74>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e007      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e001      	b.n	8000ba0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000168 	.word	0x20000168

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000168 	.word	0x20000168

08000bf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	609a      	str	r2, [r3, #8]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3360      	adds	r3, #96	; 0x60
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LL_ADC_SetOffset+0x44>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	03fff000 	.word	0x03fff000

08000ca8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3360      	adds	r3, #96	; 0x60
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3360      	adds	r3, #96	; 0x60
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	615a      	str	r2, [r3, #20]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b087      	sub	sp, #28
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3330      	adds	r3, #48	; 0x30
 8000d66:	461a      	mov	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	4413      	add	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	211f      	movs	r1, #31
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0e9b      	lsrs	r3, r3, #26
 8000d8e:	f003 011f 	and.w	r1, r3, #31
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000da2:	bf00      	nop
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b087      	sub	sp, #28
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3314      	adds	r3, #20
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	0e5b      	lsrs	r3, r3, #25
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	4413      	add	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	0d1b      	lsrs	r3, r3, #20
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	2107      	movs	r1, #7
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	0d1b      	lsrs	r3, r3, #20
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	431a      	orrs	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0318 	and.w	r3, r3, #24
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e28:	40d9      	lsrs	r1, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e32:	431a      	orrs	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	0007ffff 	.word	0x0007ffff

08000e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6093      	str	r3, [r2, #8]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e84:	d101      	bne.n	8000e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ed4:	d101      	bne.n	8000eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <LL_ADC_IsEnabled+0x18>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <LL_ADC_IsEnabled+0x1a>
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f4a:	f043 0204 	orr.w	r2, r3, #4
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d101      	bne.n	8000f9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e12d      	b.n	8001222 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fc8f 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff3f 	bl	8000e70 <LL_ADC_IsDeepPowerDownEnabled>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff25 	bl	8000e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff5a 	bl	8000ec0 <LL_ADC_IsInternalRegulatorEnabled>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d113      	bne.n	800103a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff3e 	bl	8000e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800101c:	4b83      	ldr	r3, [pc, #524]	; (800122c <HAL_ADC_Init+0x280>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	099b      	lsrs	r3, r3, #6
 8001022:	4a83      	ldr	r2, [pc, #524]	; (8001230 <HAL_ADC_Init+0x284>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	099b      	lsrs	r3, r3, #6
 800102a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800102c:	e002      	b.n	8001034 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	3b01      	subs	r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f9      	bne.n	800102e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff3e 	bl	8000ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10d      	bne.n	8001066 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff77 	bl	8000f5e <LL_ADC_REG_IsConversionOngoing>
 8001070:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 80c8 	bne.w	8001210 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 80c4 	bne.w	8001210 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001090:	f043 0202 	orr.w	r2, r3, #2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff37 	bl	8000f10 <LL_ADC_IsEnabled>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010a8:	4862      	ldr	r0, [pc, #392]	; (8001234 <HAL_ADC_Init+0x288>)
 80010aa:	f7ff ff31 	bl	8000f10 <LL_ADC_IsEnabled>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4619      	mov	r1, r3
 80010ba:	485f      	ldr	r0, [pc, #380]	; (8001238 <HAL_ADC_Init+0x28c>)
 80010bc:	f7ff fd9c 	bl	8000bf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e5b      	ldrb	r3, [r3, #25]
 80010c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80010d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80010d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d106      	bne.n	80010fc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	3b01      	subs	r3, #1
 80010f4:	045b      	lsls	r3, r3, #17
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	2b00      	cmp	r3, #0
 8001102:	d009      	beq.n	8001118 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_ADC_Init+0x290>)
 8001120:	4013      	ands	r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	430b      	orrs	r3, r1
 800112a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff14 	bl	8000f5e <LL_ADC_REG_IsConversionOngoing>
 8001136:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff21 	bl	8000f84 <LL_ADC_INJ_IsConversionOngoing>
 8001142:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d140      	bne.n	80011cc <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d13d      	bne.n	80011cc <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
 8001158:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800115a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001162:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001172:	f023 0306 	bic.w	r3, r3, #6
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	430b      	orrs	r3, r1
 800117e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001186:	2b01      	cmp	r3, #1
 8001188:	d118      	bne.n	80011bc <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001194:	f023 0304 	bic.w	r3, r3, #4
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011a0:	4311      	orrs	r1, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011a6:	4311      	orrs	r1, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011ac:	430a      	orrs	r2, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	e007      	b.n	80011cc <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10c      	bne.n	80011ee <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f023 010f 	bic.w	r1, r3, #15
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
 80011ec:	e007      	b.n	80011fe <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020f 	bic.w	r2, r2, #15
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58
 800120e:	e007      	b.n	8001220 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001220:	7ffb      	ldrb	r3, [r7, #31]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	053e2d63 	.word	0x053e2d63
 8001234:	50040000 	.word	0x50040000
 8001238:	50040300 	.word	0x50040300
 800123c:	fff0c007 	.word	0xfff0c007

08001240 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe86 	bl	8000f5e <LL_ADC_REG_IsConversionOngoing>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d14f      	bne.n	80012f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Start+0x26>
 8001262:	2302      	movs	r3, #2
 8001264:	e04b      	b.n	80012fe <HAL_ADC_Start+0xbe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fcd8 	bl	8001c24 <ADC_Enable>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d137      	bne.n	80012ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d106      	bne.n	80012ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	f023 0206 	bic.w	r2, r3, #6
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	221c      	movs	r2, #28
 80012ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fe25 	bl	8000f36 <LL_ADC_REG_StartConversion>
 80012ec:	e006      	b.n	80012fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80012f6:	e001      	b.n	80012fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012f8:	2302      	movs	r3, #2
 80012fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d102      	bne.n	800131e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001318:	2308      	movs	r3, #8
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e010      	b.n	8001340 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f043 0220 	orr.w	r2, r3, #32
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e068      	b.n	800140e <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800133c:	2304      	movs	r3, #4
 800133e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001340:	f7ff fc4e 	bl	8000be0 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001346:	e01a      	b.n	800137e <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134e:	d016      	beq.n	800137e <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001350:	f7ff fc46 	bl	8000be0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d302      	bcc.n	8001366 <HAL_ADC_PollForConversion+0x60>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10b      	bne.n	800137e <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	f043 0204 	orr.w	r2, r3, #4
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e047      	b.n	800140e <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0dd      	beq.n	8001348 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcc7 	bl	8000d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01c      	beq.n	80013e2 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e5b      	ldrb	r3, [r3, #25]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d118      	bne.n	80013e2 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d111      	bne.n	80013e2 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d104      	bne.n	80013fa <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2208      	movs	r2, #8
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e008      	b.n	800140c <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	220c      	movs	r2, #12
 800140a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b6      	sub	sp, #216	; 0xd8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x22>
 800144e:	2302      	movs	r3, #2
 8001450:	e3d4      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x7cc>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd7d 	bl	8000f5e <LL_ADC_REG_IsConversionOngoing>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 83b9 	bne.w	8001bde <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d824      	bhi.n	80014be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	3b02      	subs	r3, #2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d81b      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x86>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_ADC_ConfigChannel+0x54>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	0800149d 	.word	0x0800149d
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014ad 	.word	0x080014ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	220c      	movs	r2, #12
 8001498:	605a      	str	r2, [r3, #4]
          break;
 800149a:	e011      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2212      	movs	r2, #18
 80014a0:	605a      	str	r2, [r3, #4]
          break;
 80014a2:	e00d      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2218      	movs	r2, #24
 80014a8:	605a      	str	r2, [r3, #4]
          break;
 80014aa:	e009      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	605a      	str	r2, [r3, #4]
          break;
 80014b4:	e004      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2206      	movs	r2, #6
 80014ba:	605a      	str	r2, [r3, #4]
          break;
 80014bc:	e000      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	f7ff fc42 	bl	8000d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd41 	bl	8000f5e <LL_ADC_REG_IsConversionOngoing>
 80014dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd4d 	bl	8000f84 <LL_ADC_INJ_IsConversionOngoing>
 80014ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 81c1 	bne.w	800187a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 81bc 	bne.w	800187a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800150a:	d10f      	bne.n	800152c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fc49 	bl	8000dae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbf0 	bl	8000d0a <LL_ADC_SetSamplingTimeCommonConfig>
 800152a:	e00e      	b.n	800154a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	461a      	mov	r2, r3
 800153a:	f7ff fc38 	bl	8000dae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fbe0 	bl	8000d0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00a      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800157c:	f7ff fb70 	bl	8000c60 <LL_ADC_SetOffset>
 8001580:	e17b      	b.n	800187a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fb8d 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x17e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb82 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	e01e      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1bc>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb77 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80015dc:	2320      	movs	r3, #32
 80015de:	e004      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80015e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d4>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0e9b      	lsrs	r3, r3, #26
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	e018      	b.n	8001636 <HAL_ADC_ConfigChannel+0x206>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001628:	2320      	movs	r3, #32
 800162a:	e004      	b.n	8001636 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800162c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001636:	429a      	cmp	r2, r3
 8001638:	d106      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb46 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fb2a 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10a      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x244>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb1f 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	f003 021f 	and.w	r2, r3, #31
 8001672:	e01e      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x282>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb14 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800169a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80016a2:	2320      	movs	r3, #32
 80016a4:	e004      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80016a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x29a>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	e018      	b.n	80016fc <HAL_ADC_ConfigChannel+0x2cc>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80016de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80016e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80016ee:	2320      	movs	r3, #32
 80016f0:	e004      	b.n	80016fc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80016f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d106      	bne.n	800170e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fae3 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2102      	movs	r1, #2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fac7 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <HAL_ADC_ConfigChannel+0x30a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2102      	movs	r1, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fabc 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	e01e      	b.n	8001778 <HAL_ADC_ConfigChannel+0x348>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2102      	movs	r1, #2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fab1 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800175c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800176c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x360>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	e016      	b.n	80017be <HAL_ADC_ConfigChannel+0x38e>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80017b0:	2320      	movs	r3, #32
 80017b2:	e004      	b.n	80017be <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80017b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017be:	429a      	cmp	r2, r3
 80017c0:	d106      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	2102      	movs	r1, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fa82 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2103      	movs	r1, #3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa66 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x3cc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2103      	movs	r1, #3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa5b 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	e017      	b.n	800182c <HAL_ADC_ConfigChannel+0x3fc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2103      	movs	r1, #3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa50 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001816:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800181e:	2320      	movs	r3, #32
 8001820:	e003      	b.n	800182a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x414>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	e011      	b.n	8001868 <HAL_ADC_ConfigChannel+0x438>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001854:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e003      	b.n	8001868 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001868:	429a      	cmp	r2, r3
 800186a:	d106      	bne.n	800187a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	2103      	movs	r1, #3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa2d 	bl	8000cd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb46 	bl	8000f10 <LL_ADC_IsEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8140 	bne.w	8001b0c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	461a      	mov	r2, r3
 800189a:	f7ff fab3 	bl	8000e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a8f      	ldr	r2, [pc, #572]	; (8001ae0 <HAL_ADC_ConfigChannel+0x6b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f040 8131 	bne.w	8001b0c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10b      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x4a2>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	3301      	adds	r3, #1
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2b09      	cmp	r3, #9
 80018c8:	bf94      	ite	ls
 80018ca:	2301      	movls	r3, #1
 80018cc:	2300      	movhi	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e019      	b.n	8001906 <HAL_ADC_ConfigChannel+0x4d6>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80018e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018e2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80018e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e003      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80018ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001906:	2b00      	cmp	r3, #0
 8001908:	d079      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x4f6>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	3301      	adds	r3, #1
 800191e:	069b      	lsls	r3, r3, #26
 8001920:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001924:	e015      	b.n	8001952 <HAL_ADC_ConfigChannel+0x522>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001936:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800193e:	2320      	movs	r3, #32
 8001940:	e003      	b.n	800194a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3301      	adds	r3, #1
 800194c:	069b      	lsls	r3, r3, #26
 800194e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x542>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	3301      	adds	r3, #1
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	e017      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x572>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e003      	b.n	8001996 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800198e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	ea42 0103 	orr.w	r1, r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x598>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0e9b      	lsrs	r3, r3, #26
 80019b8:	3301      	adds	r3, #1
 80019ba:	f003 021f 	and.w	r2, r3, #31
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	051b      	lsls	r3, r3, #20
 80019c6:	e018      	b.n	80019fa <HAL_ADC_ConfigChannel+0x5ca>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e003      	b.n	80019ec <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80019e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f003 021f 	and.w	r2, r3, #31
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fa:	430b      	orrs	r3, r1
 80019fc:	e081      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x5ea>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	3301      	adds	r3, #1
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a18:	e015      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x616>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001a32:	2320      	movs	r3, #32
 8001a34:	e003      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	069b      	lsls	r3, r3, #26
 8001a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x636>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	e017      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x666>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	61fb      	str	r3, [r7, #28]
  return result;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	e003      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	ea42 0103 	orr.w	r1, r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x692>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	3301      	adds	r3, #1
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b1e      	subs	r3, #30
 8001aba:	051b      	lsls	r3, r3, #20
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	e01e      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x6d0>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	613b      	str	r3, [r7, #16]
  return result;
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d104      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001ada:	2320      	movs	r3, #32
 8001adc:	e006      	b.n	8001aec <HAL_ADC_ConfigChannel+0x6bc>
 8001ade:	bf00      	nop
 8001ae0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f003 021f 	and.w	r2, r3, #31
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	3b1e      	subs	r3, #30
 8001afa:	051b      	lsls	r3, r3, #20
 8001afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b00:	430b      	orrs	r3, r1
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	6892      	ldr	r2, [r2, #8]
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f951 	bl	8000dae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d06b      	beq.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b18:	483b      	ldr	r0, [pc, #236]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b1a:	f7ff f893 	bl	8000c44 <LL_ADC_GetCommonPathInternalCh>
 8001b1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d126      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d120      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d156      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	482e      	ldr	r0, [pc, #184]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b4e:	f7ff f866 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_ADC_ConfigChannel+0x7e4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <HAL_ADC_ConfigChannel+0x7e8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	099a      	lsrs	r2, r3, #6
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b78:	e03a      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_ADC_ConfigChannel+0x7ec>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d113      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x77c>
 8001b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4818      	ldr	r0, [pc, #96]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ba6:	f7ff f83a 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001baa:	e021      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_ADC_ConfigChannel+0x7f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_ADC_ConfigChannel+0x7e0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bd8:	f7ff f821 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
 8001bdc:	e008      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001bf8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	37d8      	adds	r7, #216	; 0xd8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	80080000 	.word	0x80080000
 8001c08:	50040300 	.word	0x50040300
 8001c0c:	c7520000 	.word	0xc7520000
 8001c10:	50040000 	.word	0x50040000
 8001c14:	20000000 	.word	0x20000000
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	cb840000 	.word	0xcb840000
 8001c20:	80000001 	.word	0x80000001

08001c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f96d 	bl	8000f10 <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d146      	bne.n	8001cca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <ADC_Enable+0xb0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e032      	b.n	8001ccc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f93c 	bl	8000ee8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c70:	f7fe ffb6 	bl	8000be0 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c76:	e021      	b.n	8001cbc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f947 	bl	8000f10 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f92b 	bl	8000ee8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c92:	f7fe ffa5 	bl	8000be0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d90d      	bls.n	8001cbc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e007      	b.n	8001ccc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d1d6      	bne.n	8001c78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	8000003f 	.word	0x8000003f

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff47 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff5c 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffb0 	bl	8001df8 <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e166      	b.n	8002182 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8158 	beq.w	800217c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00b      	beq.n	8001eec <HAL_GPIO_Init+0x48>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0xea>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80b2 	beq.w	800217c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6613      	str	r3, [r2, #96]	; 0x60
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002030:	4a5c      	ldr	r2, [pc, #368]	; (80021a4 <HAL_GPIO_Init+0x300>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800205a:	d02b      	beq.n	80020b4 <HAL_GPIO_Init+0x210>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d025      	beq.n	80020b0 <HAL_GPIO_Init+0x20c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x308>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d01f      	beq.n	80020ac <HAL_GPIO_Init+0x208>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d019      	beq.n	80020a8 <HAL_GPIO_Init+0x204>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x310>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_Init+0x200>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x314>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1fc>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x318>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1f8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x31c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1f4>
 8002094:	2307      	movs	r3, #7
 8002096:	e00e      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 8002098:	2308      	movs	r3, #8
 800209a:	e00c      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 800209c:	2306      	movs	r3, #6
 800209e:	e00a      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020a0:	2305      	movs	r3, #5
 80020a2:	e008      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x212>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x300>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_GPIO_Init+0x320>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f8:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <HAL_GPIO_Init+0x320>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x320>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_GPIO_Init+0x320>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae91 	bne.w	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	48001800 	.word	0x48001800
 80021c0:	48001c00 	.word	0x48001c00
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d8:	d102      	bne.n	80021e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	e00b      	b.n	80021f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ee:	d102      	bne.n	80021f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f4:	e000      	b.n	80021f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d141      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002216:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d131      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002224:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002234:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223c:	4a41      	ldr	r2, [pc, #260]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2232      	movs	r2, #50	; 0x32
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	0c9b      	lsrs	r3, r3, #18
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225a:	e002      	b.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3b01      	subs	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226e:	d102      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f2      	bne.n	800225c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d158      	bne.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e057      	b.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228e:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002298:	e04d      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a0:	d141      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d131      	bne.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2232      	movs	r2, #50	; 0x32
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e6:	e002      	b.n	80022ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d102      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f2      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d112      	bne.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e011      	b.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002324:	e007      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002334:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40007000 	.word	0x40007000
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f000 bc16 	b.w	8002b90 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002364:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236e:	4b9e      	ldr	r3, [pc, #632]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80e4 	beq.w	800254e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_RCC_OscConfig+0x4c>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	f040 808b 	bne.w	80024aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 8087 	bne.w	80024aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x64>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e3ed      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_RCC_OscConfig+0x7e>
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023cc:	e005      	b.n	80023da <HAL_RCC_OscConfig+0x8a>
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023da:	4293      	cmp	r3, r2
 80023dc:	d223      	bcs.n	8002426 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fdc8 	bl	8002f78 <RCC_SetFlashLatencyFromMSIRange>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e3ce      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f2:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7c      	ldr	r2, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4977      	ldr	r1, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4972      	ldr	r1, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	e025      	b.n	8002472 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002426:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6f      	ldr	r2, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	496a      	ldr	r1, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002444:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	4965      	ldr	r1, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fd88 	bl	8002f78 <RCC_SetFlashLatencyFromMSIRange>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e38e      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002472:	f000 fcbf 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_RCC_OscConfig+0x29c>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	fa21 f303 	lsr.w	r3, r1, r3
 800248e:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_OscConfig+0x2a0>)
 8002490:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x2a4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fb52 	bl	8000b40 <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d052      	beq.n	800254c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	e372      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d032      	beq.n	8002518 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024be:	f7fe fb8f 	bl	8000be0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c6:	f7fe fb8b 	bl	8000be0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e35b      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e4:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	493a      	ldr	r1, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4935      	ldr	r1, [pc, #212]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e01a      	b.n	800254e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002524:	f7fe fb5c 	bl	8000be0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252c:	f7fe fb58 	bl	8000be0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e328      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1dc>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d073      	beq.n	8002642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x21c>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d10e      	bne.n	8002584 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d10b      	bne.n	8002584 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d063      	beq.n	8002640 <HAL_RCC_OscConfig+0x2f0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d15f      	bne.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e305      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x24c>
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0x288>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x270>
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0x288>
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_RCC_OscConfig+0x298>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fafe 	bl	8000be0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e6:	e010      	b.n	800260a <HAL_RCC_OscConfig+0x2ba>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08004c78 	.word	0x08004c78
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe faf2 	bl	8000be0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e2c2      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	4baf      	ldr	r3, [pc, #700]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2a8>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fae2 	bl	8000be0 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fade 	bl	8000be0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e2ae      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	4ba5      	ldr	r3, [pc, #660]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x2d0>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d060      	beq.n	8002710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x310>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d119      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	4b99      	ldr	r3, [pc, #612]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x328>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e28b      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	4990      	ldr	r1, [pc, #576]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	e040      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a8b      	ldr	r2, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fa9d 	bl	8000be0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fa99 	bl	8000be0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e269      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026bc:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	497c      	ldr	r1, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a79      	ldr	r2, [pc, #484]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80026e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fa79 	bl	8000be0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f2:	f7fe fa75 	bl	8000be0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e245      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272a:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fa54 	bl	8000be0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fa50 	bl	8000be0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e220      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274e:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCC_OscConfig+0x3ec>
 800275c:	e01b      	b.n	8002796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fa37 	bl	8000be0 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7fe fa33 	bl	8000be0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e203      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a6 	beq.w	80028f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_OscConfig+0x57c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x57c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3a      	ldr	r2, [pc, #232]	; (80028cc <HAL_RCC_OscConfig+0x57c>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7fe f9fa 	bl	8000be0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe f9f6 	bl	8000be0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1c6      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002802:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCC_OscConfig+0x57c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x4d8>
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002826:	e024      	b.n	8002872 <HAL_RCC_OscConfig+0x522>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d110      	bne.n	8002852 <HAL_RCC_OscConfig+0x502>
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002850:	e00f      	b.n	8002872 <HAL_RCC_OscConfig+0x522>
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe f9b1 	bl	8000be0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe f9ad 	bl	8000be0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e17b      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x578>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ed      	beq.n	8002882 <HAL_RCC_OscConfig+0x532>
 80028a6:	e01a      	b.n	80028de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe f99a 	bl	8000be0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fe f996 	bl	8000be0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d906      	bls.n	80028d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e164      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d0:	4ba8      	ldr	r3, [pc, #672]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e8      	bne.n	80028b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4ba3      	ldr	r3, [pc, #652]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4aa2      	ldr	r2, [pc, #648]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03c      	beq.n	8002976 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01c      	beq.n	800293e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002904:	4b9b      	ldr	r3, [pc, #620]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290a:	4a9a      	ldr	r2, [pc, #616]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f964 	bl	8000be0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291c:	f7fe f960 	bl	8000be0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e130      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800292e:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x5cc>
 800293c:	e01b      	b.n	8002976 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002944:	4a8b      	ldr	r2, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe f947 	bl	8000be0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002956:	f7fe f943 	bl	8000be0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e113      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002968:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 800296a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8107 	beq.w	8002b8e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 80cb 	bne.w	8002b20 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	429a      	cmp	r2, r3
 800299c:	d12c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	3b01      	subs	r3, #1
 80029aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d123      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d11b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d113      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d06d      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d068      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0ba      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a55      	ldr	r2, [pc, #340]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a26:	f7fe f8db 	bl	8000be0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe f8d7 	bl	8000be0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0a7      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <HAL_RCC_OscConfig+0x828>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a6e:	0852      	lsrs	r2, r2, #1
 8002a70:	3a01      	subs	r2, #1
 8002a72:	0552      	lsls	r2, r2, #21
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a7a:	0852      	lsrs	r2, r2, #1
 8002a7c:	3a01      	subs	r2, #1
 8002a7e:	0652      	lsls	r2, r2, #25
 8002a80:	4311      	orrs	r1, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a86:	06d2      	lsls	r2, r2, #27
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	493a      	ldr	r1, [pc, #232]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a37      	ldr	r2, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa8:	f7fe f89a 	bl	8000be0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe f896 	bl	8000be0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e066      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ace:	e05e      	b.n	8002b8e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e05d      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d156      	bne.n	8002b8e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af8:	f7fe f872 	bl	8000be0 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe f86e 	bl	8000be0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e03e      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x7b0>
 8002b1e:	e036      	b.n	8002b8e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d031      	beq.n	8002b8a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b44:	f023 0303 	bic.w	r3, r3, #3
 8002b48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x824>)
 8002b50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f841 	bl	8000be0 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b60:	e00c      	b.n	8002b7c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe f83d 	bl	8000be0 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d905      	bls.n	8002b7c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e00d      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x848>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ec      	bne.n	8002b62 <HAL_RCC_OscConfig+0x812>
 8002b88:	e001      	b.n	8002b8e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e10f      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4984      	ldr	r1, [pc, #528]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b82      	ldr	r3, [pc, #520]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0f7      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8089 	beq.w	8002d04 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d133      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0e4      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c0a:	f000 fa0f 	bl	800302c <RCC_GetSysClockFreqFromPLLSource>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <HAL_RCC_ClockConfig+0x248>)
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d955      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2a:	4a6d      	ldr	r2, [pc, #436]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e044      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d03e      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d13a      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c54:	4a62      	ldr	r2, [pc, #392]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e02f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0ac      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c82:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0a0      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e098      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ca2:	f000 f8a7 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCC_ClockConfig+0x248>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d909      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4944      	ldr	r1, [pc, #272]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fd ff84 	bl	8000be0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fd ff80 	bl	8000be0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e070      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4930      	ldr	r1, [pc, #192]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d34:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d210      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 020f 	bic.w	r2, r3, #15
 8002d4c:	4923      	ldr	r1, [pc, #140]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e036      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4918      	ldr	r1, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4910      	ldr	r1, [pc, #64]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da4:	f000 f826 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_RCC_ClockConfig+0x24c>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x250>)
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x254>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd feb9 	bl	8000b40 <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	04c4b400 	.word	0x04c4b400
 8002de8:	08004c78 	.word	0x08004c78
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11e      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e50:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d133      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0xaa>
 8002e96:	e005      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e9a:	617b      	str	r3, [r7, #20]
      break;
 8002e9c:	e005      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea0:	617b      	str	r3, [r7, #20]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	617b      	str	r3, [r7, #20]
      break;
 8002ea8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	fb02 f203 	mul.w	r2, r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	3301      	adds	r3, #1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eea:	69bb      	ldr	r3, [r7, #24]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3724      	adds	r7, #36	; 0x24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004c90 	.word	0x08004c90
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4601      	mov	r1, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08004c88 	.word	0x08004c88

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f50:	f7ff ffda 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f54:	4601      	mov	r1, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08004c88 	.word	0x08004c88

08002f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f90:	f7ff f91a 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002f94:	6178      	str	r0, [r7, #20]
 8002f96:	e014      	b.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb0:	f7ff f90a 	bl	80021c8 <HAL_PWREx_GetVoltageRange>
 8002fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4a1a      	ldr	r2, [pc, #104]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d10b      	bne.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b80      	cmp	r3, #128	; 0x80
 8002fce:	d913      	bls.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd4:	d902      	bls.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00d      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e00a      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe6:	d902      	bls.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fe8:	2302      	movs	r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e004      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b70      	cmp	r3, #112	; 0x70
 8002ff2:	d101      	bne.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 020f 	bic.w	r2, r3, #15
 8003000:	4909      	ldr	r1, [pc, #36]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40022000 	.word	0x40022000

0800302c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d118      	bne.n	8003074 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e005      	b.n	800306a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d002      	beq.n	800308a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003088:	e005      	b.n	8003096 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800308c:	613b      	str	r3, [r7, #16]
    break;
 800308e:	e005      	b.n	800309c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003092:	613b      	str	r3, [r7, #16]
    break;
 8003094:	e002      	b.n	800309c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	613b      	str	r3, [r7, #16]
    break;
 800309a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3301      	adds	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	fb02 f203 	mul.w	r2, r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	0e5b      	lsrs	r3, r3, #25
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	3301      	adds	r3, #1
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030dc:	683b      	ldr	r3, [r7, #0]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08004c90 	.word	0x08004c90
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003104:	2300      	movs	r3, #0
 8003106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003108:	2300      	movs	r3, #0
 800310a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d00b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d804      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d015      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800312c:	e01d      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800312e:	2b60      	cmp	r3, #96	; 0x60
 8003130:	d01e      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d01c      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003136:	e018      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a85      	ldr	r2, [pc, #532]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003144:	e015      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fafd 	bl	800374c <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3320      	adds	r3, #32
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fbe4 	bl	800392c <RCCEx_PLLSAI2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	74fb      	strb	r3, [r7, #19]
      break;
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800317a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003186:	4973      	ldr	r1, [pc, #460]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d042      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d00f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xce>
 80031aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ae:	d805      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d011      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d017      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xee>
 80031ba:	e01f      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x100>
 80031bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c0:	d01f      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d01c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c8:	e018      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ca:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a61      	ldr	r2, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d6:	e015      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fab4 	bl	800374c <RCCEx_PLLSAI1_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e8:	e00c      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3320      	adds	r3, #32
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fb9b 	bl	800392c <RCCEx_PLLSAI2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031fa:	e003      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003204:	7cfb      	ldrb	r3, [r7, #19]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800320a:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800320c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	494e      	ldr	r1, [pc, #312]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003220:	e001      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 809f 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4a40      	ldr	r2, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
 800325a:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003276:	f7fd fcb3 	bl	8000be0 <HAL_GetTick>
 800327a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800327c:	e009      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fd fcaf 	bl	8000be0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d902      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	74fb      	strb	r3, [r7, #19]
        break;
 8003290:	e005      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ef      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d15b      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01f      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d019      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ee:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d016      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd fc6e 	bl	8000be0 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	e00b      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fd fc6a 	bl	8000be0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d902      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	74fb      	strb	r3, [r7, #19]
            break;
 800331e:	e006      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ec      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10c      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
 8003352:	e005      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4ba0      	ldr	r3, [pc, #640]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a9f      	ldr	r2, [pc, #636]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800337e:	4b9a      	ldr	r3, [pc, #616]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	4996      	ldr	r1, [pc, #600]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a0:	4b91      	ldr	r3, [pc, #580]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 020c 	bic.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	498e      	ldr	r1, [pc, #568]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c2:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	4985      	ldr	r1, [pc, #532]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033e4:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	497d      	ldr	r1, [pc, #500]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003406:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003414:	4974      	ldr	r1, [pc, #464]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003428:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	496c      	ldr	r1, [pc, #432]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344a:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003458:	4963      	ldr	r1, [pc, #396]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800346c:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347a:	495b      	ldr	r1, [pc, #364]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348e:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	4952      	ldr	r1, [pc, #328]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034b0:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	494a      	ldr	r1, [pc, #296]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034d2:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	4941      	ldr	r1, [pc, #260]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034f4:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	4939      	ldr	r1, [pc, #228]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	4930      	ldr	r1, [pc, #192]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003534:	d106      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003536:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003540:	60d3      	str	r3, [r2, #12]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f8f9 	bl	800374c <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d04d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357c:	d108      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800358e:	e012      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003596:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d106      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e020      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d6:	d109      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a02      	ldr	r2, [pc, #8]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	60d3      	str	r3, [r2, #12]
 80035e4:	e014      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f8a5 	bl	800374c <RCCEx_PLLSAI1_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	4947      	ldr	r1, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a41      	ldr	r2, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e011      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003652:	d10c      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f876 	bl	800374c <RCCEx_PLLSAI1_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01e      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800367a:	4b33      	ldr	r3, [pc, #204]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368a:	492f      	ldr	r1, [pc, #188]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2102      	movs	r1, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f851 	bl	800374c <RCCEx_PLLSAI1_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ca:	f023 0204 	bic.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	491c      	ldr	r1, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ee:	f023 0218 	bic.w	r2, r3, #24
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	4913      	ldr	r1, [pc, #76]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371c:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372e:	d105      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800373c:	7cbb      	ldrb	r3, [r7, #18]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375a:	4b70      	ldr	r3, [pc, #448]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d103      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
       ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d13f      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e03c      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d00c      	beq.n	80037a6 <RCCEx_PLLSAI1_Config+0x5a>
 800378c:	2b03      	cmp	r3, #3
 800378e:	d013      	beq.n	80037b8 <RCCEx_PLLSAI1_Config+0x6c>
 8003790:	2b01      	cmp	r3, #1
 8003792:	d120      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11d      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e01a      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a6:	4b5d      	ldr	r3, [pc, #372]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d116      	bne.n	80037e0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b6:	e013      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037b8:	4b58      	ldr	r3, [pc, #352]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10f      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037c4:	4b55      	ldr	r3, [pc, #340]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037d4:	e006      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      break;
 80037da:	e004      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80037e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f023 0203 	bic.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4948      	ldr	r1, [pc, #288]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 8086 	bne.w	8003912 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003806:	4b45      	ldr	r3, [pc, #276]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 800380c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003812:	f7fd f9e5 	bl	8000be0 <HAL_GetTick>
 8003816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003818:	e009      	b.n	800382e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800381a:	f7fd f9e1 	bl	8000be0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d902      	bls.n	800382e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	73fb      	strb	r3, [r7, #15]
        break;
 800382c:	e005      	b.n	800383a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ef      	bne.n	800381a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d168      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d113      	bne.n	800386e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003846:	4b35      	ldr	r3, [pc, #212]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <RCCEx_PLLSAI1_Config+0x1d4>)
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68d2      	ldr	r2, [r2, #12]
 8003858:	06d2      	lsls	r2, r2, #27
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6852      	ldr	r2, [r2, #4]
 8003860:	3a01      	subs	r2, #1
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	430a      	orrs	r2, r1
 8003866:	492d      	ldr	r1, [pc, #180]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
 800386c:	e02d      	b.n	80038ca <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d115      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6912      	ldr	r2, [r2, #16]
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0552      	lsls	r2, r2, #21
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	3a01      	subs	r2, #1
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	430a      	orrs	r2, r1
 8003898:	4920      	ldr	r1, [pc, #128]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]
 800389e:	e014      	b.n	80038ca <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6952      	ldr	r2, [r2, #20]
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	3a01      	subs	r2, #1
 80038b6:	0652      	lsls	r2, r2, #25
 80038b8:	4311      	orrs	r1, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6852      	ldr	r2, [r2, #4]
 80038be:	3a01      	subs	r2, #1
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	430a      	orrs	r2, r1
 80038c4:	4915      	ldr	r1, [pc, #84]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a13      	ldr	r2, [pc, #76]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd f983 	bl	8000be0 <HAL_GetTick>
 80038da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038dc:	e009      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038de:	f7fd f97f 	bl	8000be0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d902      	bls.n	80038f2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	73fb      	strb	r3, [r7, #15]
          break;
 80038f0:	e005      	b.n	80038fe <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ef      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <RCCEx_PLLSAI1_Config+0x1d0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	07ff800f 	.word	0x07ff800f
 8003924:	ff9f800f 	.word	0xff9f800f
 8003928:	f9ff800f 	.word	0xf9ff800f

0800392c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00e      	beq.n	8003964 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0203 	and.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d103      	bne.n	800395e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
       ||
 800395a:	2b00      	cmp	r3, #0
 800395c:	d13f      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e03c      	b.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d00c      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0x5a>
 800396c:	2b03      	cmp	r3, #3
 800396e:	d013      	beq.n	8003998 <RCCEx_PLLSAI2_Config+0x6c>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d120      	bne.n	80039b6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e01a      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e013      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003998:	4b58      	ldr	r3, [pc, #352]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039b4:	e006      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ba:	e004      	b.n	80039c6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80039bc:	bf00      	nop
 80039be:	e002      	b.n	80039c6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80039c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f023 0203 	bic.w	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4948      	ldr	r1, [pc, #288]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8086 	bne.w	8003af2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039e6:	4b45      	ldr	r3, [pc, #276]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a44      	ldr	r2, [pc, #272]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f2:	f7fd f8f5 	bl	8000be0 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039f8:	e009      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fa:	f7fd f8f1 	bl	8000be0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d902      	bls.n	8003a0e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0c:	e005      	b.n	8003a1a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ef      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d168      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d113      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	0211      	lsls	r1, r2, #8
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68d2      	ldr	r2, [r2, #12]
 8003a38:	06d2      	lsls	r2, r2, #27
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	430a      	orrs	r2, r1
 8003a46:	492d      	ldr	r1, [pc, #180]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	614b      	str	r3, [r1, #20]
 8003a4c:	e02d      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d115      	bne.n	8003a80 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	0211      	lsls	r1, r2, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6912      	ldr	r2, [r2, #16]
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0552      	lsls	r2, r2, #21
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6852      	ldr	r2, [r2, #4]
 8003a72:	3a01      	subs	r2, #1
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	430a      	orrs	r2, r1
 8003a78:	4920      	ldr	r1, [pc, #128]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	614b      	str	r3, [r1, #20]
 8003a7e:	e014      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a80:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6952      	ldr	r2, [r2, #20]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	4915      	ldr	r1, [pc, #84]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fd f893 	bl	8000be0 <HAL_GetTick>
 8003aba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003abc:	e009      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003abe:	f7fd f88f 	bl	8000be0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d902      	bls.n	8003ad2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	73fb      	strb	r3, [r7, #15]
          break;
 8003ad0:	e005      	b.n	8003ade <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ef      	beq.n	8003abe <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	07ff800f 	.word	0x07ff800f
 8003b04:	ff9f800f 	.word	0xff9f800f
 8003b08:	f9ff800f 	.word	0xf9ff800f

08003b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e049      	b.n	8003bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc ff00 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 f8ee 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_ConfigClockSource+0x18>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0a8      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x16a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bf4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d067      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x124>
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d80b      	bhi.n	8003c2a <HAL_TIM_ConfigClockSource+0x70>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d073      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x144>
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d802      	bhi.n	8003c20 <HAL_TIM_ConfigClockSource+0x66>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d06f      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c1e:	e078      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d06c      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x144>
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d06a      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003c28:	e073      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c2a:	2b70      	cmp	r3, #112	; 0x70
 8003c2c:	d00d      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x90>
 8003c2e:	2b70      	cmp	r3, #112	; 0x70
 8003c30:	d804      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x82>
 8003c32:	2b50      	cmp	r3, #80	; 0x50
 8003c34:	d033      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xe4>
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d041      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003c3a:	e06a      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d066      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x156>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	d017      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003c48:	e063      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f000 f97b 	bl	8003f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	609a      	str	r2, [r3, #8]
      break;
 8003c76:	e04c      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 f964 	bl	8003f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e039      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 f8d8 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2150      	movs	r1, #80	; 0x50
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f931 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e029      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f8f7 	bl	8003ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2160      	movs	r1, #96	; 0x60
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f921 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e019      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8b8 	bl	8003e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f911 	bl	8003f1e <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e009      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 f908 	bl	8003f1e <TIM_ITRx_SetConfig>
        break;
 8003d0e:	e000      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003d10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <TIM_Base_SetConfig+0x114>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d00f      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <TIM_Base_SetConfig+0x118>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <TIM_Base_SetConfig+0x11c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3b      	ldr	r2, [pc, #236]	; (8003e4c <TIM_Base_SetConfig+0x120>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3a      	ldr	r2, [pc, #232]	; (8003e50 <TIM_Base_SetConfig+0x124>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <TIM_Base_SetConfig+0x114>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <TIM_Base_SetConfig+0x118>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <TIM_Base_SetConfig+0x11c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <TIM_Base_SetConfig+0x120>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0x124>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <TIM_Base_SetConfig+0x128>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <TIM_Base_SetConfig+0x130>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <TIM_Base_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <TIM_Base_SetConfig+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <TIM_Base_SetConfig+0x128>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <TIM_Base_SetConfig+0x130>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40013400 	.word	0x40013400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800

08003e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0201 	bic.w	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 030a 	bic.w	r3, r3, #10
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0210 	bic.w	r2, r3, #16
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f043 0307 	orr.w	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e068      	b.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2e      	ldr	r2, [pc, #184]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fe6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01d      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d018      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a13      	ldr	r2, [pc, #76]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40014000 	.word	0x40014000

080040a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fc fc53 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2224      	movs	r2, #36	; 0x24
 80040d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f82c 	bl	8004144 <UART_SetConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e022      	b.n	800413c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 faf2 	bl	80046e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb79 	bl	800482c <UART_CheckIdleState>
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004148:	b088      	sub	sp, #32
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4bb1      	ldr	r3, [pc, #708]	; (8004440 <UART_SetConfig+0x2fc>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4aa6      	ldr	r2, [pc, #664]	; (8004444 <UART_SetConfig+0x300>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	f023 010f 	bic.w	r1, r3, #15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a97      	ldr	r2, [pc, #604]	; (8004448 <UART_SetConfig+0x304>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d121      	bne.n	8004234 <UART_SetConfig+0xf0>
 80041f0:	4b96      	ldr	r3, [pc, #600]	; (800444c <UART_SetConfig+0x308>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d816      	bhi.n	800422c <UART_SetConfig+0xe8>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0xc0>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004215 	.word	0x08004215
 8004208:	08004221 	.word	0x08004221
 800420c:	0800421b 	.word	0x0800421b
 8004210:	08004227 	.word	0x08004227
 8004214:	2301      	movs	r3, #1
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e0e8      	b.n	80043ec <UART_SetConfig+0x2a8>
 800421a:	2302      	movs	r3, #2
 800421c:	76fb      	strb	r3, [r7, #27]
 800421e:	e0e5      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004220:	2304      	movs	r3, #4
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e0e2      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004226:	2308      	movs	r3, #8
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e0df      	b.n	80043ec <UART_SetConfig+0x2a8>
 800422c:	2310      	movs	r3, #16
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	bf00      	nop
 8004232:	e0db      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a85      	ldr	r2, [pc, #532]	; (8004450 <UART_SetConfig+0x30c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d134      	bne.n	80042a8 <UART_SetConfig+0x164>
 800423e:	4b83      	ldr	r3, [pc, #524]	; (800444c <UART_SetConfig+0x308>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d829      	bhi.n	80042a0 <UART_SetConfig+0x15c>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0x110>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004289 	.word	0x08004289
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042a1 	.word	0x080042a1
 8004264:	08004295 	.word	0x08004295
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042a1 	.word	0x080042a1
 8004274:	0800428f 	.word	0x0800428f
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a1 	.word	0x080042a1
 8004284:	0800429b 	.word	0x0800429b
 8004288:	2300      	movs	r3, #0
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e0ae      	b.n	80043ec <UART_SetConfig+0x2a8>
 800428e:	2302      	movs	r3, #2
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e0ab      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004294:	2304      	movs	r3, #4
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e0a8      	b.n	80043ec <UART_SetConfig+0x2a8>
 800429a:	2308      	movs	r3, #8
 800429c:	76fb      	strb	r3, [r7, #27]
 800429e:	e0a5      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042a0:	2310      	movs	r3, #16
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	bf00      	nop
 80042a6:	e0a1      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a69      	ldr	r2, [pc, #420]	; (8004454 <UART_SetConfig+0x310>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d120      	bne.n	80042f4 <UART_SetConfig+0x1b0>
 80042b2:	4b66      	ldr	r3, [pc, #408]	; (800444c <UART_SetConfig+0x308>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d00f      	beq.n	80042e0 <UART_SetConfig+0x19c>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d802      	bhi.n	80042ca <UART_SetConfig+0x186>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0x190>
 80042c8:	e010      	b.n	80042ec <UART_SetConfig+0x1a8>
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d005      	beq.n	80042da <UART_SetConfig+0x196>
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x1a2>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x1a8>
 80042d4:	2300      	movs	r3, #0
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e088      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042da:	2302      	movs	r3, #2
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e085      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042e0:	2304      	movs	r3, #4
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e082      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042e6:	2308      	movs	r3, #8
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e07f      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042ec:	2310      	movs	r3, #16
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	bf00      	nop
 80042f2:	e07b      	b.n	80043ec <UART_SetConfig+0x2a8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a57      	ldr	r2, [pc, #348]	; (8004458 <UART_SetConfig+0x314>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d120      	bne.n	8004340 <UART_SetConfig+0x1fc>
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <UART_SetConfig+0x308>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d00f      	beq.n	800432c <UART_SetConfig+0x1e8>
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d802      	bhi.n	8004316 <UART_SetConfig+0x1d2>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <UART_SetConfig+0x1dc>
 8004314:	e010      	b.n	8004338 <UART_SetConfig+0x1f4>
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d005      	beq.n	8004326 <UART_SetConfig+0x1e2>
 800431a:	2bc0      	cmp	r3, #192	; 0xc0
 800431c:	d009      	beq.n	8004332 <UART_SetConfig+0x1ee>
 800431e:	e00b      	b.n	8004338 <UART_SetConfig+0x1f4>
 8004320:	2300      	movs	r3, #0
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e062      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004326:	2302      	movs	r3, #2
 8004328:	76fb      	strb	r3, [r7, #27]
 800432a:	e05f      	b.n	80043ec <UART_SetConfig+0x2a8>
 800432c:	2304      	movs	r3, #4
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e05c      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004332:	2308      	movs	r3, #8
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e059      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004338:	2310      	movs	r3, #16
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	bf00      	nop
 800433e:	e055      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a45      	ldr	r2, [pc, #276]	; (800445c <UART_SetConfig+0x318>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d124      	bne.n	8004394 <UART_SetConfig+0x250>
 800434a:	4b40      	ldr	r3, [pc, #256]	; (800444c <UART_SetConfig+0x308>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004358:	d012      	beq.n	8004380 <UART_SetConfig+0x23c>
 800435a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435e:	d802      	bhi.n	8004366 <UART_SetConfig+0x222>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <UART_SetConfig+0x230>
 8004364:	e012      	b.n	800438c <UART_SetConfig+0x248>
 8004366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436a:	d006      	beq.n	800437a <UART_SetConfig+0x236>
 800436c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004370:	d009      	beq.n	8004386 <UART_SetConfig+0x242>
 8004372:	e00b      	b.n	800438c <UART_SetConfig+0x248>
 8004374:	2300      	movs	r3, #0
 8004376:	76fb      	strb	r3, [r7, #27]
 8004378:	e038      	b.n	80043ec <UART_SetConfig+0x2a8>
 800437a:	2302      	movs	r3, #2
 800437c:	76fb      	strb	r3, [r7, #27]
 800437e:	e035      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004380:	2304      	movs	r3, #4
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e032      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004386:	2308      	movs	r3, #8
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e02f      	b.n	80043ec <UART_SetConfig+0x2a8>
 800438c:	2310      	movs	r3, #16
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	bf00      	nop
 8004392:	e02b      	b.n	80043ec <UART_SetConfig+0x2a8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <UART_SetConfig+0x300>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d124      	bne.n	80043e8 <UART_SetConfig+0x2a4>
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <UART_SetConfig+0x308>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d012      	beq.n	80043d4 <UART_SetConfig+0x290>
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d802      	bhi.n	80043ba <UART_SetConfig+0x276>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <UART_SetConfig+0x284>
 80043b8:	e012      	b.n	80043e0 <UART_SetConfig+0x29c>
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d006      	beq.n	80043ce <UART_SetConfig+0x28a>
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c4:	d009      	beq.n	80043da <UART_SetConfig+0x296>
 80043c6:	e00b      	b.n	80043e0 <UART_SetConfig+0x29c>
 80043c8:	2300      	movs	r3, #0
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	e00e      	b.n	80043ec <UART_SetConfig+0x2a8>
 80043ce:	2302      	movs	r3, #2
 80043d0:	76fb      	strb	r3, [r7, #27]
 80043d2:	e00b      	b.n	80043ec <UART_SetConfig+0x2a8>
 80043d4:	2304      	movs	r3, #4
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	e008      	b.n	80043ec <UART_SetConfig+0x2a8>
 80043da:	2308      	movs	r3, #8
 80043dc:	76fb      	strb	r3, [r7, #27]
 80043de:	e005      	b.n	80043ec <UART_SetConfig+0x2a8>
 80043e0:	2310      	movs	r3, #16
 80043e2:	76fb      	strb	r3, [r7, #27]
 80043e4:	bf00      	nop
 80043e6:	e001      	b.n	80043ec <UART_SetConfig+0x2a8>
 80043e8:	2310      	movs	r3, #16
 80043ea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <UART_SetConfig+0x300>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	f040 80a1 	bne.w	800453a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043f8:	7efb      	ldrb	r3, [r7, #27]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d836      	bhi.n	800446c <UART_SetConfig+0x328>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x2c0>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004429 	.word	0x08004429
 8004408:	0800446d 	.word	0x0800446d
 800440c:	08004431 	.word	0x08004431
 8004410:	0800446d 	.word	0x0800446d
 8004414:	08004437 	.word	0x08004437
 8004418:	0800446d 	.word	0x0800446d
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800446d 	.word	0x0800446d
 8004424:	08004465 	.word	0x08004465
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fe fd7a 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 800442c:	6178      	str	r0, [r7, #20]
        break;
 800442e:	e022      	b.n	8004476 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <UART_SetConfig+0x31c>)
 8004432:	617b      	str	r3, [r7, #20]
        break;
 8004434:	e01f      	b.n	8004476 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004436:	f7fe fcdd 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800443a:	6178      	str	r0, [r7, #20]
        break;
 800443c:	e01b      	b.n	8004476 <UART_SetConfig+0x332>
 800443e:	bf00      	nop
 8004440:	cfff69f3 	.word	0xcfff69f3
 8004444:	40008000 	.word	0x40008000
 8004448:	40013800 	.word	0x40013800
 800444c:	40021000 	.word	0x40021000
 8004450:	40004400 	.word	0x40004400
 8004454:	40004800 	.word	0x40004800
 8004458:	40004c00 	.word	0x40004c00
 800445c:	40005000 	.word	0x40005000
 8004460:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004468:	617b      	str	r3, [r7, #20]
        break;
 800446a:	e004      	b.n	8004476 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	76bb      	strb	r3, [r7, #26]
        break;
 8004474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 811d 	beq.w	80046b8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	4a97      	ldr	r2, [pc, #604]	; (80046e0 <UART_SetConfig+0x59c>)
 8004484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004488:	461a      	mov	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d305      	bcc.n	80044ae <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d902      	bls.n	80044b4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	76bb      	strb	r3, [r7, #26]
 80044b2:	e101      	b.n	80046b8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4a87      	ldr	r2, [pc, #540]	; (80046e0 <UART_SetConfig+0x59c>)
 80044c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	461a      	mov	r2, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	f7fb fe94 	bl	80001fc <__aeabi_uldivmod>
 80044d4:	4603      	mov	r3, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	4619      	mov	r1, r3
 80044da:	4622      	mov	r2, r4
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f04f 0400 	mov.w	r4, #0
 80044e4:	0214      	lsls	r4, r2, #8
 80044e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044ea:	020b      	lsls	r3, r1, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6852      	ldr	r2, [r2, #4]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	4611      	mov	r1, r2
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	eb13 0b01 	adds.w	fp, r3, r1
 80044fc:	eb44 0c02 	adc.w	ip, r4, r2
 8004500:	4658      	mov	r0, fp
 8004502:	4661      	mov	r1, ip
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fb fe74 	bl	80001fc <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004520:	d308      	bcc.n	8004534 <UART_SetConfig+0x3f0>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d204      	bcs.n	8004534 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e0c1      	b.n	80046b8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	76bb      	strb	r3, [r7, #26]
 8004538:	e0be      	b.n	80046b8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d164      	bne.n	800460e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004544:	7efb      	ldrb	r3, [r7, #27]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d827      	bhi.n	800459a <UART_SetConfig+0x456>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x40c>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004575 	.word	0x08004575
 8004554:	0800457d 	.word	0x0800457d
 8004558:	08004585 	.word	0x08004585
 800455c:	0800459b 	.word	0x0800459b
 8004560:	0800458b 	.word	0x0800458b
 8004564:	0800459b 	.word	0x0800459b
 8004568:	0800459b 	.word	0x0800459b
 800456c:	0800459b 	.word	0x0800459b
 8004570:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004574:	f7fe fcd4 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8004578:	6178      	str	r0, [r7, #20]
        break;
 800457a:	e013      	b.n	80045a4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7fe fce6 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8004580:	6178      	str	r0, [r7, #20]
        break;
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b57      	ldr	r3, [pc, #348]	; (80046e4 <UART_SetConfig+0x5a0>)
 8004586:	617b      	str	r3, [r7, #20]
        break;
 8004588:	e00c      	b.n	80045a4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7fe fc33 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800458e:	6178      	str	r0, [r7, #20]
        break;
 8004590:	e008      	b.n	80045a4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	617b      	str	r3, [r7, #20]
        break;
 8004598:	e004      	b.n	80045a4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	76bb      	strb	r3, [r7, #26]
        break;
 80045a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8086 	beq.w	80046b8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	4a4b      	ldr	r2, [pc, #300]	; (80046e0 <UART_SetConfig+0x59c>)
 80045b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b6:	461a      	mov	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80045be:	005a      	lsls	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d916      	bls.n	8004608 <UART_SetConfig+0x4c4>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d212      	bcs.n	8004608 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f023 030f 	bic.w	r3, r3, #15
 80045ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	89fb      	ldrh	r3, [r7, #14]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	89fa      	ldrh	r2, [r7, #14]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	e057      	b.n	80046b8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	76bb      	strb	r3, [r7, #26]
 800460c:	e054      	b.n	80046b8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460e:	7efb      	ldrb	r3, [r7, #27]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d828      	bhi.n	8004666 <UART_SetConfig+0x522>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x4d8>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fc6e 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8004644:	6178      	str	r0, [r7, #20]
        break;
 8004646:	e013      	b.n	8004670 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fc80 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 800464c:	6178      	str	r0, [r7, #20]
        break;
 800464e:	e00f      	b.n	8004670 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <UART_SetConfig+0x5a0>)
 8004652:	617b      	str	r3, [r7, #20]
        break;
 8004654:	e00c      	b.n	8004670 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fbcd 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800465a:	6178      	str	r0, [r7, #20]
        break;
 800465c:	e008      	b.n	8004670 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	617b      	str	r3, [r7, #20]
        break;
 8004664:	e004      	b.n	8004670 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	76bb      	strb	r3, [r7, #26]
        break;
 800466e:	bf00      	nop
    }

    if (pclk != 0U)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <UART_SetConfig+0x59c>)
 800467c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004680:	461a      	mov	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fbb3 f2f2 	udiv	r2, r3, r2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d908      	bls.n	80046b4 <UART_SetConfig+0x570>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d204      	bcs.n	80046b4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	e001      	b.n	80046b8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80046d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80046e0:	08004cc0 	.word	0x08004cc0
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e6:	d10a      	bne.n	80047fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800483c:	f7fc f9d0 	bl	8000be0 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d10e      	bne.n	800486e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f82c 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e022      	b.n	80048b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d10e      	bne.n	800489a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800487c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f816 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00c      	b.n	80048b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	e062      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d05e      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7fc f983 	bl	8000be0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <UART_WaitOnFlagUntilTimeout+0x30>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11d      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048fa:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e045      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02e      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d126      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800495e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e00f      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d08d      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e027      	b.n	8004a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2224      	movs	r2, #36	; 0x24
 80049de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e02d      	b.n	8004aa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	; 0x24
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f850 	bl	8004b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e02d      	b.n	8004b1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2224      	movs	r2, #36	; 0x24
 8004ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f812 	bl	8004b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b30:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b3a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b48:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b64:	e03d      	b.n	8004be2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b66:	2308      	movs	r3, #8
 8004b68:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	0e5b      	lsrs	r3, r3, #25
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	0f5b      	lsrs	r3, r3, #29
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b8e:	7fbb      	ldrb	r3, [r7, #30]
 8004b90:	7f3a      	ldrb	r2, [r7, #28]
 8004b92:	f107 0120 	add.w	r1, r7, #32
 8004b96:	440a      	add	r2, r1
 8004b98:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	7f3a      	ldrb	r2, [r7, #28]
 8004ba2:	f107 0120 	add.w	r1, r7, #32
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bb8:	7ffb      	ldrb	r3, [r7, #31]
 8004bba:	7f7a      	ldrb	r2, [r7, #29]
 8004bbc:	f107 0120 	add.w	r1, r7, #32
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	7f7a      	ldrb	r2, [r7, #29]
 8004bcc:	f107 0120 	add.w	r1, r7, #32
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004be2:	bf00      	nop
 8004be4:	3724      	adds	r7, #36	; 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	08004c68 	.word	0x08004c68
 8004bf4:	08004c70 	.word	0x08004c70

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4e0d      	ldr	r6, [pc, #52]	; (8004c30 <__libc_init_array+0x38>)
 8004bfc:	4c0d      	ldr	r4, [pc, #52]	; (8004c34 <__libc_init_array+0x3c>)
 8004bfe:	1ba4      	subs	r4, r4, r6
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	2500      	movs	r5, #0
 8004c04:	42a5      	cmp	r5, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	4e0b      	ldr	r6, [pc, #44]	; (8004c38 <__libc_init_array+0x40>)
 8004c0a:	4c0c      	ldr	r4, [pc, #48]	; (8004c3c <__libc_init_array+0x44>)
 8004c0c:	f000 f820 	bl	8004c50 <_init>
 8004c10:	1ba4      	subs	r4, r4, r6
 8004c12:	10a4      	asrs	r4, r4, #2
 8004c14:	2500      	movs	r5, #0
 8004c16:	42a5      	cmp	r5, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c20:	4798      	blx	r3
 8004c22:	3501      	adds	r5, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c2a:	4798      	blx	r3
 8004c2c:	3501      	adds	r5, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	08004ce0 	.word	0x08004ce0
 8004c34:	08004ce0 	.word	0x08004ce0
 8004c38:	08004ce0 	.word	0x08004ce0
 8004c3c:	08004ce4 	.word	0x08004ce4

08004c40 <memset>:
 8004c40:	4402      	add	r2, r0
 8004c42:	4603      	mov	r3, r0
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d100      	bne.n	8004c4a <memset+0xa>
 8004c48:	4770      	bx	lr
 8004c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4e:	e7f9      	b.n	8004c44 <memset+0x4>

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
