
volttemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f64  08004f64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f6c  08004f6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08004f80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004f80  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001197e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e33  00000000  00000000  000319ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00034928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bb01  00000000  00000000  00035968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d28f  00000000  00000000  00061469  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117f4a  00000000  00000000  0006e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e4  00000000  00000000  001866c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004edc 	.word	0x08004edc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004edc 	.word	0x08004edc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <lab2_adc_func>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t lab2_adc_func(int toggle_bit) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]

	if (toggle_bit == 0) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d131      	bne.n	8000580 <lab2_adc_func+0x84>
		sConfig.Channel = ADC_CHANNEL_VREFINT;
 800051c:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <lab2_adc_func+0x10c>)
 800051e:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000520:	2306      	movs	r3, #6
 8000522:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000528:	237f      	movs	r3, #127	; 0x7f
 800052a:	617b      	str	r3, [r7, #20]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052c:	2304      	movs	r3, #4
 800052e:	61bb      	str	r3, [r7, #24]
		sConfig.Offset = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4619      	mov	r1, r3
 800053a:	4834      	ldr	r0, [pc, #208]	; (800060c <lab2_adc_func+0x110>)
 800053c:	f001 f874 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <lab2_adc_func+0x4e>
			Error_Handler();
 8000546:	f000 fa89 	bl	8000a5c <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 800054a:	4830      	ldr	r0, [pc, #192]	; (800060c <lab2_adc_func+0x110>)
 800054c:	f000 ff74 	bl	8001438 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000554:	482d      	ldr	r0, [pc, #180]	; (800060c <lab2_adc_func+0x110>)
 8000556:	f000 ffd2 	bl	80014fe <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&hadc1);
 800055a:	482c      	ldr	r0, [pc, #176]	; (800060c <lab2_adc_func+0x110>)
 800055c:	f001 f857 	bl	800160e <HAL_ADC_GetValue>
 8000560:	4603      	mov	r3, r0
 8000562:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t test = *(uint16_t*) VREFINT_CAL_Addr;
 8000564:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <lab2_adc_func+0x114>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t vdda = 3000 * test / raw;
 800056a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800056c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000570:	fb02 f203 	mul.w	r2, r2, r3
 8000574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000576:	fb92 f3f3 	sdiv	r3, r2, r3
 800057a:	847b      	strh	r3, [r7, #34]	; 0x22
		return vdda;
 800057c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800057e:	e03e      	b.n	80005fe <lab2_adc_func+0x102>
	}
	if (toggle_bit == 1) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d13b      	bne.n	80005fe <lab2_adc_func+0x102>
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <lab2_adc_func+0x118>)
 8000588:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800058a:	2306      	movs	r3, #6
 800058c:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000592:	237f      	movs	r3, #127	; 0x7f
 8000594:	617b      	str	r3, [r7, #20]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000596:	2304      	movs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
		sConfig.Offset = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4819      	ldr	r0, [pc, #100]	; (800060c <lab2_adc_func+0x110>)
 80005a6:	f001 f83f 	bl	8001628 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <lab2_adc_func+0xb8>
			Error_Handler();
 80005b0:	f000 fa54 	bl	8000a5c <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <lab2_adc_func+0x110>)
 80005b6:	f000 ff3f 	bl	8001438 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80005ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <lab2_adc_func+0x110>)
 80005c0:	f000 ff9d 	bl	80014fe <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&hadc1);
 80005c4:	4811      	ldr	r0, [pc, #68]	; (800060c <lab2_adc_func+0x110>)
 80005c6:	f001 f822 	bl	800160e <HAL_ADC_GetValue>
 80005ca:	4603      	mov	r3, r0
 80005cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t cal1 = *(uint16_t*) TS_CAL1_Addr;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <lab2_adc_func+0x11c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t cal2 = *(uint16_t*) TS_CAL2_Addr;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <lab2_adc_func+0x120>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t temperature = (raw - cal1) * ((130 - 30) / (cal2 - cal1)) + 30;
 80005da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80005e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	2164      	movs	r1, #100	; 0x64
 80005ea:	fb91 f3f3 	sdiv	r3, r1, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	fb12 f303 	smulbb	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	331e      	adds	r3, #30
 80005f8:	853b      	strh	r3, [r7, #40]	; 0x28
		return temperature;
 80005fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005fc:	e7ff      	b.n	80005fe <lab2_adc_func+0x102>
	}
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3730      	adds	r7, #48	; 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	80000001 	.word	0x80000001
 800060c:	20000028 	.word	0x20000028
 8000610:	1fff75aa 	.word	0x1fff75aa
 8000614:	c7520000 	.word	0xc7520000
 8000618:	1fff75a8 	.word	0x1fff75a8
 800061c:	1fff75ca 	.word	0x1fff75ca

08000620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000626:	f000 fb4c 	bl	8000cc2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062a:	f000 f833 	bl	8000694 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062e:	f000 f9b9 	bl	80009a4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000632:	f000 f8b9 	bl	80007a8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000636:	f000 f91b 	bl	8000870 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800063a:	f000 f967 	bl	800090c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	int toggle_bit = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint16_t value = lab2_adc_func(toggle_bit);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff5a 	bl	80004fc <lab2_adc_func>
 8000648:	4603      	mov	r3, r0
 800064a:	807b      	strh	r3, [r7, #2]

		// toggle led2 using blue user button
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == 0) { // button is active low
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <main+0x6c>)
 8000652:	f001 feb5 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f2      	bne.n	8000642 <main+0x22>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <main+0x70>)
 8000662:	f001 fedd 	bl	8002420 <HAL_GPIO_TogglePin>
			if (toggle_bit == 1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d102      	bne.n	8000672 <main+0x52>
				toggle_bit = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	e001      	b.n	8000676 <main+0x56>
			else
				toggle_bit = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
			value = lab2_adc_func(toggle_bit);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ff40 	bl	80004fc <lab2_adc_func>
 800067c:	4603      	mov	r3, r0
 800067e:	807b      	strh	r3, [r7, #2]
			HAL_Delay(500);
 8000680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000684:	f000 fb92 	bl	8000dac <HAL_Delay>
	while (1) {
 8000688:	e7db      	b.n	8000642 <main+0x22>
 800068a:	bf00      	nop
 800068c:	48000800 	.word	0x48000800
 8000690:	48000400 	.word	0x48000400

08000694 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b0bc      	sub	sp, #240	; 0xf0
 8000698:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fc12 	bl	8004ecc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2294      	movs	r2, #148	; 0x94
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fc04 	bl	8004ecc <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80006c4:	2000      	movs	r0, #0
 80006c6:	f001 fee5 	bl	8002494 <HAL_PWREx_ControlVoltageScaling>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x40>
			!= HAL_OK) {
		Error_Handler();
 80006d0:	f000 f9c4 	bl	8000a5c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e6:	2360      	movs	r3, #96	; 0x60
 80006e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 80006fe:	233c      	movs	r3, #60	; 0x3c
 8000700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000716:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ff5e 	bl	80025dc <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
		Error_Handler();
 8000726:	f000 f999 	bl	8000a5c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000748:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fb6a 	bl	8002e28 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
		Error_Handler();
 800075a:	f000 f97f 	bl	8000a5c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800075e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000762:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000764:	2300      	movs	r3, #0
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800076c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000770:	2301      	movs	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000778:	2318      	movs	r3, #24
 800077a:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800078c:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fdf9 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x10c>
		Error_Handler();
 800079c:	f000 f95e 	bl	8000a5c <Error_Handler>
	}
}
 80007a0:	bf00      	nop
 80007a2:	37f0      	adds	r7, #240	; 0xf0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007c0:	4a29      	ldr	r2, [pc, #164]	; (8000868 <MX_ADC1_Init+0xc0>)
 80007c2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ADC1_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_ADC1_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_ADC1_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_ADC1_Init+0xbc>)
 8000820:	f000 fcc0 	bl	80011a4 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0x86>
		Error_Handler();
 800082a:	f000 f917 	bl	8000a5c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC1_Init+0xc4>)
 8000830:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2306      	movs	r3, #6
 8000834:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083e:	2304      	movs	r3, #4
 8000840:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_ADC1_Init+0xbc>)
 800084c:	f000 feec 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xb2>
		Error_Handler();
 8000856:	f000 f901 	bl	8000a5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000028 	.word	0x20000028
 8000868:	50040000 	.word	0x50040000
 800086c:	80000001 	.word	0x80000001

08000870 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_TIM2_Init+0x98>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000894:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60000;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_TIM2_Init+0x98>)
 8000898:	f64e 2260 	movw	r2, #60000	; 0xea60
 800089c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2000;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM2_Init+0x98>)
 80008a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM2_Init+0x98>)
 80008ba:	f003 fa6d 	bl	8003d98 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x58>
		Error_Handler();
 80008c4:	f000 f8ca 	bl	8000a5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM2_Init+0x98>)
 80008d6:	f003 fab6 	bl	8003e46 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x74>
		Error_Handler();
 80008e0:	f000 f8bc 	bl	8000a5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM2_Init+0x98>)
 80008f2:	f003 fc95 	bl	8004220 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80008fc:	f000 f8ae 	bl	8000a5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000011c 	.word	0x2000011c

0800090c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <MX_USART1_UART_Init+0x94>)
 8000914:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_USART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_USART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART1_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000956:	f003 fceb 	bl	8004330 <HAL_UART_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000960:	f000 f87c 	bl	8000a5c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000964:	2100      	movs	r1, #0
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_USART1_UART_Init+0x90>)
 8000968:	f004 f9a7 	bl	8004cba <HAL_UARTEx_SetTxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000972:	f000 f873 	bl	8000a5c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000976:	2100      	movs	r1, #0
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <MX_USART1_UART_Init+0x90>)
 800097a:	f004 f9dc 	bl	8004d36 <HAL_UARTEx_SetRxFifoThreshold>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000984:	f000 f86a 	bl	8000a5c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_USART1_UART_Init+0x90>)
 800098a:	f004 f95d 	bl	8004c48 <HAL_UARTEx_DisableFifoMode>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000994:	f000 f862 	bl	8000a5c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000090 	.word	0x20000090
 80009a0:	40013800 	.word	0x40013800

080009a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xac>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xb0>)
 8000a0a:	f001 fcf1 	bl	80023f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_GPIO_Init+0xb4>)
 8000a24:	f001 fb3a 	bl	800209c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0xb0>)
 8000a42:	f001 fb2b 	bl	800209c <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400
 8000a58:	48000800 	.word	0x48000800

08000a5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a62:	e7fe      	b.n	8000a62 <Error_Handler+0x6>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	; 0x60
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_ADC_MspInit+0x38>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d10b      	bne.n	8000ad6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_ADC_MspInit+0x3c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <HAL_ADC_MspInit+0x3c>)
 8000ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <HAL_ADC_MspInit+0x3c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	50040000 	.word	0x50040000
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f001 fa7f 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f8b6 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <SystemInit+0x64>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <SystemInit+0x64>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <SystemInit+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <SystemInit+0x68>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <SystemInit+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <SystemInit+0x68>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <SystemInit+0x68>)
 8000c30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SystemInit+0x68>)
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <SystemInit+0x68>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <SystemInit+0x68>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SystemInit+0x68>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SystemInit+0x64>)
 8000c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	40021000 	.word	0x40021000

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffc6 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c7a:	e003      	b.n	8000c84 <LoopCopyDataInit>

08000c7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c82:	3104      	adds	r1, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c8c:	d3f6      	bcc.n	8000c7c <CopyDataInit>
	ldr	r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c90:	e002      	b.n	8000c98 <LoopFillZerobss>

08000c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c94:	f842 3b04 	str.w	r3, [r2], #4

08000c98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LoopForever+0x16>)
	cmp	r2, r3
 8000c9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c9c:	d3f9      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f004 f8f1 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fcbd 	bl	8000620 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000cac:	08004f74 	.word	0x08004f74
	ldr	r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cbc:	2000016c 	.word	0x2000016c

08000cc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_IRQHandler>

08000cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f001 f9b1 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f80e 	bl	8000cf4 <HAL_InitTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	e001      	b.n	8000ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce4:	f7ff febe 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d023      	beq.n	8000d50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_InitTick+0x70>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 f9af 	bl	8002082 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10f      	bne.n	8000d4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d809      	bhi.n	8000d44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f001 f987 	bl	800204a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_InitTick+0x74>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e004      	b.n	8000d54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e001      	b.n	8000d54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000168 	.word	0x20000168

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000168 	.word	0x20000168

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_Delay+0x40>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008

08000df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3360      	adds	r3, #96	; 0x60
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_ADC_SetOffset+0x44>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	03fff000 	.word	0x03fff000

08000ea0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3360      	adds	r3, #96	; 0x60
 8000eae:	461a      	mov	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3360      	adds	r3, #96	; 0x60
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	615a      	str	r2, [r3, #20]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	211f      	movs	r1, #31
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0e9b      	lsrs	r3, r3, #26
 8000f86:	f003 011f 	and.w	r1, r3, #31
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	0e5b      	lsrs	r3, r3, #25
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	0d1b      	lsrs	r3, r3, #20
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	2107      	movs	r1, #7
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	0d1b      	lsrs	r3, r3, #20
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0318 	and.w	r3, r3, #24
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001020:	40d9      	lsrs	r1, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	400b      	ands	r3, r1
 8001026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800102a:	431a      	orrs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	0007ffff 	.word	0x0007ffff

08001044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6093      	str	r3, [r2, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800107c:	d101      	bne.n	8001082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <LL_ADC_IsEnabled+0x18>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <LL_ADC_IsEnabled+0x1a>
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800113e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001142:	f043 0204 	orr.w	r2, r3, #4
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b04      	cmp	r3, #4
 8001168:	d101      	bne.n	800116e <LL_ADC_REG_IsConversionOngoing+0x18>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b08      	cmp	r3, #8
 800118e:	d101      	bne.n	8001194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e12d      	b.n	800141a <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fc6d 	bl	8000aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff3f 	bl	8001068 <LL_ADC_IsDeepPowerDownEnabled>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff25 	bl	8001044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff5a 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d113      	bne.n	8001232 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff3e 	bl	8001090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <HAL_ADC_Init+0x280>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	4a83      	ldr	r2, [pc, #524]	; (8001428 <HAL_ADC_Init+0x284>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001224:	e002      	b.n	800122c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff3e 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f043 0210 	orr.w	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff77 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 8001268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 80c8 	bne.w	8001408 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80c4 	bne.w	8001408 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff37 	bl	8001108 <LL_ADC_IsEnabled>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a0:	4862      	ldr	r0, [pc, #392]	; (800142c <HAL_ADC_Init+0x288>)
 80012a2:	f7ff ff31 	bl	8001108 <LL_ADC_IsEnabled>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4619      	mov	r1, r3
 80012b2:	485f      	ldr	r0, [pc, #380]	; (8001430 <HAL_ADC_Init+0x28c>)
 80012b4:	f7ff fd9c 	bl	8000df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e5b      	ldrb	r3, [r3, #25]
 80012bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d106      	bne.n	80012f4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	3b01      	subs	r3, #1
 80012ec:	045b      	lsls	r3, r3, #17
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_ADC_Init+0x290>)
 8001318:	4013      	ands	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	430b      	orrs	r3, r1
 8001322:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff14 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 800132e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff21 	bl	800117c <LL_ADC_INJ_IsConversionOngoing>
 800133a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d140      	bne.n	80013c4 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d13d      	bne.n	80013c4 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7e1b      	ldrb	r3, [r3, #24]
 8001350:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001352:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800136a:	f023 0306 	bic.w	r3, r3, #6
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	430b      	orrs	r3, r1
 8001376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800137e:	2b01      	cmp	r3, #1
 8001380:	d118      	bne.n	80013b4 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001398:	4311      	orrs	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800139e:	4311      	orrs	r1, r2
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013a4:	430a      	orrs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10c      	bne.n	80013e6 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f023 010f 	bic.w	r1, r3, #15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
 80013e4:	e007      	b.n	80013f6 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 020f 	bic.w	r2, r2, #15
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	659a      	str	r2, [r3, #88]	; 0x58
 8001406:	e007      	b.n	8001418 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	f043 0210 	orr.w	r2, r3, #16
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001418:	7ffb      	ldrb	r3, [r7, #31]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000
 8001428:	053e2d63 	.word	0x053e2d63
 800142c:	50040000 	.word	0x50040000
 8001430:	50040300 	.word	0x50040300
 8001434:	fff0c007 	.word	0xfff0c007

08001438 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe86 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d14f      	bne.n	80014f0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_ADC_Start+0x26>
 800145a:	2302      	movs	r3, #2
 800145c:	e04b      	b.n	80014f6 <HAL_ADC_Start+0xbe>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fcd8 	bl	8001e1c <ADC_Enable>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d137      	bne.n	80014e6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001496:	d106      	bne.n	80014a6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	f023 0206 	bic.w	r2, r3, #6
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014a4:	e002      	b.n	80014ac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	221c      	movs	r2, #28
 80014b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fe25 	bl	800112e <LL_ADC_REG_StartConversion>
 80014e4:	e006      	b.n	80014f4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80014ee:	e001      	b.n	80014f4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
 80014f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b08      	cmp	r3, #8
 800150e:	d102      	bne.n	8001516 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001510:	2308      	movs	r3, #8
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e010      	b.n	8001538 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e068      	b.n	8001606 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001534:	2304      	movs	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001538:	f7ff fc2c 	bl	8000d94 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800153e:	e01a      	b.n	8001576 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d016      	beq.n	8001576 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001548:	f7ff fc24 	bl	8000d94 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d302      	bcc.n	800155e <HAL_ADC_PollForConversion+0x60>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10b      	bne.n	8001576 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f043 0204 	orr.w	r2, r3, #4
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e047      	b.n	8001606 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0dd      	beq.n	8001540 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fcc7 	bl	8000f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01c      	beq.n	80015da <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d118      	bne.n	80015da <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d111      	bne.n	80015da <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d104      	bne.n	80015f2 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2208      	movs	r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e008      	b.n	8001604 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	220c      	movs	r2, #12
 8001602:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0b6      	sub	sp, #216	; 0xd8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_ADC_ConfigChannel+0x22>
 8001646:	2302      	movs	r3, #2
 8001648:	e3d4      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x7cc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fd7d 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 83b9 	bne.w	8001dd6 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d824      	bhi.n	80016b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	3b02      	subs	r3, #2
 8001672:	2b03      	cmp	r3, #3
 8001674:	d81b      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x86>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <HAL_ADC_ConfigChannel+0x54>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	0800168d 	.word	0x0800168d
 8001680:	08001695 	.word	0x08001695
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016a5 	.word	0x080016a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	220c      	movs	r2, #12
 8001690:	605a      	str	r2, [r3, #4]
          break;
 8001692:	e011      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2212      	movs	r2, #18
 8001698:	605a      	str	r2, [r3, #4]
          break;
 800169a:	e00d      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2218      	movs	r2, #24
 80016a0:	605a      	str	r2, [r3, #4]
          break;
 80016a2:	e009      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	605a      	str	r2, [r3, #4]
          break;
 80016ac:	e004      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2206      	movs	r2, #6
 80016b2:	605a      	str	r2, [r3, #4]
          break;
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80016b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	f7ff fc42 	bl	8000f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd41 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 80016d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fd4d 	bl	800117c <LL_ADC_INJ_IsConversionOngoing>
 80016e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 81c1 	bne.w	8001a72 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 81bc 	bne.w	8001a72 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001702:	d10f      	bne.n	8001724 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fc49 	bl	8000fa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbf0 	bl	8000f02 <LL_ADC_SetSamplingTimeCommonConfig>
 8001722:	e00e      	b.n	8001742 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	461a      	mov	r2, r3
 8001732:	f7ff fc38 	bl	8000fa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fbe0 	bl	8000f02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00a      	beq.n	800177a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6919      	ldr	r1, [r3, #16]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001774:	f7ff fb70 	bl	8000e58 <LL_ADC_SetOffset>
 8001778:	e17b      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb8d 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x17e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb82 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	e01e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1bc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fb77 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80017d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1d4>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	e018      	b.n	800182e <HAL_ADC_ConfigChannel+0x206>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e004      	b.n	800182e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fb46 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb2a 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x244>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb1f 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	e01e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x282>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb14 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800188a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800188e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800189e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x29a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	e018      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x2cc>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80018e6:	2320      	movs	r3, #32
 80018e8:	e004      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80018ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d106      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fae3 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fac7 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x30a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fabc 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	e01e      	b.n	8001970 <HAL_ADC_ConfigChannel+0x348>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2102      	movs	r1, #2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fab1 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e004      	b.n	800196e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x360>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	e016      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x38e>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800199a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80019a8:	2320      	movs	r3, #32
 80019aa:	e004      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80019ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d106      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	2102      	movs	r1, #2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa82 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2103      	movs	r1, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa66 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x3cc>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2103      	movs	r1, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa5b 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 021f 	and.w	r2, r3, #31
 80019f2:	e017      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x3fc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2103      	movs	r1, #3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fa50 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a0e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001a16:	2320      	movs	r3, #32
 8001a18:	e003      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x414>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	e011      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x438>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e003      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa2d 	bl	8000ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb46 	bl	8001108 <LL_ADC_IsEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8140 	bne.w	8001d04 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff fab3 	bl	8000ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4a8f      	ldr	r2, [pc, #572]	; (8001cd8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	f040 8131 	bne.w	8001d04 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x4a2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	bf94      	ite	ls
 8001ac2:	2301      	movls	r3, #1
 8001ac4:	2300      	movhi	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	e019      	b.n	8001afe <HAL_ADC_ConfigChannel+0x4d6>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ada:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	bf94      	ite	ls
 8001af8:	2301      	movls	r3, #1
 8001afa:	2300      	movhi	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d079      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d107      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x4f6>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	3301      	adds	r3, #1
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1c:	e015      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x522>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e003      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	069b      	lsls	r3, r3, #26
 8001b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x542>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	e017      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x572>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b82:	2320      	movs	r3, #32
 8001b84:	e003      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	ea42 0103 	orr.w	r1, r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x598>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0e9b      	lsrs	r3, r3, #26
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	051b      	lsls	r3, r3, #20
 8001bbe:	e018      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x5ca>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 021f 	and.w	r2, r3, #31
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	e081      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x5ea>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	3301      	adds	r3, #1
 8001c0a:	069b      	lsls	r3, r3, #26
 8001c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c10:	e015      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x616>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	069b      	lsls	r3, r3, #26
 8001c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x636>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	e017      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x666>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	61fb      	str	r3, [r7, #28]
  return result;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	ea42 0103 	orr.w	r1, r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x692>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0e9b      	lsrs	r3, r3, #26
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 021f 	and.w	r2, r3, #31
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	051b      	lsls	r3, r3, #20
 8001cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	e01e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x6d0>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	613b      	str	r3, [r7, #16]
  return result;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d104      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e006      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x6bc>
 8001cd6:	bf00      	nop
 8001cd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f003 021f 	and.w	r2, r3, #31
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b1e      	subs	r3, #30
 8001cf2:	051b      	lsls	r3, r3, #20
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	6892      	ldr	r2, [r2, #8]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7ff f951 	bl	8000fa6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_ADC_ConfigChannel+0x7d4>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d06b      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d10:	483b      	ldr	r0, [pc, #236]	; (8001e00 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d12:	f7ff f893 	bl	8000e3c <LL_ADC_GetCommonPathInternalCh>
 8001d16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a39      	ldr	r2, [pc, #228]	; (8001e04 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d126      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d120      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <HAL_ADC_ConfigChannel+0x7e0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d156      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d42:	4619      	mov	r1, r3
 8001d44:	482e      	ldr	r0, [pc, #184]	; (8001e00 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d46:	f7ff f866 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_ADC_ConfigChannel+0x7e4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	099a      	lsrs	r2, r3, #6
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d62:	e002      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f9      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d70:	e03a      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_ADC_ConfigChannel+0x7ec>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d113      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x77c>
 8001d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10d      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_ADC_ConfigChannel+0x7e0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12a      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d9e:	f7ff f83a 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da2:	e021      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_ADC_ConfigChannel+0x7f0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11c      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ADC_ConfigChannel+0x7e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d111      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480c      	ldr	r0, [pc, #48]	; (8001e00 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dd0:	f7ff f821 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
 8001dd4:	e008      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001df0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	37d8      	adds	r7, #216	; 0xd8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	80080000 	.word	0x80080000
 8001e00:	50040300 	.word	0x50040300
 8001e04:	c7520000 	.word	0xc7520000
 8001e08:	50040000 	.word	0x50040000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	053e2d63 	.word	0x053e2d63
 8001e14:	cb840000 	.word	0xcb840000
 8001e18:	80000001 	.word	0x80000001

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f96d 	bl	8001108 <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d146      	bne.n	8001ec2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <ADC_Enable+0xb0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e032      	b.n	8001ec4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f93c 	bl	80010e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e68:	f7fe ff94 	bl	8000d94 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e6e:	e021      	b.n	8001eb4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f947 	bl	8001108 <LL_ADC_IsEnabled>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f92b 	bl	80010e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e8a:	f7fe ff83 	bl	8000d94 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d90d      	bls.n	8001eb4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f043 0210 	orr.w	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e007      	b.n	8001ec4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d1d6      	bne.n	8001e70 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	8000003f 	.word	0x8000003f

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff47 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff5c 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffb0 	bl	8001ff0 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e166      	b.n	800237a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8158 	beq.w	8002374 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d00b      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0xea>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d123      	bne.n	80021ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0203 	and.w	r2, r3, #3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80b2 	beq.w	8002374 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_GPIO_Init+0x2fc>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_GPIO_Init+0x2fc>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6613      	str	r3, [r2, #96]	; 0x60
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_GPIO_Init+0x2fc>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_GPIO_Init+0x300>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002252:	d02b      	beq.n	80022ac <HAL_GPIO_Init+0x210>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d025      	beq.n	80022a8 <HAL_GPIO_Init+0x20c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x308>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d01f      	beq.n	80022a4 <HAL_GPIO_Init+0x208>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d019      	beq.n	80022a0 <HAL_GPIO_Init+0x204>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x310>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_GPIO_Init+0x200>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x314>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1fc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_GPIO_Init+0x318>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1f8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x31c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1f4>
 800228c:	2307      	movs	r3, #7
 800228e:	e00e      	b.n	80022ae <HAL_GPIO_Init+0x212>
 8002290:	2308      	movs	r3, #8
 8002292:	e00c      	b.n	80022ae <HAL_GPIO_Init+0x212>
 8002294:	2306      	movs	r3, #6
 8002296:	e00a      	b.n	80022ae <HAL_GPIO_Init+0x212>
 8002298:	2305      	movs	r3, #5
 800229a:	e008      	b.n	80022ae <HAL_GPIO_Init+0x212>
 800229c:	2304      	movs	r3, #4
 800229e:	e006      	b.n	80022ae <HAL_GPIO_Init+0x212>
 80022a0:	2303      	movs	r3, #3
 80022a2:	e004      	b.n	80022ae <HAL_GPIO_Init+0x212>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e002      	b.n	80022ae <HAL_GPIO_Init+0x212>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_GPIO_Init+0x212>
 80022ac:	2300      	movs	r3, #0
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022be:	4937      	ldr	r1, [pc, #220]	; (800239c <HAL_GPIO_Init+0x300>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_GPIO_Init+0x320>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_GPIO_Init+0x320>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_GPIO_Init+0x320>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800231a:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x320>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_GPIO_Init+0x320>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002344:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_GPIO_Init+0x320>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_GPIO_Init+0x320>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <HAL_GPIO_Init+0x320>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f ae91 	bne.w	80020ac <HAL_GPIO_Init+0x10>
  }
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40010000 	.word	0x40010000
 80023a0:	48000400 	.word	0x48000400
 80023a4:	48000800 	.word	0x48000800
 80023a8:	48000c00 	.word	0x48000c00
 80023ac:	48001000 	.word	0x48001000
 80023b0:	48001400 	.word	0x48001400
 80023b4:	48001800 	.word	0x48001800
 80023b8:	48001c00 	.word	0x48001c00
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800240c:	e002      	b.n	8002414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43d9      	mvns	r1, r3
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	400b      	ands	r3, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_PWREx_GetVoltageRange+0x3c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	d102      	bne.n	800246c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246a:	e00b      	b.n	8002484 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_PWREx_GetVoltageRange+0x3c>)
 800246e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247a:	d102      	bne.n	8002482 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800247c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002480:	e000      	b.n	8002484 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002482:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000

08002494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d141      	bne.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d131      	bne.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024b0:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b6:	4a46      	ldr	r2, [pc, #280]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024c8:	4a41      	ldr	r2, [pc, #260]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2232      	movs	r2, #50	; 0x32
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e6:	e002      	b.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fa:	d102      	bne.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f2      	bne.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d158      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e057      	b.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251a:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002524:	e04d      	b.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252c:	d141      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d131      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002542:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2232      	movs	r2, #50	; 0x32
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	3301      	adds	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002572:	e002      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d102      	bne.n	800258e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f2      	bne.n	8002574 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d112      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e011      	b.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025b0:	e007      	b.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40007000 	.word	0x40007000
 80025d4:	20000000 	.word	0x20000000
 80025d8:	431bde83 	.word	0x431bde83

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 bc16 	b.w	8002e1c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fa:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80e4 	beq.w	80027da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_RCC_OscConfig+0x4c>
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	f040 808b 	bne.w	8002736 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 8087 	bne.w	8002736 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002628:	4b92      	ldr	r3, [pc, #584]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x64>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e3ed      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	4b8b      	ldr	r3, [pc, #556]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_RCC_OscConfig+0x7e>
 8002650:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	e005      	b.n	8002666 <HAL_RCC_OscConfig+0x8a>
 800265a:	4b86      	ldr	r3, [pc, #536]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800265c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002666:	4293      	cmp	r3, r2
 8002668:	d223      	bcs.n	80026b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fdc8 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e3ce      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267e:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7c      	ldr	r2, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b7a      	ldr	r3, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4977      	ldr	r1, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	4972      	ldr	r1, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	e025      	b.n	80026fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b2:	4b70      	ldr	r3, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6f      	ldr	r2, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	496a      	ldr	r1, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fd88 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e38e      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fe:	f000 fcbf 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8002702:	4601      	mov	r1, r0
 8002704:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a5a      	ldr	r2, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x29c>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	fa21 f303 	lsr.w	r3, r1, r3
 800271a:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_OscConfig+0x2a0>)
 800271c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800271e:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x2a4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fae6 	bl	8000cf4 <HAL_InitTick>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d052      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	e372      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d032      	beq.n	80027a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800273e:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800274a:	f7fe fb23 	bl	8000d94 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002752:	f7fe fb1f 	bl	8000d94 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e35b      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	493a      	ldr	r1, [pc, #232]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	e01a      	b.n	80027da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b0:	f7fe faf0 	bl	8000d94 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b8:	f7fe faec 	bl	8000d94 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e328      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ca:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1dc>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d073      	beq.n	80028ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x21c>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d10e      	bne.n	8002810 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d063      	beq.n	80028cc <HAL_RCC_OscConfig+0x2f0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d15f      	bne.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e305      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x24c>
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a15      	ldr	r2, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0x288>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x270>
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0x288>
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a05      	ldr	r2, [pc, #20]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fa92 	bl	8000d94 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002872:	e010      	b.n	8002896 <HAL_RCC_OscConfig+0x2ba>
 8002874:	40021000 	.word	0x40021000
 8002878:	08004f04 	.word	0x08004f04
 800287c:	20000000 	.word	0x20000000
 8002880:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fa86 	bl	8000d94 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e2c2      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	4baf      	ldr	r3, [pc, #700]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x2a8>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa76 	bl	8000d94 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fa72 	bl	8000d94 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e2ae      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	4ba5      	ldr	r3, [pc, #660]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d0>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d060      	beq.n	800299c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x310>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d119      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d116      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	4b99      	ldr	r3, [pc, #612]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x328>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e28b      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	4990      	ldr	r1, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002918:	e040      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d023      	beq.n	800296a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002922:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a8b      	ldr	r2, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fa31 	bl	8000d94 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fa2d 	bl	8000d94 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e269      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	497c      	ldr	r1, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a79      	ldr	r2, [pc, #484]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fa0d 	bl	8000d94 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fa09 	bl	8000d94 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e245      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01c      	beq.n	80029ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	4a67      	ldr	r2, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe f9e8 	bl	8000d94 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe f9e4 	bl	8000d94 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e220      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCC_OscConfig+0x3ec>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe f9cb 	bl	8000d94 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe f9c7 	bl	8000d94 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e203      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a6 	beq.w	8002b7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d118      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a74:	f7fe f98e 	bl	8000d94 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe f98a 	bl	8000d94 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1c6      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4d8>
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab2:	e024      	b.n	8002afe <HAL_RCC_OscConfig+0x522>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d110      	bne.n	8002ade <HAL_RCC_OscConfig+0x502>
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	e00f      	b.n	8002afe <HAL_RCC_OscConfig+0x522>
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe f945 	bl	8000d94 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe f941 	bl	8000d94 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e17b      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ed      	beq.n	8002b0e <HAL_RCC_OscConfig+0x532>
 8002b32:	e01a      	b.n	8002b6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe f92e 	bl	8000d94 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f92a 	bl	8000d94 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d906      	bls.n	8002b5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e164      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	4ba8      	ldr	r3, [pc, #672]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e8      	bne.n	8002b3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4ba3      	ldr	r3, [pc, #652]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4aa2      	ldr	r2, [pc, #648]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d03c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01c      	beq.n	8002bca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b90:	4b9b      	ldr	r3, [pc, #620]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b96:	4a9a      	ldr	r2, [pc, #616]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f8f8 	bl	8000d94 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba8:	f7fe f8f4 	bl	8000d94 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e130      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bba:	4b91      	ldr	r3, [pc, #580]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ef      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x5cc>
 8002bc8:	e01b      	b.n	8002c02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bca:	4b8d      	ldr	r3, [pc, #564]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd0:	4a8b      	ldr	r2, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe f8db 	bl	8000d94 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be2:	f7fe f8d7 	bl	8000d94 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e113      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ef      	bne.n	8002be2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8107 	beq.w	8002e1a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	f040 80cb 	bne.w	8002dac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d12c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	3b01      	subs	r3, #1
 8002c36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d123      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d11b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d113      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d06d      	beq.n	8002d60 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d068      	beq.n	8002d5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0ba      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a55      	ldr	r2, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cb2:	f7fe f86f 	bl	8000d94 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe f86b 	bl	8000d94 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0a7      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCC_OscConfig+0x828>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cf2:	0212      	lsls	r2, r2, #8
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cfa:	0852      	lsrs	r2, r2, #1
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	0552      	lsls	r2, r2, #21
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0652      	lsls	r2, r2, #25
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d12:	06d2      	lsls	r2, r2, #27
 8002d14:	430a      	orrs	r2, r1
 8002d16:	493a      	ldr	r1, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a37      	ldr	r2, [pc, #220]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a34      	ldr	r2, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d34:	f7fe f82e 	bl	8000d94 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe f82a 	bl	8000d94 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e066      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d5a:	e05e      	b.n	8002e1a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e05d      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d156      	bne.n	8002e1a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d84:	f7fe f806 	bl	8000d94 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe f802 	bl	8000d94 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03e      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x7b0>
 8002daa:	e036      	b.n	8002e1a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d031      	beq.n	8002e16 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002dd0:	f023 0303 	bic.w	r3, r3, #3
 8002dd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_OscConfig+0x824>)
 8002ddc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fd ffd5 	bl	8000d94 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dec:	e00c      	b.n	8002e08 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fd ffd1 	bl	8000d94 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d905      	bls.n	8002e08 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e00d      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
 8002e00:	40021000 	.word	0x40021000
 8002e04:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x848>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ec      	bne.n	8002dee <HAL_RCC_OscConfig+0x812>
 8002e14:	e001      	b.n	8002e1a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e10f      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b89      	ldr	r3, [pc, #548]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b86      	ldr	r3, [pc, #536]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	4984      	ldr	r1, [pc, #528]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f7      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8089 	beq.w	8002f90 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d133      	bne.n	8002eee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	4b79      	ldr	r3, [pc, #484]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e4      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e96:	f000 fa0f 	bl	80032b8 <RCC_GetSysClockFreqFromPLLSource>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_ClockConfig+0x248>)
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d955      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	4a6d      	ldr	r2, [pc, #436]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e044      	b.n	8002f4e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03e      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x126>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13a      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ed8:	4b64      	ldr	r3, [pc, #400]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee0:	4a62      	ldr	r2, [pc, #392]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e02f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0ac      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0a0      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e098      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002f2e:	f000 f8a7 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <HAL_RCC_ClockConfig+0x248>)
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d909      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f42:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4944      	ldr	r1, [pc, #272]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fd ff18 	bl	8000d94 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fd ff14 	bl	8000d94 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e070      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4930      	ldr	r1, [pc, #192]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d210      	bcs.n	8002ff2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 020f 	bic.w	r2, r3, #15
 8002fd8:	4923      	ldr	r1, [pc, #140]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_RCC_ClockConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e036      	b.n	8003060 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4918      	ldr	r1, [pc, #96]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4910      	ldr	r1, [pc, #64]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003030:	f000 f826 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003034:	4601      	mov	r1, r0
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_ClockConfig+0x244>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_ClockConfig+0x24c>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	fa21 f303 	lsr.w	r3, r1, r3
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x250>)
 800304e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x254>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fe4d 	bl	8000cf4 <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]

  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	04c4b400 	.word	0x04c4b400
 8003074:	08004f04 	.word	0x08004f04
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003098:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d121      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d11e      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030b4:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d102      	bne.n	80030fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e004      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d101      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_GetSysClockFreq+0x110>)
 8003106:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d133      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xa4>
 800311e:	2b03      	cmp	r3, #3
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0xaa>
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e005      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_GetSysClockFreq+0x110>)
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	3301      	adds	r3, #1
 8003142:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	fb02 f203 	mul.w	r2, r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003176:	69bb      	ldr	r3, [r7, #24]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3724      	adds	r7, #36	; 0x24
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40021000 	.word	0x40021000
 8003188:	08004f1c 	.word	0x08004f1c
 800318c:	00f42400 	.word	0x00f42400
 8003190:	007a1200 	.word	0x007a1200

08003194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4601      	mov	r1, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	08004f14 	.word	0x08004f14

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031dc:	f7ff ffda 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031e0:	4601      	mov	r1, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08004f14 	.word	0x08004f14

08003204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003210:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800321c:	f7ff f91a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8003220:	6178      	str	r0, [r7, #20]
 8003222:	e014      	b.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800323c:	f7ff f90a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8003240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d10b      	bne.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d913      	bls.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2ba0      	cmp	r3, #160	; 0xa0
 8003260:	d902      	bls.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003262:	2302      	movs	r3, #2
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	e00d      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003268:	2301      	movs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00a      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b7f      	cmp	r3, #127	; 0x7f
 8003272:	d902      	bls.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e004      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d101      	bne.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 020f 	bic.w	r2, r3, #15
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40022000 	.word	0x40022000

080032b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d118      	bne.n	8003300 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e005      	b.n	80032f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d002      	beq.n	8003316 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003314:	e005      	b.n	8003322 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003318:	613b      	str	r3, [r7, #16]
    break;
 800331a:	e005      	b.n	8003328 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800331e:	613b      	str	r3, [r7, #16]
    break;
 8003320:	e002      	b.n	8003328 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	613b      	str	r3, [r7, #16]
    break;
 8003326:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	fb02 f203 	mul.w	r2, r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	0e5b      	lsrs	r3, r3, #25
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	3301      	adds	r3, #1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003368:	683b      	ldr	r3, [r7, #0]
}
 800336a:	4618      	mov	r0, r3
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	08004f1c 	.word	0x08004f1c
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003390:	2300      	movs	r3, #0
 8003392:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003394:	2300      	movs	r3, #0
 8003396:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03d      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d00b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d804      	bhi.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d015      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80033b8:	e01d      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80033ba:	2b60      	cmp	r3, #96	; 0x60
 80033bc:	d01e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80033be:	2b80      	cmp	r3, #128	; 0x80
 80033c0:	d01c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80033c2:	e018      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fafd 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3320      	adds	r3, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fbe4 	bl	8003bb8 <RCCEx_PLLSAI2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	74fb      	strb	r3, [r7, #19]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003404:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003412:	4973      	ldr	r1, [pc, #460]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d042      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d00f      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343a:	d805      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d011      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003444:	d017      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003446:	e01f      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344c:	d01f      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d01c      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003454:	e018      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003462:	e015      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fab4 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003474:	e00c      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3320      	adds	r3, #32
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fb9b 	bl	8003bb8 <RCCEx_PLLSAI2_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	74fb      	strb	r3, [r7, #19]
      break;
 800348c:	e000      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800348e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	494e      	ldr	r1, [pc, #312]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80034ac:	e001      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 809f 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6593      	str	r3, [r2, #88]	; 0x58
 80034e6:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003502:	f7fd fc47 	bl	8000d94 <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003508:	e009      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fd fc43 	bl	8000d94 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	74fb      	strb	r3, [r7, #19]
        break;
 800351c:	e005      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ef      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d15b      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01f      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d019      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800355a:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d016      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fc02 	bl	8000d94 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fd fbfe 	bl	8000d94 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d902      	bls.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	74fb      	strb	r3, [r7, #19]
            break;
 80035aa:	e006      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ec      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10c      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035d8:	e008      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	74bb      	strb	r3, [r7, #18]
 80035de:	e005      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x264>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ec:	7c7b      	ldrb	r3, [r7, #17]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4ba0      	ldr	r3, [pc, #640]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	4a9f      	ldr	r2, [pc, #636]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360a:	4b9a      	ldr	r3, [pc, #616]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 0203 	bic.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	4996      	ldr	r1, [pc, #600]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362c:	4b91      	ldr	r3, [pc, #580]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 020c 	bic.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	498e      	ldr	r1, [pc, #568]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364e:	4b89      	ldr	r3, [pc, #548]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	4985      	ldr	r1, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003670:	4b80      	ldr	r3, [pc, #512]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367e:	497d      	ldr	r1, [pc, #500]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003692:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	4974      	ldr	r1, [pc, #464]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b4:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	496c      	ldr	r1, [pc, #432]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e4:	4963      	ldr	r1, [pc, #396]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003706:	495b      	ldr	r1, [pc, #364]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371a:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	4952      	ldr	r1, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373c:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	494a      	ldr	r1, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375e:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	4941      	ldr	r1, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003780:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	4939      	ldr	r1, [pc, #228]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d028      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	4930      	ldr	r1, [pc, #192]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037cc:	60d3      	str	r3, [r2, #12]
 80037ce:	e011      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f8f9 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04d      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003808:	d108      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003810:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003816:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800381a:	e012      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003828:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383a:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384a:	d106      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
 8003858:	e020      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003862:	d109      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a02      	ldr	r2, [pc, #8]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	60d3      	str	r3, [r2, #12]
 8003870:	e014      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f8a5 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d028      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b6:	4947      	ldr	r1, [pc, #284]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c6:	d106      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c8:	4b42      	ldr	r3, [pc, #264]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d2:	60d3      	str	r3, [r2, #12]
 80038d4:	e011      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038de:	d10c      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f876 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01e      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003916:	492f      	ldr	r1, [pc, #188]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f851 	bl	80039d8 <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003956:	f023 0204 	bic.w	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003960:	491c      	ldr	r1, [pc, #112]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800397a:	f023 0218 	bic.w	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	4913      	ldr	r1, [pc, #76]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ba:	d105      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e6:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0203 	and.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d103      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
       ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d13f      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e03c      	b.n	8003a8a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00c      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x5a>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d013      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x6c>
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d120      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11d      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e01a      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a32:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e013      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a44:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a50:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a60:	e006      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      break;
 8003a66:	e004      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e002      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a70:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f023 0203 	bic.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4948      	ldr	r1, [pc, #288]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f040 8086 	bne.w	8003b9e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd f979 	bl	8000d94 <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa4:	e009      	b.n	8003aba <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa6:	f7fd f975 	bl	8000d94 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d902      	bls.n	8003aba <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab8:	e005      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ef      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d168      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <RCCEx_PLLSAI1_Config+0x1d4>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	0211      	lsls	r1, r2, #8
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68d2      	ldr	r2, [r2, #12]
 8003ae4:	06d2      	lsls	r2, r2, #27
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	430a      	orrs	r2, r1
 8003af2:	492d      	ldr	r1, [pc, #180]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	610b      	str	r3, [r1, #16]
 8003af8:	e02d      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d115      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b00:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6892      	ldr	r2, [r2, #8]
 8003b0c:	0211      	lsls	r1, r2, #8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6912      	ldr	r2, [r2, #16]
 8003b12:	0852      	lsrs	r2, r2, #1
 8003b14:	3a01      	subs	r2, #1
 8003b16:	0552      	lsls	r2, r2, #21
 8003b18:	4311      	orrs	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6852      	ldr	r2, [r2, #4]
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	0112      	lsls	r2, r2, #4
 8003b22:	430a      	orrs	r2, r1
 8003b24:	4920      	ldr	r1, [pc, #128]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]
 8003b2a:	e014      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6952      	ldr	r2, [r2, #20]
 8003b3e:	0852      	lsrs	r2, r2, #1
 8003b40:	3a01      	subs	r2, #1
 8003b42:	0652      	lsls	r2, r2, #25
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6852      	ldr	r2, [r2, #4]
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	4915      	ldr	r1, [pc, #84]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd f917 	bl	8000d94 <HAL_GetTick>
 8003b66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b68:	e009      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b6a:	f7fd f913 	bl	8000d94 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d902      	bls.n	8003b7e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b7c:	e005      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ef      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	07ff800f 	.word	0x07ff800f
 8003bb0:	ff9f800f 	.word	0xff9f800f
 8003bb4:	f9ff800f 	.word	0xf9ff800f

08003bb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc6:	4b70      	ldr	r3, [pc, #448]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d103      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
       ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13f      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e03c      	b.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d00c      	beq.n	8003c12 <RCCEx_PLLSAI2_Config+0x5a>
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d013      	beq.n	8003c24 <RCCEx_PLLSAI2_Config+0x6c>
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d120      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c00:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11d      	bne.n	8003c48 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e01a      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c12:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c22:	e013      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10f      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c30:	4b55      	ldr	r3, [pc, #340]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c40:	e006      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      break;
 8003c46:	e004      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e002      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c50:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f023 0203 	bic.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4948      	ldr	r1, [pc, #288]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8086 	bne.w	8003d7e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c72:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a44      	ldr	r2, [pc, #272]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7e:	f7fd f889 	bl	8000d94 <HAL_GetTick>
 8003c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c84:	e009      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c86:	f7fd f885 	bl	8000d94 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	73fb      	strb	r3, [r7, #15]
        break;
 8003c98:	e005      	b.n	8003ca6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ef      	bne.n	8003c86 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d168      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d113      	bne.n	8003cda <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb2:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	0211      	lsls	r1, r2, #8
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68d2      	ldr	r2, [r2, #12]
 8003cc4:	06d2      	lsls	r2, r2, #27
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6852      	ldr	r2, [r2, #4]
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	492d      	ldr	r1, [pc, #180]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	614b      	str	r3, [r1, #20]
 8003cd8:	e02d      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d115      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
 8003cec:	0211      	lsls	r1, r2, #8
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6912      	ldr	r2, [r2, #16]
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0552      	lsls	r2, r2, #21
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6852      	ldr	r2, [r2, #4]
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	430a      	orrs	r2, r1
 8003d04:	4920      	ldr	r1, [pc, #128]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	614b      	str	r3, [r1, #20]
 8003d0a:	e014      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	0211      	lsls	r1, r2, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6952      	ldr	r2, [r2, #20]
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	3a01      	subs	r2, #1
 8003d22:	0652      	lsls	r2, r2, #25
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6852      	ldr	r2, [r2, #4]
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	4915      	ldr	r1, [pc, #84]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d42:	f7fd f827 	bl	8000d94 <HAL_GetTick>
 8003d46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d48:	e009      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d4a:	f7fd f823 	bl	8000d94 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d902      	bls.n	8003d5e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d5c:	e005      	b.n	8003d6a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ef      	beq.n	8003d4a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	07ff800f 	.word	0x07ff800f
 8003d90:	ff9f800f 	.word	0xff9f800f
 8003d94:	f9ff800f 	.word	0xf9ff800f

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e049      	b.n	8003e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc fe94 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 f8ee 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_ConfigClockSource+0x18>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0a8      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e88:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d067      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x124>
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d80b      	bhi.n	8003eb6 <HAL_TIM_ConfigClockSource+0x70>
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d073      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x144>
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d802      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x66>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d06f      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003eaa:	e078      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d06c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x144>
 8003eb0:	2b30      	cmp	r3, #48	; 0x30
 8003eb2:	d06a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003eb4:	e073      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003eb6:	2b70      	cmp	r3, #112	; 0x70
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x90>
 8003eba:	2b70      	cmp	r3, #112	; 0x70
 8003ebc:	d804      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x82>
 8003ebe:	2b50      	cmp	r3, #80	; 0x50
 8003ec0:	d033      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xe4>
 8003ec2:	2b60      	cmp	r3, #96	; 0x60
 8003ec4:	d041      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003ec6:	e06a      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d066      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0x156>
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed2:	d017      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003ed4:	e063      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f000 f97b 	bl	80041e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
      break;
 8003f02:	e04c      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f000 f964 	bl	80041e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f26:	609a      	str	r2, [r3, #8]
      break;
 8003f28:	e039      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 f8d8 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2150      	movs	r1, #80	; 0x50
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f931 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f48:	e029      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 f8f7 	bl	800414a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2160      	movs	r1, #96	; 0x60
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f921 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f68:	e019      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 f8b8 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f911 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f88:	e009      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f000 f908 	bl	80041aa <TIM_ITRx_SetConfig>
        break;
 8003f9a:	e000      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003f9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <TIM_Base_SetConfig+0x114>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3a      	ldr	r2, [pc, #232]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a28      	ldr	r2, [pc, #160]	; (80040e0 <TIM_Base_SetConfig+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <TIM_Base_SetConfig+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <TIM_Base_SetConfig+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <TIM_Base_SetConfig+0x128>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <TIM_Base_SetConfig+0x12c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <TIM_Base_SetConfig+0x130>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40013400 	.word	0x40013400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 030a 	bic.w	r3, r3, #10
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0210 	bic.w	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f043 0307 	orr.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	431a      	orrs	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004234:	2302      	movs	r3, #2
 8004236:	e068      	b.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2d      	ldr	r2, [pc, #180]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004272:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01d      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d018      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000

08004330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e042      	b.n	80043c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fc fbe7 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f82c 	bl	80043d0 <UART_SetConfig>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e022      	b.n	80043c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 faf2 	bl	8004974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb79 	bl	8004ab8 <UART_CheckIdleState>
 80043c6:	4603      	mov	r3, r0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80043d4:	b088      	sub	sp, #32
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4bb1      	ldr	r3, [pc, #708]	; (80046cc <UART_SetConfig+0x2fc>)
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	430b      	orrs	r3, r1
 8004412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4aa6      	ldr	r2, [pc, #664]	; (80046d0 <UART_SetConfig+0x300>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800444e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	69f9      	ldr	r1, [r7, #28]
 8004458:	430b      	orrs	r3, r1
 800445a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	f023 010f 	bic.w	r1, r3, #15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a97      	ldr	r2, [pc, #604]	; (80046d4 <UART_SetConfig+0x304>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d121      	bne.n	80044c0 <UART_SetConfig+0xf0>
 800447c:	4b96      	ldr	r3, [pc, #600]	; (80046d8 <UART_SetConfig+0x308>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d816      	bhi.n	80044b8 <UART_SetConfig+0xe8>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0xc0>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044a7 	.word	0x080044a7
 800449c:	080044b3 	.word	0x080044b3
 80044a0:	2301      	movs	r3, #1
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e0e8      	b.n	8004678 <UART_SetConfig+0x2a8>
 80044a6:	2302      	movs	r3, #2
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e0e5      	b.n	8004678 <UART_SetConfig+0x2a8>
 80044ac:	2304      	movs	r3, #4
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e0e2      	b.n	8004678 <UART_SetConfig+0x2a8>
 80044b2:	2308      	movs	r3, #8
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e0df      	b.n	8004678 <UART_SetConfig+0x2a8>
 80044b8:	2310      	movs	r3, #16
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	bf00      	nop
 80044be:	e0db      	b.n	8004678 <UART_SetConfig+0x2a8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a85      	ldr	r2, [pc, #532]	; (80046dc <UART_SetConfig+0x30c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d134      	bne.n	8004534 <UART_SetConfig+0x164>
 80044ca:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <UART_SetConfig+0x308>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d829      	bhi.n	800452c <UART_SetConfig+0x15c>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x110>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004515 	.word	0x08004515
 80044e4:	0800452d 	.word	0x0800452d
 80044e8:	0800452d 	.word	0x0800452d
 80044ec:	0800452d 	.word	0x0800452d
 80044f0:	08004521 	.word	0x08004521
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	0800451b 	.word	0x0800451b
 8004504:	0800452d 	.word	0x0800452d
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004527 	.word	0x08004527
 8004514:	2300      	movs	r3, #0
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e0ae      	b.n	8004678 <UART_SetConfig+0x2a8>
 800451a:	2302      	movs	r3, #2
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e0ab      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004520:	2304      	movs	r3, #4
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e0a8      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004526:	2308      	movs	r3, #8
 8004528:	76fb      	strb	r3, [r7, #27]
 800452a:	e0a5      	b.n	8004678 <UART_SetConfig+0x2a8>
 800452c:	2310      	movs	r3, #16
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	bf00      	nop
 8004532:	e0a1      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a69      	ldr	r2, [pc, #420]	; (80046e0 <UART_SetConfig+0x310>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d120      	bne.n	8004580 <UART_SetConfig+0x1b0>
 800453e:	4b66      	ldr	r3, [pc, #408]	; (80046d8 <UART_SetConfig+0x308>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004548:	2b10      	cmp	r3, #16
 800454a:	d00f      	beq.n	800456c <UART_SetConfig+0x19c>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d802      	bhi.n	8004556 <UART_SetConfig+0x186>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <UART_SetConfig+0x190>
 8004554:	e010      	b.n	8004578 <UART_SetConfig+0x1a8>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d005      	beq.n	8004566 <UART_SetConfig+0x196>
 800455a:	2b30      	cmp	r3, #48	; 0x30
 800455c:	d009      	beq.n	8004572 <UART_SetConfig+0x1a2>
 800455e:	e00b      	b.n	8004578 <UART_SetConfig+0x1a8>
 8004560:	2300      	movs	r3, #0
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e088      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004566:	2302      	movs	r3, #2
 8004568:	76fb      	strb	r3, [r7, #27]
 800456a:	e085      	b.n	8004678 <UART_SetConfig+0x2a8>
 800456c:	2304      	movs	r3, #4
 800456e:	76fb      	strb	r3, [r7, #27]
 8004570:	e082      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004572:	2308      	movs	r3, #8
 8004574:	76fb      	strb	r3, [r7, #27]
 8004576:	e07f      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004578:	2310      	movs	r3, #16
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	bf00      	nop
 800457e:	e07b      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a57      	ldr	r2, [pc, #348]	; (80046e4 <UART_SetConfig+0x314>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d120      	bne.n	80045cc <UART_SetConfig+0x1fc>
 800458a:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <UART_SetConfig+0x308>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d00f      	beq.n	80045b8 <UART_SetConfig+0x1e8>
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d802      	bhi.n	80045a2 <UART_SetConfig+0x1d2>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <UART_SetConfig+0x1dc>
 80045a0:	e010      	b.n	80045c4 <UART_SetConfig+0x1f4>
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d005      	beq.n	80045b2 <UART_SetConfig+0x1e2>
 80045a6:	2bc0      	cmp	r3, #192	; 0xc0
 80045a8:	d009      	beq.n	80045be <UART_SetConfig+0x1ee>
 80045aa:	e00b      	b.n	80045c4 <UART_SetConfig+0x1f4>
 80045ac:	2300      	movs	r3, #0
 80045ae:	76fb      	strb	r3, [r7, #27]
 80045b0:	e062      	b.n	8004678 <UART_SetConfig+0x2a8>
 80045b2:	2302      	movs	r3, #2
 80045b4:	76fb      	strb	r3, [r7, #27]
 80045b6:	e05f      	b.n	8004678 <UART_SetConfig+0x2a8>
 80045b8:	2304      	movs	r3, #4
 80045ba:	76fb      	strb	r3, [r7, #27]
 80045bc:	e05c      	b.n	8004678 <UART_SetConfig+0x2a8>
 80045be:	2308      	movs	r3, #8
 80045c0:	76fb      	strb	r3, [r7, #27]
 80045c2:	e059      	b.n	8004678 <UART_SetConfig+0x2a8>
 80045c4:	2310      	movs	r3, #16
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	bf00      	nop
 80045ca:	e055      	b.n	8004678 <UART_SetConfig+0x2a8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a45      	ldr	r2, [pc, #276]	; (80046e8 <UART_SetConfig+0x318>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d124      	bne.n	8004620 <UART_SetConfig+0x250>
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <UART_SetConfig+0x308>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e4:	d012      	beq.n	800460c <UART_SetConfig+0x23c>
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d802      	bhi.n	80045f2 <UART_SetConfig+0x222>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <UART_SetConfig+0x230>
 80045f0:	e012      	b.n	8004618 <UART_SetConfig+0x248>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d006      	beq.n	8004606 <UART_SetConfig+0x236>
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d009      	beq.n	8004612 <UART_SetConfig+0x242>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x248>
 8004600:	2300      	movs	r3, #0
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e038      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004606:	2302      	movs	r3, #2
 8004608:	76fb      	strb	r3, [r7, #27]
 800460a:	e035      	b.n	8004678 <UART_SetConfig+0x2a8>
 800460c:	2304      	movs	r3, #4
 800460e:	76fb      	strb	r3, [r7, #27]
 8004610:	e032      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004612:	2308      	movs	r3, #8
 8004614:	76fb      	strb	r3, [r7, #27]
 8004616:	e02f      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004618:	2310      	movs	r3, #16
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	bf00      	nop
 800461e:	e02b      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <UART_SetConfig+0x300>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d124      	bne.n	8004674 <UART_SetConfig+0x2a4>
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <UART_SetConfig+0x308>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d012      	beq.n	8004660 <UART_SetConfig+0x290>
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d802      	bhi.n	8004646 <UART_SetConfig+0x276>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <UART_SetConfig+0x284>
 8004644:	e012      	b.n	800466c <UART_SetConfig+0x29c>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d006      	beq.n	800465a <UART_SetConfig+0x28a>
 800464c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x296>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x29c>
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e00e      	b.n	8004678 <UART_SetConfig+0x2a8>
 800465a:	2302      	movs	r3, #2
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004660:	2304      	movs	r3, #4
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e008      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004666:	2308      	movs	r3, #8
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e005      	b.n	8004678 <UART_SetConfig+0x2a8>
 800466c:	2310      	movs	r3, #16
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	bf00      	nop
 8004672:	e001      	b.n	8004678 <UART_SetConfig+0x2a8>
 8004674:	2310      	movs	r3, #16
 8004676:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <UART_SetConfig+0x300>)
 800467e:	4293      	cmp	r3, r2
 8004680:	f040 80a1 	bne.w	80047c6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004684:	7efb      	ldrb	r3, [r7, #27]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d836      	bhi.n	80046f8 <UART_SetConfig+0x328>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x2c0>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046c3 	.word	0x080046c3
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046f1 	.word	0x080046f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fd7a 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 80046b8:	6178      	str	r0, [r7, #20]
        break;
 80046ba:	e022      	b.n	8004702 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <UART_SetConfig+0x31c>)
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e01f      	b.n	8004702 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fcdd 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80046c6:	6178      	str	r0, [r7, #20]
        break;
 80046c8:	e01b      	b.n	8004702 <UART_SetConfig+0x332>
 80046ca:	bf00      	nop
 80046cc:	cfff69f3 	.word	0xcfff69f3
 80046d0:	40008000 	.word	0x40008000
 80046d4:	40013800 	.word	0x40013800
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40004400 	.word	0x40004400
 80046e0:	40004800 	.word	0x40004800
 80046e4:	40004c00 	.word	0x40004c00
 80046e8:	40005000 	.word	0x40005000
 80046ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f4:	617b      	str	r3, [r7, #20]
        break;
 80046f6:	e004      	b.n	8004702 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	76bb      	strb	r3, [r7, #26]
        break;
 8004700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 811d 	beq.w	8004944 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	4a97      	ldr	r2, [pc, #604]	; (800496c <UART_SetConfig+0x59c>)
 8004710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004714:	461a      	mov	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	fbb3 f3f2 	udiv	r3, r3, r2
 800471c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d305      	bcc.n	800473a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d902      	bls.n	8004740 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	76bb      	strb	r3, [r7, #26]
 800473e:	e101      	b.n	8004944 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4618      	mov	r0, r3
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	4a87      	ldr	r2, [pc, #540]	; (800496c <UART_SetConfig+0x59c>)
 800474e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f04f 0400 	mov.w	r4, #0
 8004758:	461a      	mov	r2, r3
 800475a:	4623      	mov	r3, r4
 800475c:	f7fb fd4e 	bl	80001fc <__aeabi_uldivmod>
 8004760:	4603      	mov	r3, r0
 8004762:	460c      	mov	r4, r1
 8004764:	4619      	mov	r1, r3
 8004766:	4622      	mov	r2, r4
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	0214      	lsls	r4, r2, #8
 8004772:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004776:	020b      	lsls	r3, r1, #8
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6852      	ldr	r2, [r2, #4]
 800477c:	0852      	lsrs	r2, r2, #1
 800477e:	4611      	mov	r1, r2
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	eb13 0b01 	adds.w	fp, r3, r1
 8004788:	eb44 0c02 	adc.w	ip, r4, r2
 800478c:	4658      	mov	r0, fp
 800478e:	4661      	mov	r1, ip
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	461a      	mov	r2, r3
 800479a:	4623      	mov	r3, r4
 800479c:	f7fb fd2e 	bl	80001fc <__aeabi_uldivmod>
 80047a0:	4603      	mov	r3, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ac:	d308      	bcc.n	80047c0 <UART_SetConfig+0x3f0>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b4:	d204      	bcs.n	80047c0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e0c1      	b.n	8004944 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	76bb      	strb	r3, [r7, #26]
 80047c4:	e0be      	b.n	8004944 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	d164      	bne.n	800489a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80047d0:	7efb      	ldrb	r3, [r7, #27]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d827      	bhi.n	8004826 <UART_SetConfig+0x456>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x40c>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe fcd4 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8004804:	6178      	str	r0, [r7, #20]
        break;
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe fce6 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 800480c:	6178      	str	r0, [r7, #20]
        break;
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b57      	ldr	r3, [pc, #348]	; (8004970 <UART_SetConfig+0x5a0>)
 8004812:	617b      	str	r3, [r7, #20]
        break;
 8004814:	e00c      	b.n	8004830 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe fc33 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800481a:	6178      	str	r0, [r7, #20]
        break;
 800481c:	e008      	b.n	8004830 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	617b      	str	r3, [r7, #20]
        break;
 8004824:	e004      	b.n	8004830 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	76bb      	strb	r3, [r7, #26]
        break;
 800482e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8086 	beq.w	8004944 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	4a4b      	ldr	r2, [pc, #300]	; (800496c <UART_SetConfig+0x59c>)
 800483e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004842:	461a      	mov	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fbb3 f3f2 	udiv	r3, r3, r2
 800484a:	005a      	lsls	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	b29b      	uxth	r3, r3
 800485e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d916      	bls.n	8004894 <UART_SetConfig+0x4c4>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d212      	bcs.n	8004894 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	b29a      	uxth	r2, r3
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	4313      	orrs	r3, r2
 8004888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	89fa      	ldrh	r2, [r7, #14]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e057      	b.n	8004944 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	76bb      	strb	r3, [r7, #26]
 8004898:	e054      	b.n	8004944 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489a:	7efb      	ldrb	r3, [r7, #27]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d828      	bhi.n	80048f2 <UART_SetConfig+0x522>
 80048a0:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x4d8>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048f3 	.word	0x080048f3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe fc6e 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 80048d0:	6178      	str	r0, [r7, #20]
        break;
 80048d2:	e013      	b.n	80048fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7fe fc80 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 80048d8:	6178      	str	r0, [r7, #20]
        break;
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b24      	ldr	r3, [pc, #144]	; (8004970 <UART_SetConfig+0x5a0>)
 80048de:	617b      	str	r3, [r7, #20]
        break;
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fbcd 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80048e6:	6178      	str	r0, [r7, #20]
        break;
 80048e8:	e008      	b.n	80048fc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	617b      	str	r3, [r7, #20]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	76bb      	strb	r3, [r7, #26]
        break;
 80048fa:	bf00      	nop
    }

    if (pclk != 0U)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	4a19      	ldr	r2, [pc, #100]	; (800496c <UART_SetConfig+0x59c>)
 8004908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490c:	461a      	mov	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fbb3 f2f2 	udiv	r2, r3, r2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d908      	bls.n	8004940 <UART_SetConfig+0x570>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d204      	bcs.n	8004940 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e001      	b.n	8004944 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004960:	7ebb      	ldrb	r3, [r7, #26]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800496c:	08004f4c 	.word	0x08004f4c
 8004970:	00f42400 	.word	0x00f42400

08004974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d10a      	bne.n	8004a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ac8:	f7fc f964 	bl	8000d94 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d10e      	bne.n	8004afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f82c 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e022      	b.n	8004b40 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d10e      	bne.n	8004b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f816 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00c      	b.n	8004b40 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b58:	e062      	b.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d05e      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b62:	f7fc f917 	bl	8000d94 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11d      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b86:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e045      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02e      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd0:	d126      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bea:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e00f      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d08d      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_UARTEx_DisableFifoMode+0x16>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e027      	b.n	8004cae <HAL_UARTEx_DisableFifoMode+0x66>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2224      	movs	r2, #36	; 0x24
 8004c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e02d      	b.n	8004d2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2224      	movs	r2, #36	; 0x24
 8004cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f850 	bl	8004db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e02d      	b.n	8004daa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2224      	movs	r2, #36	; 0x24
 8004d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f812 	bl	8004db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <UARTEx_SetNbDataToProcess+0xc8>)
 8004dbe:	f107 0314 	add.w	r3, r7, #20
 8004dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dc6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004dca:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <UARTEx_SetNbDataToProcess+0xcc>)
 8004dcc:	f107 030c 	add.w	r3, r7, #12
 8004dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dd4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004df0:	e03d      	b.n	8004e6e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004df2:	2308      	movs	r3, #8
 8004df4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004df6:	2308      	movs	r3, #8
 8004df8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	0e5b      	lsrs	r3, r3, #25
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	0f5b      	lsrs	r3, r3, #29
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004e1a:	7fbb      	ldrb	r3, [r7, #30]
 8004e1c:	7f3a      	ldrb	r2, [r7, #28]
 8004e1e:	f107 0120 	add.w	r1, r7, #32
 8004e22:	440a      	add	r2, r1
 8004e24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	7f3a      	ldrb	r2, [r7, #28]
 8004e2e:	f107 0120 	add.w	r1, r7, #32
 8004e32:	440a      	add	r2, r1
 8004e34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	7f7a      	ldrb	r2, [r7, #29]
 8004e48:	f107 0120 	add.w	r1, r7, #32
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	7f7a      	ldrb	r2, [r7, #29]
 8004e58:	f107 0120 	add.w	r1, r7, #32
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e6e:	bf00      	nop
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	08004ef4 	.word	0x08004ef4
 8004e80:	08004efc 	.word	0x08004efc

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0d      	ldr	r6, [pc, #52]	; (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1ba4      	subs	r4, r4, r6
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2500      	movs	r5, #0
 8004e90:	42a5      	cmp	r5, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4e0b      	ldr	r6, [pc, #44]	; (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	; (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f000 f820 	bl	8004edc <_init>
 8004e9c:	1ba4      	subs	r4, r4, r6
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	42a5      	cmp	r5, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eac:	4798      	blx	r3
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb6:	4798      	blx	r3
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08004f6c 	.word	0x08004f6c
 8004ec0:	08004f6c 	.word	0x08004f6c
 8004ec4:	08004f6c 	.word	0x08004f6c
 8004ec8:	08004f70 	.word	0x08004f70

08004ecc <memset>:
 8004ecc:	4402      	add	r2, r0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d100      	bne.n	8004ed6 <memset+0xa>
 8004ed4:	4770      	bx	lr
 8004ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eda:	e7f9      	b.n	8004ed0 <memset+0x4>

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
