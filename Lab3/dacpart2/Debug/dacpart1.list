
dacpart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  080061dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080061dc  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001611f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026c1  00000000  00000000  0003615b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  00038820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b65e  00000000  00000000  0003a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e199  00000000  00000000  0006603e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e5ff  00000000  00000000  000741d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001827d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  001828c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  0018733c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005934 	.word	0x08005934

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005934 	.word	0x08005934

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b972 	b.w	8000d38 <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9e08      	ldr	r6, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	4688      	mov	r8, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d14b      	bne.n	8000b12 <__udivmoddi4+0xa6>
 8000a7a:	428a      	cmp	r2, r1
 8000a7c:	4615      	mov	r5, r2
 8000a7e:	d967      	bls.n	8000b50 <__udivmoddi4+0xe4>
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	b14a      	cbz	r2, 8000a9a <__udivmoddi4+0x2e>
 8000a86:	f1c2 0720 	rsb	r7, r2, #32
 8000a8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a92:	4095      	lsls	r5, r2
 8000a94:	ea47 0803 	orr.w	r8, r7, r3
 8000a98:	4094      	lsls	r4, r2
 8000a9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a9e:	0c23      	lsrs	r3, r4, #16
 8000aa0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aa4:	fa1f fc85 	uxth.w	ip, r5
 8000aa8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ab4:	4299      	cmp	r1, r3
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x60>
 8000ab8:	18eb      	adds	r3, r5, r3
 8000aba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000abe:	f080 811b 	bcs.w	8000cf8 <__udivmoddi4+0x28c>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 8118 	bls.w	8000cf8 <__udivmoddi4+0x28c>
 8000ac8:	3f02      	subs	r7, #2
 8000aca:	442b      	add	r3, r5
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ad4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000adc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae0:	45a4      	cmp	ip, r4
 8000ae2:	d909      	bls.n	8000af8 <__udivmoddi4+0x8c>
 8000ae4:	192c      	adds	r4, r5, r4
 8000ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aea:	f080 8107 	bcs.w	8000cfc <__udivmoddi4+0x290>
 8000aee:	45a4      	cmp	ip, r4
 8000af0:	f240 8104 	bls.w	8000cfc <__udivmoddi4+0x290>
 8000af4:	3802      	subs	r0, #2
 8000af6:	442c      	add	r4, r5
 8000af8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000afc:	eba4 040c 	sub.w	r4, r4, ip
 8000b00:	2700      	movs	r7, #0
 8000b02:	b11e      	cbz	r6, 8000b0c <__udivmoddi4+0xa0>
 8000b04:	40d4      	lsrs	r4, r2
 8000b06:	2300      	movs	r3, #0
 8000b08:	e9c6 4300 	strd	r4, r3, [r6]
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0xbe>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	f000 80eb 	beq.w	8000cf2 <__udivmoddi4+0x286>
 8000b1c:	2700      	movs	r7, #0
 8000b1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b22:	4638      	mov	r0, r7
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	fab3 f783 	clz	r7, r3
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d147      	bne.n	8000bc2 <__udivmoddi4+0x156>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xd0>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 80fa 	bhi.w	8000d30 <__udivmoddi4+0x2c4>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4698      	mov	r8, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d0e0      	beq.n	8000b0c <__udivmoddi4+0xa0>
 8000b4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b4e:	e7dd      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000b50:	b902      	cbnz	r2, 8000b54 <__udivmoddi4+0xe8>
 8000b52:	deff      	udf	#255	; 0xff
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f040 808f 	bne.w	8000c7c <__udivmoddi4+0x210>
 8000b5e:	1b49      	subs	r1, r1, r5
 8000b60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b64:	fa1f f885 	uxth.w	r8, r5
 8000b68:	2701      	movs	r7, #1
 8000b6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb08 f10c 	mul.w	r1, r8, ip
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x124>
 8000b80:	18eb      	adds	r3, r5, r3
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x122>
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2bc>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x14c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x14a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80b6 	bhi.w	8000d22 <__udivmoddi4+0x2b6>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e79f      	b.n	8000b02 <__udivmoddi4+0x96>
 8000bc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bc6:	40bb      	lsls	r3, r7
 8000bc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bcc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be0:	4325      	orrs	r5, r4
 8000be2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000be6:	0c2c      	lsrs	r4, r5, #16
 8000be8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bec:	fa1f fa8e 	uxth.w	sl, lr
 8000bf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000bfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000c02:	d90b      	bls.n	8000c1c <__udivmoddi4+0x1b0>
 8000c04:	eb1e 0303 	adds.w	r3, lr, r3
 8000c08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c0c:	f080 8087 	bcs.w	8000d1e <__udivmoddi4+0x2b2>
 8000c10:	429c      	cmp	r4, r3
 8000c12:	f240 8084 	bls.w	8000d1e <__udivmoddi4+0x2b2>
 8000c16:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1a:	4473      	add	r3, lr
 8000c1c:	1b1b      	subs	r3, r3, r4
 8000c1e:	b2ad      	uxth	r5, r5
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c30:	45a2      	cmp	sl, r4
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x1da>
 8000c34:	eb1e 0404 	adds.w	r4, lr, r4
 8000c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3c:	d26b      	bcs.n	8000d16 <__udivmoddi4+0x2aa>
 8000c3e:	45a2      	cmp	sl, r4
 8000c40:	d969      	bls.n	8000d16 <__udivmoddi4+0x2aa>
 8000c42:	3802      	subs	r0, #2
 8000c44:	4474      	add	r4, lr
 8000c46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4e:	eba4 040a 	sub.w	r4, r4, sl
 8000c52:	454c      	cmp	r4, r9
 8000c54:	46c2      	mov	sl, r8
 8000c56:	464b      	mov	r3, r9
 8000c58:	d354      	bcc.n	8000d04 <__udivmoddi4+0x298>
 8000c5a:	d051      	beq.n	8000d00 <__udivmoddi4+0x294>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d069      	beq.n	8000d34 <__udivmoddi4+0x2c8>
 8000c60:	ebb1 050a 	subs.w	r5, r1, sl
 8000c64:	eb64 0403 	sbc.w	r4, r4, r3
 8000c68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c6c:	40fd      	lsrs	r5, r7
 8000c6e:	40fc      	lsrs	r4, r7
 8000c70:	ea4c 0505 	orr.w	r5, ip, r5
 8000c74:	e9c6 5400 	strd	r5, r4, [r6]
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e747      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000c7c:	f1c2 0320 	rsb	r3, r2, #32
 8000c80:	fa20 f703 	lsr.w	r7, r0, r3
 8000c84:	4095      	lsls	r5, r2
 8000c86:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c92:	4338      	orrs	r0, r7
 8000c94:	0c01      	lsrs	r1, r0, #16
 8000c96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c9a:	fa1f f885 	uxth.w	r8, r5
 8000c9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ca2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca6:	fb07 f308 	mul.w	r3, r7, r8
 8000caa:	428b      	cmp	r3, r1
 8000cac:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x256>
 8000cb2:	1869      	adds	r1, r5, r1
 8000cb4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cb8:	d22f      	bcs.n	8000d1a <__udivmoddi4+0x2ae>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d92d      	bls.n	8000d1a <__udivmoddi4+0x2ae>
 8000cbe:	3f02      	subs	r7, #2
 8000cc0:	4429      	add	r1, r5
 8000cc2:	1acb      	subs	r3, r1, r3
 8000cc4:	b281      	uxth	r1, r0
 8000cc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd2:	fb00 f308 	mul.w	r3, r0, r8
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x27e>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce0:	d217      	bcs.n	8000d12 <__udivmoddi4+0x2a6>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d915      	bls.n	8000d12 <__udivmoddi4+0x2a6>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1ac9      	subs	r1, r1, r3
 8000cec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf0:	e73b      	b.n	8000b6a <__udivmoddi4+0xfe>
 8000cf2:	4637      	mov	r7, r6
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e709      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000cf8:	4607      	mov	r7, r0
 8000cfa:	e6e7      	b.n	8000acc <__udivmoddi4+0x60>
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	e6fb      	b.n	8000af8 <__udivmoddi4+0x8c>
 8000d00:	4541      	cmp	r1, r8
 8000d02:	d2ab      	bcs.n	8000c5c <__udivmoddi4+0x1f0>
 8000d04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d08:	eb69 020e 	sbc.w	r2, r9, lr
 8000d0c:	3801      	subs	r0, #1
 8000d0e:	4613      	mov	r3, r2
 8000d10:	e7a4      	b.n	8000c5c <__udivmoddi4+0x1f0>
 8000d12:	4660      	mov	r0, ip
 8000d14:	e7e9      	b.n	8000cea <__udivmoddi4+0x27e>
 8000d16:	4618      	mov	r0, r3
 8000d18:	e795      	b.n	8000c46 <__udivmoddi4+0x1da>
 8000d1a:	4667      	mov	r7, ip
 8000d1c:	e7d1      	b.n	8000cc2 <__udivmoddi4+0x256>
 8000d1e:	4681      	mov	r9, r0
 8000d20:	e77c      	b.n	8000c1c <__udivmoddi4+0x1b0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	442c      	add	r4, r5
 8000d26:	e747      	b.n	8000bb8 <__udivmoddi4+0x14c>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	442b      	add	r3, r5
 8000d2e:	e72f      	b.n	8000b90 <__udivmoddi4+0x124>
 8000d30:	4638      	mov	r0, r7
 8000d32:	e708      	b.n	8000b46 <__udivmoddi4+0xda>
 8000d34:	4637      	mov	r7, r6
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0xa0>

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	0000      	movs	r0, r0
	...

08000d40 <C6_sample_populator>:

	return y;
}

// populate the sine wave sampling array for a C6 tone
void C6_sample_populator(){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
	for(int i=0; i<43; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e03a      	b.n	8000dc2 <C6_sample_populator+0x82>
		float modulus = (float)i/43;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d56:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000dd8 <C6_sample_populator+0x98>
 8000d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d5e:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185*modulus;
 8000d62:	6938      	ldr	r0, [r7, #16]
 8000d64:	f7ff fbb0 	bl	80004c8 <__aeabi_f2d>
 8000d68:	a319      	add	r3, pc, #100	; (adr r3, 8000dd0 <C6_sample_populator+0x90>)
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	f7ff fc03 	bl	8000578 <__aeabi_dmul>
 8000d72:	4603      	mov	r3, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	4618      	mov	r0, r3
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff fe0f 	bl	800099c <__aeabi_d2f>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians)+1)*85;
 8000d82:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d86:	f004 fd63 	bl	8005850 <arm_sin_f32>
 8000d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8000d8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d96:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000ddc <C6_sample_populator+0x9c>
 8000d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9e:	edc7 7a03 	vstr	s15, [r7, #12]
		C6_samples[i] = (uint8_t)radians;
 8000da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000daa:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dae:	793b      	ldrb	r3, [r7, #4]
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <C6_sample_populator+0xa0>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	4413      	add	r3, r2
 8000db8:	460a      	mov	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<43; i++){
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8000dc6:	ddc1      	ble.n	8000d4c <C6_sample_populator+0xc>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	3fa6defc 	.word	0x3fa6defc
 8000dd4:	401921fb 	.word	0x401921fb
 8000dd8:	422c0000 	.word	0x422c0000
 8000ddc:	42aa0000 	.word	0x42aa0000
 8000de0:	200001b8 	.word	0x200001b8
 8000de4:	00000000 	.word	0x00000000

08000de8 <E6_sample_populator>:

// populate the sine wave sampling array for an E6 tone
void E6_sample_populator(){
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
	for(int i=0; i<33; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e03a      	b.n	8000e6a <E6_sample_populator+0x82>
		float modulus = (float)i/33;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfe:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000e80 <E6_sample_populator+0x98>
 8000e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e06:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185*modulus;
 8000e0a:	6938      	ldr	r0, [r7, #16]
 8000e0c:	f7ff fb5c 	bl	80004c8 <__aeabi_f2d>
 8000e10:	a319      	add	r3, pc, #100	; (adr r3, 8000e78 <E6_sample_populator+0x90>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fbaf 	bl	8000578 <__aeabi_dmul>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	4621      	mov	r1, r4
 8000e22:	f7ff fdbb 	bl	800099c <__aeabi_d2f>
 8000e26:	4603      	mov	r3, r0
 8000e28:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians)+1)*85;
 8000e2a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e2e:	f004 fd0f 	bl	8005850 <arm_sin_f32>
 8000e32:	eeb0 7a40 	vmov.f32	s14, s0
 8000e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e84 <E6_sample_populator+0x9c>
 8000e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e46:	edc7 7a03 	vstr	s15, [r7, #12]
		E6_samples[i] = (uint8_t)radians;
 8000e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e52:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <E6_sample_populator+0xa0>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	4413      	add	r3, r2
 8000e60:	460a      	mov	r2, r1
 8000e62:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<33; i++){
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	ddc1      	ble.n	8000df4 <E6_sample_populator+0xc>
	}
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	3fa6defc 	.word	0x3fa6defc
 8000e7c:	401921fb 	.word	0x401921fb
 8000e80:	42040000 	.word	0x42040000
 8000e84:	42aa0000 	.word	0x42aa0000
 8000e88:	20000148 	.word	0x20000148
 8000e8c:	00000000 	.word	0x00000000

08000e90 <G6_sample_populator>:

// populate the sine wave sampling array for a G6 tone
void G6_sample_populator(){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
	for(int i=0; i<27; i++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e03a      	b.n	8000f12 <G6_sample_populator+0x82>
		float modulus = (float)i/27;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea6:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8000eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eae:	edc7 7a04 	vstr	s15, [r7, #16]
		float radians = 6.283185*modulus;
 8000eb2:	6938      	ldr	r0, [r7, #16]
 8000eb4:	f7ff fb08 	bl	80004c8 <__aeabi_f2d>
 8000eb8:	a31b      	add	r3, pc, #108	; (adr r3, 8000f28 <G6_sample_populator+0x98>)
 8000eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebe:	f7ff fb5b 	bl	8000578 <__aeabi_dmul>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	4621      	mov	r1, r4
 8000eca:	f7ff fd67 	bl	800099c <__aeabi_d2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60fb      	str	r3, [r7, #12]
		radians = (arm_sin_f32(radians)+1)*85;
 8000ed2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ed6:	f004 fcbb 	bl	8005850 <arm_sin_f32>
 8000eda:	eeb0 7a40 	vmov.f32	s14, s0
 8000ede:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000f20 <G6_sample_populator+0x90>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	edc7 7a03 	vstr	s15, [r7, #12]
		G6_samples[i] = (uint8_t)radians;
 8000ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efa:	edc7 7a01 	vstr	s15, [r7, #4]
 8000efe:	793b      	ldrb	r3, [r7, #4]
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <G6_sample_populator+0x94>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	4413      	add	r3, r2
 8000f08:	460a      	mov	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<27; i++){
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b1a      	cmp	r3, #26
 8000f16:	ddc1      	ble.n	8000e9c <G6_sample_populator+0xc>
	}
}
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	42aa0000 	.word	0x42aa0000
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	3fa6defc 	.word	0x3fa6defc
 8000f2c:	401921fb 	.word	0x401921fb

08000f30 <HAL_GPIO_EXTI_Callback>:

// handles interupts from the user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_13){
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f40:	d148      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0xa4>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f46:	4825      	ldr	r0, [pc, #148]	; (8000fdc <HAL_GPIO_EXTI_Callback+0xac>)
 8000f48:	f001 fd58 	bl	80029fc <HAL_GPIO_TogglePin>
		arpeggio_counter++;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f54:	6013      	str	r3, [r2, #0]
		arpeggio_counter = arpeggio_counter%3;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f5c:	fb83 3201 	smull	r3, r2, r3, r1
 8000f60:	17cb      	asrs	r3, r1, #31
 8000f62:	1ad2      	subs	r2, r2, r3
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	1aca      	subs	r2, r1, r3
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f6e:	601a      	str	r2, [r3, #0]
		if (arpeggio_counter == 0){
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_GPIO_EXTI_Callback+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000f7c:	f000 fe98 	bl	8001cb0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,C6_samples,43,DAC_ALIGN_8B_R);
 8000f80:	2308      	movs	r3, #8
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	232b      	movs	r3, #43	; 0x2b
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_GPIO_EXTI_Callback+0xbc>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000f8c:	f000 fdd2 	bl	8001b34 <HAL_DAC_Start_DMA>
		else if (arpeggio_counter == 2){
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,G6_samples,27,DAC_ALIGN_8B_R);
		}
	}
}
 8000f90:	e020      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0xa4>
		else if (arpeggio_counter == 1){
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10c      	bne.n	8000fb4 <HAL_GPIO_EXTI_Callback+0x84>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000f9e:	f000 fe87 	bl	8001cb0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,E6_samples,33,DAC_ALIGN_8B_R);
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2321      	movs	r3, #33	; 0x21
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fae:	f000 fdc1 	bl	8001b34 <HAL_DAC_Start_DMA>
}
 8000fb2:	e00f      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0xa4>
		else if (arpeggio_counter == 2){
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d10b      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0xa4>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fc0:	f000 fe76 	bl	8001cb0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,G6_samples,27,DAC_ALIGN_8B_R);
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	231b      	movs	r3, #27
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fd0:	f000 fdb0 	bl	8001b34 <HAL_DAC_Start_DMA>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	20000028 	.word	0x20000028
 8000fe4:	55555556 	.word	0x55555556
 8000fe8:	2000002c 	.word	0x2000002c
 8000fec:	200001b8 	.word	0x200001b8
 8000ff0:	20000148 	.word	0x20000148
 8000ff4:	200000a0 	.word	0x200000a0

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fbce 	bl	800179e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f823 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f991 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 800100a:	f000 f965 	bl	80012d8 <MX_DMA_Init>
  MX_DAC1_Init();
 800100e:	f000 f895 	bl	800113c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001012:	f000 f8c7 	bl	80011a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001016:	f000 f913 	bl	8001240 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  C6_sample_populator();
 800101a:	f7ff fe91 	bl	8000d40 <C6_sample_populator>
  E6_sample_populator();
 800101e:	f7ff fee3 	bl	8000de8 <E6_sample_populator>
  G6_sample_populator();
 8001022:	f7ff ff35 	bl	8000e90 <G6_sample_populator>

  HAL_TIM_Base_Start_IT(&htim2);
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <main+0x48>)
 8001028:	f003 fa14 	bl	8004454 <HAL_TIM_Base_Start_IT>
  uint8_t sine_current_value; //variable to hold sine wave value to print to graph

*/
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,C6_samples,43,DAC_ALIGN_8B_R);
 800102c:	2308      	movs	r3, #8
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	232b      	movs	r3, #43	; 0x2b
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <main+0x4c>)
 8001034:	2100      	movs	r1, #0
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <main+0x50>)
 8001038:	f000 fd7c 	bl	8001b34 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x44>
 800103e:	bf00      	nop
 8001040:	2000016c 	.word	0x2000016c
 8001044:	200001b8 	.word	0x200001b8
 8001048:	2000002c 	.word	0x2000002c

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0bc      	sub	sp, #240	; 0xf0
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001056:	2244      	movs	r2, #68	; 0x44
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f004 fc62 	bl	8005924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2294      	movs	r2, #148	; 0x94
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f004 fc54 	bl	8005924 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001080:	f001 fd0e 	bl	8002aa0 <HAL_PWREx_ControlVoltageScaling>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x42>
  {
    Error_Handler();
 800108a:	f000 f9cf 	bl	800142c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800108e:	2310      	movs	r3, #16
 8001090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010a0:	2360      	movs	r3, #96	; 0x60
 80010a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010b8:	2328      	movs	r3, #40	; 0x28
 80010ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fd87 	bl	8002be8 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010e0:	f000 f9a4 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001102:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001106:	2103      	movs	r1, #3
 8001108:	4618      	mov	r0, r3
 800110a:	f002 f993 	bl	8003434 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001114:	f000 f98a 	bl	800142c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001118:	2301      	movs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800111c:	2300      	movs	r3, #0
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fc36 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800112e:	f000 f97d 	bl	800142c <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	37f0      	adds	r7, #240	; 0xf0
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2228      	movs	r2, #40	; 0x28
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f004 fbeb 	bl	8005924 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_DAC1_Init+0x60>)
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <MX_DAC1_Init+0x64>)
 8001152:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_DAC1_Init+0x60>)
 8001156:	f000 fcca 	bl	8001aee <HAL_DAC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001160:	f000 f964 	bl	800142c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001168:	230a      	movs	r3, #10
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_DAC1_Init+0x60>)
 8001184:	f000 fdf8 	bl	8001d78 <HAL_DAC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800118e:	f000 f94d 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000002c 	.word	0x2000002c
 80011a0:	40007400 	.word	0x40007400

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM2_Init+0x98>)
 80011c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_TIM2_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM2_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM2_Init+0x98>)
 80011d8:	f240 7216 	movw	r2, #1814	; 0x716
 80011dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_TIM2_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM2_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM2_Init+0x98>)
 80011ec:	f003 f8da 	bl	80043a4 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011f6:	f000 f919 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM2_Init+0x98>)
 8001208:	f003 fab3 	bl	8004772 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001212:	f000 f90b 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001216:	2320      	movs	r3, #32
 8001218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM2_Init+0x98>)
 8001224:	f003 fcc4 	bl	8004bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800122e:	f000 f8fd 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000016c 	.word	0x2000016c

08001240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_USART1_UART_Init+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800128a:	f003 fd37 	bl	8004cfc <HAL_UART_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 f8ca 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800129c:	f004 f9f3 	bl	8005686 <HAL_UARTEx_SetTxFifoThreshold>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f000 f8c1 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 80012ae:	f004 fa28 	bl	8005702 <HAL_UARTEx_SetRxFifoThreshold>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b8:	f000 f8b8 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 80012be:	f004 f9a9 	bl	8005614 <HAL_UARTEx_DisableFifoMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f8b0 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	40013800 	.word	0x40013800

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_DMA_Init+0x50>)
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_DMA_Init+0x50>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6493      	str	r3, [r2, #72]	; 0x48
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_DMA_Init+0x50>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_DMA_Init+0x50>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <MX_DMA_Init+0x50>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6493      	str	r3, [r2, #72]	; 0x48
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_DMA_Init+0x50>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200b      	movs	r0, #11
 8001314:	f000 fbb5 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001318:	200b      	movs	r0, #11
 800131a:	f000 fbce 	bl	8001aba <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <MX_GPIO_Init+0xec>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a34      	ldr	r2, [pc, #208]	; (8001418 <MX_GPIO_Init+0xec>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MX_GPIO_Init+0xec>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <MX_GPIO_Init+0xec>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <MX_GPIO_Init+0xec>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MX_GPIO_Init+0xec>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_GPIO_Init+0xec>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <MX_GPIO_Init+0xec>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_GPIO_Init+0xec>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_GPIO_Init+0xec>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <MX_GPIO_Init+0xec>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_GPIO_Init+0xec>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a8:	481c      	ldr	r0, [pc, #112]	; (800141c <MX_GPIO_Init+0xf0>)
 80013aa:	f001 fb0f 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_GPIO_Init+0xf4>)
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <MX_GPIO_Init+0xf8>)
 80013c4:	f001 f970 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80013c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_GPIO_Init+0xf0>)
 80013e2:	f001 f961 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14
 80013e6:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80013ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_GPIO_Init+0xf4>)
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013fc:	f001 f954 	bl	80026a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2028      	movs	r0, #40	; 0x28
 8001406:	f000 fb3c 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140a:	2028      	movs	r0, #40	; 0x28
 800140c:	f000 fb55 	bl	8001aba <HAL_NVIC_EnableIRQ>

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400
 8001420:	10110000 	.word	0x10110000
 8001424:	48000800 	.word	0x48000800
 8001428:	48000c00 	.word	0x48000c00

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x44>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x44>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x44>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x44>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <HAL_DAC_MspInit+0xc8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d14e      	bne.n	8001544 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_DAC_MspInit+0xcc>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d6:	2310      	movs	r3, #16
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f001 f8dc 	bl	80026a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_DAC_MspInit+0xd4>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 80014f8:	2206      	movs	r2, #6
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 80014fe:	2210      	movs	r2, #16
 8001500:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 800151e:	2220      	movs	r2, #32
 8001520:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 800152a:	f000 fdef 	bl	800210c <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8001534:	f7ff ff7a 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_DAC_MspInit+0xd0>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40007400 	.word	0x40007400
 8001550:	40021000 	.word	0x40021000
 8001554:	20000040 	.word	0x20000040
 8001558:	40020008 	.word	0x40020008

0800155c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d113      	bne.n	8001596 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_TIM_Base_MspInit+0x44>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_TIM_Base_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_TIM_Base_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	201c      	movs	r0, #28
 800158c:	f000 fa79 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001590:	201c      	movs	r0, #28
 8001592:	f000 fa92 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d129      	bne.n	800161a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f001 f847 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40013800 	.word	0x40013800
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f8e6 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Channel1_IRQHandler+0x10>)
 8001686:	f000 fec0 	bl	800240a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000040 	.word	0x20000040

08001694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM2_IRQHandler+0x10>)
 800169a:	f002 ff4b 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000016c 	.word	0x2000016c

080016a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016b0:	f001 f9be 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80016b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016b8:	f001 f9ba 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016c0:	f001 f9b6 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016c8:	f001 f9b2 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016d0:	f001 f9ae 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016d8:	f001 f9aa 	bl	8002a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <SystemInit+0x64>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <SystemInit+0x64>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <SystemInit+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <SystemInit+0x68>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <SystemInit+0x68>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <SystemInit+0x68>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <SystemInit+0x68>)
 800170c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001710:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001714:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <SystemInit+0x68>)
 8001718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800171c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <SystemInit+0x68>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <SystemInit+0x68>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <SystemInit+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SystemInit+0x64>)
 8001732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001736:	609a      	str	r2, [r3, #8]
#endif
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	40021000 	.word	0x40021000

0800174c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001750:	f7ff ffc6 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001754:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001756:	e003      	b.n	8001760 <LoopCopyDataInit>

08001758 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800175a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800175c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800175e:	3104      	adds	r1, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001764:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001766:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001768:	d3f6      	bcc.n	8001758 <CopyDataInit>
	ldr	r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopForever+0x12>)
	b	LoopFillZerobss
 800176c:	e002      	b.n	8001774 <LoopFillZerobss>

0800176e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800176e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001770:	f842 3b04 	str.w	r3, [r2], #4

08001774 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LoopForever+0x16>)
	cmp	r2, r3
 8001776:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001778:	d3f9      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f004 f8af 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800177e:	f7ff fc3b 	bl	8000ff8 <main>

08001782 <LoopForever>:

LoopForever:
    b LoopForever
 8001782:	e7fe      	b.n	8001782 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001784:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001788:	080061d0 	.word	0x080061d0
	ldr	r0, =_sdata
 800178c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001790:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001794:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001798:	200001e8 	.word	0x200001e8

0800179c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_IRQHandler>

0800179e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f95f 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f80e 	bl	80017d0 <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	e001      	b.n	80017c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c0:	f7ff fe3c 	bl	800143c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_InitTick+0x6c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d023      	beq.n	800182c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_InitTick+0x70>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_InitTick+0x6c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f96b 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d809      	bhi.n	8001820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f935 	bl	8001a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_InitTick+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e007      	b.n	8001830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e004      	b.n	8001830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e001      	b.n	8001830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008
 800186c:	200001e4 	.word	0x200001e4

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200001e4 	.word	0x200001e4

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_Delay+0x40>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000008 	.word	0x20000008

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e014      	b.n	8001b2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	791b      	ldrb	r3, [r3, #4]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fcb7 	bl	8001484 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	795b      	ldrb	r3, [r3, #5]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_DAC_Start_DMA+0x1e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e09e      	b.n	8001c90 <HAL_DAC_Start_DMA+0x15c>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d12a      	bne.n	8001bba <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_DAC_Start_DMA+0x164>)
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_DAC_Start_DMA+0x168>)
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_DAC_Start_DMA+0x16c>)
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d009      	beq.n	8001ba6 <HAL_DAC_Start_DMA+0x72>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d00c      	beq.n	8001bb0 <HAL_DAC_Start_DMA+0x7c>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d000      	beq.n	8001b9c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001b9a:	e039      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	613b      	str	r3, [r7, #16]
        break;
 8001ba4:	e034      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	330c      	adds	r3, #12
 8001bac:	613b      	str	r3, [r7, #16]
        break;
 8001bae:	e02f      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	613b      	str	r3, [r7, #16]
        break;
 8001bb8:	e02a      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <HAL_DAC_Start_DMA+0x170>)
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_DAC_Start_DMA+0x174>)
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4a37      	ldr	r2, [pc, #220]	; (8001cac <HAL_DAC_Start_DMA+0x178>)
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d009      	beq.n	8001bfc <HAL_DAC_Start_DMA+0xc8>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00c      	beq.n	8001c06 <HAL_DAC_Start_DMA+0xd2>
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d000      	beq.n	8001bf2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001bf0:	e00e      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	613b      	str	r3, [r7, #16]
        break;
 8001bfa:	e009      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3318      	adds	r3, #24
 8001c02:	613b      	str	r3, [r7, #16]
        break;
 8001c04:	e004      	b.n	8001c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	331c      	adds	r3, #28
 8001c0c:	613b      	str	r3, [r7, #16]
        break;
 8001c0e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d111      	bne.n	8001c3a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6898      	ldr	r0, [r3, #8]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f000 fb14 	bl	800225c <HAL_DMA_Start_IT>
 8001c34:	4603      	mov	r3, r0
 8001c36:	75fb      	strb	r3, [r7, #23]
 8001c38:	e010      	b.n	8001c5c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c48:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68d8      	ldr	r0, [r3, #12]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	f000 fb02 	bl	800225c <HAL_DMA_Start_IT>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10c      	bne.n	8001c82 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2201      	movs	r2, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e005      	b.n	8001c8e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f043 0204 	orr.w	r2, r3, #4
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08001ff9 	.word	0x08001ff9
 8001c9c:	0800201b 	.word	0x0800201b
 8001ca0:	08002037 	.word	0x08002037
 8001ca4:	080020a1 	.word	0x080020a1
 8001ca8:	080020c3 	.word	0x080020c3
 8001cac:	080020df 	.word	0x080020df

08001cb0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fb27 	bl	8002352 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e00c      	b.n	8001d30 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fb19 	bl	8002352 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001d2e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	795b      	ldrb	r3, [r3, #5]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_DAC_ConfigChannel+0x1c>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e12a      	b.n	8001fea <HAL_DAC_ConfigChannel+0x272>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d174      	bne.n	8001e92 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001da8:	f7ff fd62 	bl	8001870 <HAL_GetTick>
 8001dac:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d134      	bne.n	8001e1e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001db4:	e011      	b.n	8001dda <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001db6:	f7ff fd5b 	bl	8001870 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d90a      	bls.n	8001dda <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f043 0208 	orr.w	r2, r3, #8
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e107      	b.n	8001fea <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e6      	bne.n	8001db6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fd4d 	bl	8001888 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	69d2      	ldr	r2, [r2, #28]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
 8001df8:	e01e      	b.n	8001e38 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001dfa:	f7ff fd39 	bl	8001870 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d90a      	bls.n	8001e1e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f043 0208 	orr.w	r2, r3, #8
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2203      	movs	r2, #3
 8001e18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0e5      	b.n	8001fea <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	dbe8      	blt.n	8001dfa <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff fd2d 	bl	8001888 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	69d2      	ldr	r2, [r2, #28]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	ea02 0103 	and.w	r1, r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	21ff      	movs	r1, #255	; 0xff
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	ea02 0103 	and.w	r1, r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d11d      	bne.n	8001ed6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	221f      	movs	r2, #31
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7a:	d104      	bne.n	8001f86 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	e018      	b.n	8001fb8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e00f      	b.n	8001fb8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001f98:	f001 fc02 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 8001f9c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_DAC_ConfigChannel+0x27c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d904      	bls.n	8001fb0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e003      	b.n	8001fb8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fb6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	22c0      	movs	r2, #192	; 0xc0
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	04c4b400 	.word	0x04c4b400

08001ff8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff fe97 	bl	8001d3a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	711a      	strb	r2, [r3, #4]
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fe90 	bl	8001d4e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f043 0204 	orr.w	r2, r3, #4
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fe86 	bl	8001d62 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff ffd8 	bl	8002064 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	711a      	strb	r2, [r3, #4]
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff ffd1 	bl	8002078 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff ffc7 	bl	800208c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	711a      	strb	r2, [r3, #4]
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e08d      	b.n	800223a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_DMA_Init+0x138>)
 8002126:	429a      	cmp	r2, r3
 8002128:	d80f      	bhi.n	800214a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_DMA_Init+0x13c>)
 8002132:	4413      	add	r3, r2
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_DMA_Init+0x140>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	009a      	lsls	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a42      	ldr	r2, [pc, #264]	; (8002250 <HAL_DMA_Init+0x144>)
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
 8002148:	e00e      	b.n	8002168 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_DMA_Init+0x148>)
 8002152:	4413      	add	r3, r2
 8002154:	4a3d      	ldr	r2, [pc, #244]	; (800224c <HAL_DMA_Init+0x140>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_DMA_Init+0x14c>)
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa12 	bl	80025e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c8:	d102      	bne.n	80021d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021e4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d010      	beq.n	8002210 <HAL_DMA_Init+0x104>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d80c      	bhi.n	8002210 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa32 	bl	8002660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e008      	b.n	8002222 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40020407 	.word	0x40020407
 8002248:	bffdfff8 	.word	0xbffdfff8
 800224c:	cccccccd 	.word	0xcccccccd
 8002250:	40020000 	.word	0x40020000
 8002254:	bffdfbf8 	.word	0xbffdfbf8
 8002258:	40020400 	.word	0x40020400

0800225c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_DMA_Start_IT+0x20>
 8002278:	2302      	movs	r3, #2
 800227a:	e066      	b.n	800234a <HAL_DMA_Start_IT+0xee>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d155      	bne.n	800233c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f957 	bl	8002568 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 020e 	orr.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e00f      	b.n	80022f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 020a 	orr.w	r2, r2, #10
 80022f2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002310:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002328:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e005      	b.n	8002348 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002348:	7dfb      	ldrb	r3, [r7, #23]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d008      	beq.n	800237c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2204      	movs	r2, #4
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e040      	b.n	80023fe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 020e 	bic.w	r2, r2, #14
 800238a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	f003 021c 	and.w	r2, r3, #28
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f003 031c 	and.w	r3, r3, #28
 800242a:	2204      	movs	r2, #4
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d026      	beq.n	8002484 <HAL_DMA_IRQHandler+0x7a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 021c 	and.w	r2, r3, #28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2104      	movs	r1, #4
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	2b00      	cmp	r3, #0
 8002478:	d071      	beq.n	800255e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002482:	e06c      	b.n	800255e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f003 031c 	and.w	r3, r3, #28
 800248c:	2202      	movs	r2, #2
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xec>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020a 	bic.w	r2, r2, #10
 80024be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f003 021c 	and.w	r2, r3, #28
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2102      	movs	r1, #2
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d038      	beq.n	800255e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024f4:	e033      	b.n	800255e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f003 031c 	and.w	r3, r3, #28
 80024fe:	2208      	movs	r2, #8
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d025      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f003 021c 	and.w	r2, r3, #28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800255e:	bf00      	nop
 8002560:	bf00      	nop
}
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800257e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002590:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f003 021c 	and.w	r2, r3, #28
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d108      	bne.n	80025c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025c6:	e007      	b.n	80025d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d80a      	bhi.n	800260e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002604:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6493      	str	r3, [r2, #72]	; 0x48
 800260c:	e007      	b.n	800261e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	009a      	lsls	r2, r3, #2
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002618:	4413      	add	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3b08      	subs	r3, #8
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002634:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2201      	movs	r2, #1
 800263e:	409a      	lsls	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40020407 	.word	0x40020407
 8002654:	4002081c 	.word	0x4002081c
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	40020880 	.word	0x40020880

08002660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002682:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3b01      	subs	r3, #1
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	1000823f 	.word	0x1000823f
 80026a4:	40020940 	.word	0x40020940

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b6:	e166      	b.n	8002986 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8158 	beq.w	8002980 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d00b      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d130      	bne.n	8002752 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002726:	2201      	movs	r2, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0201 	and.w	r2, r3, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0xea>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b12      	cmp	r3, #18
 8002790:	d123      	bne.n	80027da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	6939      	ldr	r1, [r7, #16]
 80027d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80b2 	beq.w	8002980 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_GPIO_Init+0x2fc>)
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	4a60      	ldr	r2, [pc, #384]	; (80029a4 <HAL_GPIO_Init+0x2fc>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6613      	str	r3, [r2, #96]	; 0x60
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <HAL_GPIO_Init+0x2fc>)
 800282a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002834:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <HAL_GPIO_Init+0x300>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800285e:	d02b      	beq.n	80028b8 <HAL_GPIO_Init+0x210>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x304>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d025      	beq.n	80028b4 <HAL_GPIO_Init+0x20c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_GPIO_Init+0x308>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d01f      	beq.n	80028b0 <HAL_GPIO_Init+0x208>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a50      	ldr	r2, [pc, #320]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d019      	beq.n	80028ac <HAL_GPIO_Init+0x204>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_GPIO_Init+0x310>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_GPIO_Init+0x200>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_GPIO_Init+0x314>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <HAL_GPIO_Init+0x1fc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4d      	ldr	r2, [pc, #308]	; (80029c0 <HAL_GPIO_Init+0x318>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_Init+0x1f8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_GPIO_Init+0x31c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_GPIO_Init+0x1f4>
 8002898:	2307      	movs	r3, #7
 800289a:	e00e      	b.n	80028ba <HAL_GPIO_Init+0x212>
 800289c:	2308      	movs	r3, #8
 800289e:	e00c      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028a0:	2306      	movs	r3, #6
 80028a2:	e00a      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028a4:	2305      	movs	r3, #5
 80028a6:	e008      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e004      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_GPIO_Init+0x212>
 80028b8:	2300      	movs	r3, #0
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ca:	4937      	ldr	r1, [pc, #220]	; (80029a8 <HAL_GPIO_Init+0x300>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_GPIO_Init+0x320>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028fc:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_GPIO_Init+0x320>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x320>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <HAL_GPIO_Init+0x320>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f ae91 	bne.w	80026b8 <HAL_GPIO_Init+0x10>
  }
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010000 	.word	0x40010000
 80029ac:	48000400 	.word	0x48000400
 80029b0:	48000800 	.word	0x48000800
 80029b4:	48000c00 	.word	0x48000c00
 80029b8:	48001000 	.word	0x48001000
 80029bc:	48001400 	.word	0x48001400
 80029c0:	48001800 	.word	0x48001800
 80029c4:	48001c00 	.word	0x48001c00
 80029c8:	40010400 	.word	0x40010400

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43d9      	mvns	r1, r3
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fa6e 	bl	8000f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d102      	bne.n	8002a78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a76:	e00b      	b.n	8002a90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a86:	d102      	bne.n	8002a8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8c:	e000      	b.n	8002a90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d141      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aae:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d131      	bne.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002abc:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac2:	4a46      	ldr	r2, [pc, #280]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002acc:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad4:	4a41      	ldr	r2, [pc, #260]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2232      	movs	r2, #50	; 0x32
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	3301      	adds	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	e002      	b.n	8002afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d102      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f2      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d158      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e057      	b.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b30:	e04d      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d141      	bne.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d131      	bne.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4e:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b60:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2232      	movs	r2, #50	; 0x32
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	0c9b      	lsrs	r3, r3, #18
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7e:	e002      	b.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d102      	bne.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f2      	bne.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d112      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e011      	b.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bbc:	e007      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bcc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	20000000 	.word	0x20000000
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f000 bc16 	b.w	8003428 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c06:	4b9e      	ldr	r3, [pc, #632]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80e4 	beq.w	8002de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4c>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	f040 808b 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 8087 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x64>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e3ed      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_RCC_OscConfig+0x7e>
 8002c5c:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	e005      	b.n	8002c72 <HAL_RCC_OscConfig+0x8a>
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d223      	bcs.n	8002cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fdc8 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3ce      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4977      	ldr	r1, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4972      	ldr	r1, [pc, #456]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e025      	b.n	8002d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	496a      	ldr	r1, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4965      	ldr	r1, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd88 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e38e      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0a:	f000 fcbf 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8002d0e:	4601      	mov	r1, r0
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x29c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	fa21 f303 	lsr.w	r3, r1, r3
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x2a0>)
 8002d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x2a4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fd4e 	bl	80017d0 <HAL_InitTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d052      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	e372      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fd8b 	bl	8001870 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fd87 	bl	8001870 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e35b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	493a      	ldr	r1, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
 8002dae:	e01a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fd58 	bl	8001870 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fd54 	bl	8001870 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e328      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1dc>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d073      	beq.n	8002eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x21c>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d063      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d15f      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e305      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x24c>
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0x288>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x270>
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x288>
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe fcfa 	bl	8001870 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7e:	e010      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	0800595c 	.word	0x0800595c
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fcee 	bl	8001870 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2c2      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	4baf      	ldr	r3, [pc, #700]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2a8>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fcde 	bl	8001870 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fcda 	bl	8001870 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e2ae      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	4ba5      	ldr	r3, [pc, #660]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d0>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d060      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x310>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d116      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef8:	4b99      	ldr	r3, [pc, #612]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x328>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e28b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b93      	ldr	r3, [pc, #588]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	4990      	ldr	r1, [pc, #576]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f24:	e040      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d023      	beq.n	8002f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2e:	4b8c      	ldr	r3, [pc, #560]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8b      	ldr	r2, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fc99 	bl	8001870 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe fc95 	bl	8001870 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e269      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b7f      	ldr	r3, [pc, #508]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	497c      	ldr	r1, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fc75 	bl	8001870 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fc71 	bl	8001870 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e245      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	4a67      	ldr	r2, [pc, #412]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fc50 	bl	8001870 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fc4c 	bl	8001870 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e220      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe6:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x3ec>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff6:	4b5a      	ldr	r3, [pc, #360]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fc33 	bl	8001870 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe fc2f 	bl	8001870 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e203      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a6 	beq.w	8003188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b44      	ldr	r3, [pc, #272]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a43      	ldr	r2, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003068:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d118      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3a      	ldr	r2, [pc, #232]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003080:	f7fe fbf6 	bl	8001870 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fbf2 	bl	8001870 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1c6      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x57c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d8>
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030be:	e024      	b.n	800310a <HAL_RCC_OscConfig+0x522>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d110      	bne.n	80030ea <HAL_RCC_OscConfig+0x502>
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e8:	e00f      	b.n	800310a <HAL_RCC_OscConfig+0x522>
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003102:	f023 0304 	bic.w	r3, r3, #4
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe fbad 	bl	8001870 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe fba9 	bl	8001870 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e17b      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x578>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ed      	beq.n	800311a <HAL_RCC_OscConfig+0x532>
 800313e:	e01a      	b.n	8003176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe fb96 	bl	8001870 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fe fb92 	bl	8001870 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d906      	bls.n	8003168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e164      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003168:	4ba8      	ldr	r3, [pc, #672]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e8      	bne.n	8003148 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4ba3      	ldr	r3, [pc, #652]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4aa2      	ldr	r2, [pc, #648]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03c      	beq.n	800320e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319c:	4b9b      	ldr	r3, [pc, #620]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800319e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a2:	4a9a      	ldr	r2, [pc, #616]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe fb60 	bl	8001870 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b4:	f7fe fb5c 	bl	8001870 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e130      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c6:	4b91      	ldr	r3, [pc, #580]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <HAL_RCC_OscConfig+0x5cc>
 80031d4:	e01b      	b.n	800320e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d6:	4b8d      	ldr	r3, [pc, #564]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	4a8b      	ldr	r2, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fb43 	bl	8001870 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ee:	f7fe fb3f 	bl	8001870 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e113      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8107 	beq.w	8003426 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 80cb 	bne.w	80033b8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003222:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	429a      	cmp	r2, r3
 8003234:	d12c      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	3b01      	subs	r3, #1
 8003242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d123      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d11b      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d113      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d109      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d06d      	beq.n	800336c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d068      	beq.n	8003368 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0ba      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032be:	f7fe fad7 	bl	8001870 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fad3 	bl	8001870 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0a7      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b49      	ldr	r3, [pc, #292]	; (8003410 <HAL_RCC_OscConfig+0x828>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0552      	lsls	r2, r2, #21
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003312:	0852      	lsrs	r2, r2, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	0652      	lsls	r2, r2, #25
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800331e:	06d2      	lsls	r2, r2, #27
 8003320:	430a      	orrs	r2, r1
 8003322:	493a      	ldr	r1, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003328:	4b38      	ldr	r3, [pc, #224]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a37      	ldr	r2, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a34      	ldr	r2, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003340:	f7fe fa96 	bl	8001870 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fa92 	bl	8001870 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e066      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003366:	e05e      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e05d      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d156      	bne.n	8003426 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x824>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_RCC_OscConfig+0x824>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003390:	f7fe fa6e 	bl	8001870 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fa6a 	bl	8001870 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03e      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x7b0>
 80033b6:	e036      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d031      	beq.n	8003422 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe fa3d 	bl	8001870 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	e00c      	b.n	8003414 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe fa39 	bl	8001870 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d905      	bls.n	8003414 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e00d      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
 800340c:	40021000 	.word	0x40021000
 8003410:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x848>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ec      	bne.n	80033fa <HAL_RCC_OscConfig+0x812>
 8003420:	e001      	b.n	8003426 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e10f      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b89      	ldr	r3, [pc, #548]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d910      	bls.n	800347c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b86      	ldr	r3, [pc, #536]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	4984      	ldr	r1, [pc, #528]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0f7      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8089 	beq.w	800359c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d133      	bne.n	80034fa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0e4      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80034a2:	f000 fa0f 	bl	80038c4 <RCC_GetSysClockFreqFromPLLSource>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b74      	ldr	r3, [pc, #464]	; (800367c <HAL_RCC_ClockConfig+0x248>)
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d955      	bls.n	800355a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c2:	4a6d      	ldr	r2, [pc, #436]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e044      	b.n	800355a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03e      	beq.n	800355a <HAL_RCC_ClockConfig+0x126>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d13a      	bne.n	800355a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034e4:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ec:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e02f      	b.n	800355a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0ac      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0a0      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e098      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800353a:	f000 f8a7 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b4e      	ldr	r3, [pc, #312]	; (800367c <HAL_RCC_ClockConfig+0x248>)
 8003542:	429a      	cmp	r2, r3
 8003544:	d909      	bls.n	800355a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354e:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003554:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4944      	ldr	r1, [pc, #272]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fe f980 	bl	8001870 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe f97c 	bl	8001870 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e070      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4930      	ldr	r1, [pc, #192]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
 80035ba:	e008      	b.n	80035ce <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035c2:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 80035c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035cc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d210      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 020f 	bic.w	r2, r3, #15
 80035e4:	4923      	ldr	r1, [pc, #140]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_ClockConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e036      	b.n	800366c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360a:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4918      	ldr	r1, [pc, #96]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4910      	ldr	r1, [pc, #64]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800363c:	f000 f826 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003640:	4601      	mov	r1, r0
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_ClockConfig+0x244>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_RCC_ClockConfig+0x24c>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa21 f303 	lsr.w	r3, r1, r3
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x250>)
 800365a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x254>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe f8b5 	bl	80017d0 <HAL_InitTick>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]

  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40022000 	.word	0x40022000
 8003678:	40021000 	.word	0x40021000
 800367c:	04c4b400 	.word	0x04c4b400
 8003680:	0800595c 	.word	0x0800595c
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d121      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d11e      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036c0:	4b33      	ldr	r3, [pc, #204]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036e8:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d102      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e004      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d101      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_RCC_GetSysClockFreq+0x110>)
 8003712:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d133      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0xa4>
 800372a:	2b03      	cmp	r3, #3
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0xaa>
 800372e:	e005      	b.n	800373c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003732:	617b      	str	r3, [r7, #20]
      break;
 8003734:	e005      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_GetSysClockFreq+0x110>)
 8003738:	617b      	str	r3, [r7, #20]
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	617b      	str	r3, [r7, #20]
      break;
 8003740:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	3301      	adds	r3, #1
 800374e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	fb02 f203 	mul.w	r2, r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_GetSysClockFreq+0x104>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0e5b      	lsrs	r3, r3, #25
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003782:	69bb      	ldr	r3, [r7, #24]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3724      	adds	r7, #36	; 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40021000 	.word	0x40021000
 8003794:	08005974 	.word	0x08005974
 8003798:	00f42400 	.word	0x00f42400
 800379c:	007a1200 	.word	0x007a1200

080037a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037bc:	f7ff fff0 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c0:	4601      	mov	r1, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	0800596c 	.word	0x0800596c

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037e8:	f7ff ffda 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037ec:	4601      	mov	r1, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0adb      	lsrs	r3, r3, #11
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	0800596c 	.word	0x0800596c

08003810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f91a 	bl	8002a60 <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
 800382e:	e014      	b.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	4a21      	ldr	r2, [pc, #132]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383a:	6593      	str	r3, [r2, #88]	; 0x58
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003848:	f7ff f90a 	bl	8002a60 <HAL_PWREx_GetVoltageRange>
 800384c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d10b      	bne.n	800387a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d913      	bls.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2ba0      	cmp	r3, #160	; 0xa0
 800386c:	d902      	bls.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386e:	2302      	movs	r3, #2
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e00d      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e00a      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b7f      	cmp	r3, #127	; 0x7f
 800387e:	d902      	bls.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003880:	2302      	movs	r3, #2
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e004      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b70      	cmp	r3, #112	; 0x70
 800388a:	d101      	bne.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800388c:	2301      	movs	r3, #1
 800388e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 020f 	bic.w	r2, r3, #15
 8003898:	4909      	ldr	r1, [pc, #36]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d001      	beq.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40022000 	.word	0x40022000

080038c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d118      	bne.n	800390c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e6:	4b27      	ldr	r3, [pc, #156]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e005      	b.n	8003902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038f6:	4b23      	ldr	r3, [pc, #140]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003902:	4a21      	ldr	r2, [pc, #132]	; (8003988 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d002      	beq.n	8003922 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800391c:	2b03      	cmp	r3, #3
 800391e:	d003      	beq.n	8003928 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003920:	e005      	b.n	800392e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003924:	613b      	str	r3, [r7, #16]
    break;
 8003926:	e005      	b.n	8003934 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800392a:	613b      	str	r3, [r7, #16]
    break;
 800392c:	e002      	b.n	8003934 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	613b      	str	r3, [r7, #16]
    break;
 8003932:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3301      	adds	r3, #1
 8003940:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	fb02 f203 	mul.w	r2, r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	0e5b      	lsrs	r3, r3, #25
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	3301      	adds	r3, #1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003974:	683b      	ldr	r3, [r7, #0]
}
 8003976:	4618      	mov	r0, r3
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	08005974 	.word	0x08005974
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800399c:	2300      	movs	r3, #0
 800399e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d03d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d00b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d804      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d015      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039c4:	e01d      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80039c6:	2b60      	cmp	r3, #96	; 0x60
 80039c8:	d01e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d01c      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039ce:	e018      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d0:	4b86      	ldr	r3, [pc, #536]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a85      	ldr	r2, [pc, #532]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fafd 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3320      	adds	r3, #32
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fbe4 	bl	80041c4 <RCCEx_PLLSAI2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	74fb      	strb	r3, [r7, #19]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a10:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a16:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1e:	4973      	ldr	r1, [pc, #460]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d042      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a40:	d00f      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d805      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003a52:	e01f      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a58:	d01f      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d01c      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a60:	e018      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a62:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6e:	e015      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fab4 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a80:	e00c      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3320      	adds	r3, #32
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fb9b 	bl	80041c4 <RCCEx_PLLSAI2_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	74fb      	strb	r3, [r7, #19]
      break;
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa2:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	494e      	ldr	r1, [pc, #312]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ab8:	e001      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 809f 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	4a40      	ldr	r2, [pc, #256]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6593      	str	r3, [r2, #88]	; 0x58
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afe:	2301      	movs	r3, #1
 8003b00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0e:	f7fd feaf 	bl	8001870 <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b14:	e009      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fd feab 	bl	8001870 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d902      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	74fb      	strb	r3, [r7, #19]
        break;
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ef      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d15b      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01f      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d019      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b86:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fe6a 	bl	8001870 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fe66 	bl	8001870 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d902      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	74fb      	strb	r3, [r7, #19]
            break;
 8003bb6:	e006      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ec      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	4903      	ldr	r1, [pc, #12]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003be4:	e008      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	74bb      	strb	r3, [r7, #18]
 8003bea:	e005      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf8:	7c7b      	ldrb	r3, [r7, #17]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4ba0      	ldr	r3, [pc, #640]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4a9f      	ldr	r2, [pc, #636]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c16:	4b9a      	ldr	r3, [pc, #616]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 0203 	bic.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	4996      	ldr	r1, [pc, #600]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c38:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 020c 	bic.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	498e      	ldr	r1, [pc, #568]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c5a:	4b89      	ldr	r3, [pc, #548]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	4985      	ldr	r1, [pc, #532]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c7c:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	497d      	ldr	r1, [pc, #500]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c9e:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	4974      	ldr	r1, [pc, #464]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	496c      	ldr	r1, [pc, #432]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce2:	4b67      	ldr	r3, [pc, #412]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf0:	4963      	ldr	r1, [pc, #396]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d12:	495b      	ldr	r1, [pc, #364]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d26:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	4952      	ldr	r1, [pc, #328]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d48:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	494a      	ldr	r1, [pc, #296]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6a:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	4941      	ldr	r1, [pc, #260]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d8c:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	4939      	ldr	r1, [pc, #228]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d028      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	4930      	ldr	r1, [pc, #192]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd8:	60d3      	str	r3, [r2, #12]
 8003dda:	e011      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2101      	movs	r1, #1
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f8f9 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d04d      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e14:	d108      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e26:	e012      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e46:	490e      	ldr	r1, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e56:	d106      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e62:	60d3      	str	r3, [r2, #12]
 8003e64:	e020      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a02      	ldr	r2, [pc, #8]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	60d3      	str	r3, [r2, #12]
 8003e7c:	e014      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2101      	movs	r1, #1
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f8a5 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d028      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec2:	4947      	ldr	r1, [pc, #284]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
 8003ee0:	e011      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f876 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01e      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	492f      	ldr	r1, [pc, #188]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 f851 	bl	8003fe4 <RCCEx_PLLSAI1_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f62:	f023 0204 	bic.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6c:	491c      	ldr	r1, [pc, #112]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f86:	f023 0218 	bic.w	r2, r3, #24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	4913      	ldr	r1, [pc, #76]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d017      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ff2:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0203 	and.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d103      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
       ||
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13f      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e03c      	b.n	8004096 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00c      	beq.n	800403e <RCCEx_PLLSAI1_Config+0x5a>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d013      	beq.n	8004050 <RCCEx_PLLSAI1_Config+0x6c>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d120      	bne.n	800406e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11d      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800403c:	e01a      	b.n	8004074 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004046:	2b00      	cmp	r3, #0
 8004048:	d116      	bne.n	8004078 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404e:	e013      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004050:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800405c:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800406c:	e006      	b.n	800407c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      break;
 8004072:	e004      	b.n	800407e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800407c:	bf00      	nop
    }

    if(status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4948      	ldr	r1, [pc, #288]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8086 	bne.w	80041aa <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800409e:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a44      	ldr	r2, [pc, #272]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040aa:	f7fd fbe1 	bl	8001870 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040b0:	e009      	b.n	80040c6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040b2:	f7fd fbdd 	bl	8001870 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d902      	bls.n	80040c6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	73fb      	strb	r3, [r7, #15]
        break;
 80040c4:	e005      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ef      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d168      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040de:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <RCCEx_PLLSAI1_Config+0x1d4>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6892      	ldr	r2, [r2, #8]
 80040ea:	0211      	lsls	r1, r2, #8
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68d2      	ldr	r2, [r2, #12]
 80040f0:	06d2      	lsls	r2, r2, #27
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6852      	ldr	r2, [r2, #4]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	430a      	orrs	r2, r1
 80040fe:	492d      	ldr	r1, [pc, #180]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
 8004104:	e02d      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d115      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6892      	ldr	r2, [r2, #8]
 8004118:	0211      	lsls	r1, r2, #8
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6912      	ldr	r2, [r2, #16]
 800411e:	0852      	lsrs	r2, r2, #1
 8004120:	3a01      	subs	r2, #1
 8004122:	0552      	lsls	r2, r2, #21
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6852      	ldr	r2, [r2, #4]
 800412a:	3a01      	subs	r2, #1
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	430a      	orrs	r2, r1
 8004130:	4920      	ldr	r1, [pc, #128]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	610b      	str	r3, [r1, #16]
 8004136:	e014      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6892      	ldr	r2, [r2, #8]
 8004144:	0211      	lsls	r1, r2, #8
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6952      	ldr	r2, [r2, #20]
 800414a:	0852      	lsrs	r2, r2, #1
 800414c:	3a01      	subs	r2, #1
 800414e:	0652      	lsls	r2, r2, #25
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6852      	ldr	r2, [r2, #4]
 8004156:	3a01      	subs	r2, #1
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	430a      	orrs	r2, r1
 800415c:	4915      	ldr	r1, [pc, #84]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fd fb7f 	bl	8001870 <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004174:	e009      	b.n	800418a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004176:	f7fd fb7b 	bl	8001870 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d902      	bls.n	800418a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	73fb      	strb	r3, [r7, #15]
          break;
 8004188:	e005      	b.n	8004196 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000
 80041b8:	07ff800f 	.word	0x07ff800f
 80041bc:	ff9f800f 	.word	0xff9f800f
 80041c0:	f9ff800f 	.word	0xf9ff800f

080041c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b70      	ldr	r3, [pc, #448]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041de:	4b6d      	ldr	r3, [pc, #436]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d103      	bne.n	80041f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
       ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d13f      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e03c      	b.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d00c      	beq.n	800421e <RCCEx_PLLSAI2_Config+0x5a>
 8004204:	2b03      	cmp	r3, #3
 8004206:	d013      	beq.n	8004230 <RCCEx_PLLSAI2_Config+0x6c>
 8004208:	2b01      	cmp	r3, #1
 800420a:	d120      	bne.n	800424e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11d      	bne.n	8004254 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e01a      	b.n	8004254 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d116      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422e:	e013      	b.n	8004258 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004230:	4b58      	ldr	r3, [pc, #352]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800423c:	4b55      	ldr	r3, [pc, #340]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800424c:	e006      	b.n	800425c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      break;
 8004252:	e004      	b.n	800425e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800425c:	bf00      	nop
    }

    if(status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4948      	ldr	r1, [pc, #288]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 8086 	bne.w	800438a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800427e:	4b45      	ldr	r3, [pc, #276]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a44      	ldr	r2, [pc, #272]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fd faf1 	bl	8001870 <HAL_GetTick>
 800428e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004290:	e009      	b.n	80042a6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004292:	f7fd faed 	bl	8001870 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d902      	bls.n	80042a6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	73fb      	strb	r3, [r7, #15]
        break;
 80042a4:	e005      	b.n	80042b2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042a6:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ef      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d168      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042be:	4b35      	ldr	r3, [pc, #212]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	4b35      	ldr	r3, [pc, #212]	; (8004398 <RCCEx_PLLSAI2_Config+0x1d4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	0211      	lsls	r1, r2, #8
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68d2      	ldr	r2, [r2, #12]
 80042d0:	06d2      	lsls	r2, r2, #27
 80042d2:	4311      	orrs	r1, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6852      	ldr	r2, [r2, #4]
 80042d8:	3a01      	subs	r2, #1
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	430a      	orrs	r2, r1
 80042de:	492d      	ldr	r1, [pc, #180]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	614b      	str	r3, [r1, #20]
 80042e4:	e02d      	b.n	8004342 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d115      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	0211      	lsls	r1, r2, #8
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6912      	ldr	r2, [r2, #16]
 80042fe:	0852      	lsrs	r2, r2, #1
 8004300:	3a01      	subs	r2, #1
 8004302:	0552      	lsls	r2, r2, #21
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	3a01      	subs	r2, #1
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	430a      	orrs	r2, r1
 8004310:	4920      	ldr	r1, [pc, #128]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	614b      	str	r3, [r1, #20]
 8004316:	e014      	b.n	8004342 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800431e:	4013      	ands	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6892      	ldr	r2, [r2, #8]
 8004324:	0211      	lsls	r1, r2, #8
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6952      	ldr	r2, [r2, #20]
 800432a:	0852      	lsrs	r2, r2, #1
 800432c:	3a01      	subs	r2, #1
 800432e:	0652      	lsls	r2, r2, #25
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6852      	ldr	r2, [r2, #4]
 8004336:	3a01      	subs	r2, #1
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	430a      	orrs	r2, r1
 800433c:	4915      	ldr	r1, [pc, #84]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004342:	4b14      	ldr	r3, [pc, #80]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fd fa8f 	bl	8001870 <HAL_GetTick>
 8004352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004354:	e009      	b.n	800436a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004356:	f7fd fa8b 	bl	8001870 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d902      	bls.n	800436a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	73fb      	strb	r3, [r7, #15]
          break;
 8004368:	e005      	b.n	8004376 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0ef      	beq.n	8004356 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	07ff800f 	.word	0x07ff800f
 800439c:	ff9f800f 	.word	0xff9f800f
 80043a0:	f9ff800f 	.word	0xf9ff800f

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e049      	b.n	800444a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd f8c6 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fab0 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04f      	b.n	800450c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_TIM_Base_Start_IT+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01d      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d018      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_TIM_Base_Start_IT+0xc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_TIM_Base_Start_IT+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_TIM_Base_Start_IT+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_TIM_Base_Start_IT+0xd4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIM_Base_Start_IT+0x76>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIM_Base_Start_IT+0xd8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d115      	bne.n	80044f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_TIM_Base_Start_IT+0xdc>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d015      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d011      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	e008      	b.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e000      	b.n	800450a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40013400 	.word	0x40013400
 800452c:	40014000 	.word	0x40014000
 8004530:	00010007 	.word	0x00010007

08004534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0202 	mvn.w	r2, #2
 8004560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9c8 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9ba 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9cb 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0204 	mvn.w	r2, #4
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f99e 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f990 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9a1 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0208 	mvn.w	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f974 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f966 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f977 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f94a 	bl	800490c <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f93c 	bl	80048f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f94d 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10e      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0201 	mvn.w	r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f916 	bl	80048e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 faf8 	bl	8004cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f2:	d10e      	bne.n	8004712 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d107      	bne.n	8004712 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 faeb 	bl	8004ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d10e      	bne.n	800473e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d107      	bne.n	800473e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8fb 	bl	8004934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b20      	cmp	r3, #32
 800474a:	d10e      	bne.n	800476a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b20      	cmp	r3, #32
 8004758:	d107      	bne.n	800476a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0220 	mvn.w	r2, #32
 8004762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 faab 	bl	8004cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_TIM_ConfigClockSource+0x18>
 8004786:	2302      	movs	r3, #2
 8004788:	e0a8      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d067      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x124>
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d80b      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x70>
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d073      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x144>
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d802      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x66>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d06f      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047d6:	e078      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d06c      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x144>
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d06a      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80047e0:	e073      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047e2:	2b70      	cmp	r3, #112	; 0x70
 80047e4:	d00d      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x90>
 80047e6:	2b70      	cmp	r3, #112	; 0x70
 80047e8:	d804      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x82>
 80047ea:	2b50      	cmp	r3, #80	; 0x50
 80047ec:	d033      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xe4>
 80047ee:	2b60      	cmp	r3, #96	; 0x60
 80047f0:	d041      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80047f2:	e06a      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d066      	beq.n	80048c8 <HAL_TIM_ConfigClockSource+0x156>
 80047fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fe:	d017      	beq.n	8004830 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004800:	e063      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f000 f9ad 	bl	8004b70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004824:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	609a      	str	r2, [r3, #8]
      break;
 800482e:	e04c      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f000 f996 	bl	8004b70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004852:	609a      	str	r2, [r3, #8]
      break;
 8004854:	e039      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f90a 	bl	8004a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2150      	movs	r1, #80	; 0x50
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f963 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 8004874:	e029      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f000 f929 	bl	8004ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2160      	movs	r1, #96	; 0x60
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f953 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 8004894:	e019      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f8ea 	bl	8004a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f943 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 80048b4:	e009      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 f93a 	bl	8004b3a <TIM_ITRx_SetConfig>
        break;
 80048c6:	e000      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x158>
      break;
 80048c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x128>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x12c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x130>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00f      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <TIM_Base_SetConfig+0x128>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <TIM_Base_SetConfig+0x12c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <TIM_Base_SetConfig+0x130>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d103      	bne.n	8004a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 030a 	bic.w	r3, r3, #10
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0210 	bic.w	r2, r3, #16
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f043 0307 	orr.w	r3, r3, #7
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e068      	b.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2e      	ldr	r2, [pc, #184]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2d      	ldr	r2, [pc, #180]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d018      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10c      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40013400 	.word	0x40013400
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40014000 	.word	0x40014000

08004cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e042      	b.n	8004d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc fc3f 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f82c 	bl	8004d9c <UART_SetConfig>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e022      	b.n	8004d94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 faf2 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb79 	bl	8005484 <UART_CheckIdleState>
 8004d92:	4603      	mov	r3, r0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004da0:	b088      	sub	sp, #32
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4bb1      	ldr	r3, [pc, #708]	; (8005098 <UART_SetConfig+0x2fc>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	69f9      	ldr	r1, [r7, #28]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4aa6      	ldr	r2, [pc, #664]	; (800509c <UART_SetConfig+0x300>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f023 010f 	bic.w	r1, r3, #15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a97      	ldr	r2, [pc, #604]	; (80050a0 <UART_SetConfig+0x304>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d121      	bne.n	8004e8c <UART_SetConfig+0xf0>
 8004e48:	4b96      	ldr	r3, [pc, #600]	; (80050a4 <UART_SetConfig+0x308>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d816      	bhi.n	8004e84 <UART_SetConfig+0xe8>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0xc0>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e73 	.word	0x08004e73
 8004e68:	08004e7f 	.word	0x08004e7f
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	76fb      	strb	r3, [r7, #27]
 8004e70:	e0e8      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004e72:	2302      	movs	r3, #2
 8004e74:	76fb      	strb	r3, [r7, #27]
 8004e76:	e0e5      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	76fb      	strb	r3, [r7, #27]
 8004e7c:	e0e2      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004e7e:	2308      	movs	r3, #8
 8004e80:	76fb      	strb	r3, [r7, #27]
 8004e82:	e0df      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004e84:	2310      	movs	r3, #16
 8004e86:	76fb      	strb	r3, [r7, #27]
 8004e88:	bf00      	nop
 8004e8a:	e0db      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a85      	ldr	r2, [pc, #532]	; (80050a8 <UART_SetConfig+0x30c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d134      	bne.n	8004f00 <UART_SetConfig+0x164>
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <UART_SetConfig+0x308>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d829      	bhi.n	8004ef8 <UART_SetConfig+0x15c>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x110>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ef9 	.word	0x08004ef9
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ee7 	.word	0x08004ee7
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004ef9 	.word	0x08004ef9
 8004edc:	08004ef3 	.word	0x08004ef3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	e0ae      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	76fb      	strb	r3, [r7, #27]
 8004eea:	e0ab      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004eec:	2304      	movs	r3, #4
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e0a8      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e0a5      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	bf00      	nop
 8004efe:	e0a1      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a69      	ldr	r2, [pc, #420]	; (80050ac <UART_SetConfig+0x310>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d120      	bne.n	8004f4c <UART_SetConfig+0x1b0>
 8004f0a:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <UART_SetConfig+0x308>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d00f      	beq.n	8004f38 <UART_SetConfig+0x19c>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d802      	bhi.n	8004f22 <UART_SetConfig+0x186>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <UART_SetConfig+0x190>
 8004f20:	e010      	b.n	8004f44 <UART_SetConfig+0x1a8>
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d005      	beq.n	8004f32 <UART_SetConfig+0x196>
 8004f26:	2b30      	cmp	r3, #48	; 0x30
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0x1a2>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x1a8>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	e088      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f32:	2302      	movs	r3, #2
 8004f34:	76fb      	strb	r3, [r7, #27]
 8004f36:	e085      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e082      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e07f      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f44:	2310      	movs	r3, #16
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	bf00      	nop
 8004f4a:	e07b      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a57      	ldr	r2, [pc, #348]	; (80050b0 <UART_SetConfig+0x314>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d120      	bne.n	8004f98 <UART_SetConfig+0x1fc>
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <UART_SetConfig+0x308>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d00f      	beq.n	8004f84 <UART_SetConfig+0x1e8>
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d802      	bhi.n	8004f6e <UART_SetConfig+0x1d2>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <UART_SetConfig+0x1dc>
 8004f6c:	e010      	b.n	8004f90 <UART_SetConfig+0x1f4>
 8004f6e:	2b80      	cmp	r3, #128	; 0x80
 8004f70:	d005      	beq.n	8004f7e <UART_SetConfig+0x1e2>
 8004f72:	2bc0      	cmp	r3, #192	; 0xc0
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x1ee>
 8004f76:	e00b      	b.n	8004f90 <UART_SetConfig+0x1f4>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	76fb      	strb	r3, [r7, #27]
 8004f7c:	e062      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	76fb      	strb	r3, [r7, #27]
 8004f82:	e05f      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f84:	2304      	movs	r3, #4
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e05c      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e059      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f90:	2310      	movs	r3, #16
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	bf00      	nop
 8004f96:	e055      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a45      	ldr	r2, [pc, #276]	; (80050b4 <UART_SetConfig+0x318>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d124      	bne.n	8004fec <UART_SetConfig+0x250>
 8004fa2:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <UART_SetConfig+0x308>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb0:	d012      	beq.n	8004fd8 <UART_SetConfig+0x23c>
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d802      	bhi.n	8004fbe <UART_SetConfig+0x222>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <UART_SetConfig+0x230>
 8004fbc:	e012      	b.n	8004fe4 <UART_SetConfig+0x248>
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc2:	d006      	beq.n	8004fd2 <UART_SetConfig+0x236>
 8004fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc8:	d009      	beq.n	8004fde <UART_SetConfig+0x242>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x248>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e038      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e035      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e032      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e02f      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	bf00      	nop
 8004fea:	e02b      	b.n	8005044 <UART_SetConfig+0x2a8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	; (800509c <UART_SetConfig+0x300>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d124      	bne.n	8005040 <UART_SetConfig+0x2a4>
 8004ff6:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <UART_SetConfig+0x308>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	d012      	beq.n	800502c <UART_SetConfig+0x290>
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d802      	bhi.n	8005012 <UART_SetConfig+0x276>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <UART_SetConfig+0x284>
 8005010:	e012      	b.n	8005038 <UART_SetConfig+0x29c>
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d006      	beq.n	8005026 <UART_SetConfig+0x28a>
 8005018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800501c:	d009      	beq.n	8005032 <UART_SetConfig+0x296>
 800501e:	e00b      	b.n	8005038 <UART_SetConfig+0x29c>
 8005020:	2300      	movs	r3, #0
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	e00e      	b.n	8005044 <UART_SetConfig+0x2a8>
 8005026:	2302      	movs	r3, #2
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e00b      	b.n	8005044 <UART_SetConfig+0x2a8>
 800502c:	2304      	movs	r3, #4
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e008      	b.n	8005044 <UART_SetConfig+0x2a8>
 8005032:	2308      	movs	r3, #8
 8005034:	76fb      	strb	r3, [r7, #27]
 8005036:	e005      	b.n	8005044 <UART_SetConfig+0x2a8>
 8005038:	2310      	movs	r3, #16
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	bf00      	nop
 800503e:	e001      	b.n	8005044 <UART_SetConfig+0x2a8>
 8005040:	2310      	movs	r3, #16
 8005042:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a14      	ldr	r2, [pc, #80]	; (800509c <UART_SetConfig+0x300>)
 800504a:	4293      	cmp	r3, r2
 800504c:	f040 80a1 	bne.w	8005192 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005050:	7efb      	ldrb	r3, [r7, #27]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d836      	bhi.n	80050c4 <UART_SetConfig+0x328>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x2c0>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005081 	.word	0x08005081
 8005060:	080050c5 	.word	0x080050c5
 8005064:	08005089 	.word	0x08005089
 8005068:	080050c5 	.word	0x080050c5
 800506c:	0800508f 	.word	0x0800508f
 8005070:	080050c5 	.word	0x080050c5
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050bd 	.word	0x080050bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe fb9a 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8005084:	6178      	str	r0, [r7, #20]
        break;
 8005086:	e022      	b.n	80050ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <UART_SetConfig+0x31c>)
 800508a:	617b      	str	r3, [r7, #20]
        break;
 800508c:	e01f      	b.n	80050ce <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fe fafd 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8005092:	6178      	str	r0, [r7, #20]
        break;
 8005094:	e01b      	b.n	80050ce <UART_SetConfig+0x332>
 8005096:	bf00      	nop
 8005098:	cfff69f3 	.word	0xcfff69f3
 800509c:	40008000 	.word	0x40008000
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40004400 	.word	0x40004400
 80050ac:	40004800 	.word	0x40004800
 80050b0:	40004c00 	.word	0x40004c00
 80050b4:	40005000 	.word	0x40005000
 80050b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c0:	617b      	str	r3, [r7, #20]
        break;
 80050c2:	e004      	b.n	80050ce <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	76bb      	strb	r3, [r7, #26]
        break;
 80050cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 811d 	beq.w	8005310 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	4a97      	ldr	r2, [pc, #604]	; (8005338 <UART_SetConfig+0x59c>)
 80050dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050e0:	461a      	mov	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d305      	bcc.n	8005106 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d902      	bls.n	800510c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	76bb      	strb	r3, [r7, #26]
 800510a:	e101      	b.n	8005310 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4618      	mov	r0, r3
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	4a87      	ldr	r2, [pc, #540]	; (8005338 <UART_SetConfig+0x59c>)
 800511a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f04f 0400 	mov.w	r4, #0
 8005124:	461a      	mov	r2, r3
 8005126:	4623      	mov	r3, r4
 8005128:	f7fb fc88 	bl	8000a3c <__aeabi_uldivmod>
 800512c:	4603      	mov	r3, r0
 800512e:	460c      	mov	r4, r1
 8005130:	4619      	mov	r1, r3
 8005132:	4622      	mov	r2, r4
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	f04f 0400 	mov.w	r4, #0
 800513c:	0214      	lsls	r4, r2, #8
 800513e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005142:	020b      	lsls	r3, r1, #8
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	0852      	lsrs	r2, r2, #1
 800514a:	4611      	mov	r1, r2
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	eb13 0b01 	adds.w	fp, r3, r1
 8005154:	eb44 0c02 	adc.w	ip, r4, r2
 8005158:	4658      	mov	r0, fp
 800515a:	4661      	mov	r1, ip
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	461a      	mov	r2, r3
 8005166:	4623      	mov	r3, r4
 8005168:	f7fb fc68 	bl	8000a3c <__aeabi_uldivmod>
 800516c:	4603      	mov	r3, r0
 800516e:	460c      	mov	r4, r1
 8005170:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005178:	d308      	bcc.n	800518c <UART_SetConfig+0x3f0>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005180:	d204      	bcs.n	800518c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	e0c1      	b.n	8005310 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	76bb      	strb	r3, [r7, #26]
 8005190:	e0be      	b.n	8005310 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519a:	d164      	bne.n	8005266 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800519c:	7efb      	ldrb	r3, [r7, #27]
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d827      	bhi.n	80051f2 <UART_SetConfig+0x456>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x40c>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe faf4 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6178      	str	r0, [r7, #20]
        break;
 80051d2:	e013      	b.n	80051fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fe fb06 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80051d8:	6178      	str	r0, [r7, #20]
        break;
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b57      	ldr	r3, [pc, #348]	; (800533c <UART_SetConfig+0x5a0>)
 80051de:	617b      	str	r3, [r7, #20]
        break;
 80051e0:	e00c      	b.n	80051fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fe fa53 	bl	800368c <HAL_RCC_GetSysClockFreq>
 80051e6:	6178      	str	r0, [r7, #20]
        break;
 80051e8:	e008      	b.n	80051fc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	617b      	str	r3, [r7, #20]
        break;
 80051f0:	e004      	b.n	80051fc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	76bb      	strb	r3, [r7, #26]
        break;
 80051fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8086 	beq.w	8005310 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4a4b      	ldr	r2, [pc, #300]	; (8005338 <UART_SetConfig+0x59c>)
 800520a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800520e:	461a      	mov	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	fbb3 f3f2 	udiv	r3, r3, r2
 8005216:	005a      	lsls	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	441a      	add	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d916      	bls.n	8005260 <UART_SetConfig+0x4c4>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d212      	bcs.n	8005260 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b29a      	uxth	r2, r3
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	4313      	orrs	r3, r2
 8005254:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	89fa      	ldrh	r2, [r7, #14]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e057      	b.n	8005310 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	76bb      	strb	r3, [r7, #26]
 8005264:	e054      	b.n	8005310 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005266:	7efb      	ldrb	r3, [r7, #27]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d828      	bhi.n	80052be <UART_SetConfig+0x522>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x4d8>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	080052bf 	.word	0x080052bf
 8005284:	080052af 	.word	0x080052af
 8005288:	080052bf 	.word	0x080052bf
 800528c:	080052bf 	.word	0x080052bf
 8005290:	080052bf 	.word	0x080052bf
 8005294:	080052b7 	.word	0x080052b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe fa8e 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800529c:	6178      	str	r0, [r7, #20]
        break;
 800529e:	e013      	b.n	80052c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fe faa0 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80052a4:	6178      	str	r0, [r7, #20]
        break;
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b24      	ldr	r3, [pc, #144]	; (800533c <UART_SetConfig+0x5a0>)
 80052aa:	617b      	str	r3, [r7, #20]
        break;
 80052ac:	e00c      	b.n	80052c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fe f9ed 	bl	800368c <HAL_RCC_GetSysClockFreq>
 80052b2:	6178      	str	r0, [r7, #20]
        break;
 80052b4:	e008      	b.n	80052c8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	617b      	str	r3, [r7, #20]
        break;
 80052bc:	e004      	b.n	80052c8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	76bb      	strb	r3, [r7, #26]
        break;
 80052c6:	bf00      	nop
    }

    if (pclk != 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	4a19      	ldr	r2, [pc, #100]	; (8005338 <UART_SetConfig+0x59c>)
 80052d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d8:	461a      	mov	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d908      	bls.n	800530c <UART_SetConfig+0x570>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d204      	bcs.n	800530c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e001      	b.n	8005310 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800532c:	7ebb      	ldrb	r3, [r7, #26]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005338:	080059a4 	.word	0x080059a4
 800533c:	00f42400 	.word	0x00f42400

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005494:	f7fc f9ec 	bl	8001870 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10e      	bne.n	80054c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f82c 	bl	8005514 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e022      	b.n	800550c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d10e      	bne.n	80054f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f816 	bl	8005514 <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00c      	b.n	800550c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	e062      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d05e      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fc f99f 	bl	8001870 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <UART_WaitOnFlagUntilTimeout+0x30>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11d      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005552:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e045      	b.n	800560c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d02e      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559c:	d126      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055b6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e00f      	b.n	800560c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	429a      	cmp	r2, r3
 8005608:	d08d      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_UARTEx_DisableFifoMode+0x16>
 8005626:	2302      	movs	r3, #2
 8005628:	e027      	b.n	800567a <HAL_UARTEx_DisableFifoMode+0x66>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2224      	movs	r2, #36	; 0x24
 8005636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800569a:	2302      	movs	r3, #2
 800569c:	e02d      	b.n	80056fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2224      	movs	r2, #36	; 0x24
 80056aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f850 	bl	8005780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005716:	2302      	movs	r3, #2
 8005718:	e02d      	b.n	8005776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2224      	movs	r2, #36	; 0x24
 8005726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f812 	bl	8005780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <UARTEx_SetNbDataToProcess+0xc8>)
 800578a:	f107 0314 	add.w	r3, r7, #20
 800578e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005792:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005796:	4a2d      	ldr	r2, [pc, #180]	; (800584c <UARTEx_SetNbDataToProcess+0xcc>)
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d108      	bne.n	80057be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057bc:	e03d      	b.n	800583a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057be:	2308      	movs	r3, #8
 80057c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057c2:	2308      	movs	r3, #8
 80057c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	0e5b      	lsrs	r3, r3, #25
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	0f5b      	lsrs	r3, r3, #29
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80057e6:	7fbb      	ldrb	r3, [r7, #30]
 80057e8:	7f3a      	ldrb	r2, [r7, #28]
 80057ea:	f107 0120 	add.w	r1, r7, #32
 80057ee:	440a      	add	r2, r1
 80057f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	7f3a      	ldrb	r2, [r7, #28]
 80057fa:	f107 0120 	add.w	r1, r7, #32
 80057fe:	440a      	add	r2, r1
 8005800:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005804:	fb93 f3f2 	sdiv	r3, r3, r2
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005810:	7ffb      	ldrb	r3, [r7, #31]
 8005812:	7f7a      	ldrb	r2, [r7, #29]
 8005814:	f107 0120 	add.w	r1, r7, #32
 8005818:	440a      	add	r2, r1
 800581a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	7f7a      	ldrb	r2, [r7, #29]
 8005824:	f107 0120 	add.w	r1, r7, #32
 8005828:	440a      	add	r2, r1
 800582a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800582e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800583a:	bf00      	nop
 800583c:	3724      	adds	r7, #36	; 0x24
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	0800594c 	.word	0x0800594c
 800584c:	08005954 	.word	0x08005954

08005850 <arm_sin_f32>:
 8005850:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058d0 <arm_sin_f32+0x80>
 8005854:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005858:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005860:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005864:	d504      	bpl.n	8005870 <arm_sin_f32+0x20>
 8005866:	ee17 3a90 	vmov	r3, s15
 800586a:	3b01      	subs	r3, #1
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005874:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80058d4 <arm_sin_f32+0x84>
 8005878:	ee30 0a67 	vsub.f32	s0, s0, s15
 800587c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005880:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005884:	ee17 3a90 	vmov	r3, s15
 8005888:	b29b      	uxth	r3, r3
 800588a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588e:	d21a      	bcs.n	80058c6 <arm_sin_f32+0x76>
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005898:	1c59      	adds	r1, r3, #1
 800589a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800589e:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <arm_sin_f32+0x88>)
 80058a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80058a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80058ac:	ed93 7a00 	vldr	s14, [r3]
 80058b0:	edd2 6a00 	vldr	s13, [r2]
 80058b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80058b8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80058bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80058c4:	4770      	bx	lr
 80058c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058ca:	2101      	movs	r1, #1
 80058cc:	2300      	movs	r3, #0
 80058ce:	e7e6      	b.n	800589e <arm_sin_f32+0x4e>
 80058d0:	3e22f983 	.word	0x3e22f983
 80058d4:	44000000 	.word	0x44000000
 80058d8:	080059bc 	.word	0x080059bc

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4e0d      	ldr	r6, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1ba4      	subs	r4, r4, r6
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	2500      	movs	r5, #0
 80058e8:	42a5      	cmp	r5, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	4e0b      	ldr	r6, [pc, #44]	; (800591c <__libc_init_array+0x40>)
 80058ee:	4c0c      	ldr	r4, [pc, #48]	; (8005920 <__libc_init_array+0x44>)
 80058f0:	f000 f820 	bl	8005934 <_init>
 80058f4:	1ba4      	subs	r4, r4, r6
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	2500      	movs	r5, #0
 80058fa:	42a5      	cmp	r5, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005904:	4798      	blx	r3
 8005906:	3501      	adds	r5, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800590e:	4798      	blx	r3
 8005910:	3501      	adds	r5, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	080061c8 	.word	0x080061c8
 8005918:	080061c8 	.word	0x080061c8
 800591c:	080061c8 	.word	0x080061c8
 8005920:	080061cc 	.word	0x080061cc

08005924 <memset>:
 8005924:	4402      	add	r2, r0
 8005926:	4603      	mov	r3, r0
 8005928:	4293      	cmp	r3, r2
 800592a:	d100      	bne.n	800592e <memset+0xa>
 800592c:	4770      	bx	lr
 800592e:	f803 1b01 	strb.w	r1, [r3], #1
 8005932:	e7f9      	b.n	8005928 <memset+0x4>

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
