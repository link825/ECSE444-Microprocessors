
dacpart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08004ea8  08004ea8  00014ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080057bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080057bc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013be7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002250  00000000  00000000  00033c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b249  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdd0  00000000  00000000  00063059  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e0a9  00000000  00000000  0006fe29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0017ded2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004684  00000000  00000000  0017dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00182648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004e90 	.word	0x08004e90

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08004e90 	.word	0x08004e90

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b972 	b.w	8000e74 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14b      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4615      	mov	r5, r2
 8000bba:	d967      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0720 	rsb	r7, r2, #32
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	fa20 f707 	lsr.w	r7, r0, r7
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	ea47 0803 	orr.w	r8, r7, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be0:	fa1f fc85 	uxth.w	ip, r5
 8000be4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bec:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfa:	f080 811b 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8118 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c04:	3f02      	subs	r7, #2
 8000c06:	442b      	add	r3, r5
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	192c      	adds	r4, r5, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c30:	3802      	subs	r0, #2
 8000c32:	442c      	add	r4, r5
 8000c34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c6 4300 	strd	r4, r3, [r6]
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xbe>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80eb 	beq.w	8000e2e <__udivmoddi4+0x286>
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f783 	clz	r7, r3
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	d147      	bne.n	8000cfe <__udivmoddi4+0x156>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd0>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fa 	bhi.w	8000e6c <__udivmoddi4+0x2c4>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xe8>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 808f 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c9a:	1b49      	subs	r1, r1, r5
 8000c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca0:	fa1f f885 	uxth.w	r8, r5
 8000ca4:	2701      	movs	r7, #1
 8000ca6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x14c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x14a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80b6 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e79f      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000d02:	40bb      	lsls	r3, r7
 8000d04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d22:	0c2c      	lsrs	r4, r5, #16
 8000d24:	fb08 3319 	mls	r3, r8, r9, r3
 8000d28:	fa1f fa8e 	uxth.w	sl, lr
 8000d2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d30:	fb09 f40a 	mul.w	r4, r9, sl
 8000d34:	429c      	cmp	r4, r3
 8000d36:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1e 0303 	adds.w	r3, lr, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	f080 8087 	bcs.w	8000e5a <__udivmoddi4+0x2b2>
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	f240 8084 	bls.w	8000e5a <__udivmoddi4+0x2b2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4473      	add	r3, lr
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1e 0404 	adds.w	r4, lr, r4
 8000d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d78:	d26b      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d969      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4474      	add	r4, lr
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c2      	mov	sl, r8
 8000d92:	464b      	mov	r3, r9
 8000d94:	d354      	bcc.n	8000e40 <__udivmoddi4+0x298>
 8000d96:	d051      	beq.n	8000e3c <__udivmoddi4+0x294>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d069      	beq.n	8000e70 <__udivmoddi4+0x2c8>
 8000d9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000da0:	eb64 0403 	sbc.w	r4, r4, r3
 8000da4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da8:	40fd      	lsrs	r5, r7
 8000daa:	40fc      	lsrs	r4, r7
 8000dac:	ea4c 0505 	orr.w	r5, ip, r5
 8000db0:	e9c6 5400 	strd	r5, r4, [r6]
 8000db4:	2700      	movs	r7, #0
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	4338      	orrs	r0, r7
 8000dd0:	0c01      	lsrs	r1, r0, #16
 8000dd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd6:	fa1f f885 	uxth.w	r8, r5
 8000dda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb07 f308 	mul.w	r3, r7, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x256>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df4:	d22f      	bcs.n	8000e56 <__udivmoddi4+0x2ae>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d92d      	bls.n	8000e56 <__udivmoddi4+0x2ae>
 8000dfa:	3f02      	subs	r7, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	b281      	uxth	r1, r0
 8000e02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb00 f308 	mul.w	r3, r0, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x27e>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1c:	d217      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d915      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e2c:	e73b      	b.n	8000ca6 <__udivmoddi4+0xfe>
 8000e2e:	4637      	mov	r7, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e709      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e34:	4607      	mov	r7, r0
 8000e36:	e6e7      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e3c:	4541      	cmp	r1, r8
 8000e3e:	d2ab      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 020e 	sbc.w	r2, r9, lr
 8000e48:	3801      	subs	r0, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7a4      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e4e:	4660      	mov	r0, ip
 8000e50:	e7e9      	b.n	8000e26 <__udivmoddi4+0x27e>
 8000e52:	4618      	mov	r0, r3
 8000e54:	e795      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e56:	4667      	mov	r7, ip
 8000e58:	e7d1      	b.n	8000dfe <__udivmoddi4+0x256>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e77c      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	442c      	add	r4, r5
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0x14c>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	442b      	add	r3, r5
 8000e6a:	e72f      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	e708      	b.n	8000c82 <__udivmoddi4+0xda>
 8000e70:	4637      	mov	r7, r6
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0xa0>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <triangle_wave>:
/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */

// function for generating a triangle wave from an inputed frequency in Hz, x is the independent variable
uint8_t triangle_wave(float frequency, int x){
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e82:	60b8      	str	r0, [r7, #8]
	float period = 1000/frequency; //1000ms
 8000e84:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000f44 <triangle_wave+0xcc>
 8000e88:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e90:	edc7 7a06 	vstr	s15, [r7, #24]
	uint8_t y;
	//float y = (2*amplitude/pi)*asin(sin(2*pi*(float)x/period));
	float modulus = fmod(x,period)/period;
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f7ff fb05 	bl	80004a4 <__aeabi_i2d>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	460d      	mov	r5, r1
 8000e9e:	69b8      	ldr	r0, [r7, #24]
 8000ea0:	f7ff fb12 	bl	80004c8 <__aeabi_f2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	ec43 2b11 	vmov	d1, r2, r3
 8000eac:	ec45 4b10 	vmov	d0, r4, r5
 8000eb0:	f003 fe76 	bl	8004ba0 <fmod>
 8000eb4:	ec56 5b10 	vmov	r5, r6, d0
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f7ff fb05 	bl	80004c8 <__aeabi_f2d>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4623      	mov	r3, r4
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	4631      	mov	r1, r6
 8000eca:	f7ff fc7f 	bl	80007cc <__aeabi_ddiv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460c      	mov	r4, r1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	f7ff fdff 	bl	8000ad8 <__aeabi_d2f>
 8000eda:	4603      	mov	r3, r0
 8000edc:	617b      	str	r3, [r7, #20]
	if (modulus<0.5){ //ascending slope for half period
 8000ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eee:	d50c      	bpl.n	8000f0a <triangle_wave+0x92>
		y = (uint8_t)(510*modulus);
 8000ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f48 <triangle_wave+0xd0>
 8000ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f00:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	77fb      	strb	r3, [r7, #31]
 8000f08:	e017      	b.n	8000f3a <triangle_wave+0xc2>
	}else{ //descending slope for half period
		modulus = modulus-0.5;
 8000f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f16:	edc7 7a05 	vstr	s15, [r7, #20]
		y = (uint8_t)(255-510*modulus);
 8000f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f48 <triangle_wave+0xd0>
 8000f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f26:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f4c <triangle_wave+0xd4>
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f32:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	77fb      	strb	r3, [r7, #31]
	}

	return y;
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3724      	adds	r7, #36	; 0x24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f44:	447a0000 	.word	0x447a0000
 8000f48:	43ff0000 	.word	0x43ff0000
 8000f4c:	437f0000 	.word	0x437f0000

08000f50 <sawtooth_wave>:

// function for generating a sawtooth wave from an inputed frequency in Hz, x is the independent variable
uint8_t sawtooth_wave(float frequency, int x){
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f5a:	60b8      	str	r0, [r7, #8]
	float period = 1000/frequency; //1000ms
 8000f5c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000fd8 <sawtooth_wave+0x88>
 8000f60:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f68:	edc7 7a07 	vstr	s15, [r7, #28]
	//float y = 2*(((float)x/period)-floor(((float)x/period)+0.5));
	float modulus = fmod(x,period)/period; //ascending slope every period
 8000f6c:	68b8      	ldr	r0, [r7, #8]
 8000f6e:	f7ff fa99 	bl	80004a4 <__aeabi_i2d>
 8000f72:	4604      	mov	r4, r0
 8000f74:	460d      	mov	r5, r1
 8000f76:	69f8      	ldr	r0, [r7, #28]
 8000f78:	f7ff faa6 	bl	80004c8 <__aeabi_f2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	ec43 2b11 	vmov	d1, r2, r3
 8000f84:	ec45 4b10 	vmov	d0, r4, r5
 8000f88:	f003 fe0a 	bl	8004ba0 <fmod>
 8000f8c:	ec56 5b10 	vmov	r5, r6, d0
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f7ff fa99 	bl	80004c8 <__aeabi_f2d>
 8000f96:	4603      	mov	r3, r0
 8000f98:	460c      	mov	r4, r1
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	f7ff fc13 	bl	80007cc <__aeabi_ddiv>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	f7ff fd93 	bl	8000ad8 <__aeabi_d2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	61bb      	str	r3, [r7, #24]
	uint8_t y = (uint8_t)(255*modulus);
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fdc <sawtooth_wave+0x8c>
 8000fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	75fb      	strb	r3, [r7, #23]

	return y;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3724      	adds	r7, #36	; 0x24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd8:	447a0000 	.word	0x447a0000
 8000fdc:	437f0000 	.word	0x437f0000

08000fe0 <sine_wave>:

// function for generating a sine wave from an inputed frequency in Hz, x is the independent variable, encapsulates the cmsis sine function
uint8_t sine_wave(float frequency, int x){
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fea:	60b8      	str	r0, [r7, #8]
	float period = 1000/frequency; //1000ms
 8000fec:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80010a8 <sine_wave+0xc8>
 8000ff0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff8:	edc7 7a07 	vstr	s15, [r7, #28]
	uint8_t y;
	float modulus = fmod(x,period)/period;
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f7ff fa51 	bl	80004a4 <__aeabi_i2d>
 8001002:	4604      	mov	r4, r0
 8001004:	460d      	mov	r5, r1
 8001006:	69f8      	ldr	r0, [r7, #28]
 8001008:	f7ff fa5e 	bl	80004c8 <__aeabi_f2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	ec43 2b11 	vmov	d1, r2, r3
 8001014:	ec45 4b10 	vmov	d0, r4, r5
 8001018:	f003 fdc2 	bl	8004ba0 <fmod>
 800101c:	ec56 5b10 	vmov	r5, r6, d0
 8001020:	69f8      	ldr	r0, [r7, #28]
 8001022:	f7ff fa51 	bl	80004c8 <__aeabi_f2d>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	461a      	mov	r2, r3
 800102c:	4623      	mov	r3, r4
 800102e:	4628      	mov	r0, r5
 8001030:	4631      	mov	r1, r6
 8001032:	f7ff fbcb 	bl	80007cc <__aeabi_ddiv>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f7ff fd4b 	bl	8000ad8 <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]
	float radians = 6.283185*modulus;
 8001046:	69b8      	ldr	r0, [r7, #24]
 8001048:	f7ff fa3e 	bl	80004c8 <__aeabi_f2d>
 800104c:	a314      	add	r3, pc, #80	; (adr r3, 80010a0 <sine_wave+0xc0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa91 	bl	8000578 <__aeabi_dmul>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	f7ff fd3b 	bl	8000ad8 <__aeabi_d2f>
 8001062:	4603      	mov	r3, r0
 8001064:	617b      	str	r3, [r7, #20]
	radians = (arm_sin_f32(radians)+1)*127.5;
 8001066:	ed97 0a05 	vldr	s0, [r7, #20]
 800106a:	f003 fd21 	bl	8004ab0 <arm_sin_f32>
 800106e:	eeb0 7a40 	vmov.f32	s14, s0
 8001072:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010ac <sine_wave+0xcc>
 800107e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001082:	edc7 7a05 	vstr	s15, [r7, #20]
	y = (uint8_t)radians;
 8001086:	edd7 7a05 	vldr	s15, [r7, #20]
 800108a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	74fb      	strb	r3, [r7, #19]

	return y;
 8001096:	7cfb      	ldrb	r3, [r7, #19]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3724      	adds	r7, #36	; 0x24
 800109c:	46bd      	mov	sp, r7
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a0:	3fa6defc 	.word	0x3fa6defc
 80010a4:	401921fb 	.word	0x401921fb
 80010a8:	447a0000 	.word	0x447a0000
 80010ac:	42ff0000 	.word	0x42ff0000

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fafc 	bl	80016b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f835 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 f983 	bl	80013c8 <MX_GPIO_Init>
  MX_DAC1_Init();
 80010c2:	f000 f8a7 	bl	8001214 <MX_DAC1_Init>
  MX_TIM2_Init();
 80010c6:	f000 f8e5 	bl	8001294 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010ca:	f000 f931 	bl	8001330 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  int x = 0; //iterator/bootleg timer variable to increase every tick
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  uint8_t triangle_current_value; //variable to hold triangle waves value to print to graph
  uint8_t sawtooth_current_value; //variable to hold sawtooth waves value to print to graph
  uint8_t sine_current_value; //variable to hold sine wave value to print to graph

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80010d2:	2100      	movs	r1, #0
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <main+0x70>)
 80010d6:	f000 fc8a 	bl	80019ee <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  triangle_current_value = triangle_wave(65, x);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001124 <main+0x74>
 80010e0:	f7ff feca 	bl	8000e78 <triangle_wave>
 80010e4:	4603      	mov	r3, r0
 80010e6:	70fb      	strb	r3, [r7, #3]
	  sawtooth_current_value = sawtooth_wave(65, x);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001124 <main+0x74>
 80010ee:	f7ff ff2f 	bl	8000f50 <sawtooth_wave>
 80010f2:	4603      	mov	r3, r0
 80010f4:	70bb      	strb	r3, [r7, #2]
	  sine_current_value = sine_wave(65,x);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001124 <main+0x74>
 80010fc:	f7ff ff70 	bl	8000fe0 <sine_wave>
 8001100:	4603      	mov	r3, r0
 8001102:	707b      	strb	r3, [r7, #1]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sine_current_value);
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2208      	movs	r2, #8
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <main+0x70>)
 800110c:	f000 fcc1 	bl	8001a92 <HAL_DAC_SetValue>
	  x++;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1); //1ms
 8001116:	2001      	movs	r0, #1
 8001118:	f000 fb40 	bl	800179c <HAL_Delay>
	  triangle_current_value = triangle_wave(65, x);
 800111c:	e7dd      	b.n	80010da <main+0x2a>
 800111e:	bf00      	nop
 8001120:	20000090 	.word	0x20000090
 8001124:	42820000 	.word	0x42820000

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0bc      	sub	sp, #240	; 0xf0
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001132:	2244      	movs	r2, #68	; 0x44
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fd2a 	bl	8004b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2294      	movs	r2, #148	; 0x94
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fd1c 	bl	8004b90 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001158:	2000      	movs	r0, #0
 800115a:	f000 ffb1 	bl	80020c0 <HAL_PWREx_ControlVoltageScaling>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001164:	f000 f954 	bl	8001410 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001168:	2310      	movs	r3, #16
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800116e:	2301      	movs	r3, #1
 8001170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001186:	2301      	movs	r3, #1
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001192:	233c      	movs	r3, #60	; 0x3c
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 f82a 	bl	8002208 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ba:	f000 f929 	bl	8001410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011e0:	2105      	movs	r1, #5
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fc36 	bl	8002a54 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ee:	f000 f90f 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011f6:	2300      	movs	r3, #0
 80011f8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fed9 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001208:	f000 f902 	bl	8001410 <Error_Handler>
  }
}
 800120c:	bf00      	nop
 800120e:	37f0      	adds	r7, #240	; 0xf0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2228      	movs	r2, #40	; 0x28
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fcb5 	bl	8004b90 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_DAC1_Init+0x78>)
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <MX_DAC1_Init+0x7c>)
 800122a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800122c:	4817      	ldr	r0, [pc, #92]	; (800128c <MX_DAC1_Init+0x78>)
 800122e:	f000 fbbc 	bl	80019aa <HAL_DAC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001238:	f000 f8ea 	bl	8001410 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_DAC1_Init+0x78>)
 800125c:	f000 fc3e 	bl	8001adc <HAL_DAC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8001266:	f000 f8d3 	bl	8001410 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2210      	movs	r2, #16
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_DAC1_Init+0x78>)
 8001276:	f000 fc31 	bl	8001adc <HAL_DAC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 f8c6 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000090 	.word	0x20000090
 8001290:	40007400 	.word	0x40007400

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_TIM2_Init+0x98>)
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_TIM2_Init+0x98>)
 80012bc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_TIM2_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_TIM2_Init+0x98>)
 80012ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_TIM2_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_TIM2_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_TIM2_Init+0x98>)
 80012de:	f002 fb71 	bl	80039c4 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012e8:	f000 f892 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_TIM2_Init+0x98>)
 80012fa:	f002 fbba 	bl	8003a72 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001304:	f000 f884 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_TIM2_Init+0x98>)
 8001316:	f002 fd99 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001320:	f000 f876 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000130 	.word	0x20000130

08001330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <MX_USART1_UART_Init+0x94>)
 8001338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001378:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800137a:	f002 fdef 	bl	8003f5c <HAL_UART_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001384:	f000 f844 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001388:	2100      	movs	r1, #0
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800138c:	f003 faab 	bl	80048e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001396:	f000 f83b 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 800139e:	f003 fae0 	bl	8004962 <HAL_UARTEx_SetRxFifoThreshold>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013a8:	f000 f832 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_USART1_UART_Init+0x90>)
 80013ae:	f003 fa61 	bl	8004874 <HAL_UARTEx_DisableFifoMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f000 f82a 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000a4 	.word	0x200000a4
 80013c4:	40013800 	.word	0x40013800

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_GPIO_Init+0x44>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <MX_GPIO_Init+0x44>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_GPIO_Init+0x44>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_GPIO_Init+0x44>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <MX_GPIO_Init+0x44>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_GPIO_Init+0x44>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001416:	e7fe      	b.n	8001416 <Error_Handler+0x6>

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x44>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_DAC_MspInit+0x74>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d124      	bne.n	80014cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 8001488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800148c:	6593      	str	r3, [r2, #88]	; 0x58
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_DAC_MspInit+0x78>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014b2:	2330      	movs	r3, #48	; 0x30
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	2303      	movs	r3, #3
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f000 fc48 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40007400 	.word	0x40007400
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d10b      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6593      	str	r3, [r2, #88]	; 0x58
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x80>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d129      	bne.n	800158e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_UART_MspInit+0x84>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_UART_MspInit+0x84>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_UART_MspInit+0x84>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_UART_MspInit+0x84>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_UART_MspInit+0x84>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_UART_MspInit+0x84>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800157c:	2307      	movs	r3, #7
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f000 fbe7 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40013800 	.word	0x40013800
 800159c:	40021000 	.word	0x40021000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f000 f8b6 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <SystemInit+0x64>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <SystemInit+0x64>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <SystemInit+0x68>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <SystemInit+0x68>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <SystemInit+0x68>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <SystemInit+0x68>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <SystemInit+0x68>)
 8001620:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001624:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001628:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SystemInit+0x68>)
 800162c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001630:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <SystemInit+0x68>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <SystemInit+0x68>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <SystemInit+0x68>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SystemInit+0x64>)
 8001646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164a:	609a      	str	r2, [r3, #8]
#endif
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	40021000 	.word	0x40021000

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffc6 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001668:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800166a:	e003      	b.n	8001674 <LoopCopyDataInit>

0800166c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800166e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001670:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001672:	3104      	adds	r1, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001678:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800167a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800167c:	d3f6      	bcc.n	800166c <CopyDataInit>
	ldr	r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001680:	e002      	b.n	8001688 <LoopFillZerobss>

08001682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001682:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001684:	f842 3b04 	str.w	r3, [r2], #4

08001688 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <LoopForever+0x16>)
	cmp	r2, r3
 800168a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800168c:	d3f9      	bcc.n	8001682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f003 fa5b 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff fd0d 	bl	80010b0 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001698:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800169c:	08005748 	.word	0x08005748
	ldr	r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016a4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80016a8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80016ac:	20000180 	.word	0x20000180

080016b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_IRQHandler>

080016b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f941 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f80e 	bl	80016e4 <HAL_InitTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	e001      	b.n	80016d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d4:	f7ff fea0 	bl	8001418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_InitTick+0x6c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_InitTick+0x70>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_InitTick+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f93f 	bl	8001992 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d809      	bhi.n	8001734 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f917 	bl	800195a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_InitTick+0x74>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e007      	b.n	8001744 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e004      	b.n	8001744 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e001      	b.n	8001744 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	2000017c 	.word	0x2000017c

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000017c 	.word	0x2000017c

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_Delay+0x40>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000008 	.word	0x20000008

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff47 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff5c 	bl	8001828 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffb0 	bl	8001900 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e014      	b.n	80019e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fd47 	bl	8001460 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	795b      	ldrb	r3, [r3, #5]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_DAC_Start+0x16>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e040      	b.n	8001a86 <HAL_DAC_Start+0x98>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d11d      	bne.n	8001a78 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	e014      	b.n	8001a78 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2102      	movs	r1, #2
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0202 	orr.w	r2, r2, #2
 8001a76:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e004      	b.n	8001ac6 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_DAC_ConfigChannel+0x1c>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e12a      	b.n	8001d4e <HAL_DAC_ConfigChannel+0x272>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2202      	movs	r2, #2
 8001b02:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d174      	bne.n	8001bf6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fe3a 	bl	8001784 <HAL_GetTick>
 8001b10:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d134      	bne.n	8001b82 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b18:	e011      	b.n	8001b3e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b1a:	f7ff fe33 	bl	8001784 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d90a      	bls.n	8001b3e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	f043 0208 	orr.w	r2, r3, #8
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2203      	movs	r2, #3
 8001b38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e107      	b.n	8001d4e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e6      	bne.n	8001b1a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fe25 	bl	800179c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	69d2      	ldr	r2, [r2, #28]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5c:	e01e      	b.n	8001b9c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b5e:	f7ff fe11 	bl	8001784 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d90a      	bls.n	8001b82 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f043 0208 	orr.w	r2, r3, #8
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0e5      	b.n	8001d4e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dbe8      	blt.n	8001b5e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fe05 	bl	800179c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	69d2      	ldr	r2, [r2, #28]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	ea02 0103 	and.w	r1, r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	21ff      	movs	r1, #255	; 0xff
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	ea02 0103 	and.w	r1, r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	409a      	lsls	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d11d      	bne.n	8001c3a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2207      	movs	r2, #7
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cde:	d104      	bne.n	8001cea <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	e018      	b.n	8001d1c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e00f      	b.n	8001d1c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001cfc:	f001 f860 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8001d00:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <HAL_DAC_ConfigChannel+0x27c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d904      	bls.n	8001d14 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e003      	b.n	8001d1c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d1a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	22c0      	movs	r2, #192	; 0xc0
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	04c4b400 	.word	0x04c4b400

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	e166      	b.n	800203a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8158 	beq.w	8002034 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00b      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d98:	2b11      	cmp	r3, #17
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 0201 	and.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0xea>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80b2 	beq.w	8002034 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_GPIO_Init+0x2fc>)
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_GPIO_Init+0x2fc>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6613      	str	r3, [r2, #96]	; 0x60
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_GPIO_Init+0x2fc>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee8:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_GPIO_Init+0x300>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f12:	d02b      	beq.n	8001f6c <HAL_GPIO_Init+0x210>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d025      	beq.n	8001f68 <HAL_GPIO_Init+0x20c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x308>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01f      	beq.n	8001f64 <HAL_GPIO_Init+0x208>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d019      	beq.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x200>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x314>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1fc>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x318>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1f8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x31c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1f4>
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	e00e      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f50:	2308      	movs	r3, #8
 8001f52:	e00c      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f54:	2306      	movs	r3, #6
 8001f56:	e00a      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f58:	2305      	movs	r3, #5
 8001f5a:	e008      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f60:	2303      	movs	r3, #3
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7e:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_GPIO_Init+0x300>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_GPIO_Init+0x320>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <HAL_GPIO_Init+0x320>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_GPIO_Init+0x320>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_GPIO_Init+0x320>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_GPIO_Init+0x320>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_GPIO_Init+0x320>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_GPIO_Init+0x320>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_GPIO_Init+0x320>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	f47f ae91 	bne.w	8001d6c <HAL_GPIO_Init+0x10>
  }
}
 800204a:	bf00      	nop
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	48001000 	.word	0x48001000
 8002070:	48001400 	.word	0x48001400
 8002074:	48001800 	.word	0x48001800
 8002078:	48001c00 	.word	0x48001c00
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002090:	d102      	bne.n	8002098 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002096:	e00b      	b.n	80020b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800209a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a6:	d102      	bne.n	80020ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ac:	e000      	b.n	80020b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80020ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40007000 	.word	0x40007000

080020c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d141      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020da:	d131      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f4:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020fc:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2232      	movs	r2, #50	; 0x32
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002112:	e002      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b01      	subs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d102      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f2      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213a:	d158      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e057      	b.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002146:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800214c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002150:	e04d      	b.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002158:	d141      	bne.n	80021de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800215a:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d131      	bne.n	80021cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2232      	movs	r2, #50	; 0x32
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219e:	e002      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b2:	d102      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f2      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c6:	d112      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e011      	b.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021dc:	e007      	b.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40007000 	.word	0x40007000
 8002200:	20000000 	.word	0x20000000
 8002204:	431bde83 	.word	0x431bde83

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f000 bc16 	b.w	8002a48 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221c:	4ba0      	ldr	r3, [pc, #640]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80e4 	beq.w	8002406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_RCC_OscConfig+0x4c>
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	f040 808b 	bne.w	8002362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	f040 8087 	bne.w	8002362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_OscConfig+0x64>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e3ed      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_RCC_OscConfig+0x7e>
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002284:	e005      	b.n	8002292 <HAL_RCC_OscConfig+0x8a>
 8002286:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002292:	4293      	cmp	r3, r2
 8002294:	d223      	bcs.n	80022de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fdc8 	bl	8002e30 <RCC_SetFlashLatencyFromMSIRange>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3ce      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022aa:	4b7d      	ldr	r3, [pc, #500]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7c      	ldr	r2, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4977      	ldr	r1, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	4972      	ldr	r1, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e025      	b.n	800232a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6f      	ldr	r2, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	496a      	ldr	r1, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fd88 	bl	8002e30 <RCC_SetFlashLatencyFromMSIRange>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e38e      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232a:	f000 fcbf 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800232e:	4601      	mov	r1, r0
 8002330:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <HAL_RCC_OscConfig+0x29c>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	fa21 f303 	lsr.w	r3, r1, r3
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x2a0>)
 8002348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x2a4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f9c8 	bl	80016e4 <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d052      	beq.n	8002404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	e372      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d032      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236a:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002376:	f7ff fa05 	bl	8001784 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7ff fa01 	bl	8001784 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e35b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239c:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	493a      	ldr	r1, [pc, #232]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
 80023ce:	e01a      	b.n	8002406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f9d2 	bl	8001784 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e4:	f7ff f9ce 	bl	8001784 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e328      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1dc>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d073      	beq.n	80024fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x21c>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d10e      	bne.n	800243c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d063      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d15f      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e305      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x24c>
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0x288>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x270>
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x288>
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff f974 	bl	8001784 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e010      	b.n	80024c2 <HAL_RCC_OscConfig+0x2ba>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08004eb8 	.word	0x08004eb8
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff f968 	bl	8001784 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e2c2      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x2a8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f958 	bl	8001784 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f954 	bl	8001784 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2ae      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	4ba5      	ldr	r3, [pc, #660]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2d0>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d060      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x310>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d119      	bne.n	8002546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d116      	bne.n	8002546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	4b99      	ldr	r3, [pc, #612]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x328>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e28b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	4990      	ldr	r1, [pc, #576]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	e040      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d023      	beq.n	8002596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8b      	ldr	r2, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7ff f913 	bl	8001784 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f90f 	bl	8001784 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e269      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	497c      	ldr	r1, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e018      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800259c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff f8ef 	bl	8001784 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025aa:	f7ff f8eb 	bl	8001784 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e245      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03c      	beq.n	800264e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01c      	beq.n	8002616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e2:	4a67      	ldr	r2, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f8ca 	bl	8001784 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff f8c6 	bl	8001784 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e220      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <HAL_RCC_OscConfig+0x3ec>
 8002614:	e01b      	b.n	800264e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7ff f8ad 	bl	8001784 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7ff f8a9 	bl	8001784 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e203      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ef      	bne.n	800262e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a6 	beq.w	80027a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002660:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4a43      	ldr	r2, [pc, #268]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	; 0x58
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002684:	2301      	movs	r3, #1
 8002686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d118      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a0:	f7ff f870 	bl	8001784 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7ff f86c 	bl	8001784 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1c6      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d8>
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026de:	e024      	b.n	800272a <HAL_RCC_OscConfig+0x522>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d110      	bne.n	800270a <HAL_RCC_OscConfig+0x502>
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002708:	e00f      	b.n	800272a <HAL_RCC_OscConfig+0x522>
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002722:	f023 0304 	bic.w	r3, r3, #4
 8002726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7ff f827 	bl	8001784 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7ff f823 	bl	8001784 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e17b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ed      	beq.n	800273a <HAL_RCC_OscConfig+0x532>
 800275e:	e01a      	b.n	8002796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff f810 	bl	8001784 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002766:	e00f      	b.n	8002788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7ff f80c 	bl	8001784 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d906      	bls.n	8002788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e164      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002788:	4ba8      	ldr	r3, [pc, #672]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e8      	bne.n	8002768 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002796:	7ffb      	ldrb	r3, [r7, #31]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4ba3      	ldr	r3, [pc, #652]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4aa2      	ldr	r2, [pc, #648]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03c      	beq.n	800282e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027bc:	4b9b      	ldr	r3, [pc, #620]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c2:	4a9a      	ldr	r2, [pc, #616]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe ffda 	bl	8001784 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d4:	f7fe ffd6 	bl	8001784 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e130      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e6:	4b91      	ldr	r3, [pc, #580]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ef      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5cc>
 80027f4:	e01b      	b.n	800282e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027fc:	4a8b      	ldr	r2, [pc, #556]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe ffbd 	bl	8001784 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280e:	f7fe ffb9 	bl	8001784 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e113      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002820:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ef      	bne.n	800280e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8107 	beq.w	8002a46 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	f040 80cb 	bne.w	80029d8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002842:	4b7a      	ldr	r3, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	429a      	cmp	r2, r3
 8002854:	d12c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	3b01      	subs	r3, #1
 8002862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d123      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d11b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d113      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d109      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d06d      	beq.n	800298c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d068      	beq.n	8002988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0ba      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028de:	f7fe ff51 	bl	8001784 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe ff4d 	bl	8001784 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0a7      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x828>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002914:	3a01      	subs	r2, #1
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800291e:	0212      	lsls	r2, r2, #8
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002926:	0852      	lsrs	r2, r2, #1
 8002928:	3a01      	subs	r2, #1
 800292a:	0552      	lsls	r2, r2, #21
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800293e:	06d2      	lsls	r2, r2, #27
 8002940:	430a      	orrs	r2, r1
 8002942:	493a      	ldr	r1, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a37      	ldr	r2, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002960:	f7fe ff10 	bl	8001784 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe ff0c 	bl	8001784 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e066      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002986:	e05e      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e05d      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d156      	bne.n	8002a46 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b0:	f7fe fee8 	bl	8001784 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fee4 	bl	8001784 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e03e      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x7b0>
 80029d6:	e036      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d031      	beq.n	8002a42 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029fc:	f023 0303 	bic.w	r3, r3, #3
 8002a00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002a08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe feb7 	bl	8001784 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a18:	e00c      	b.n	8002a34 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe feb3 	bl	8001784 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d905      	bls.n	8002a34 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e00d      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x848>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ec      	bne.n	8002a1a <HAL_RCC_OscConfig+0x812>
 8002a40:	e001      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e10f      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b89      	ldr	r3, [pc, #548]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	4984      	ldr	r1, [pc, #528]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0f7      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8089 	beq.w	8002bbc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d133      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0e4      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ac2:	f000 fa0f 	bl	8002ee4 <RCC_GetSysClockFreqFromPLLSource>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <HAL_RCC_ClockConfig+0x248>)
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d955      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e044      	b.n	8002b7a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d03e      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x126>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d13a      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e02f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0ac      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0a0      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e098      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b5a:	f000 f8a7 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_RCC_ClockConfig+0x248>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d909      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4944      	ldr	r1, [pc, #272]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fdfa 	bl	8001784 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe fdf6 	bl	8001784 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e070      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4930      	ldr	r1, [pc, #192]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
 8002bda:	e008      	b.n	8002bee <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bec:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d210      	bcs.n	8002c1e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 020f 	bic.w	r2, r3, #15
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e036      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4918      	ldr	r1, [pc, #96]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c5c:	f000 f826 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c60:	4601      	mov	r1, r0
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_RCC_ClockConfig+0x24c>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa21 f303 	lsr.w	r3, r1, r3
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x250>)
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x254>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fd2f 	bl	80016e4 <HAL_InitTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40022000 	.word	0x40022000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	04c4b400 	.word	0x04c4b400
 8002ca0:	08004eb8 	.word	0x08004eb8
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d121      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d11e      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e004      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d133      	bne.n	8002da2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0xaa>
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d52:	617b      	str	r3, [r7, #20]
      break;
 8002d54:	e005      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d58:	617b      	str	r3, [r7, #20]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	617b      	str	r3, [r7, #20]
      break;
 8002d60:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	fb02 f203 	mul.w	r2, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0e5b      	lsrs	r3, r3, #25
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002da2:	69bb      	ldr	r3, [r7, #24]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3724      	adds	r7, #36	; 0x24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08004ed0 	.word	0x08004ed0
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08004ec8 	.word	0x08004ec8

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e08:	f7ff ffda 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0adb      	lsrs	r3, r3, #11
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08004ec8 	.word	0x08004ec8

08002e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e48:	f7ff f91a 	bl	8002080 <HAL_PWREx_GetVoltageRange>
 8002e4c:	6178      	str	r0, [r7, #20]
 8002e4e:	e014      	b.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e68:	f7ff f90a 	bl	8002080 <HAL_PWREx_GetVoltageRange>
 8002e6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e80:	d10b      	bne.n	8002e9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d913      	bls.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e8c:	d902      	bls.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e8e:	2302      	movs	r3, #2
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e00d      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e94:	2301      	movs	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	e00a      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e9e:	d902      	bls.n	8002ea6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e004      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b70      	cmp	r3, #112	; 0x70
 8002eaa:	d101      	bne.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eac:	2301      	movs	r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 020f 	bic.w	r2, r3, #15
 8002eb8:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40022000 	.word	0x40022000

08002ee4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d118      	bne.n	8002f2c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e005      	b.n	8002f22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d002      	beq.n	8002f42 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002f40:	e005      	b.n	8002f4e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f44:	613b      	str	r3, [r7, #16]
    break;
 8002f46:	e005      	b.n	8002f54 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f4a:	613b      	str	r3, [r7, #16]
    break;
 8002f4c:	e002      	b.n	8002f54 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	613b      	str	r3, [r7, #16]
    break;
 8002f52:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	fb02 f203 	mul.w	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0e5b      	lsrs	r3, r3, #25
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	3301      	adds	r3, #1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f94:	683b      	ldr	r3, [r7, #0]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08004ed0 	.word	0x08004ed0
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03d      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d804      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d015      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fe4:	e01d      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fe6:	2b60      	cmp	r3, #96	; 0x60
 8002fe8:	d01e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fee:	e018      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff0:	4b86      	ldr	r3, [pc, #536]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a85      	ldr	r2, [pc, #532]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffc:	e015      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fafd 	bl	8003604 <RCCEx_PLLSAI1_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300e:	e00c      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3320      	adds	r3, #32
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fbe4 	bl	80037e4 <RCCEx_PLLSAI2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	74fb      	strb	r3, [r7, #19]
      break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003030:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003036:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	4973      	ldr	r1, [pc, #460]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003046:	e001      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d042      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d00f      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003066:	d805      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d011      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003070:	d017      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003072:	e01f      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003078:	d01f      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d01c      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003080:	e018      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003082:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800308e:	e015      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fab4 	bl	8003604 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3320      	adds	r3, #32
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fb9b 	bl	80037e4 <RCCEx_PLLSAI2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	74fb      	strb	r3, [r7, #19]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030c2:	4b52      	ldr	r3, [pc, #328]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	494e      	ldr	r1, [pc, #312]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 809f 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030f0:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a40      	ldr	r2, [pc, #256]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3a      	ldr	r2, [pc, #232]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe fb29 	bl	8001784 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003134:	e009      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fb25 	bl	8001784 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	74fb      	strb	r3, [r7, #19]
        break;
 8003148:	e005      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d15b      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01f      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d019      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fae4 	bl	8001784 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	e00b      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fae0 	bl	8001784 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d902      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	74fb      	strb	r3, [r7, #19]
            break;
 80031d6:	e006      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ec      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003204:	e008      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	74bb      	strb	r3, [r7, #18]
 800320a:	e005      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003218:	7c7b      	ldrb	r3, [r7, #17]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4ba0      	ldr	r3, [pc, #640]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	4a9f      	ldr	r2, [pc, #636]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003236:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	4996      	ldr	r1, [pc, #600]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003258:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 020c 	bic.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	498e      	ldr	r1, [pc, #568]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	4985      	ldr	r1, [pc, #532]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	497d      	ldr	r1, [pc, #500]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	4974      	ldr	r1, [pc, #464]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	496c      	ldr	r1, [pc, #432]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003310:	4963      	ldr	r1, [pc, #396]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	495b      	ldr	r1, [pc, #364]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003346:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	4952      	ldr	r1, [pc, #328]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	494a      	ldr	r1, [pc, #296]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	4941      	ldr	r1, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	4930      	ldr	r1, [pc, #192]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ec:	d106      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ee:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f8:	60d3      	str	r3, [r2, #12]
 80033fa:	e011      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f8f9 	bl	8003604 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003434:	d108      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003442:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003446:	e012      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003454:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003466:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003476:	d106      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003482:	60d3      	str	r3, [r2, #12]
 8003484:	e020      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d109      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	60d3      	str	r3, [r2, #12]
 800349c:	e014      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f8a5 	bl	8003604 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d028      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d4:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e2:	4947      	ldr	r1, [pc, #284]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f2:	d106      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a41      	ldr	r2, [pc, #260]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fe:	60d3      	str	r3, [r2, #12]
 8003500:	e011      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800350a:	d10c      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f876 	bl	8003604 <RCCEx_PLLSAI1_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01e      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003532:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	492f      	ldr	r1, [pc, #188]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f851 	bl	8003604 <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800357c:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800357e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003582:	f023 0204 	bic.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358c:	491c      	ldr	r1, [pc, #112]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a6:	f023 0218 	bic.w	r2, r3, #24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	4913      	ldr	r1, [pc, #76]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d017      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d4:	490a      	ldr	r1, [pc, #40]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035e6:	d105      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003612:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800361e:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d103      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
       ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13f      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e03c      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d00c      	beq.n	800365e <RCCEx_PLLSAI1_Config+0x5a>
 8003644:	2b03      	cmp	r3, #3
 8003646:	d013      	beq.n	8003670 <RCCEx_PLLSAI1_Config+0x6c>
 8003648:	2b01      	cmp	r3, #1
 800364a:	d120      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800364c:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11d      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365c:	e01a      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e013      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10f      	bne.n	800369c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800367c:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800368c:	e006      	b.n	800369c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      break;
 8003692:	e004      	b.n	800369e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003694:	bf00      	nop
 8003696:	e002      	b.n	800369e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003698:	bf00      	nop
 800369a:	e000      	b.n	800369e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800369c:	bf00      	nop
    }

    if(status == HAL_OK)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4948      	ldr	r1, [pc, #288]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 8086 	bne.w	80037ca <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fe f85b 	bl	8001784 <HAL_GetTick>
 80036ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d0:	e009      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d2:	f7fe f857 	bl	8001784 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d902      	bls.n	80036e6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	73fb      	strb	r3, [r7, #15]
        break;
 80036e4:	e005      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ef      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d168      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d113      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	06d2      	lsls	r2, r2, #27
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	492d      	ldr	r1, [pc, #180]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
 8003724:	e02d      	b.n	8003782 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d115      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003732:	4013      	ands	r3, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	0211      	lsls	r1, r2, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6912      	ldr	r2, [r2, #16]
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0552      	lsls	r2, r2, #21
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6852      	ldr	r2, [r2, #4]
 800374a:	3a01      	subs	r2, #1
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	430a      	orrs	r2, r1
 8003750:	4920      	ldr	r1, [pc, #128]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	610b      	str	r3, [r1, #16]
 8003756:	e014      	b.n	8003782 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6952      	ldr	r2, [r2, #20]
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0652      	lsls	r2, r2, #25
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6852      	ldr	r2, [r2, #4]
 8003776:	3a01      	subs	r2, #1
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	430a      	orrs	r2, r1
 800377c:	4915      	ldr	r1, [pc, #84]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800378c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fd fff9 	bl	8001784 <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003794:	e009      	b.n	80037aa <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003796:	f7fd fff5 	bl	8001784 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	73fb      	strb	r3, [r7, #15]
          break;
 80037a8:	e005      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ef      	beq.n	8003796 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	07ff800f 	.word	0x07ff800f
 80037dc:	ff9f800f 	.word	0xff9f800f
 80037e0:	f9ff800f 	.word	0xf9ff800f

080037e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f2:	4b70      	ldr	r3, [pc, #448]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037fe:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d103      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
       ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d13f      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e03c      	b.n	8003896 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d00c      	beq.n	800383e <RCCEx_PLLSAI2_Config+0x5a>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d013      	beq.n	8003850 <RCCEx_PLLSAI2_Config+0x6c>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d120      	bne.n	800386e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e01a      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384e:	e013      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003850:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10f      	bne.n	800387c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d109      	bne.n	800387c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386c:	e006      	b.n	800387c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
      break;
 8003872:	e004      	b.n	800387e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800387c:	bf00      	nop
    }

    if(status == HAL_OK)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f023 0203 	bic.w	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4948      	ldr	r1, [pc, #288]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 8086 	bne.w	80039aa <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a44      	ldr	r2, [pc, #272]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038aa:	f7fd ff6b 	bl	8001784 <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b0:	e009      	b.n	80038c6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b2:	f7fd ff67 	bl	8001784 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d902      	bls.n	80038c6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	73fb      	strb	r3, [r7, #15]
        break;
 80038c4:	e005      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ef      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d168      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d113      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038de:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <RCCEx_PLLSAI2_Config+0x1d4>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	0211      	lsls	r1, r2, #8
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68d2      	ldr	r2, [r2, #12]
 80038f0:	06d2      	lsls	r2, r2, #27
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6852      	ldr	r2, [r2, #4]
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	430a      	orrs	r2, r1
 80038fe:	492d      	ldr	r1, [pc, #180]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	614b      	str	r3, [r1, #20]
 8003904:	e02d      	b.n	8003962 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d115      	bne.n	8003938 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	0211      	lsls	r1, r2, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6912      	ldr	r2, [r2, #16]
 800391e:	0852      	lsrs	r2, r2, #1
 8003920:	3a01      	subs	r2, #1
 8003922:	0552      	lsls	r2, r2, #21
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6852      	ldr	r2, [r2, #4]
 800392a:	3a01      	subs	r2, #1
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	430a      	orrs	r2, r1
 8003930:	4920      	ldr	r1, [pc, #128]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	614b      	str	r3, [r1, #20]
 8003936:	e014      	b.n	8003962 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800393e:	4013      	ands	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6892      	ldr	r2, [r2, #8]
 8003944:	0211      	lsls	r1, r2, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6952      	ldr	r2, [r2, #20]
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	0652      	lsls	r2, r2, #25
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	3a01      	subs	r2, #1
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	430a      	orrs	r2, r1
 800395c:	4915      	ldr	r1, [pc, #84]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fd ff09 	bl	8001784 <HAL_GetTick>
 8003972:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003974:	e009      	b.n	800398a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003976:	f7fd ff05 	bl	8001784 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d902      	bls.n	800398a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	73fb      	strb	r3, [r7, #15]
          break;
 8003988:	e005      	b.n	8003996 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	07ff800f 	.word	0x07ff800f
 80039bc:	ff9f800f 	.word	0xff9f800f
 80039c0:	f9ff800f 	.word	0xf9ff800f

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e049      	b.n	8003a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fd76 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 f8ee 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_ConfigClockSource+0x18>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0a8      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x16a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d067      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x124>
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d80b      	bhi.n	8003ae2 <HAL_TIM_ConfigClockSource+0x70>
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d073      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x144>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d802      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x66>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06f      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ad6:	e078      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d06c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x144>
 8003adc:	2b30      	cmp	r3, #48	; 0x30
 8003ade:	d06a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003ae0:	e073      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ae2:	2b70      	cmp	r3, #112	; 0x70
 8003ae4:	d00d      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x90>
 8003ae6:	2b70      	cmp	r3, #112	; 0x70
 8003ae8:	d804      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x82>
 8003aea:	2b50      	cmp	r3, #80	; 0x50
 8003aec:	d033      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0xe4>
 8003aee:	2b60      	cmp	r3, #96	; 0x60
 8003af0:	d041      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003af2:	e06a      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d066      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0x156>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d017      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b00:	e063      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f000 f97b 	bl	8003e0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
      break;
 8003b2e:	e04c      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f000 f964 	bl	8003e0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	609a      	str	r2, [r3, #8]
      break;
 8003b54:	e039      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 f8d8 	bl	8003d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2150      	movs	r1, #80	; 0x50
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f931 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e029      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 f8f7 	bl	8003d76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2160      	movs	r1, #96	; 0x60
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f921 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e019      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 f8b8 	bl	8003d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f911 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e009      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 f908 	bl	8003dd6 <TIM_ITRx_SetConfig>
        break;
 8003bc6:	e000      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a40      	ldr	r2, [pc, #256]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d00f      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3d      	ldr	r2, [pc, #244]	; (8003cfc <TIM_Base_SetConfig+0x118>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <TIM_Base_SetConfig+0x11c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <TIM_Base_SetConfig+0x120>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3a      	ldr	r2, [pc, #232]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d108      	bne.n	8003c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <TIM_Base_SetConfig+0x118>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <TIM_Base_SetConfig+0x11c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <TIM_Base_SetConfig+0x120>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <TIM_Base_SetConfig+0x128>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <TIM_Base_SetConfig+0x130>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00f      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <TIM_Base_SetConfig+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <TIM_Base_SetConfig+0x128>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d007      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <TIM_Base_SetConfig+0x130>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 030a 	bic.w	r3, r3, #10
 8003d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b087      	sub	sp, #28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0210 	bic.w	r2, r3, #16
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f043 0307 	orr.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e068      	b.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10c      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40014000 	.word	0x40014000

08003f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fd fac9 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f82c 	bl	8003ffc <UART_SetConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e022      	b.n	8003ff4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 faf2 	bl	80045a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fb79 	bl	80046e4 <UART_CheckIdleState>
 8003ff2:	4603      	mov	r3, r0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004000:	b088      	sub	sp, #32
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	4313      	orrs	r3, r2
 800402a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4bb1      	ldr	r3, [pc, #708]	; (80042f8 <UART_SetConfig+0x2fc>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	430b      	orrs	r3, r1
 800403e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4aa6      	ldr	r2, [pc, #664]	; (80042fc <UART_SetConfig+0x300>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800407a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	69f9      	ldr	r1, [r7, #28]
 8004084:	430b      	orrs	r3, r1
 8004086:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f023 010f 	bic.w	r1, r3, #15
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a97      	ldr	r2, [pc, #604]	; (8004300 <UART_SetConfig+0x304>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d121      	bne.n	80040ec <UART_SetConfig+0xf0>
 80040a8:	4b96      	ldr	r3, [pc, #600]	; (8004304 <UART_SetConfig+0x308>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d816      	bhi.n	80040e4 <UART_SetConfig+0xe8>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <UART_SetConfig+0xc0>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040d9 	.word	0x080040d9
 80040c4:	080040d3 	.word	0x080040d3
 80040c8:	080040df 	.word	0x080040df
 80040cc:	2301      	movs	r3, #1
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e0e8      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80040d2:	2302      	movs	r3, #2
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e0e5      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80040d8:	2304      	movs	r3, #4
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e0e2      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80040de:	2308      	movs	r3, #8
 80040e0:	76fb      	strb	r3, [r7, #27]
 80040e2:	e0df      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80040e4:	2310      	movs	r3, #16
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	bf00      	nop
 80040ea:	e0db      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a85      	ldr	r2, [pc, #532]	; (8004308 <UART_SetConfig+0x30c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d134      	bne.n	8004160 <UART_SetConfig+0x164>
 80040f6:	4b83      	ldr	r3, [pc, #524]	; (8004304 <UART_SetConfig+0x308>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d829      	bhi.n	8004158 <UART_SetConfig+0x15c>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x110>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004141 	.word	0x08004141
 8004110:	08004159 	.word	0x08004159
 8004114:	08004159 	.word	0x08004159
 8004118:	08004159 	.word	0x08004159
 800411c:	0800414d 	.word	0x0800414d
 8004120:	08004159 	.word	0x08004159
 8004124:	08004159 	.word	0x08004159
 8004128:	08004159 	.word	0x08004159
 800412c:	08004147 	.word	0x08004147
 8004130:	08004159 	.word	0x08004159
 8004134:	08004159 	.word	0x08004159
 8004138:	08004159 	.word	0x08004159
 800413c:	08004153 	.word	0x08004153
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e0ae      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004146:	2302      	movs	r3, #2
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e0ab      	b.n	80042a4 <UART_SetConfig+0x2a8>
 800414c:	2304      	movs	r3, #4
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e0a8      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004152:	2308      	movs	r3, #8
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e0a5      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	bf00      	nop
 800415e:	e0a1      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a69      	ldr	r2, [pc, #420]	; (800430c <UART_SetConfig+0x310>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d120      	bne.n	80041ac <UART_SetConfig+0x1b0>
 800416a:	4b66      	ldr	r3, [pc, #408]	; (8004304 <UART_SetConfig+0x308>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004174:	2b10      	cmp	r3, #16
 8004176:	d00f      	beq.n	8004198 <UART_SetConfig+0x19c>
 8004178:	2b10      	cmp	r3, #16
 800417a:	d802      	bhi.n	8004182 <UART_SetConfig+0x186>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <UART_SetConfig+0x190>
 8004180:	e010      	b.n	80041a4 <UART_SetConfig+0x1a8>
 8004182:	2b20      	cmp	r3, #32
 8004184:	d005      	beq.n	8004192 <UART_SetConfig+0x196>
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d009      	beq.n	800419e <UART_SetConfig+0x1a2>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x1a8>
 800418c:	2300      	movs	r3, #0
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e088      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004192:	2302      	movs	r3, #2
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e085      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004198:	2304      	movs	r3, #4
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e082      	b.n	80042a4 <UART_SetConfig+0x2a8>
 800419e:	2308      	movs	r3, #8
 80041a0:	76fb      	strb	r3, [r7, #27]
 80041a2:	e07f      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041a4:	2310      	movs	r3, #16
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	bf00      	nop
 80041aa:	e07b      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a57      	ldr	r2, [pc, #348]	; (8004310 <UART_SetConfig+0x314>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d120      	bne.n	80041f8 <UART_SetConfig+0x1fc>
 80041b6:	4b53      	ldr	r3, [pc, #332]	; (8004304 <UART_SetConfig+0x308>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d00f      	beq.n	80041e4 <UART_SetConfig+0x1e8>
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d802      	bhi.n	80041ce <UART_SetConfig+0x1d2>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0x1dc>
 80041cc:	e010      	b.n	80041f0 <UART_SetConfig+0x1f4>
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d005      	beq.n	80041de <UART_SetConfig+0x1e2>
 80041d2:	2bc0      	cmp	r3, #192	; 0xc0
 80041d4:	d009      	beq.n	80041ea <UART_SetConfig+0x1ee>
 80041d6:	e00b      	b.n	80041f0 <UART_SetConfig+0x1f4>
 80041d8:	2300      	movs	r3, #0
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e062      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041de:	2302      	movs	r3, #2
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e05f      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041e4:	2304      	movs	r3, #4
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e05c      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041ea:	2308      	movs	r3, #8
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e059      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041f0:	2310      	movs	r3, #16
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	bf00      	nop
 80041f6:	e055      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a45      	ldr	r2, [pc, #276]	; (8004314 <UART_SetConfig+0x318>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d124      	bne.n	800424c <UART_SetConfig+0x250>
 8004202:	4b40      	ldr	r3, [pc, #256]	; (8004304 <UART_SetConfig+0x308>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004210:	d012      	beq.n	8004238 <UART_SetConfig+0x23c>
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d802      	bhi.n	800421e <UART_SetConfig+0x222>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_SetConfig+0x230>
 800421c:	e012      	b.n	8004244 <UART_SetConfig+0x248>
 800421e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004222:	d006      	beq.n	8004232 <UART_SetConfig+0x236>
 8004224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004228:	d009      	beq.n	800423e <UART_SetConfig+0x242>
 800422a:	e00b      	b.n	8004244 <UART_SetConfig+0x248>
 800422c:	2300      	movs	r3, #0
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e038      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004232:	2302      	movs	r3, #2
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e035      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004238:	2304      	movs	r3, #4
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e032      	b.n	80042a4 <UART_SetConfig+0x2a8>
 800423e:	2308      	movs	r3, #8
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e02f      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004244:	2310      	movs	r3, #16
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	bf00      	nop
 800424a:	e02b      	b.n	80042a4 <UART_SetConfig+0x2a8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <UART_SetConfig+0x300>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d124      	bne.n	80042a0 <UART_SetConfig+0x2a4>
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <UART_SetConfig+0x308>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d012      	beq.n	800428c <UART_SetConfig+0x290>
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d802      	bhi.n	8004272 <UART_SetConfig+0x276>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <UART_SetConfig+0x284>
 8004270:	e012      	b.n	8004298 <UART_SetConfig+0x29c>
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x28a>
 8004278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427c:	d009      	beq.n	8004292 <UART_SetConfig+0x296>
 800427e:	e00b      	b.n	8004298 <UART_SetConfig+0x29c>
 8004280:	2300      	movs	r3, #0
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e00e      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004286:	2302      	movs	r3, #2
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e00b      	b.n	80042a4 <UART_SetConfig+0x2a8>
 800428c:	2304      	movs	r3, #4
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e008      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004292:	2308      	movs	r3, #8
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e005      	b.n	80042a4 <UART_SetConfig+0x2a8>
 8004298:	2310      	movs	r3, #16
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	bf00      	nop
 800429e:	e001      	b.n	80042a4 <UART_SetConfig+0x2a8>
 80042a0:	2310      	movs	r3, #16
 80042a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <UART_SetConfig+0x300>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f040 80a1 	bne.w	80043f2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042b0:	7efb      	ldrb	r3, [r7, #27]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d836      	bhi.n	8004324 <UART_SetConfig+0x328>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x2c0>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	08004325 	.word	0x08004325
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	08004325 	.word	0x08004325
 80042cc:	080042ef 	.word	0x080042ef
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004325 	.word	0x08004325
 80042d8:	08004325 	.word	0x08004325
 80042dc:	0800431d 	.word	0x0800431d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fd7a 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80042e4:	6178      	str	r0, [r7, #20]
        break;
 80042e6:	e022      	b.n	800432e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <UART_SetConfig+0x31c>)
 80042ea:	617b      	str	r3, [r7, #20]
        break;
 80042ec:	e01f      	b.n	800432e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fcdd 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80042f2:	6178      	str	r0, [r7, #20]
        break;
 80042f4:	e01b      	b.n	800432e <UART_SetConfig+0x332>
 80042f6:	bf00      	nop
 80042f8:	cfff69f3 	.word	0xcfff69f3
 80042fc:	40008000 	.word	0x40008000
 8004300:	40013800 	.word	0x40013800
 8004304:	40021000 	.word	0x40021000
 8004308:	40004400 	.word	0x40004400
 800430c:	40004800 	.word	0x40004800
 8004310:	40004c00 	.word	0x40004c00
 8004314:	40005000 	.word	0x40005000
 8004318:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004320:	617b      	str	r3, [r7, #20]
        break;
 8004322:	e004      	b.n	800432e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	76bb      	strb	r3, [r7, #26]
        break;
 800432c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 811d 	beq.w	8004570 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	4a97      	ldr	r2, [pc, #604]	; (8004598 <UART_SetConfig+0x59c>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	461a      	mov	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fbb3 f3f2 	udiv	r3, r3, r2
 8004348:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d305      	bcc.n	8004366 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d902      	bls.n	800436c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	76bb      	strb	r3, [r7, #26]
 800436a:	e101      	b.n	8004570 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4618      	mov	r0, r3
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	4a87      	ldr	r2, [pc, #540]	; (8004598 <UART_SetConfig+0x59c>)
 800437a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f04f 0400 	mov.w	r4, #0
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	f7fc fbf6 	bl	8000b78 <__aeabi_uldivmod>
 800438c:	4603      	mov	r3, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4619      	mov	r1, r3
 8004392:	4622      	mov	r2, r4
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	0214      	lsls	r4, r2, #8
 800439e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043a2:	020b      	lsls	r3, r1, #8
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	0852      	lsrs	r2, r2, #1
 80043aa:	4611      	mov	r1, r2
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	eb13 0b01 	adds.w	fp, r3, r1
 80043b4:	eb44 0c02 	adc.w	ip, r4, r2
 80043b8:	4658      	mov	r0, fp
 80043ba:	4661      	mov	r1, ip
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	461a      	mov	r2, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	f7fc fbd6 	bl	8000b78 <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d8:	d308      	bcc.n	80043ec <UART_SetConfig+0x3f0>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e0:	d204      	bcs.n	80043ec <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	e0c1      	b.n	8004570 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	76bb      	strb	r3, [r7, #26]
 80043f0:	e0be      	b.n	8004570 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d164      	bne.n	80044c6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80043fc:	7efb      	ldrb	r3, [r7, #27]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d827      	bhi.n	8004452 <UART_SetConfig+0x456>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x40c>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004453 	.word	0x08004453
 8004418:	08004443 	.word	0x08004443
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7fe fcd4 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004430:	6178      	str	r0, [r7, #20]
        break;
 8004432:	e013      	b.n	800445c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe fce6 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8004438:	6178      	str	r0, [r7, #20]
        break;
 800443a:	e00f      	b.n	800445c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b57      	ldr	r3, [pc, #348]	; (800459c <UART_SetConfig+0x5a0>)
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	e00c      	b.n	800445c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7fe fc33 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004446:	6178      	str	r0, [r7, #20]
        break;
 8004448:	e008      	b.n	800445c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e004      	b.n	800445c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	76bb      	strb	r3, [r7, #26]
        break;
 800445a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8086 	beq.w	8004570 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <UART_SetConfig+0x59c>)
 800446a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800446e:	461a      	mov	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fbb3 f3f2 	udiv	r3, r3, r2
 8004476:	005a      	lsls	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	b29b      	uxth	r3, r3
 800448a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	d916      	bls.n	80044c0 <UART_SetConfig+0x4c4>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d212      	bcs.n	80044c0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f023 030f 	bic.w	r3, r3, #15
 80044a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	89fa      	ldrh	r2, [r7, #14]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e057      	b.n	8004570 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	76bb      	strb	r3, [r7, #26]
 80044c4:	e054      	b.n	8004570 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044c6:	7efb      	ldrb	r3, [r7, #27]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d828      	bhi.n	800451e <UART_SetConfig+0x522>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x4d8>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fe fc6e 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80044fc:	6178      	str	r0, [r7, #20]
        break;
 80044fe:	e013      	b.n	8004528 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe fc80 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8004504:	6178      	str	r0, [r7, #20]
        break;
 8004506:	e00f      	b.n	8004528 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <UART_SetConfig+0x5a0>)
 800450a:	617b      	str	r3, [r7, #20]
        break;
 800450c:	e00c      	b.n	8004528 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fe fbcd 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004512:	6178      	str	r0, [r7, #20]
        break;
 8004514:	e008      	b.n	8004528 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	617b      	str	r3, [r7, #20]
        break;
 800451c:	e004      	b.n	8004528 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	76bb      	strb	r3, [r7, #26]
        break;
 8004526:	bf00      	nop
    }

    if (pclk != 0U)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	4a19      	ldr	r2, [pc, #100]	; (8004598 <UART_SetConfig+0x59c>)
 8004534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004538:	461a      	mov	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d908      	bls.n	800456c <UART_SetConfig+0x570>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004560:	d204      	bcs.n	800456c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e001      	b.n	8004570 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800458c:	7ebb      	ldrb	r3, [r7, #26]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004598:	08004f00 	.word	0x08004f00
 800459c:	00f42400 	.word	0x00f42400

080045a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d10a      	bne.n	80046b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046f4:	f7fd f846 	bl	8001784 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b08      	cmp	r3, #8
 8004706:	d10e      	bne.n	8004726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f82c 	bl	8004774 <UART_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e022      	b.n	800476c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f816 	bl	8004774 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e00c      	b.n	800476c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004784:	e062      	b.n	800484c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d05e      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478e:	f7fc fff9 	bl	8001784 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11d      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047b2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e045      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d02e      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	d126      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004806:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004816:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e00f      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	429a      	cmp	r2, r3
 8004868:	d08d      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UARTEx_DisableFifoMode+0x16>
 8004886:	2302      	movs	r3, #2
 8004888:	e027      	b.n	80048da <HAL_UARTEx_DisableFifoMode+0x66>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2224      	movs	r2, #36	; 0x24
 8004896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e02d      	b.n	800495a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2224      	movs	r2, #36	; 0x24
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f850 	bl	80049e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004976:	2302      	movs	r3, #2
 8004978:	e02d      	b.n	80049d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2224      	movs	r2, #36	; 0x24
 8004986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f812 	bl	80049e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80049e8:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <UARTEx_SetNbDataToProcess+0xc8>)
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80049f6:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <UARTEx_SetNbDataToProcess+0xcc>)
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a00:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a1c:	e03d      	b.n	8004a9a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a22:	2308      	movs	r3, #8
 8004a24:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	0e5b      	lsrs	r3, r3, #25
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	0f5b      	lsrs	r3, r3, #29
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004a46:	7fbb      	ldrb	r3, [r7, #30]
 8004a48:	7f3a      	ldrb	r2, [r7, #28]
 8004a4a:	f107 0120 	add.w	r1, r7, #32
 8004a4e:	440a      	add	r2, r1
 8004a50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	7f3a      	ldrb	r2, [r7, #28]
 8004a5a:	f107 0120 	add.w	r1, r7, #32
 8004a5e:	440a      	add	r2, r1
 8004a60:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004a70:	7ffb      	ldrb	r3, [r7, #31]
 8004a72:	7f7a      	ldrb	r2, [r7, #29]
 8004a74:	f107 0120 	add.w	r1, r7, #32
 8004a78:	440a      	add	r2, r1
 8004a7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	7f7a      	ldrb	r2, [r7, #29]
 8004a84:	f107 0120 	add.w	r1, r7, #32
 8004a88:	440a      	add	r2, r1
 8004a8a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004a8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a9a:	bf00      	nop
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	08004ea8 	.word	0x08004ea8
 8004aac:	08004eb0 	.word	0x08004eb0

08004ab0 <arm_sin_f32>:
 8004ab0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004b30 <arm_sin_f32+0x80>
 8004ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ac4:	d504      	bpl.n	8004ad0 <arm_sin_f32+0x20>
 8004ac6:	ee17 3a90 	vmov	r3, s15
 8004aca:	3b01      	subs	r3, #1
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b34 <arm_sin_f32+0x84>
 8004ad8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004adc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004ae0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004ae4:	ee17 3a90 	vmov	r3, s15
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	d21a      	bcs.n	8004b26 <arm_sin_f32+0x76>
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <arm_sin_f32+0x88>)
 8004b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004b04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004b08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004b0c:	ed93 7a00 	vldr	s14, [r3]
 8004b10:	edd2 6a00 	vldr	s13, [r2]
 8004b14:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004b18:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b20:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004b24:	4770      	bx	lr
 8004b26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e7e6      	b.n	8004afe <arm_sin_f32+0x4e>
 8004b30:	3e22f983 	.word	0x3e22f983
 8004b34:	44000000 	.word	0x44000000
 8004b38:	08004f18 	.word	0x08004f18

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000000c 	.word	0x2000000c

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4e0d      	ldr	r6, [pc, #52]	; (8004b80 <__libc_init_array+0x38>)
 8004b4c:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b4e:	1ba4      	subs	r4, r4, r6
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	2500      	movs	r5, #0
 8004b54:	42a5      	cmp	r5, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	4e0b      	ldr	r6, [pc, #44]	; (8004b88 <__libc_init_array+0x40>)
 8004b5a:	4c0c      	ldr	r4, [pc, #48]	; (8004b8c <__libc_init_array+0x44>)
 8004b5c:	f000 f998 	bl	8004e90 <_init>
 8004b60:	1ba4      	subs	r4, r4, r6
 8004b62:	10a4      	asrs	r4, r4, #2
 8004b64:	2500      	movs	r5, #0
 8004b66:	42a5      	cmp	r5, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b70:	4798      	blx	r3
 8004b72:	3501      	adds	r5, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7a:	4798      	blx	r3
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08005740 	.word	0x08005740
 8004b84:	08005740 	.word	0x08005740
 8004b88:	08005740 	.word	0x08005740
 8004b8c:	08005744 	.word	0x08005744

08004b90 <memset>:
 8004b90:	4402      	add	r2, r0
 8004b92:	4603      	mov	r3, r0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d100      	bne.n	8004b9a <memset+0xa>
 8004b98:	4770      	bx	lr
 8004b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9e:	e7f9      	b.n	8004b94 <memset+0x4>

08004ba0 <fmod>:
 8004ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	ed2d 8b02 	vpush	{d8}
 8004ba8:	b08b      	sub	sp, #44	; 0x2c
 8004baa:	ec55 4b10 	vmov	r4, r5, d0
 8004bae:	ec57 6b11 	vmov	r6, r7, d1
 8004bb2:	f000 f859 	bl	8004c68 <__ieee754_fmod>
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <fmod+0xc0>)
 8004bb8:	eeb0 8a40 	vmov.f32	s16, s0
 8004bbc:	eef0 8a60 	vmov.f32	s17, s1
 8004bc0:	f993 8000 	ldrsb.w	r8, [r3]
 8004bc4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004bc8:	d030      	beq.n	8004c2c <fmod+0x8c>
 8004bca:	4632      	mov	r2, r6
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	f7fb ff6b 	bl	8000aac <__aeabi_dcmpun>
 8004bd6:	bb48      	cbnz	r0, 8004c2c <fmod+0x8c>
 8004bd8:	4622      	mov	r2, r4
 8004bda:	462b      	mov	r3, r5
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb ff64 	bl	8000aac <__aeabi_dcmpun>
 8004be4:	4681      	mov	r9, r0
 8004be6:	bb08      	cbnz	r0, 8004c2c <fmod+0x8c>
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4630      	mov	r0, r6
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f7fb ff2a 	bl	8000a48 <__aeabi_dcmpeq>
 8004bf4:	b1d0      	cbz	r0, 8004c2c <fmod+0x8c>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <fmod+0xc4>)
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c06:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c0a:	f1b8 0f00 	cmp.w	r8, #0
 8004c0e:	d116      	bne.n	8004c3e <fmod+0x9e>
 8004c10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c14:	4668      	mov	r0, sp
 8004c16:	f000 f939 	bl	8004e8c <matherr>
 8004c1a:	b1d8      	cbz	r0, 8004c54 <fmod+0xb4>
 8004c1c:	9b08      	ldr	r3, [sp, #32]
 8004c1e:	b11b      	cbz	r3, 8004c28 <fmod+0x88>
 8004c20:	f7ff ff8c 	bl	8004b3c <__errno>
 8004c24:	9b08      	ldr	r3, [sp, #32]
 8004c26:	6003      	str	r3, [r0, #0]
 8004c28:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c30:	eef0 0a68 	vmov.f32	s1, s17
 8004c34:	b00b      	add	sp, #44	; 0x2c
 8004c36:	ecbd 8b02 	vpop	{d8}
 8004c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2300      	movs	r3, #0
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb fdc1 	bl	80007cc <__aeabi_ddiv>
 8004c4a:	f1b8 0f02 	cmp.w	r8, #2
 8004c4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c52:	d1df      	bne.n	8004c14 <fmod+0x74>
 8004c54:	f7ff ff72 	bl	8004b3c <__errno>
 8004c58:	2321      	movs	r3, #33	; 0x21
 8004c5a:	6003      	str	r3, [r0, #0]
 8004c5c:	e7de      	b.n	8004c1c <fmod+0x7c>
 8004c5e:	bf00      	nop
 8004c60:	20000070 	.word	0x20000070
 8004c64:	0800571c 	.word	0x0800571c

08004c68 <__ieee754_fmod>:
 8004c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	ec53 2b11 	vmov	r2, r3, d1
 8004c70:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8004c74:	ea5e 0402 	orrs.w	r4, lr, r2
 8004c78:	ec51 0b10 	vmov	r0, r1, d0
 8004c7c:	461e      	mov	r6, r3
 8004c7e:	ee11 5a10 	vmov	r5, s2
 8004c82:	4694      	mov	ip, r2
 8004c84:	d00c      	beq.n	8004ca0 <__ieee754_fmod+0x38>
 8004c86:	4c7a      	ldr	r4, [pc, #488]	; (8004e70 <__ieee754_fmod+0x208>)
 8004c88:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8004c8c:	45a0      	cmp	r8, r4
 8004c8e:	4689      	mov	r9, r1
 8004c90:	dc06      	bgt.n	8004ca0 <__ieee754_fmod+0x38>
 8004c92:	4254      	negs	r4, r2
 8004c94:	4314      	orrs	r4, r2
 8004c96:	4f77      	ldr	r7, [pc, #476]	; (8004e74 <__ieee754_fmod+0x20c>)
 8004c98:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8004c9c:	42bc      	cmp	r4, r7
 8004c9e:	d909      	bls.n	8004cb4 <__ieee754_fmod+0x4c>
 8004ca0:	f7fb fc6a 	bl	8000578 <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	f7fb fd90 	bl	80007cc <__aeabi_ddiv>
 8004cac:	ec41 0b10 	vmov	d0, r0, r1
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	45f0      	cmp	r8, lr
 8004cb6:	ee10 2a10 	vmov	r2, s0
 8004cba:	4607      	mov	r7, r0
 8004cbc:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8004cc0:	dc0a      	bgt.n	8004cd8 <__ieee754_fmod+0x70>
 8004cc2:	dbf3      	blt.n	8004cac <__ieee754_fmod+0x44>
 8004cc4:	42a8      	cmp	r0, r5
 8004cc6:	d3f1      	bcc.n	8004cac <__ieee754_fmod+0x44>
 8004cc8:	d106      	bne.n	8004cd8 <__ieee754_fmod+0x70>
 8004cca:	496b      	ldr	r1, [pc, #428]	; (8004e78 <__ieee754_fmod+0x210>)
 8004ccc:	0fe4      	lsrs	r4, r4, #31
 8004cce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004cd2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004cd6:	e7e9      	b.n	8004cac <__ieee754_fmod+0x44>
 8004cd8:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <__ieee754_fmod+0x214>)
 8004cda:	4598      	cmp	r8, r3
 8004cdc:	dc49      	bgt.n	8004d72 <__ieee754_fmod+0x10a>
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	d13d      	bne.n	8004d60 <__ieee754_fmod+0xf8>
 8004ce4:	4866      	ldr	r0, [pc, #408]	; (8004e80 <__ieee754_fmod+0x218>)
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	dc36      	bgt.n	8004d5a <__ieee754_fmod+0xf2>
 8004cec:	459e      	cmp	lr, r3
 8004cee:	dc51      	bgt.n	8004d94 <__ieee754_fmod+0x12c>
 8004cf0:	f1be 0f00 	cmp.w	lr, #0
 8004cf4:	d145      	bne.n	8004d82 <__ieee754_fmod+0x11a>
 8004cf6:	4b62      	ldr	r3, [pc, #392]	; (8004e80 <__ieee754_fmod+0x218>)
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	dc3e      	bgt.n	8004d7c <__ieee754_fmod+0x114>
 8004cfe:	4961      	ldr	r1, [pc, #388]	; (8004e84 <__ieee754_fmod+0x21c>)
 8004d00:	4288      	cmp	r0, r1
 8004d02:	db4c      	blt.n	8004d9e <__ieee754_fmod+0x136>
 8004d04:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8004d08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d0c:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <__ieee754_fmod+0x21c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	db59      	blt.n	8004dc6 <__ieee754_fmod+0x15e>
 8004d12:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8004d16:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8004d1a:	1ac0      	subs	r0, r0, r3
 8004d1c:	1b8a      	subs	r2, r1, r6
 8004d1e:	eba7 050c 	sub.w	r5, r7, ip
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d166      	bne.n	8004df4 <__ieee754_fmod+0x18c>
 8004d26:	4567      	cmp	r7, ip
 8004d28:	bf38      	it	cc
 8004d2a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	bfbc      	itt	lt
 8004d32:	463d      	movlt	r5, r7
 8004d34:	460a      	movlt	r2, r1
 8004d36:	ea52 0105 	orrs.w	r1, r2, r5
 8004d3a:	d0c6      	beq.n	8004cca <__ieee754_fmod+0x62>
 8004d3c:	494f      	ldr	r1, [pc, #316]	; (8004e7c <__ieee754_fmod+0x214>)
 8004d3e:	428a      	cmp	r2, r1
 8004d40:	dd6d      	ble.n	8004e1e <__ieee754_fmod+0x1b6>
 8004d42:	4950      	ldr	r1, [pc, #320]	; (8004e84 <__ieee754_fmod+0x21c>)
 8004d44:	428b      	cmp	r3, r1
 8004d46:	db70      	blt.n	8004e2a <__ieee754_fmod+0x1c2>
 8004d48:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8004d4c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004d50:	4314      	orrs	r4, r2
 8004d52:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8004d56:	4628      	mov	r0, r5
 8004d58:	e7a8      	b.n	8004cac <__ieee754_fmod+0x44>
 8004d5a:	3801      	subs	r0, #1
 8004d5c:	0049      	lsls	r1, r1, #1
 8004d5e:	e7c3      	b.n	8004ce8 <__ieee754_fmod+0x80>
 8004d60:	4848      	ldr	r0, [pc, #288]	; (8004e84 <__ieee754_fmod+0x21c>)
 8004d62:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8004d66:	0049      	lsls	r1, r1, #1
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	f100 30ff 	add.w	r0, r0, #4294967295
 8004d6e:	dcfa      	bgt.n	8004d66 <__ieee754_fmod+0xfe>
 8004d70:	e7bc      	b.n	8004cec <__ieee754_fmod+0x84>
 8004d72:	ea4f 5028 	mov.w	r0, r8, asr #20
 8004d76:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004d7a:	e7b7      	b.n	8004cec <__ieee754_fmod+0x84>
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	0049      	lsls	r1, r1, #1
 8004d80:	e7bb      	b.n	8004cfa <__ieee754_fmod+0x92>
 8004d82:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <__ieee754_fmod+0x21c>)
 8004d84:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8004d88:	0049      	lsls	r1, r1, #1
 8004d8a:	2900      	cmp	r1, #0
 8004d8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d90:	dcfa      	bgt.n	8004d88 <__ieee754_fmod+0x120>
 8004d92:	e7b4      	b.n	8004cfe <__ieee754_fmod+0x96>
 8004d94:	ea4f 532e 	mov.w	r3, lr, asr #20
 8004d98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d9c:	e7af      	b.n	8004cfe <__ieee754_fmod+0x96>
 8004d9e:	1a0f      	subs	r7, r1, r0
 8004da0:	2f1f      	cmp	r7, #31
 8004da2:	dc0a      	bgt.n	8004dba <__ieee754_fmod+0x152>
 8004da4:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8004da8:	fa08 f807 	lsl.w	r8, r8, r7
 8004dac:	fa22 f101 	lsr.w	r1, r2, r1
 8004db0:	ea41 0108 	orr.w	r1, r1, r8
 8004db4:	fa02 f707 	lsl.w	r7, r2, r7
 8004db8:	e7a8      	b.n	8004d0c <__ieee754_fmod+0xa4>
 8004dba:	4933      	ldr	r1, [pc, #204]	; (8004e88 <__ieee754_fmod+0x220>)
 8004dbc:	1a09      	subs	r1, r1, r0
 8004dbe:	fa02 f101 	lsl.w	r1, r2, r1
 8004dc2:	2700      	movs	r7, #0
 8004dc4:	e7a2      	b.n	8004d0c <__ieee754_fmod+0xa4>
 8004dc6:	eba2 0c03 	sub.w	ip, r2, r3
 8004dca:	f1bc 0f1f 	cmp.w	ip, #31
 8004dce:	dc0a      	bgt.n	8004de6 <__ieee754_fmod+0x17e>
 8004dd0:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8004dd4:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004dd8:	fa25 f606 	lsr.w	r6, r5, r6
 8004ddc:	ea46 060e 	orr.w	r6, r6, lr
 8004de0:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004de4:	e799      	b.n	8004d1a <__ieee754_fmod+0xb2>
 8004de6:	4e28      	ldr	r6, [pc, #160]	; (8004e88 <__ieee754_fmod+0x220>)
 8004de8:	1af6      	subs	r6, r6, r3
 8004dea:	fa05 f606 	lsl.w	r6, r5, r6
 8004dee:	f04f 0c00 	mov.w	ip, #0
 8004df2:	e792      	b.n	8004d1a <__ieee754_fmod+0xb2>
 8004df4:	4567      	cmp	r7, ip
 8004df6:	bf38      	it	cc
 8004df8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	da05      	bge.n	8004e0c <__ieee754_fmod+0x1a4>
 8004e00:	0ffa      	lsrs	r2, r7, #31
 8004e02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004e06:	007f      	lsls	r7, r7, #1
 8004e08:	3801      	subs	r0, #1
 8004e0a:	e787      	b.n	8004d1c <__ieee754_fmod+0xb4>
 8004e0c:	ea52 0105 	orrs.w	r1, r2, r5
 8004e10:	f43f af5b 	beq.w	8004cca <__ieee754_fmod+0x62>
 8004e14:	0fe9      	lsrs	r1, r5, #31
 8004e16:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8004e1a:	006f      	lsls	r7, r5, #1
 8004e1c:	e7f4      	b.n	8004e08 <__ieee754_fmod+0x1a0>
 8004e1e:	0fe8      	lsrs	r0, r5, #31
 8004e20:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004e24:	006d      	lsls	r5, r5, #1
 8004e26:	3b01      	subs	r3, #1
 8004e28:	e789      	b.n	8004d3e <__ieee754_fmod+0xd6>
 8004e2a:	1ac9      	subs	r1, r1, r3
 8004e2c:	2914      	cmp	r1, #20
 8004e2e:	dc0a      	bgt.n	8004e46 <__ieee754_fmod+0x1de>
 8004e30:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	40cd      	lsrs	r5, r1
 8004e3a:	432b      	orrs	r3, r5
 8004e3c:	410a      	asrs	r2, r1
 8004e3e:	ea42 0104 	orr.w	r1, r2, r4
 8004e42:	4618      	mov	r0, r3
 8004e44:	e732      	b.n	8004cac <__ieee754_fmod+0x44>
 8004e46:	291f      	cmp	r1, #31
 8004e48:	dc07      	bgt.n	8004e5a <__ieee754_fmod+0x1f2>
 8004e4a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004e4e:	40cd      	lsrs	r5, r1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	432b      	orrs	r3, r5
 8004e56:	4622      	mov	r2, r4
 8004e58:	e7f1      	b.n	8004e3e <__ieee754_fmod+0x1d6>
 8004e5a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8004e66:	33e2      	adds	r3, #226	; 0xe2
 8004e68:	fa42 f303 	asr.w	r3, r2, r3
 8004e6c:	e7f3      	b.n	8004e56 <__ieee754_fmod+0x1ee>
 8004e6e:	bf00      	nop
 8004e70:	7fefffff 	.word	0x7fefffff
 8004e74:	7ff00000 	.word	0x7ff00000
 8004e78:	08005728 	.word	0x08005728
 8004e7c:	000fffff 	.word	0x000fffff
 8004e80:	fffffbed 	.word	0xfffffbed
 8004e84:	fffffc02 	.word	0xfffffc02
 8004e88:	fffffbe2 	.word	0xfffffbe2

08004e8c <matherr>:
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4770      	bx	lr

08004e90 <_init>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr

08004e9c <_fini>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr
